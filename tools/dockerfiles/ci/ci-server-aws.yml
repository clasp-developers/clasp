---
Description: Cando CI server
Parameters:
  InstanceType:
    Description: Worker EC2 instance type (m1.small, etc).
    Type: String
    ConstraintDescription: must be a valid EC2 instance type.
    Default: m4.large
  SpotBid:
    Description: Spot instance price bid
    Type: Number
    Default: 0.20
  DiskSize:
    Description: Disk space available for Docker, in GB
    Type: Number
    Default: 50
  DiskType:
    Description: EBS Volume type - see https://goo.gl/iqtSrQ
    Type: String
    Default: gp2
    AllowedValues:
      - standard
      - gp2
      - st1
      - sc1
  EC2BootKey:
    Description: EC2 Boot Key, installed for user 'ec2-user'
    Type: AWS::EC2::KeyPair::KeyName
  DockerImage:
    Description: Docker image to launch
    Type: String
    Default: drmeister/cando-ci:latest
  DockerPort:
    Description: HTTP listening port for Docker container
    Type: Number
    Default: 8080
    MaxValue: 65535
    MinValue: 0
Resources:
  CandoCISpotFleet:
    Type: AWS::EC2::SpotFleet
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            "/usr/local/sbin/docker-disk-setup":
              mode: '0755'
              content: |
                #!/usr/bin/env bash
                set -ex
                echo Formatting /dev/xvdh...
                cloud-init-per once mymkfs mkfs.ext4 /dev/xvdh
                mkdir -p /var/lib/docker
                mount /dev/xvdh /var/lib/docker
            "/usr/local/sbin/docker-install":
              mode: '0755'
              content: |
                #!/usr/bin/env bash
                set -ex
                echo Installing Docker...
                yum install -y yum-utils
                yum-config-manager --add-repo \
                  https://download.docker.com/linux/centos/docker-ce.repo
                yum makecache -y fast
                yum install -y docker
                service docker start
            "/usr/local/sbin/cando-ci-start":
              mode: '0755'
              content:
                !Sub |
                  #!/usr/bin/env bash
                  set -ex
                  docker run --name=ci -v /var/run/docker.sock:/var/run/docker.sock\
                    -d --restart=always -p 80:${DockerPort} ${DockerImage}
    Properties:
      SpotFleetRequestConfigData:
        LaunchSpecifications:
        - UserData:
            Fn::Base64:
              !Sub |
                #!/bin/bash
                echo "Running cfn-init..."
                /opt/aws/bin/cfn-init --region ${AWS::Region} -s ${AWS::StackName} -r CandoCISpotFleet
                /usr/local/sbin/docker-disk-setup
                /usr/local/sbin/docker-install
                /usr/local/sbin/cando-ci-start
          BlockDeviceMappings:
          - DeviceName: 'xvdh'
            Ebs:
              DeleteOnTermination: true
              Encrypted: false
              VolumeSize: !Ref DiskSize
              VolumeType: !Ref DiskType
            VirtualName: 'ebs'
          InstanceType: !Ref InstanceType
          SubnetId: !Ref PublicSubnet
          KeyName: !Ref EC2BootKey
          SecurityGroups:
          - GroupId: !GetAtt CandoCISecurityGroup.GroupId
          ImageId:
            Fn::FindInMap:
            - RegionAMIMap
            - Ref: AWS::Region
            - AMI
          EbsOptimized: 'false'
        IamFleetRole: !GetAtt CandoEC2SpotFleetRole.Arn
        SpotPrice: !Ref SpotBid
        TargetCapacity: 1
    DependsOn: GatewayAttachment
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      CidrBlock:
        Fn::FindInMap:
        - SubnetConfig
        - VPC
        - CIDR
      Tags:
      - Key: Application
        Value: !Ref AWS::StackName
      - Key: Network
        Value: Public
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: 'true'
      CidrBlock:
        Fn::FindInMap:
        - SubnetConfig
        - Public
        - CIDR
      Tags:
      - Key: Application
        Value: !Ref AWS::StackName
      - Key: Network
        Value: Public
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Application
        Value: !Ref AWS::StackName
      - Key: Network
        Value: Public
  GatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: VPC
      InternetGatewayId:
        Ref: InternetGateway
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Application
        Value: !Ref AWS::StackName
      - Key: Network
        Value: Public
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayAttachment
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway
  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet
      RouteTableId:
        Ref: PublicRouteTable
  PublicNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Application
        Value: !Ref AWS::StackName
      - Key: Network
        Value: Public
  InboundPublicNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: PublicNetworkAcl
      RuleNumber: '100'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '0'
        To: '65535'
  OutboundPublicNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: PublicNetworkAcl
      RuleNumber: '100'
      Protocol: '6'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '0'
        To: '65535'
  PublicSubnetNetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet
      NetworkAclId:
        Ref: PublicNetworkAcl
  CandoCISecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http and ssh to cando host
      VpcId:
        Ref: VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 0.0.0.0/0
  CandoEC2SpotFleetRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - spotfleet.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: EC2SpotFleetRole
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - ec2:DescribeImages
            - ec2:DescribeSubnets
            - ec2:RequestSpotInstances
            - ec2:TerminateInstances
            - ec2:DescribeInstanceStatus
            - iam:PassRole
            Resource: "*"
Mappings:
  # AMI Name = amzn-ami-hvm-2017.03.0.20170417-x86_64-gp2
  RegionAMIMap:
    ap-northeast-1:
      AMI: ami-xxxxxxxx
    sa-east-1:
      AMI: ami-xxxxxxxx
    ap-southeast-2:
      AMI: ami-xxxxxxxx
    ap-southeast-1:
      AMI: ami-xxxxxxxx
    eu-central-1: # Frankfurt, Germany
      AMI: ami-b968bad6
    eu-west-1: # Dublin, Ireland
      AMI: ami-01ccc867
    eu-west-2: # London, England
      AMI: ami-b6daced2
    us-east-1: # Virginia, USA
      AMI: ami-c58c1dd3 
    us-east-2: # Ohio, USA
      AMI: ami-4191b524
    us-west-1: # California, USA
      AMI: ami-7a85a01a
    us-west-2: # Oregon, USA
      AMI: ami-xxxxxxxx
  SubnetConfig:
    VPC:
      CIDR: 10.0.0.0/16
    Public:
      CIDR: 10.0.0.0/24

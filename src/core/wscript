def build(bld):
    for name in [
            'dummy', 
            'clcenv',
            'environment',
            'activationFrame',
            'evaluator',
            'functor',
            'creator',
            'sharpEqualWrapper',
            'vectorDisplaced',
            'stacks',
            'weakKeyMapping',
            'weakHashTable',
            'weakPointer',
            'compiler',
            'genericFunction',
            'instance',
            'cache',
            'float_to_string',
            'primitives',
            'random',
            'cxxObject',
            'cxxClass',
            'record',
            'debugger',
            'smallMap',
            'smallMultimap',
            'hashTable',
            'hashTableEq',
            'hashTableEql',
            'hashTableEqual',
            'hashTableEqualp',
            'numbers',
            'numerics',
            'num_arith',
            'numberToString',
            'num_co',
            'load',
            'bignum',
            'write_object',
            'write_array',
            'print',
            'sourceFileInfo',
            'symbolToEnumConverter',
            'core_globals',
            'externalObject',
            'myReadLine',
            'specialForm',
            'unixfsys',
            'lispList',
            'binder',
            'multiStringBuffer',
            'candoOpenMp',
            'foundation',
            'lambdaListHandler',
            'lispStream',
            'bits',
            'write_symbol',
            'corePackage',
            'lisp',
            'profiler',
            'lispDefinitions',
            'bundle',
            'profile',
            'specializer',
            'write_ugly',
            'regex',
            'userData',
            'wrappedPointer',
            'serialize',
            'sexpLoadArchive',
            'sexpSaveArchive',
            'readtable',
            'float_to_digits',
            'pathname',
            'commandLineOptions',
            'exceptions',
            'commonLispUserPackage',
            'metaClass',
            'multipleValues',
            'testing',
            'predicates',
            'write_list',
            'str',
            'package',
            'commonLispPackage',
            'allClSymbols',
            'keywordPackage',
            'extensionPackage',
            'vectorObjectsWithFillPtr',
            'vectorObjects',
            'array',
            'strWithFillPtr',
            'lispMath',
            'grayPackage',
            'closPackage',
            'cleavirPrimopsPackage',
            'cleavirEnvPackage',
            'compPackage',
            'bootStrapCoreSymbolMap',
            'cons',
            'symbol',
            'builtInClass',
            'standardClass',
            'conditions',
            'arrayDisplaced',
            'object',
            'stdClass',
            'metaobject',
            'arguments',
            'pointer',
            'funcallableStandardClass',
            'standardObject',
            'iterator',
            'sysprop',
            'bformat',
            'backquote',
            'documentation',
            'lispReader',
            'singleDispatchGenericFunction',
            'singleDispatchMethod',
            'structureObject',
            'structureClass',
            'null',
            'forwardReferencedClass',
            'character',
            'lispString',
            'designators',
            'sequence',
            'lispVector',
            'loadTimeValues',
            'arrayObjects',
            'reader',
            'lightProfiler',
            'fileSystem',
            'intArray',
            'bitVector',
            'posixTime',
            'clasp_ffi_package',
            'fli' ]:
        full_name = name+'.cc'
        node = bld.path.find_node(full_name)
        assert node != None, "Could not find %s/%s" % ( bld.path.abspath(), full_name )
        bld.clasp_source_files.append(node)

//
// Methods
//
// Three kinds of return values    single-value, multiple-value and void
$var ReturnTypeCount = 3 
$var RetSV = 0
$var RetVoid = 1
$var RetMV = 2
$var MaxArgs = 16
$range isConst 0..1
$range ret 0..(ReturnTypeCount-1)
$range innerCount 0..(MaxArgs-1)
$for isConst [[
  $for ret [[
    $for innerCount [[
      $var numVoids = innerCount
      $var numArgs = MaxArgs - numVoids
      $range Args_ 1..(numArgs-1)
      //
      // ret = $ret  $if ret==RetSV [[RetSV]] $elif ret==RetVoid [[RetVoid]] $else [[RetMV]] 
      //
      //
      // numArgs = $numArgs 
      // numVoids = $numVoids    
      /* Specialization */
      template <int DispatchOn $if ret==RetVoid [[]] $else [[,typename RT]], typename OT $if numArgs>1 [[,]]  $for Args_ ,[[typename ARG$Args_]] >
      class VariadicMethoid
      <DispatchOn,$if ret==RetVoid [[void]] $elif ret==RetSV [[RT]] $else [[gctools::multiple_values<RT>]] (OT::*)( $for Args_ , [[ARG$Args_]]) $if isConst [[const]] >
        : public BuiltinClosure_O {
      public:
        typedef BuiltinClosure_O TemplatedBase;
      public:
	virtual const char* describe() const {return "VariadicMethoid";};
        typedef $if ret==RetVoid [[void]] $elif ret==RetSV [[RT]] $else [[gctools::multiple_values<RT>]](OT::*Type)($for Args_ , [[ARG$Args_]]) $if isConst [[const]];
        Type mptr;
      public:
        enum { NumParams = $numArgs };
        VariadicMethoid(T_sp name, Type ptr) : BuiltinClosure_O(name), mptr(ptr) {};
        DISABLE_NEW();
        virtual size_t templatedSizeof() const { return sizeof(*this);};
        inline LCC_RETURN LISP_CALLING_CONVENTION()
        {   
          INCREMENT_FUNCTION_CALL_COUNTER(this);
          INVOCATION_HISTORY_FRAME();
          $if numArgs>0 [[
            MAKE_STACK_FRAME(frame,this->asSmartPtr().raw_(),$numArgs);
            core::StackFrameDynamicScopeManager scope(frame);
            lambdaListHandler_createBindings(this->asSmartPtr(),this->_lambdaListHandler,scope,LCC_PASS_ARGS);
          ]]
          gctools::smart_ptr<OT> ot(gc::As<gctools::smart_ptr<OT>>(frame->arg(0)));
          $for Args_ [[translate::from_object<ARG$Args_> a$Args_(frame->arg($Args_));
          ]]
          $if ret==RetVoid [[]] $elif ret==RetSV [[ RT retval = ]] $else [[ gctools::multiple_values<RT> retval = ]] ((*ot.untag_object()).*mptr)($for Args_ ,[[a$Args_._v]]);
          $if ret==RetVoid [[
            return Values0<core::T_O>();
          ]] $elif ret==RetMV [[
            return retval.as_return_type();
          ]] $else [[
            return Values(translate::to_object<RT>::convert(retval));
          ]]
        }
      };
    ]]
  ]]
]]


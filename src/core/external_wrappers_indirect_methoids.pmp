$var MaxArgs = 16
$var ConstTypeCount = 2
$var ReturnTypeCount = 2
$var RetSV = 0
$var RetVoid = 1
$var InnerCount = MaxArgs
$var Templates = (InnerCount*ReturnTypeCount*ConstTypeCount)-1
$var template_ = -1
$range isConst 0..1
$range ret 0..1
$range innerCount 0..(MaxArgs-1)
$for isConst [[
  $for ret [[
    $for innerCount [[
      $var template_ = isConst*(InnerCount*ReturnTypeCount)+ret*(InnerCount)+innerCount
      $var numVoids = innerCount
      $var numArgs = MaxArgs - numVoids
      $range Args_ 1..(numArgs-1)
      // TEMPLATE_TOP
      // template_ = $template_
      // isConst = $isConst
      // ret = $ret ($if ret==RetVoid [[void]] $else [[RetSV]]) 
      //
      // innerCount = $innerCount
      // numArgs = $numArgs ($for Args_ , [[ARG$Args_]])
      // numVoids = $numVoids
      // 
      /* Specialization  */
      template <typename Pols, $if ret==RetVoid [[]] $else [[ typename RT, ]] typename OT $if numArgs>1 [[,]] $for Args_ ,[[typename ARG$Args_]] >
      class IndirectVariadicMethoid
      < Pols,OT $if ret==RetVoid [[,void]] $else [[,RT ]](OT::ExternalType::*)( $for Args_ , [[ARG$Args_]]) $if isConst [[const]] >
        : public TemplatedFunctionBase_O {
        public:
        typedef IndirectVariadicMethoid < Pols,OT $if ret==RetVoid [[,void]] $else [[,RT ]](OT::ExternalType::*)( $for Args_ , [[ARG$Args_]]) $if isConst [[const]] > MyType;
      public:
      	virtual const char* describe() const {return "IndirectVariadicMethoid";};
        typedef TemplatedFunctionBase_O TemplatedBase;
                       public:
//        typedef std::function<$if ret==RetVoid [[void]] $else [[RT]] (OT& $if numArgs [[,]] $for Args_ , [[ARG$Args_]])> Type;
        typedef $if ret==RetVoid [[void]] $else [[RT]] (OT::ExternalType::*Type)( $for Args_ , [[ARG$Args_]]) $if isConst [[const]];
        Type mptr;
      public:
        enum { NumParams = $numArgs };
        IndirectVariadicMethoid(core::T_sp name, Type ptr) : TemplatedFunctionBase_O(method_entry_point,name), mptr(ptr) {};
        virtual size_t templatedSizeof() const { return sizeof(*this); };
        static inline gctools::return_type method_entry_point(LCC_ARGS_ELLIPSIS)
        {
          MyType* closure = gctools::untag_general<MyType*>((MyType*)lcc_closure);
          INCREMENT_FUNCTION_CALL_COUNTER(closure);
          COPY_VA_LIST();
          INVOCATION_HISTORY_FRAME();
          //int countPureOutValues = CountPureOutValues<Pols>::value;
          //if ( lcc_nargs != $numArgs ) core::wrongNumberOfArguments(lcc_nargs,$numArgs);
          $if numArgs>0 [[
            MAKE_STACK_FRAME(frame,closure->asSmartPtr().raw_(),$numArgs);
            core::StackFrameDynamicScopeManager scope(frame);
            lambdaListHandler_createBindings(closure->asSmartPtr(),closure->_lambdaListHandler,scope,LCC_PASS_ARGS_LLH);
          ]]
          $for Args_ [[translate::from_object<ARG$Args_> a$Args_(frame->arg($Args_));
          ]]
          gctools::smart_ptr<OT> ot(gc::As<gc::smart_ptr<OT>>(frame->arg(0)));
          $if ret==RetVoid [[]] $else [[ RT retval = ]] ((*(ot->wrappedPtr())).*(closure->mptr))($for Args_ ,[[a$Args_._v]]);
$$          $if ret==RetVoid [[
$$            *lcc_resultP = Values0<core::T_O>();
$$          ]] $elif ret==RetMV [[
$$            *lcc_resultP = retval;
$$          ]] $else [[
$$            *lcc_resultP = Values(translate::to_object<RT>::convert(retval));
$$          ]]

$$ BEGIN(ArgsToRet) -- Convert arguments to multiple values according to outValue_ and pureOutValue_ template arguments
          $if numArgs>0 [[
            core::MultipleValues& returnValues = core::lisp_multipleValues();
            returnValues.setSize(0);
          ]]
          $if ret==RetVoid [[
            $if numArgs==0 [[]] $else [[ int oidx = 0;
            ]]
          ]] $else [[
            int oidx = 1;
          ]]
            ReturnValueWhen(returnValues,oidx,
                            typename or_<typename Contains_<Pols,pureOutValue_<0> >::type,
                            typename Contains_<Pols,    outValue_<0> >::type >::type(),frame->arg(0));
          $for Args_ [[
            ReturnValueWhen(returnValues,oidx,
                            typename or_<typename Contains_<Pols,pureOutValue_<$Args_> >::type,
                            typename Contains_<Pols,    outValue_<$Args_> >::type >::type(),a$Args_._v);
          ]]
          $if ret==RetVoid [[
            $if numArgs==0 [[
              return Values0<core::T_O>();
            ]] $else [[
              return LCC_RETURN(returnValues.valueGet(0,oidx).raw_(),oidx);
            ]]
          ]] $else [[
            return LCC_RETURN(translate::to_object<RT>::convert(std::move(retval)).raw_(),oidx);
          ]]
$$ END(ArgsToRet)
        }

      };
    ]]
  ]]
]]




$var MaxArgs = 140  # a few more than call-arguments-limit = 64
$var FixedArgs = 4
$range Case_ 0..MaxArgs
#ifdef APPLY_TO_FRAME
$for Case_ [[
  $var Reg = min(FixedArgs-1,Case_-1)
  // Reg = $Reg
  $range FixedArgs_ 0..Reg
  $range Null_ 1..FixedArgs-Reg-1 # max((FixedArgs-1)-Case_,0)
  $range Extra_ FixedArgs..Case_-1
  case $Case_:
    return (*func).entry(func.raw_(), $Case_ $for FixedArgs_ [[, ENSURE_VALID_OBJECT((*frame)[$FixedArgs_]) ]] $for Null_ [[, LCC_UNUSED ]]  $for Extra_ [[
    , ENSURE_VALID_OBJECT((*frame)[$Extra_])
    ]]  );
  ]]
#endif

#ifdef APPLY_TO_VA_LIST
/* */


$for Case_ [[
  $range Var_ 0..Case_-1
  $var Reg = min(FixedArgs-1,Case_-1)
  inline gctools::return_type funcall_va_list_$Case_(Function_sp func, VaList_sp args) {
  $for Var_ [[   T_O* arg$Var_ = ENSURE_VALID_OBJECT(args->next_arg_raw());
  ]]
  $range FixedArgs_ 0..Reg
  $range Null_ 1..FixedArgs-Reg-1 # max((FixedArgs-1)-Case_,0)
  $range Extra_ FixedArgs..Case_-1
  return func->entry(func.raw_()
  , $Case_ $for FixedArgs_ [[, arg$FixedArgs_ ]] $for Null_ [[, LCC_UNUSED ]]  $for Extra_ [[ , arg$Extra_ ]]
 );
}

]]

#endif

#ifdef APPLY_TO_VA_LIST_CASE
$for Case_ [[

case $Case_:
      return funcall_va_list_$Case_(func,args);
]]
/* */
#endif


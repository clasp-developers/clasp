//
$var ConstTypeCount = 2
$var ReturnTypeCount = 3
$var RetSV = 0
$var RetVoid = 1
$var Ret_unique_ptr = 2
$var MaxArgs = 8
$var InnerCount = MaxArgs
$var Templates = (InnerCount*ReturnTypeCount*ConstTypeCount)-1
$var template_ = -1
$range isConst 0..1
$range ret 0..(ReturnTypeCount-1)
$range innerCount 0..(InnerCount-1)
$for isConst [[
      $for ret [[
        $for innerCount [[
              $var template_ = isConst*(InnerCount*ReturnTypeCount)+ret*(InnerCount)+innerCount
              $var numVoids = innerCount
              $var numArgs = MaxArgs - numVoids
              $range Args_ 1..(numArgs-1)
              // TEMPLATE_TOP
              // template_ = $template_
              // isConst = $isConst
              // ret = $ret ($if ret==RetVoid [[void]] $else [[RetSV]]) 
              //
              // innerCount = $innerCount
              // numArgs = $numArgs ($for Args_ , [[ARG$Args_]])
              // numVoids = $numVoids
              // 
              /* Specialization  */
              template <typename Pols, typename OT $if ret==RetVoid [[]] $elif ret==Ret_unique_ptr [[, typename UPRT ]] $else [[, typename RT ]] $if numArgs>1 [[,]] $for Args_ ,[[typename ARG$Args_]] >
              class IndirectVariadicMethoid
              < Pols,OT $if ret==RetVoid [[,void]] $elif ret==Ret_unique_ptr [[, std::unique_ptr<UPRT> ]] $else [[,RT ]](OT::*)( $for Args_ , [[ARG$Args_]]) $if isConst [[const]] >
              : public core::BuiltinClosure_O {
              public:
                  typedef IndirectVariadicMethoid < Pols,OT $if ret==RetVoid [[,void]] $elif ret==Ret_unique_ptr [[, std::unique_ptr<UPRT> ]] $else [[,RT ]](OT::*)( $for Args_ , [[ARG$Args_]]) $if isConst [[const]] > MyType;
                  typedef BuiltinClosure_O TemplatedBase;
              public:
		    virtual const char* describe() const { return "IndirectVariadicMethoid"; };
              typedef $if ret==RetVoid [[void]] $elif ret==Ret_unique_ptr [[std::unique_ptr<UPRT>]] $else [[RT]] (OT::*Type)( $for Args_ , [[ARG$Args_]]) $if isConst [[const]];
              Type mptr;
              public:
              enum { NumParams = $numArgs };
              IndirectVariadicMethoid(core::T_sp name, Type ptr) : core::BuiltinClosure_O(entry_point,name), mptr(ptr) {};
              DISABLE_NEW();
              virtual size_t templatedSizeof() const { return sizeof(*this);};

              static inline LCC_RETURN LISP_CALLING_CONVENTION()
              {
                MyType* closure = gctools::untag_general<MyType*>((MyType*)lcc_closure);
                INCREMENT_FUNCTION_CALL_COUNTER(closure);
                INITIALIZE_VA_LIST();
                INVOCATION_HISTORY_FRAME();
                $if numArgs>0 [[
                  MAKE_STACK_FRAME(frame,closure->asSmartPtr().raw_(),$numArgs);
                  core::StackFrameDynamicScopeManager scope(frame);
                  lambdaListHandler_createBindings(closure->asSmartPtr(),closure->_lambdaListHandler,scope,LCC_PASS_ARGS_LLH);
                ]]
                translate::from_object<OT*> objPtr(frame->arg(0));
                $for Args_ [[
                  translate::from_object<ARG$Args_,typename DoesNotContain_<Pols,pureOutValue<$Args_> >::type > a$Args_(frame->arg($Args_));
                ]]
                $if ret==RetVoid [[]] $elif ret==Ret_unique_ptr [[ std::unique_ptr<UPRT> retval = ]] $else [[ RT retval = ]] ((*objPtr._v).*(closure->mptr))($for Args_ ,[[a$Args_._v]]);
                $if numArgs>0 [[
                  core::MultipleValues& returnValues = core::lisp_multipleValues();
                  returnValues.setSize(0);
                ]]
                $if ret==RetVoid [[
                  $if numArgs==0 [[]] $else [[ int oidx = 0; ]]
                ]] $else [[
                  int oidx = 1;
                ]]
                $for Args_ [[
                  ReturnValueWhen(returnValues,oidx
                                , typename is_outValue<Pols,$Args_>::type()
                                , typename AdoptPointer<Pols,$Args_>::type()
                                , a$Args_._v);

                ]]
                $if ret==RetVoid [[
                  $if numArgs==0 [[
                    return Values0<core::T_O>();
                  ]] $else [[
                    return LCC_RETURN(returnValues.valueGet(0,oidx).raw_(),oidx);
                  ]]
                ]] $elif ret==Ret_unique_ptr [[
                  return LCC_RETURN(translate::to_object<std::unique_ptr<UPRT>,typename AdoptPointer<Pols,result>::type>::convert(std::move(retval)).raw_(),oidx);
                ]] $else [[
                return LCC_RETURN(translate::to_object<RT,typename AdoptPointer<Pols,result>::type >::convert(retval).raw_(),oidx);
                ]]
              }
            };
          ]]
        ]]
]]

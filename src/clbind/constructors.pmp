$var NumArgs = 8
    $var RetSV = 0
    $var InnerCount = NumArgs+1
    $range ret 0..0
    $range template_ 0..(InnerCount-1)
    $for ret [[
        $for template_ [[
                $var numVoids = template_
                $var numArgs = NumArgs - template_
                $range Args_ 1..numArgs
                // ret = $ret
                // template_ = $template_
                // numVoids = $numVoids
                // numArgs = $numArgs
                /* Specialization */
                template <typename Pols, typename Pointer, typename T, $if numArgs [[,]] $for Args_ ,[[typename ARG$Args_]] >
                class VariadicConstructorFunctor
                < Pols, Pointer, T, ($for Args_ , [[ARG$Args_]])>
                : public Functor {
                public:
                    typedef Wrapper<Pointer,T>  HolderType;
                public:
                    enum { NumParams = $numArgs };
                    VariadicConstructorFunctor(const string& name) : Functor(name) {};
		    virtual const char* describe() const { return "VariadicConstructorFunctor"; };
                    
                    core::T_mv activate( ActivationFrame_sp closedOverFrame, int numArgs, ArgArray args )
                    {
                        int countPureOutValues = CountPureOutValues<Pols>::value;
                        if ( numArgs != (NumParams-countPureOutValues) )
                        {
                            core::wrongNumberOfArguments(numArgs,(NumParams-countPureOutValues));
                        }
                        $for Args_ [[
                                translate::from_object<ARG$Args_,typename DoesNotContain_<Pols,pureOutValue_<$Args_> >::type > a$Args_(*args);
                                IncWhen<typename DoesNotContain_<Pols,pureOutValue_<$Args_> >::type >::go(args);
                                ]]
                            std::auto_ptr<T> instance(new T($for Args_ ,[[a$Args_._v]]));
                        void* naked_ptr = instance.get();
                        Pointer ptr(instance.release());
                        HolderType retval = HolderType::create(ptr,naked_ptr,register_class<T>::id);
                        $if numArgs>0 [[
                                core::MultipleValues& returnValues = core::lisp_multipleValues();
                                ]]
                            $if ret==RetVoid [[
                                $if numArgs==0 [[]] $else [[ int oidx = 0; ]]
                                ]] $else [[
                                int oidx = 1;
                                ]]
                            returnValues.setSize(0);
                            $for Args_ [[
                                ReturnValueWhen(returnValues,oidx,
                                                typename or_<typename Contains_<Pols,pureOutValue_<$Args_> >::type,
                                                typename Contains_<Pols,    outValue_<$Args_> >::type >::type(),a$Args_._v);
                                ]]
                            return gctools::multiple_values<T_O>(retval,oidx);
                    }
                };
                ]]
        ]]


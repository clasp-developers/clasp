#ifdef GC_DECLARE_FORWARDS
 namespace asttooling {
    class AsttoolingExposer_O;
    class DerivableSyntaxOnlyAction;
    class DerivableFrontendActionFactory;
    class DerivableASTFrontendAction;
    class DerivableMatchCallback;
    class AstVisitor_O;
 };
 namespace mpip {
    class Mpi_O;
 };
 namespace clbind {
    class DummyCreator_O;
    class ClassRep_O;
    class ClassRegistry_O;
 };
 namespace clasp_ffi {
    class ForeignTypeSpec_O;
    class ForeignData_O;
 };
 namespace llvmo {
    class PointerType_O;
    class GlobalValue_O;
    class UnaryInstruction_O;
    class SequentialType_O;
    class Triple_O;
    class LLVMTargetMachine_O;
    class DWARFContext_O;
    class TargetOptions_O;
    class ConstantDataArray_O;
    class TargetSubtargetInfo_O;
    class DINodeArray_O;
    class Pass_O;
    class SwitchInst_O;
    class Attribute_O;
    class ObjectFile_O;
    class ExecutionEngine_O;
    class GlobalVariable_O;
    class DINode_O;
    class LLVMContext_O;
    class ImmutablePass_O;
    class ConstantFP_O;
    class PassManagerBuilder_O;
    class IntegerType_O;
    class MCSubtargetInfo_O;
    class DICompositeType_O;
    class BlockAddress_O;
    class DIVariable_O;
    class ArrayType_O;
    class FunctionPassManager_O;
    class DISubprogram_O;
    class CallInst_O;
    class PassManager_O;
    class MDBuilder_O;
    class AtomicRMWInst_O;
    class AttributeSet_O;
    class InvokeInst_O;
    class DIExpression_O;
    class Module_O;
    class Target_O;
    class StructType_O;
    class LandingPadInst_O;
    class ConstantExpr_O;
    class ValueAsMetadata_O;
    class Instruction_O;
    class VectorType_O;
    class ConstantPointerNull_O;
    class AtomicCmpXchgInst_O;
    class FenceInst_O;
    class DebugLoc_O;
    class User_O;
    class StoreInst_O;
    class TargetLibraryInfoWrapperPass_O;
    class ConstantDataSequential_O;
    class DILocalVariable_O;
    class DIDerivedType_O;
    class ModulePass_O;
    class UnreachableInst_O;
    class Type_O;
    class JITDylib_O;
    class DITypeRefArray_O;
    class DILexicalBlock_O;
    class DIContext_O;
    class FunctionType_O;
    class ReturnInst_O;
    class DILocalScope_O;
    class TargetPassConfig_O;
    class IRBuilderBase_O;
    class Argument_O;
    class InsertPoint_O;
    class APFloat_O;
    class APInt_O;
    class DIBuilder_O;
    class DIBasicType_O;
    class FunctionCallee_O;
    class Constant_O;
    class SectionedAddress_O;
    class CallBase_O;
    class EngineBuilder_O;
    class BasicBlock_O;
    class DataLayout_O;
    class DIFile_O;
    class UndefValue_O;
    class FunctionPass_O;
    class VAArgInst_O;
    class DICompileUnit_O;
    class MDString_O;
    class MDNode_O;
    class DILexicalBlockBase_O;
    class DILocation_O;
    class ClaspJIT_O;
    class IRBuilder_O;
    class PHINode_O;
    class ConstantArray_O;
    class IndirectBrInst_O;
    class DIScope_O;
    class DIType_O;
    class Function_O;
    class ResumeInst_O;
    class MetadataAsValue_O;
    class DISubroutineType_O;
    class ConstantStruct_O;
    class LoadInst_O;
    class PassManagerBase_O;
    class AllocaInst_O;
    class BranchInst_O;
    class CompositeType_O;
    class StructLayout_O;
    class ConstantInt_O;
    class Linker_O;
    class Metadata_O;
    class Value_O;
    class TargetMachine_O;
    class ThreadSafeContext_O;
    class NamedMDNode_O;
 };
 namespace core {
    class TwoWayStream_O;
    class ComplexVector_byte32_t_O;
    class CoreExposer_O;
    class BitVectorNs_O;
    class SimpleMDArray_byte64_t_O;
    class HashTableEqual_O;
    class ClassHolder_O;
    class PosixTimeDuration_O;
    class Bignum_O;
    class Unused_dummy_O;
    class SimpleMDArray_byte32_t_O;
    class SimpleVector_double_O;
    class Instance_O;
    class SmallMap_O;
    class LogicalPathname_O;
    class CatchEnvironment_O;
    class ComplexVector_byte4_t_O;
    class FdSet_O;
    class BlockEnvironment_O;
    class VaList_dummy_O;
    class Lisp_O;
    class ComplexVector_int32_t_O;
    class NativeVector_float_O;
    class ComplexVector_size_t_O;
    class SymbolToEnumConverter_O;
    class DerivableCxxObject_O;
    class SimpleVector_int16_t_O;
    class General_O;
    class ClassRepCreator_O;
    class ClosureWithSlots_O;
    class ComplexVector_byte2_t_O;
    class BroadcastStream_O;
    class ExternalObject_O;
    class UserData_O;
    class MDArrayBaseChar_O;
    class MDArray_int2_t_O;
    class Rack_O;
    class Ratio_O;
    class WeakKeyHashTable_O;
    class SynonymStream_O;
    class MDArray_int4_t_O;
    class FuncallableInstance_O;
    class Cons_O;
    class MacroletEnvironment_O;
    class SingleDispatchMethodFunction_O;
    class SymbolMacroletEnvironment_O;
    class MDArray_int8_t_O;
    class AuxArgument;
    class Fixnum_dummy_O;
    class SmallMultimap_O;
    class ConcatenatedStream_O;
    class SimpleMDArray_size_t_O;
    class MDArray_int64_t_O;
    class LambdaListHandler_O;
    class HashTableEqualp_O;
    class MDArray_int32_t_O;
    class Sigset_O;
    class HashTableEq_O;
    class StringStream_O;
    class DerivableCxxClassCreator_O;
    class FunctionValueEnvironment_O;
    class SimpleMDArray_byte2_t_O;
    class SimpleString_O;
    class SimpleMDArray_int64_t_O;
    class DoubleFloat_O;
    class SymbolStorage;
    class SimpleVector_O;
    class UnwindProtectEnvironment_O;
    class StrNs_O;
    class CxxMethodFunction_O;
    class Environment_O;
    class ValueEnvironment_O;
    class SingleFloat_dummy_O;
    class KeywordArgument;
    class AnsiStream_O;
    class StringOutputStream_O;
    class SingleDispatchGenericFunctionClosure_O;
    class FuncallableInstanceCreator_O;
    class MDArray_byte8_t_O;
    class SimpleVector_byte32_t_O;
    class SimpleVector_fixnum_O;
    class Real_O;
    class MDArray_byte64_t_O;
    class SimpleVector_int2_t_O;
    class HashTableEql_O;
    class SimpleMDArray_float_O;
    class AtomicT_Holder_O;
    class ComplexVector_int16_t_O;
    class RandomState_O;
    class SimpleMDArray_int2_t_O;
    class Function_O;
    class MDArrayCharacter_O;
    class SingleDispatchEffectiveMethodFunction_O;
    class Rational_O;
    class FileStream_O;
    class Complex_O;
    class SimpleMDArray_byte8_t_O;
    class SimpleMDArray_double_O;
    class SimpleVector_int32_t_O;
    class SimpleMDArray_int4_t_O;
    class ComplexVector_int8_t_O;
    class ValueFrame_O;
    class RuntimeVisibleEnvironment_O;
    class IOFileStream_O;
    class ComplexVector_T_O;
    class MDArray_int16_t_O;
    class WeakPointer_O;
    class MDArray_double_O;
    class TranslationFunctor_O;
    class SimpleVector_int64_t_O;
    class ComplexVector_int4_t_O;
    class LongFloat_O;
    class FunctionFrame_O;
    class SimpleMDArray_byte4_t_O;
    class Float_O;
    class FileScope_O;
    class StringInputStream_O;
    class ComplexVector_int64_t_O;
    class RecursiveDirectoryIterator_O;
    class Pointer_O;
    class MDArray_byte16_t_O;
    class ComplexVector_int2_t_O;
    class CxxObject_O;
    class GlueEnvironment_O;
    class NativeVector_double_O;
    class AtomicFixnumHolder_O;
    class SingleDispatchMethod_O;
    class RequiredArgument;
    class ComplexVector_byte16_t_O;
    class MDArrayBit_O;
    class SimpleMDArrayBit_O;
    class HashTableBase_O;
    class Null_O;
    class EchoStream_O;
    class Iterator_O;
    class StrWNs_O;
    class ComplexVector_double_O;
    class MDArray_byte4_t_O;
    class Array_O;
    class Symbol_O;
    class SimpleCharacterString_O;
    class SimpleMDArrayCharacter_O;
    class Scope_O;
    class IOStreamStream_O;
    class NativeVector_int_O;
    class InstanceCreator_O;
    class SpecialForm_O;
    class Path_O;
    class CompileTimeEnvironment_O;
    class TagbodyEnvironment_O;
    class Character_dummy_O;
    class MDArray_byte32_t_O;
    class ComplexVector_byte64_t_O;
    class SimpleMDArray_int8_t_O;
    class SimpleVector_byte4_t_O;
    class Str8Ns_O;
    class Pathname_O;
    class SimpleMDArray_byte16_t_O;
    class AbstractSimpleVector_O;
    class LoadTimeValues_O;
    class Cache_O;
    class SharpEqualWrapper_O;
    class MDArray_fixnum_O;
    class SimpleVector_int4_t_O;
    class T_O;
    class Number_O;
    class ShortFloat_O;
    class SimpleVector_float_O;
    class CacheRecord;
    class SymbolClassHolderPair;
    class ComplexVector_fixnum_O;
    class Stream_O;
    class SimpleMDArray_O;
    class SimpleVector_byte8_t_O;
    class SimpleMDArrayBaseChar_O;
    class Package_O;
    class Readtable_O;
    class FileStatus_O;
    class SimpleVector_size_t_O;
    class InvocationHistoryFrameIterator_O;
    class SimpleVector_int8_t_O;
    class FunctionContainerEnvironment_O;
    class SimpleBitVector_O;
    class PosixTime_O;
    class HashTable_O;
    class LexicalEnvironment_O;
    class MDArray_byte2_t_O;
    class OptionalArgument;
    class ComplexVector_byte8_t_O;
    class DirectoryIterator_O;
    class SingleDispatchCxxEffectiveMethodFunction_O;
    class Exposer_O;
    class ComplexVector_float_O;
    class StandardClassCreator_O;
    class ActivationFrame_O;
    class SourcePosInfo_O;
    class SimpleMDArrayT_O;
    class MDArray_float_O;
    class SimpleMDArray_int16_t_O;
    class IntArray_O;
    class DirectoryEntry_O;
    class Serializer_O;
    class MDArrayT_O;
    class MDArray_O;
    class LightUserData_O;
    class Record_O;
    class SimpleBaseString_O;
    class Integer_O;
    class SimpleMDArray_int32_t_O;
    class ComplexVector_O;
    class SimpleVector_byte64_t_O;
    class SimpleMDArray_fixnum_O;
    class SimpleVector_byte2_t_O;
    class MultiStringBuffer_O;
    class SimpleVector_byte16_t_O;
    class MDArray_size_t_O;
 };
 namespace mp {
    class ConditionVariable_O;
    class Mutex_O;
    class SharedMutex_O;
    class RecursiveMutex_O;
    class Process_O;
 };
#endif // GC_DECLARE_FORWARDS
#if defined(GC_STAMP)
// Attempted to assign stamp to class asttooling::DerivableASTFrontendAction due to inherit from clang::FrontendAction but it already has one due to inheritance from core::T_O
// Attempted to assign stamp to class clbind::Derivable<clang::ASTFrontendAction> due to inherit from clang::FrontendAction but it already has one due to inheritance from core::T_O
// Attempted to assign stamp to class asttooling::DerivableSyntaxOnlyAction due to inherit from clang::FrontendAction but it already has one due to inheritance from core::T_O
// Attempted to assign stamp to class clbind::Derivable<clang::SyntaxOnlyAction> due to inherit from clang::FrontendAction but it already has one due to inheritance from core::T_O
// Attempted to assign stamp to class asttooling::DerivableMatchCallback due to inherit from clang::ast_matchers::MatchFinder::MatchCallback but it already has one due to inheritance from core::T_O
// Attempted to assign stamp to class clbind::Derivable<clang::ast_matchers::MatchFinder::MatchCallback> due to inherit from clang::ast_matchers::MatchFinder::MatchCallback but it already has one due to inheritance from core::T_O
// Attempted to assign stamp to class asttooling::DerivableFrontendActionFactory due to inherit from clang::tooling::ToolAction but it already has one due to inheritance from core::T_O
// Attempted to assign stamp to class clbind::Derivable<clang::tooling::FrontendActionFactory> due to inherit from clang::tooling::ToolAction but it already has one due to inheritance from core::T_O
// Attempted to assign stamp to class asttooling::DerivableASTFrontendAction due to inherit from core::T_O but it already has one due to inheritance from core::DerivableCxxObject_O
// Attempted to assign stamp to class clbind::Derivable<clang::ASTFrontendAction> due to inherit from core::T_O but it already has one due to inheritance from core::DerivableCxxObject_O
// Attempted to assign stamp to class asttooling::DerivableSyntaxOnlyAction due to inherit from core::T_O but it already has one due to inheritance from core::DerivableCxxObject_O
// Attempted to assign stamp to class clbind::Derivable<clang::SyntaxOnlyAction> due to inherit from core::T_O but it already has one due to inheritance from core::DerivableCxxObject_O
// Attempted to assign stamp to class asttooling::DerivableMatchCallback due to inherit from core::T_O but it already has one due to inheritance from core::DerivableCxxObject_O
// Attempted to assign stamp to class clbind::Derivable<clang::ast_matchers::MatchFinder::MatchCallback> due to inherit from core::T_O but it already has one due to inheritance from core::DerivableCxxObject_O
// Attempted to assign stamp to class asttooling::DerivableFrontendActionFactory due to inherit from core::T_O but it already has one due to inheritance from core::DerivableCxxObject_O
// Attempted to assign stamp to class clbind::Derivable<clang::tooling::FrontendActionFactory> due to inherit from core::T_O but it already has one due to inheritance from core::DerivableCxxObject_O
STAMP_null = ADJUST_STAMP(0), 
STAMP_core__T_O = ADJUST_STAMP(7), // Stamp(1)  wtag(3)
STAMP_core__VaList_dummy_O = ADJUST_STAMP(11), // Stamp(2)  wtag(3)
STAMP_core__Unused_dummy_O = ADJUST_STAMP(15), // Stamp(3)  wtag(3)
STAMP_core__General_O = ADJUST_STAMP(19), // Stamp(4)  wtag(3)
STAMP_core__MultiStringBuffer_O = ADJUST_STAMP(23), // Stamp(5)  wtag(3)
STAMP_core__ClassHolder_O = ADJUST_STAMP(27), // Stamp(6)  wtag(3)
STAMP_core__WrappedPointer_O = ADJUST_STAMP(30), // Stamp(7)  wtag(2)
STAMP_core__FdSet_O = ADJUST_STAMP(35), // Stamp(8)  wtag(3)
STAMP_core__SymbolToEnumConverter_O = ADJUST_STAMP(39), // Stamp(9)  wtag(3)
STAMP_llvmo__Attribute_O = ADJUST_STAMP(43), // Stamp(10)  wtag(3)
STAMP_core__LambdaListHandler_O = ADJUST_STAMP(47), // Stamp(11)  wtag(3)
STAMP_llvmo__AttributeSet_O = ADJUST_STAMP(51), // Stamp(12)  wtag(3)
STAMP_core__AtomicT_Holder_O = ADJUST_STAMP(55), // Stamp(13)  wtag(3)
STAMP_core__Function_O = ADJUST_STAMP(59), // Stamp(14)  wtag(3)
STAMP_core__FuncallableInstance_O = ADJUST_STAMP(61), // Stamp(15)  wtag(1)
STAMP_core__Creator_O = ADJUST_STAMP(67), // Stamp(16)  wtag(3)
STAMP_core__ClassRepCreator_O = ADJUST_STAMP(71), // Stamp(17)  wtag(3)
STAMP_core__DerivableCxxClassCreator_O = ADJUST_STAMP(75), // Stamp(18)  wtag(3)
STAMP_core__FuncallableInstanceCreator_O = ADJUST_STAMP(79), // Stamp(19)  wtag(3)
STAMP_clbind__ConstructorCreator_O = ADJUST_STAMP(83), // Stamp(20)  wtag(3)
STAMP_clbind__DummyCreator_O = ADJUST_STAMP(87), // Stamp(21)  wtag(3)
STAMP_core__InstanceCreator_O = ADJUST_STAMP(91), // Stamp(22)  wtag(3)
STAMP_core__StandardClassCreator_O = ADJUST_STAMP(95), // Stamp(23)  wtag(3)
STAMP_core__SpecialForm_O = ADJUST_STAMP(99), // Stamp(24)  wtag(3)
STAMP_core__Closure_O = ADJUST_STAMP(103), // Stamp(25)  wtag(3)
STAMP_core__ClosureWithSlots_O = ADJUST_STAMP(107), // Stamp(26)  wtag(3)
STAMP_core__SingleDispatchCxxEffectiveMethodFunction_O = ADJUST_STAMP(111), // Stamp(27)  wtag(3)
STAMP_core__SingleDispatchMethodFunction_O = ADJUST_STAMP(115), // Stamp(28)  wtag(3)
STAMP_core__CxxMethodFunction_O = ADJUST_STAMP(119), // Stamp(29)  wtag(3)
STAMP_core__BuiltinClosure_O = ADJUST_STAMP(123), // Stamp(30)  wtag(3)
STAMP_core__TranslationFunctor_O = ADJUST_STAMP(127), // Stamp(31)  wtag(3)
STAMP_core__SingleDispatchGenericFunctionClosure_O = ADJUST_STAMP(131), // Stamp(32)  wtag(3)
STAMP_core__SingleDispatchEffectiveMethodFunction_O = ADJUST_STAMP(135), // Stamp(33)  wtag(3)
STAMP_core__WeakPointer_O = ADJUST_STAMP(139), // Stamp(34)  wtag(3)
STAMP_llvmo__DebugLoc_O = ADJUST_STAMP(143), // Stamp(35)  wtag(3)
STAMP_core__Pointer_O = ADJUST_STAMP(147), // Stamp(36)  wtag(3)
STAMP_clasp_ffi__ForeignData_O = ADJUST_STAMP(151), // Stamp(37)  wtag(3)
STAMP_core__CxxObject_O = ADJUST_STAMP(155), // Stamp(38)  wtag(3)
STAMP_core__NativeVector_float_O = ADJUST_STAMP(159), // Stamp(39)  wtag(3)
STAMP_llvmo__MDBuilder_O = ADJUST_STAMP(163), // Stamp(40)  wtag(3)
STAMP_mp__ConditionVariable_O = ADJUST_STAMP(167), // Stamp(41)  wtag(3)
STAMP_core__NativeVector_double_O = ADJUST_STAMP(171), // Stamp(42)  wtag(3)
STAMP_core__NativeVector_int_O = ADJUST_STAMP(175), // Stamp(43)  wtag(3)
STAMP_llvmo__FunctionCallee_O = ADJUST_STAMP(179), // Stamp(44)  wtag(3)
STAMP_core__Serializer_O = ADJUST_STAMP(183), // Stamp(45)  wtag(3)
STAMP_llvmo__DINodeArray_O = ADJUST_STAMP(187), // Stamp(46)  wtag(3)
STAMP_mp__Mutex_O = ADJUST_STAMP(191), // Stamp(47)  wtag(3)
STAMP_mp__RecursiveMutex_O = ADJUST_STAMP(195), // Stamp(48)  wtag(3)
STAMP_llvmo__DITypeRefArray_O = ADJUST_STAMP(199), // Stamp(49)  wtag(3)
STAMP_mp__SharedMutex_O = ADJUST_STAMP(203), // Stamp(50)  wtag(3)
STAMP_mp__Process_O = ADJUST_STAMP(207), // Stamp(51)  wtag(3)
STAMP_core__SingleDispatchMethod_O = ADJUST_STAMP(211), // Stamp(52)  wtag(3)
STAMP_core__Iterator_O = ADJUST_STAMP(215), // Stamp(53)  wtag(3)
STAMP_core__DirectoryIterator_O = ADJUST_STAMP(219), // Stamp(54)  wtag(3)
STAMP_core__RecursiveDirectoryIterator_O = ADJUST_STAMP(223), // Stamp(55)  wtag(3)
STAMP_core__Array_O = ADJUST_STAMP(227), // Stamp(56)  wtag(3)
STAMP_core__MDArray_O = ADJUST_STAMP(231), // Stamp(57)  wtag(3)
STAMP_core__template_Array_core__MDArray_int16_t_O_core__SimpleMDArray_int16_t_O_core__SimpleVector_int16_t_O_core__MDArray_O_ = ADJUST_STAMP(235), // Stamp(58)  wtag(3)
STAMP_core__MDArray_int16_t_O = ADJUST_STAMP(239), // Stamp(59)  wtag(3)
STAMP_core__template_Array_core__MDArray_int8_t_O_core__SimpleMDArray_int8_t_O_core__SimpleVector_int8_t_O_core__MDArray_O_ = ADJUST_STAMP(243), // Stamp(60)  wtag(3)
STAMP_core__MDArray_int8_t_O = ADJUST_STAMP(247), // Stamp(61)  wtag(3)
STAMP_core__template_Array_core__MDArray_int32_t_O_core__SimpleMDArray_int32_t_O_core__SimpleVector_int32_t_O_core__MDArray_O_ = ADJUST_STAMP(251), // Stamp(62)  wtag(3)
STAMP_core__MDArray_int32_t_O = ADJUST_STAMP(255), // Stamp(63)  wtag(3)
STAMP_core__template_Array_core__MDArray_byte4_t_O_core__SimpleMDArray_byte4_t_O_core__SimpleVector_byte4_t_O_core__MDArray_O_ = ADJUST_STAMP(259), // Stamp(64)  wtag(3)
STAMP_core__MDArray_byte4_t_O = ADJUST_STAMP(263), // Stamp(65)  wtag(3)
STAMP_core__template_Array_core__MDArray_float_O_core__SimpleMDArray_float_O_core__SimpleVector_float_O_core__MDArray_O_ = ADJUST_STAMP(267), // Stamp(66)  wtag(3)
STAMP_core__MDArray_float_O = ADJUST_STAMP(271), // Stamp(67)  wtag(3)
STAMP_core__template_Array_core__MDArray_size_t_O_core__SimpleMDArray_size_t_O_core__SimpleVector_size_t_O_core__MDArray_O_ = ADJUST_STAMP(275), // Stamp(68)  wtag(3)
STAMP_core__MDArray_size_t_O = ADJUST_STAMP(279), // Stamp(69)  wtag(3)
STAMP_core__template_Array_core__MDArray_byte8_t_O_core__SimpleMDArray_byte8_t_O_core__SimpleVector_byte8_t_O_core__MDArray_O_ = ADJUST_STAMP(283), // Stamp(70)  wtag(3)
STAMP_core__MDArray_byte8_t_O = ADJUST_STAMP(287), // Stamp(71)  wtag(3)
STAMP_core__template_Array_core__MDArray_int64_t_O_core__SimpleMDArray_int64_t_O_core__SimpleVector_int64_t_O_core__MDArray_O_ = ADJUST_STAMP(291), // Stamp(72)  wtag(3)
STAMP_core__MDArray_int64_t_O = ADJUST_STAMP(295), // Stamp(73)  wtag(3)
STAMP_core__template_Array_core__MDArray_byte32_t_O_core__SimpleMDArray_byte32_t_O_core__SimpleVector_byte32_t_O_core__MDArray_O_ = ADJUST_STAMP(299), // Stamp(74)  wtag(3)
STAMP_core__MDArray_byte32_t_O = ADJUST_STAMP(303), // Stamp(75)  wtag(3)
STAMP_core__template_Array_core__MDArray_byte2_t_O_core__SimpleMDArray_byte2_t_O_core__SimpleVector_byte2_t_O_core__MDArray_O_ = ADJUST_STAMP(307), // Stamp(76)  wtag(3)
STAMP_core__MDArray_byte2_t_O = ADJUST_STAMP(311), // Stamp(77)  wtag(3)
STAMP_core__template_Array_core__MDArray_int2_t_O_core__SimpleMDArray_int2_t_O_core__SimpleVector_int2_t_O_core__MDArray_O_ = ADJUST_STAMP(315), // Stamp(78)  wtag(3)
STAMP_core__MDArray_int2_t_O = ADJUST_STAMP(319), // Stamp(79)  wtag(3)
STAMP_core__template_Array_core__MDArray_fixnum_O_core__SimpleMDArray_fixnum_O_core__SimpleVector_fixnum_O_core__MDArray_O_ = ADJUST_STAMP(323), // Stamp(80)  wtag(3)
STAMP_core__MDArray_fixnum_O = ADJUST_STAMP(327), // Stamp(81)  wtag(3)
STAMP_core__template_Array_core__MDArrayBaseChar_O_core__SimpleMDArrayBaseChar_O_core__SimpleBaseString_O_core__MDArray_O_ = ADJUST_STAMP(331), // Stamp(82)  wtag(3)
STAMP_core__MDArrayBaseChar_O = ADJUST_STAMP(335), // Stamp(83)  wtag(3)
STAMP_core__template_Array_core__MDArray_byte64_t_O_core__SimpleMDArray_byte64_t_O_core__SimpleVector_byte64_t_O_core__MDArray_O_ = ADJUST_STAMP(339), // Stamp(84)  wtag(3)
STAMP_core__MDArray_byte64_t_O = ADJUST_STAMP(343), // Stamp(85)  wtag(3)
STAMP_core__template_Array_core__MDArrayCharacter_O_core__SimpleMDArrayCharacter_O_core__SimpleCharacterString_O_core__MDArray_O_ = ADJUST_STAMP(347), // Stamp(86)  wtag(3)
STAMP_core__MDArrayCharacter_O = ADJUST_STAMP(351), // Stamp(87)  wtag(3)
STAMP_core__template_Array_core__MDArrayT_O_core__SimpleMDArrayT_O_core__SimpleVector_O_core__MDArray_O_ = ADJUST_STAMP(355), // Stamp(88)  wtag(3)
STAMP_core__MDArrayT_O = ADJUST_STAMP(359), // Stamp(89)  wtag(3)
STAMP_core__template_Array_core__MDArrayBit_O_core__SimpleMDArrayBit_O_core__SimpleBitVector_O_core__MDArray_O_ = ADJUST_STAMP(363), // Stamp(90)  wtag(3)
STAMP_core__MDArrayBit_O = ADJUST_STAMP(367), // Stamp(91)  wtag(3)
STAMP_core__template_Array_core__MDArray_byte16_t_O_core__SimpleMDArray_byte16_t_O_core__SimpleVector_byte16_t_O_core__MDArray_O_ = ADJUST_STAMP(371), // Stamp(92)  wtag(3)
STAMP_core__MDArray_byte16_t_O = ADJUST_STAMP(375), // Stamp(93)  wtag(3)
STAMP_core__SimpleMDArray_O = ADJUST_STAMP(379), // Stamp(94)  wtag(3)
STAMP_core__template_SimpleArray_core__SimpleMDArray_int8_t_O_core__SimpleVector_int8_t_O_core__SimpleMDArray_O_ = ADJUST_STAMP(383), // Stamp(95)  wtag(3)
STAMP_core__SimpleMDArray_int8_t_O = ADJUST_STAMP(387), // Stamp(96)  wtag(3)
STAMP_core__template_SimpleArray_core__SimpleMDArray_double_O_core__SimpleVector_double_O_core__SimpleMDArray_O_ = ADJUST_STAMP(391), // Stamp(97)  wtag(3)
STAMP_core__SimpleMDArray_double_O = ADJUST_STAMP(395), // Stamp(98)  wtag(3)
STAMP_core__template_SimpleArray_core__SimpleMDArray_byte32_t_O_core__SimpleVector_byte32_t_O_core__SimpleMDArray_O_ = ADJUST_STAMP(399), // Stamp(99)  wtag(3)
STAMP_core__SimpleMDArray_byte32_t_O = ADJUST_STAMP(403), // Stamp(100)  wtag(3)
STAMP_core__template_SimpleArray_core__SimpleMDArrayT_O_core__SimpleVector_O_core__SimpleMDArray_O_ = ADJUST_STAMP(407), // Stamp(101)  wtag(3)
STAMP_core__SimpleMDArrayT_O = ADJUST_STAMP(411), // Stamp(102)  wtag(3)
STAMP_core__template_SimpleArray_core__SimpleMDArray_int2_t_O_core__SimpleVector_int2_t_O_core__SimpleMDArray_O_ = ADJUST_STAMP(415), // Stamp(103)  wtag(3)
STAMP_core__SimpleMDArray_int2_t_O = ADJUST_STAMP(419), // Stamp(104)  wtag(3)
STAMP_core__template_SimpleArray_core__SimpleMDArray_byte4_t_O_core__SimpleVector_byte4_t_O_core__SimpleMDArray_O_ = ADJUST_STAMP(423), // Stamp(105)  wtag(3)
STAMP_core__SimpleMDArray_byte4_t_O = ADJUST_STAMP(427), // Stamp(106)  wtag(3)
STAMP_core__template_SimpleArray_core__SimpleMDArray_int32_t_O_core__SimpleVector_int32_t_O_core__SimpleMDArray_O_ = ADJUST_STAMP(431), // Stamp(107)  wtag(3)
STAMP_core__SimpleMDArray_int32_t_O = ADJUST_STAMP(435), // Stamp(108)  wtag(3)
STAMP_core__template_SimpleArray_core__SimpleMDArray_float_O_core__SimpleVector_float_O_core__SimpleMDArray_O_ = ADJUST_STAMP(439), // Stamp(109)  wtag(3)
STAMP_core__SimpleMDArray_float_O = ADJUST_STAMP(443), // Stamp(110)  wtag(3)
STAMP_core__template_SimpleArray_core__SimpleMDArray_int16_t_O_core__SimpleVector_int16_t_O_core__SimpleMDArray_O_ = ADJUST_STAMP(447), // Stamp(111)  wtag(3)
STAMP_core__SimpleMDArray_int16_t_O = ADJUST_STAMP(451), // Stamp(112)  wtag(3)
STAMP_core__template_SimpleArray_core__SimpleMDArray_size_t_O_core__SimpleVector_size_t_O_core__SimpleMDArray_O_ = ADJUST_STAMP(455), // Stamp(113)  wtag(3)
STAMP_core__SimpleMDArray_size_t_O = ADJUST_STAMP(459), // Stamp(114)  wtag(3)
STAMP_core__template_SimpleArray_core__SimpleMDArray_int4_t_O_core__SimpleVector_int4_t_O_core__SimpleMDArray_O_ = ADJUST_STAMP(463), // Stamp(115)  wtag(3)
STAMP_core__SimpleMDArray_int4_t_O = ADJUST_STAMP(467), // Stamp(116)  wtag(3)
STAMP_core__template_SimpleArray_core__SimpleMDArrayCharacter_O_core__SimpleCharacterString_O_core__SimpleMDArray_O_ = ADJUST_STAMP(471), // Stamp(117)  wtag(3)
STAMP_core__SimpleMDArrayCharacter_O = ADJUST_STAMP(475), // Stamp(118)  wtag(3)
STAMP_core__template_SimpleArray_core__SimpleMDArray_byte2_t_O_core__SimpleVector_byte2_t_O_core__SimpleMDArray_O_ = ADJUST_STAMP(479), // Stamp(119)  wtag(3)
STAMP_core__SimpleMDArray_byte2_t_O = ADJUST_STAMP(483), // Stamp(120)  wtag(3)
STAMP_core__template_SimpleArray_core__SimpleMDArray_fixnum_O_core__SimpleVector_fixnum_O_core__SimpleMDArray_O_ = ADJUST_STAMP(487), // Stamp(121)  wtag(3)
STAMP_core__SimpleMDArray_fixnum_O = ADJUST_STAMP(491), // Stamp(122)  wtag(3)
STAMP_core__template_SimpleArray_core__SimpleMDArray_byte16_t_O_core__SimpleVector_byte16_t_O_core__SimpleMDArray_O_ = ADJUST_STAMP(495), // Stamp(123)  wtag(3)
STAMP_core__SimpleMDArray_byte16_t_O = ADJUST_STAMP(499), // Stamp(124)  wtag(3)
STAMP_core__template_SimpleArray_core__SimpleMDArrayBaseChar_O_core__SimpleBaseString_O_core__SimpleMDArray_O_ = ADJUST_STAMP(503), // Stamp(125)  wtag(3)
STAMP_core__SimpleMDArrayBaseChar_O = ADJUST_STAMP(507), // Stamp(126)  wtag(3)
STAMP_core__template_SimpleArray_core__SimpleMDArray_byte64_t_O_core__SimpleVector_byte64_t_O_core__SimpleMDArray_O_ = ADJUST_STAMP(511), // Stamp(127)  wtag(3)
STAMP_core__SimpleMDArray_byte64_t_O = ADJUST_STAMP(515), // Stamp(128)  wtag(3)
STAMP_core__template_SimpleArray_core__SimpleMDArrayBit_O_core__SimpleBitVector_O_core__SimpleMDArray_O_ = ADJUST_STAMP(519), // Stamp(129)  wtag(3)
STAMP_core__SimpleMDArrayBit_O = ADJUST_STAMP(523), // Stamp(130)  wtag(3)
STAMP_core__template_SimpleArray_core__SimpleMDArray_byte8_t_O_core__SimpleVector_byte8_t_O_core__SimpleMDArray_O_ = ADJUST_STAMP(527), // Stamp(131)  wtag(3)
STAMP_core__SimpleMDArray_byte8_t_O = ADJUST_STAMP(531), // Stamp(132)  wtag(3)
STAMP_core__template_SimpleArray_core__SimpleMDArray_int64_t_O_core__SimpleVector_int64_t_O_core__SimpleMDArray_O_ = ADJUST_STAMP(535), // Stamp(133)  wtag(3)
STAMP_core__SimpleMDArray_int64_t_O = ADJUST_STAMP(539), // Stamp(134)  wtag(3)
STAMP_core__template_Array_core__MDArray_int4_t_O_core__SimpleMDArray_int4_t_O_core__SimpleVector_int4_t_O_core__MDArray_O_ = ADJUST_STAMP(543), // Stamp(135)  wtag(3)
STAMP_core__MDArray_int4_t_O = ADJUST_STAMP(547), // Stamp(136)  wtag(3)
STAMP_core__template_Array_core__MDArray_double_O_core__SimpleMDArray_double_O_core__SimpleVector_double_O_core__MDArray_O_ = ADJUST_STAMP(551), // Stamp(137)  wtag(3)
STAMP_core__MDArray_double_O = ADJUST_STAMP(555), // Stamp(138)  wtag(3)
STAMP_core__ComplexVector_O = ADJUST_STAMP(559), // Stamp(139)  wtag(3)
STAMP_core__template_Vector_core__ComplexVector_double_O_core__SimpleVector_double_O_core__ComplexVector_O_ = ADJUST_STAMP(563), // Stamp(140)  wtag(3)
STAMP_core__ComplexVector_double_O = ADJUST_STAMP(567), // Stamp(141)  wtag(3)
STAMP_core__template_Vector_core__ComplexVector_int8_t_O_core__SimpleVector_int8_t_O_core__ComplexVector_O_ = ADJUST_STAMP(571), // Stamp(142)  wtag(3)
STAMP_core__ComplexVector_int8_t_O = ADJUST_STAMP(575), // Stamp(143)  wtag(3)
STAMP_core__template_Vector_core__ComplexVector_byte64_t_O_core__SimpleVector_byte64_t_O_core__ComplexVector_O_ = ADJUST_STAMP(579), // Stamp(144)  wtag(3)
STAMP_core__ComplexVector_byte64_t_O = ADJUST_STAMP(583), // Stamp(145)  wtag(3)
STAMP_core__template_Vector_core__ComplexVector_T_O_core__SimpleVector_O_core__ComplexVector_O_ = ADJUST_STAMP(587), // Stamp(146)  wtag(3)
STAMP_core__ComplexVector_T_O = ADJUST_STAMP(591), // Stamp(147)  wtag(3)
STAMP_core__template_Vector_core__ComplexVector_int2_t_O_core__SimpleVector_int2_t_O_core__ComplexVector_O_ = ADJUST_STAMP(595), // Stamp(148)  wtag(3)
STAMP_core__ComplexVector_int2_t_O = ADJUST_STAMP(599), // Stamp(149)  wtag(3)
STAMP_core__template_Vector_core__ComplexVector_int32_t_O_core__SimpleVector_int32_t_O_core__ComplexVector_O_ = ADJUST_STAMP(603), // Stamp(150)  wtag(3)
STAMP_core__ComplexVector_int32_t_O = ADJUST_STAMP(607), // Stamp(151)  wtag(3)
STAMP_core__template_Vector_core__ComplexVector_byte16_t_O_core__SimpleVector_byte16_t_O_core__ComplexVector_O_ = ADJUST_STAMP(611), // Stamp(152)  wtag(3)
STAMP_core__ComplexVector_byte16_t_O = ADJUST_STAMP(615), // Stamp(153)  wtag(3)
STAMP_core__template_Vector_core__ComplexVector_float_O_core__SimpleVector_float_O_core__ComplexVector_O_ = ADJUST_STAMP(619), // Stamp(154)  wtag(3)
STAMP_core__ComplexVector_float_O = ADJUST_STAMP(623), // Stamp(155)  wtag(3)
STAMP_core__template_Vector_core__ComplexVector_int16_t_O_core__SimpleVector_int16_t_O_core__ComplexVector_O_ = ADJUST_STAMP(627), // Stamp(156)  wtag(3)
STAMP_core__ComplexVector_int16_t_O = ADJUST_STAMP(631), // Stamp(157)  wtag(3)
STAMP_core__template_Vector_core__ComplexVector_int4_t_O_core__SimpleVector_int4_t_O_core__ComplexVector_O_ = ADJUST_STAMP(635), // Stamp(158)  wtag(3)
STAMP_core__ComplexVector_int4_t_O = ADJUST_STAMP(639), // Stamp(159)  wtag(3)
STAMP_core__template_Vector_core__ComplexVector_size_t_O_core__SimpleVector_size_t_O_core__ComplexVector_O_ = ADJUST_STAMP(643), // Stamp(160)  wtag(3)
STAMP_core__ComplexVector_size_t_O = ADJUST_STAMP(647), // Stamp(161)  wtag(3)
STAMP_core__template_Vector_core__ComplexVector_byte2_t_O_core__SimpleVector_byte2_t_O_core__ComplexVector_O_ = ADJUST_STAMP(651), // Stamp(162)  wtag(3)
STAMP_core__ComplexVector_byte2_t_O = ADJUST_STAMP(655), // Stamp(163)  wtag(3)
STAMP_core__template_Vector_core__ComplexVector_byte8_t_O_core__SimpleVector_byte8_t_O_core__ComplexVector_O_ = ADJUST_STAMP(659), // Stamp(164)  wtag(3)
STAMP_core__ComplexVector_byte8_t_O = ADJUST_STAMP(663), // Stamp(165)  wtag(3)
STAMP_core__template_Vector_core__ComplexVector_byte32_t_O_core__SimpleVector_byte32_t_O_core__ComplexVector_O_ = ADJUST_STAMP(667), // Stamp(166)  wtag(3)
STAMP_core__ComplexVector_byte32_t_O = ADJUST_STAMP(671), // Stamp(167)  wtag(3)
STAMP_core__template_Vector_core__BitVectorNs_O_core__SimpleBitVector_O_core__ComplexVector_O_ = ADJUST_STAMP(675), // Stamp(168)  wtag(3)
STAMP_core__BitVectorNs_O = ADJUST_STAMP(679), // Stamp(169)  wtag(3)
STAMP_core__StrNs_O = ADJUST_STAMP(683), // Stamp(170)  wtag(3)
STAMP_core__template_Vector_core__Str8Ns_O_core__SimpleBaseString_O_core__StrNs_O_ = ADJUST_STAMP(687), // Stamp(171)  wtag(3)
STAMP_core__Str8Ns_O = ADJUST_STAMP(691), // Stamp(172)  wtag(3)
STAMP_core__template_Vector_core__StrWNs_O_core__SimpleCharacterString_O_core__StrNs_O_ = ADJUST_STAMP(695), // Stamp(173)  wtag(3)
STAMP_core__StrWNs_O = ADJUST_STAMP(699), // Stamp(174)  wtag(3)
STAMP_core__template_Vector_core__ComplexVector_byte4_t_O_core__SimpleVector_byte4_t_O_core__ComplexVector_O_ = ADJUST_STAMP(703), // Stamp(175)  wtag(3)
STAMP_core__ComplexVector_byte4_t_O = ADJUST_STAMP(707), // Stamp(176)  wtag(3)
STAMP_core__template_Vector_core__ComplexVector_fixnum_O_core__SimpleVector_fixnum_O_core__ComplexVector_O_ = ADJUST_STAMP(711), // Stamp(177)  wtag(3)
STAMP_core__ComplexVector_fixnum_O = ADJUST_STAMP(715), // Stamp(178)  wtag(3)
STAMP_core__template_Vector_core__ComplexVector_int64_t_O_core__SimpleVector_int64_t_O_core__ComplexVector_O_ = ADJUST_STAMP(719), // Stamp(179)  wtag(3)
STAMP_core__ComplexVector_int64_t_O = ADJUST_STAMP(723), // Stamp(180)  wtag(3)
STAMP_core__AbstractSimpleVector_O = ADJUST_STAMP(727), // Stamp(181)  wtag(3)
STAMP_core__SimpleString_O = ADJUST_STAMP(731), // Stamp(182)  wtag(3)
STAMP_core__template_SimpleVector_core__SimpleCharacterString_O_int_core__SimpleString_O_ = ADJUST_STAMP(735), // Stamp(183)  wtag(3)
STAMP_core__SimpleCharacterString_O = ADJUST_STAMP(739), // Stamp(184)  wtag(3)
STAMP_core__template_SimpleVector_core__SimpleBaseString_O_unsigned_char_core__SimpleString_O_ = ADJUST_STAMP(743), // Stamp(185)  wtag(3)
STAMP_core__SimpleBaseString_O = ADJUST_STAMP(747), // Stamp(186)  wtag(3)
STAMP_core__template_SimpleVector_core__SimpleVector_int16_t_O_short_core__AbstractSimpleVector_O_ = ADJUST_STAMP(751), // Stamp(187)  wtag(3)
STAMP_core__SimpleVector_int16_t_O = ADJUST_STAMP(755), // Stamp(188)  wtag(3)
STAMP_core__template_SimpleVector_core__SimpleVector_byte16_t_O_unsigned_short_core__AbstractSimpleVector_O_ = ADJUST_STAMP(759), // Stamp(189)  wtag(3)
STAMP_core__SimpleVector_byte16_t_O = ADJUST_STAMP(763), // Stamp(190)  wtag(3)
STAMP_core__template_SimpleBitUnitVector_core__SimpleBitVector_O_1_0_ = ADJUST_STAMP(767), // Stamp(191)  wtag(3)
STAMP_core__SimpleBitVector_O = ADJUST_STAMP(771), // Stamp(192)  wtag(3)
STAMP_core__template_SimpleBitUnitVector_core__SimpleVector_int4_t_O_4_1_ = ADJUST_STAMP(775), // Stamp(193)  wtag(3)
STAMP_core__SimpleVector_int4_t_O = ADJUST_STAMP(779), // Stamp(194)  wtag(3)
STAMP_core__template_SimpleVector_core__SimpleVector_byte32_t_O_unsigned_int_core__AbstractSimpleVector_O_ = ADJUST_STAMP(783), // Stamp(195)  wtag(3)
STAMP_core__SimpleVector_byte32_t_O = ADJUST_STAMP(787), // Stamp(196)  wtag(3)
STAMP_core__template_SimpleVector_core__SimpleVector_size_t_O_unsigned_long_core__AbstractSimpleVector_O_ = ADJUST_STAMP(791), // Stamp(197)  wtag(3)
STAMP_core__SimpleVector_size_t_O = ADJUST_STAMP(795), // Stamp(198)  wtag(3)
STAMP_core__template_SimpleVector_core__SimpleVector_double_O_double_core__AbstractSimpleVector_O_ = ADJUST_STAMP(799), // Stamp(199)  wtag(3)
STAMP_core__SimpleVector_double_O = ADJUST_STAMP(803), // Stamp(200)  wtag(3)
STAMP_core__template_SimpleVector_core__SimpleVector_byte64_t_O_unsigned_long_core__AbstractSimpleVector_O_ = ADJUST_STAMP(807), // Stamp(201)  wtag(3)
STAMP_core__SimpleVector_byte64_t_O = ADJUST_STAMP(811), // Stamp(202)  wtag(3)
STAMP_core__template_SimpleBitUnitVector_core__SimpleVector_int2_t_O_2_1_ = ADJUST_STAMP(815), // Stamp(203)  wtag(3)
STAMP_core__SimpleVector_int2_t_O = ADJUST_STAMP(819), // Stamp(204)  wtag(3)
STAMP_core__template_SimpleVector_core__SimpleVector_int64_t_O_long_core__AbstractSimpleVector_O_ = ADJUST_STAMP(823), // Stamp(205)  wtag(3)
STAMP_core__SimpleVector_int64_t_O = ADJUST_STAMP(827), // Stamp(206)  wtag(3)
STAMP_core__template_SimpleVector_core__SimpleVector_fixnum_O_long_core__AbstractSimpleVector_O_ = ADJUST_STAMP(831), // Stamp(207)  wtag(3)
STAMP_core__SimpleVector_fixnum_O = ADJUST_STAMP(835), // Stamp(208)  wtag(3)
STAMP_core__template_SimpleVector_core__SimpleVector_int8_t_O_signed_char_core__AbstractSimpleVector_O_ = ADJUST_STAMP(839), // Stamp(209)  wtag(3)
STAMP_core__SimpleVector_int8_t_O = ADJUST_STAMP(843), // Stamp(210)  wtag(3)
STAMP_core__template_SimpleVector_core__SimpleVector_float_O_float_core__AbstractSimpleVector_O_ = ADJUST_STAMP(847), // Stamp(211)  wtag(3)
STAMP_core__SimpleVector_float_O = ADJUST_STAMP(851), // Stamp(212)  wtag(3)
STAMP_core__template_SimpleVector_core__SimpleVector_O_gctools__smart_ptr_core__T_O__core__AbstractSimpleVector_O_ = ADJUST_STAMP(855), // Stamp(213)  wtag(3)
STAMP_core__SimpleVector_O = ADJUST_STAMP(859), // Stamp(214)  wtag(3)
STAMP_core__template_SimpleVector_core__SimpleVector_byte8_t_O_unsigned_char_core__AbstractSimpleVector_O_ = ADJUST_STAMP(863), // Stamp(215)  wtag(3)
STAMP_core__SimpleVector_byte8_t_O = ADJUST_STAMP(867), // Stamp(216)  wtag(3)
STAMP_core__template_SimpleBitUnitVector_core__SimpleVector_byte2_t_O_2_0_ = ADJUST_STAMP(871), // Stamp(217)  wtag(3)
STAMP_core__SimpleVector_byte2_t_O = ADJUST_STAMP(875), // Stamp(218)  wtag(3)
STAMP_core__template_SimpleVector_core__SimpleVector_int32_t_O_int_core__AbstractSimpleVector_O_ = ADJUST_STAMP(879), // Stamp(219)  wtag(3)
STAMP_core__SimpleVector_int32_t_O = ADJUST_STAMP(883), // Stamp(220)  wtag(3)
STAMP_core__template_SimpleBitUnitVector_core__SimpleVector_byte4_t_O_4_0_ = ADJUST_STAMP(887), // Stamp(221)  wtag(3)
STAMP_core__SimpleVector_byte4_t_O = ADJUST_STAMP(891), // Stamp(222)  wtag(3)
STAMP_core__Symbol_O = ADJUST_STAMP(895), // Stamp(223)  wtag(3)
STAMP_core__Null_O = ADJUST_STAMP(899), // Stamp(224)  wtag(3)
STAMP_core__Character_dummy_O = ADJUST_STAMP(903), // Stamp(225)  wtag(3)
STAMP_llvmo__DataLayout_O = ADJUST_STAMP(907), // Stamp(226)  wtag(3)
STAMP_core__LoadTimeValues_O = ADJUST_STAMP(911), // Stamp(227)  wtag(3)
STAMP_core__SharpEqualWrapper_O = ADJUST_STAMP(915), // Stamp(228)  wtag(3)
STAMP_llvmo__ClaspJIT_O = ADJUST_STAMP(919), // Stamp(229)  wtag(3)
STAMP_core__Readtable_O = ADJUST_STAMP(923), // Stamp(230)  wtag(3)
STAMP_core__PosixTime_O = ADJUST_STAMP(927), // Stamp(231)  wtag(3)
STAMP_core__Exposer_O = ADJUST_STAMP(931), // Stamp(232)  wtag(3)
STAMP_core__CoreExposer_O = ADJUST_STAMP(935), // Stamp(233)  wtag(3)
STAMP_asttooling__AsttoolingExposer_O = ADJUST_STAMP(939), // Stamp(234)  wtag(3)
STAMP_llvmo__StructLayout_O = ADJUST_STAMP(943), // Stamp(235)  wtag(3)
STAMP_core__PosixTimeDuration_O = ADJUST_STAMP(947), // Stamp(236)  wtag(3)
STAMP_clasp_ffi__ForeignTypeSpec_O = ADJUST_STAMP(951), // Stamp(237)  wtag(3)
STAMP_core__Instance_O = ADJUST_STAMP(953), // Stamp(238)  wtag(1)
STAMP_core__DerivableCxxObject_O = ADJUST_STAMP(956), // Stamp(239)  wtag(0)
STAMP_clbind__ClassRep_O = ADJUST_STAMP(961), // Stamp(240)  wtag(1)
STAMP_core__SmallMap_O = ADJUST_STAMP(967), // Stamp(241)  wtag(3)
STAMP_mpip__Mpi_O = ADJUST_STAMP(971), // Stamp(242)  wtag(3)
STAMP_core__ExternalObject_O = ADJUST_STAMP(975), // Stamp(243)  wtag(3)
STAMP_llvmo__Pass_O = ADJUST_STAMP(979), // Stamp(244)  wtag(3)
STAMP_llvmo__ModulePass_O = ADJUST_STAMP(983), // Stamp(245)  wtag(3)
STAMP_llvmo__ImmutablePass_O = ADJUST_STAMP(987), // Stamp(246)  wtag(3)
STAMP_llvmo__TargetLibraryInfoWrapperPass_O = ADJUST_STAMP(991), // Stamp(247)  wtag(3)
STAMP_llvmo__FunctionPass_O = ADJUST_STAMP(995), // Stamp(248)  wtag(3)
STAMP_llvmo__ExecutionEngine_O = ADJUST_STAMP(999), // Stamp(249)  wtag(3)
STAMP_llvmo__MCSubtargetInfo_O = ADJUST_STAMP(1003), // Stamp(250)  wtag(3)
STAMP_llvmo__TargetSubtargetInfo_O = ADJUST_STAMP(1007), // Stamp(251)  wtag(3)
STAMP_llvmo__Type_O = ADJUST_STAMP(1011), // Stamp(252)  wtag(3)
STAMP_llvmo__FunctionType_O = ADJUST_STAMP(1015), // Stamp(253)  wtag(3)
STAMP_llvmo__CompositeType_O = ADJUST_STAMP(1019), // Stamp(254)  wtag(3)
STAMP_llvmo__SequentialType_O = ADJUST_STAMP(1023), // Stamp(255)  wtag(3)
STAMP_llvmo__PointerType_O = ADJUST_STAMP(1027), // Stamp(256)  wtag(3)
STAMP_llvmo__ArrayType_O = ADJUST_STAMP(1031), // Stamp(257)  wtag(3)
STAMP_llvmo__VectorType_O = ADJUST_STAMP(1035), // Stamp(258)  wtag(3)
STAMP_llvmo__StructType_O = ADJUST_STAMP(1039), // Stamp(259)  wtag(3)
STAMP_llvmo__IntegerType_O = ADJUST_STAMP(1043), // Stamp(260)  wtag(3)
STAMP_llvmo__JITDylib_O = ADJUST_STAMP(1047), // Stamp(261)  wtag(3)
STAMP_llvmo__DIContext_O = ADJUST_STAMP(1051), // Stamp(262)  wtag(3)
STAMP_llvmo__TargetPassConfig_O = ADJUST_STAMP(1055), // Stamp(263)  wtag(3)
STAMP_llvmo__IRBuilderBase_O = ADJUST_STAMP(1059), // Stamp(264)  wtag(3)
STAMP_llvmo__IRBuilder_O = ADJUST_STAMP(1063), // Stamp(265)  wtag(3)
STAMP_llvmo__APFloat_O = ADJUST_STAMP(1067), // Stamp(266)  wtag(3)
STAMP_llvmo__APInt_O = ADJUST_STAMP(1071), // Stamp(267)  wtag(3)
STAMP_llvmo__DIBuilder_O = ADJUST_STAMP(1075), // Stamp(268)  wtag(3)
STAMP_llvmo__SectionedAddress_O = ADJUST_STAMP(1079), // Stamp(269)  wtag(3)
STAMP_llvmo__EngineBuilder_O = ADJUST_STAMP(1083), // Stamp(270)  wtag(3)
STAMP_llvmo__PassManagerBase_O = ADJUST_STAMP(1087), // Stamp(271)  wtag(3)
STAMP_llvmo__PassManager_O = ADJUST_STAMP(1091), // Stamp(272)  wtag(3)
STAMP_llvmo__FunctionPassManager_O = ADJUST_STAMP(1095), // Stamp(273)  wtag(3)
STAMP_llvmo__Metadata_O = ADJUST_STAMP(1099), // Stamp(274)  wtag(3)
STAMP_llvmo__MDNode_O = ADJUST_STAMP(1103), // Stamp(275)  wtag(3)
STAMP_llvmo__DINode_O = ADJUST_STAMP(1107), // Stamp(276)  wtag(3)
STAMP_llvmo__DIVariable_O = ADJUST_STAMP(1111), // Stamp(277)  wtag(3)
STAMP_llvmo__DILocalVariable_O = ADJUST_STAMP(1115), // Stamp(278)  wtag(3)
STAMP_llvmo__DIScope_O = ADJUST_STAMP(1119), // Stamp(279)  wtag(3)
STAMP_llvmo__DIFile_O = ADJUST_STAMP(1123), // Stamp(280)  wtag(3)
STAMP_llvmo__DIType_O = ADJUST_STAMP(1127), // Stamp(281)  wtag(3)
STAMP_llvmo__DICompositeType_O = ADJUST_STAMP(1131), // Stamp(282)  wtag(3)
STAMP_llvmo__DIDerivedType_O = ADJUST_STAMP(1135), // Stamp(283)  wtag(3)
STAMP_llvmo__DIBasicType_O = ADJUST_STAMP(1139), // Stamp(284)  wtag(3)
STAMP_llvmo__DISubroutineType_O = ADJUST_STAMP(1143), // Stamp(285)  wtag(3)
STAMP_llvmo__DILocalScope_O = ADJUST_STAMP(1147), // Stamp(286)  wtag(3)
STAMP_llvmo__DISubprogram_O = ADJUST_STAMP(1151), // Stamp(287)  wtag(3)
STAMP_llvmo__DILexicalBlockBase_O = ADJUST_STAMP(1155), // Stamp(288)  wtag(3)
STAMP_llvmo__DILexicalBlock_O = ADJUST_STAMP(1159), // Stamp(289)  wtag(3)
STAMP_llvmo__DICompileUnit_O = ADJUST_STAMP(1163), // Stamp(290)  wtag(3)
STAMP_llvmo__DIExpression_O = ADJUST_STAMP(1167), // Stamp(291)  wtag(3)
STAMP_llvmo__DILocation_O = ADJUST_STAMP(1171), // Stamp(292)  wtag(3)
STAMP_llvmo__ValueAsMetadata_O = ADJUST_STAMP(1175), // Stamp(293)  wtag(3)
STAMP_llvmo__MDString_O = ADJUST_STAMP(1179), // Stamp(294)  wtag(3)
STAMP_llvmo__Value_O = ADJUST_STAMP(1183), // Stamp(295)  wtag(3)
STAMP_llvmo__Argument_O = ADJUST_STAMP(1187), // Stamp(296)  wtag(3)
STAMP_llvmo__BasicBlock_O = ADJUST_STAMP(1191), // Stamp(297)  wtag(3)
STAMP_llvmo__MetadataAsValue_O = ADJUST_STAMP(1195), // Stamp(298)  wtag(3)
STAMP_llvmo__User_O = ADJUST_STAMP(1199), // Stamp(299)  wtag(3)
STAMP_llvmo__Instruction_O = ADJUST_STAMP(1203), // Stamp(300)  wtag(3)
STAMP_llvmo__UnaryInstruction_O = ADJUST_STAMP(1207), // Stamp(301)  wtag(3)
STAMP_llvmo__VAArgInst_O = ADJUST_STAMP(1211), // Stamp(302)  wtag(3)
STAMP_llvmo__LoadInst_O = ADJUST_STAMP(1215), // Stamp(303)  wtag(3)
STAMP_llvmo__AllocaInst_O = ADJUST_STAMP(1219), // Stamp(304)  wtag(3)
STAMP_llvmo__SwitchInst_O = ADJUST_STAMP(1223), // Stamp(305)  wtag(3)
STAMP_llvmo__AtomicRMWInst_O = ADJUST_STAMP(1227), // Stamp(306)  wtag(3)
STAMP_llvmo__LandingPadInst_O = ADJUST_STAMP(1231), // Stamp(307)  wtag(3)
STAMP_llvmo__StoreInst_O = ADJUST_STAMP(1235), // Stamp(308)  wtag(3)
STAMP_llvmo__UnreachableInst_O = ADJUST_STAMP(1239), // Stamp(309)  wtag(3)
STAMP_llvmo__ReturnInst_O = ADJUST_STAMP(1243), // Stamp(310)  wtag(3)
STAMP_llvmo__ResumeInst_O = ADJUST_STAMP(1247), // Stamp(311)  wtag(3)
STAMP_llvmo__AtomicCmpXchgInst_O = ADJUST_STAMP(1251), // Stamp(312)  wtag(3)
STAMP_llvmo__FenceInst_O = ADJUST_STAMP(1255), // Stamp(313)  wtag(3)
STAMP_llvmo__CallBase_O = ADJUST_STAMP(1259), // Stamp(314)  wtag(3)
STAMP_llvmo__CallInst_O = ADJUST_STAMP(1263), // Stamp(315)  wtag(3)
STAMP_llvmo__InvokeInst_O = ADJUST_STAMP(1267), // Stamp(316)  wtag(3)
STAMP_llvmo__PHINode_O = ADJUST_STAMP(1271), // Stamp(317)  wtag(3)
STAMP_llvmo__IndirectBrInst_O = ADJUST_STAMP(1275), // Stamp(318)  wtag(3)
STAMP_llvmo__BranchInst_O = ADJUST_STAMP(1279), // Stamp(319)  wtag(3)
STAMP_llvmo__Constant_O = ADJUST_STAMP(1283), // Stamp(320)  wtag(3)
STAMP_llvmo__GlobalValue_O = ADJUST_STAMP(1287), // Stamp(321)  wtag(3)
STAMP_llvmo__Function_O = ADJUST_STAMP(1291), // Stamp(322)  wtag(3)
STAMP_llvmo__GlobalVariable_O = ADJUST_STAMP(1295), // Stamp(323)  wtag(3)
STAMP_llvmo__BlockAddress_O = ADJUST_STAMP(1299), // Stamp(324)  wtag(3)
STAMP_llvmo__ConstantDataSequential_O = ADJUST_STAMP(1303), // Stamp(325)  wtag(3)
STAMP_llvmo__ConstantDataArray_O = ADJUST_STAMP(1307), // Stamp(326)  wtag(3)
STAMP_llvmo__ConstantStruct_O = ADJUST_STAMP(1311), // Stamp(327)  wtag(3)
STAMP_llvmo__ConstantInt_O = ADJUST_STAMP(1315), // Stamp(328)  wtag(3)
STAMP_llvmo__ConstantFP_O = ADJUST_STAMP(1319), // Stamp(329)  wtag(3)
STAMP_llvmo__ConstantExpr_O = ADJUST_STAMP(1323), // Stamp(330)  wtag(3)
STAMP_llvmo__ConstantPointerNull_O = ADJUST_STAMP(1327), // Stamp(331)  wtag(3)
STAMP_llvmo__UndefValue_O = ADJUST_STAMP(1331), // Stamp(332)  wtag(3)
STAMP_llvmo__ConstantArray_O = ADJUST_STAMP(1335), // Stamp(333)  wtag(3)
STAMP_llvmo__TargetMachine_O = ADJUST_STAMP(1339), // Stamp(334)  wtag(3)
STAMP_llvmo__LLVMTargetMachine_O = ADJUST_STAMP(1343), // Stamp(335)  wtag(3)
STAMP_llvmo__ThreadSafeContext_O = ADJUST_STAMP(1347), // Stamp(336)  wtag(3)
STAMP_llvmo__NamedMDNode_O = ADJUST_STAMP(1351), // Stamp(337)  wtag(3)
STAMP_llvmo__Triple_O = ADJUST_STAMP(1355), // Stamp(338)  wtag(3)
STAMP_llvmo__DWARFContext_O = ADJUST_STAMP(1359), // Stamp(339)  wtag(3)
STAMP_llvmo__TargetOptions_O = ADJUST_STAMP(1363), // Stamp(340)  wtag(3)
STAMP_llvmo__ObjectFile_O = ADJUST_STAMP(1367), // Stamp(341)  wtag(3)
STAMP_llvmo__LLVMContext_O = ADJUST_STAMP(1371), // Stamp(342)  wtag(3)
STAMP_llvmo__PassManagerBuilder_O = ADJUST_STAMP(1375), // Stamp(343)  wtag(3)
STAMP_llvmo__Module_O = ADJUST_STAMP(1379), // Stamp(344)  wtag(3)
STAMP_llvmo__Target_O = ADJUST_STAMP(1383), // Stamp(345)  wtag(3)
STAMP_llvmo__Linker_O = ADJUST_STAMP(1387), // Stamp(346)  wtag(3)
STAMP_core__Rack_O = ADJUST_STAMP(1391), // Stamp(347)  wtag(3)
STAMP_core__SmallMultimap_O = ADJUST_STAMP(1395), // Stamp(348)  wtag(3)
STAMP_core__Sigset_O = ADJUST_STAMP(1399), // Stamp(349)  wtag(3)
STAMP_core__Environment_O = ADJUST_STAMP(1403), // Stamp(350)  wtag(3)
STAMP_core__GlueEnvironment_O = ADJUST_STAMP(1407), // Stamp(351)  wtag(3)
STAMP_core__LexicalEnvironment_O = ADJUST_STAMP(1411), // Stamp(352)  wtag(3)
STAMP_core__RuntimeVisibleEnvironment_O = ADJUST_STAMP(1415), // Stamp(353)  wtag(3)
STAMP_core__FunctionValueEnvironment_O = ADJUST_STAMP(1419), // Stamp(354)  wtag(3)
STAMP_core__TagbodyEnvironment_O = ADJUST_STAMP(1423), // Stamp(355)  wtag(3)
STAMP_core__BlockEnvironment_O = ADJUST_STAMP(1427), // Stamp(356)  wtag(3)
STAMP_core__ValueEnvironment_O = ADJUST_STAMP(1431), // Stamp(357)  wtag(3)
STAMP_core__CompileTimeEnvironment_O = ADJUST_STAMP(1435), // Stamp(358)  wtag(3)
STAMP_core__CatchEnvironment_O = ADJUST_STAMP(1439), // Stamp(359)  wtag(3)
STAMP_core__MacroletEnvironment_O = ADJUST_STAMP(1443), // Stamp(360)  wtag(3)
STAMP_core__SymbolMacroletEnvironment_O = ADJUST_STAMP(1447), // Stamp(361)  wtag(3)
STAMP_core__FunctionContainerEnvironment_O = ADJUST_STAMP(1451), // Stamp(362)  wtag(3)
STAMP_core__UnwindProtectEnvironment_O = ADJUST_STAMP(1455), // Stamp(363)  wtag(3)
STAMP_core__ActivationFrame_O = ADJUST_STAMP(1459), // Stamp(364)  wtag(3)
STAMP_core__ValueFrame_O = ADJUST_STAMP(1463), // Stamp(365)  wtag(3)
STAMP_core__FunctionFrame_O = ADJUST_STAMP(1467), // Stamp(366)  wtag(3)
STAMP_core__RandomState_O = ADJUST_STAMP(1471), // Stamp(367)  wtag(3)
STAMP_core__AtomicFixnumHolder_O = ADJUST_STAMP(1475), // Stamp(368)  wtag(3)
STAMP_core__HashTableBase_O = ADJUST_STAMP(1479), // Stamp(369)  wtag(3)
STAMP_core__WeakKeyHashTable_O = ADJUST_STAMP(1483), // Stamp(370)  wtag(3)
STAMP_core__HashTable_O = ADJUST_STAMP(1487), // Stamp(371)  wtag(3)
STAMP_core__HashTableEqualp_O = ADJUST_STAMP(1491), // Stamp(372)  wtag(3)
STAMP_core__HashTableEq_O = ADJUST_STAMP(1495), // Stamp(373)  wtag(3)
STAMP_core__HashTableEql_O = ADJUST_STAMP(1499), // Stamp(374)  wtag(3)
STAMP_core__HashTableEqual_O = ADJUST_STAMP(1503), // Stamp(375)  wtag(3)
STAMP_llvmo__InsertPoint_O = ADJUST_STAMP(1507), // Stamp(376)  wtag(3)
STAMP_core__Scope_O = ADJUST_STAMP(1511), // Stamp(377)  wtag(3)
STAMP_core__FileScope_O = ADJUST_STAMP(1515), // Stamp(378)  wtag(3)
STAMP_core__Path_O = ADJUST_STAMP(1519), // Stamp(379)  wtag(3)
STAMP_core__Pathname_O = ADJUST_STAMP(1523), // Stamp(380)  wtag(3)
STAMP_core__LogicalPathname_O = ADJUST_STAMP(1527), // Stamp(381)  wtag(3)
STAMP_core__Cache_O = ADJUST_STAMP(1531), // Stamp(382)  wtag(3)
STAMP_core__Number_O = ADJUST_STAMP(1535), // Stamp(383)  wtag(3)
STAMP_core__Real_O = ADJUST_STAMP(1539), // Stamp(384)  wtag(3)
STAMP_core__Rational_O = ADJUST_STAMP(1543), // Stamp(385)  wtag(3)
STAMP_core__Ratio_O = ADJUST_STAMP(1547), // Stamp(386)  wtag(3)
STAMP_core__Integer_O = ADJUST_STAMP(1551), // Stamp(387)  wtag(3)
STAMP_core__Bignum_O = ADJUST_STAMP(1555), // Stamp(388)  wtag(3)
STAMP_core__Fixnum_dummy_O = ADJUST_STAMP(1559), // Stamp(389)  wtag(3)
STAMP_core__Float_O = ADJUST_STAMP(1563), // Stamp(390)  wtag(3)
STAMP_core__DoubleFloat_O = ADJUST_STAMP(1567), // Stamp(391)  wtag(3)
STAMP_core__SingleFloat_dummy_O = ADJUST_STAMP(1571), // Stamp(392)  wtag(3)
STAMP_core__LongFloat_O = ADJUST_STAMP(1575), // Stamp(393)  wtag(3)
STAMP_core__ShortFloat_O = ADJUST_STAMP(1579), // Stamp(394)  wtag(3)
STAMP_core__Complex_O = ADJUST_STAMP(1583), // Stamp(395)  wtag(3)
STAMP_core__Stream_O = ADJUST_STAMP(1587), // Stamp(396)  wtag(3)
STAMP_core__AnsiStream_O = ADJUST_STAMP(1591), // Stamp(397)  wtag(3)
STAMP_core__SynonymStream_O = ADJUST_STAMP(1595), // Stamp(398)  wtag(3)
STAMP_core__ConcatenatedStream_O = ADJUST_STAMP(1599), // Stamp(399)  wtag(3)
STAMP_core__FileStream_O = ADJUST_STAMP(1603), // Stamp(400)  wtag(3)
STAMP_core__IOFileStream_O = ADJUST_STAMP(1607), // Stamp(401)  wtag(3)
STAMP_core__IOStreamStream_O = ADJUST_STAMP(1611), // Stamp(402)  wtag(3)
STAMP_core__BroadcastStream_O = ADJUST_STAMP(1615), // Stamp(403)  wtag(3)
STAMP_core__StringStream_O = ADJUST_STAMP(1619), // Stamp(404)  wtag(3)
STAMP_core__StringOutputStream_O = ADJUST_STAMP(1623), // Stamp(405)  wtag(3)
STAMP_core__StringInputStream_O = ADJUST_STAMP(1627), // Stamp(406)  wtag(3)
STAMP_core__EchoStream_O = ADJUST_STAMP(1631), // Stamp(407)  wtag(3)
STAMP_core__TwoWayStream_O = ADJUST_STAMP(1635), // Stamp(408)  wtag(3)
STAMP_core__Package_O = ADJUST_STAMP(1639), // Stamp(409)  wtag(3)
STAMP_core__FileStatus_O = ADJUST_STAMP(1643), // Stamp(410)  wtag(3)
STAMP_core__InvocationHistoryFrameIterator_O = ADJUST_STAMP(1647), // Stamp(411)  wtag(3)
STAMP_core__SourcePosInfo_O = ADJUST_STAMP(1651), // Stamp(412)  wtag(3)
STAMP_core__IntArray_O = ADJUST_STAMP(1655), // Stamp(413)  wtag(3)
STAMP_core__DirectoryEntry_O = ADJUST_STAMP(1659), // Stamp(414)  wtag(3)
STAMP_core__LightUserData_O = ADJUST_STAMP(1663), // Stamp(415)  wtag(3)
STAMP_core__UserData_O = ADJUST_STAMP(1667), // Stamp(416)  wtag(3)
STAMP_core__Record_O = ADJUST_STAMP(1671), // Stamp(417)  wtag(3)
STAMP_clbind__ClassRegistry_O = ADJUST_STAMP(1675), // Stamp(418)  wtag(3)
STAMP_core__Cons_O = ADJUST_STAMP(1679), // Stamp(419)  wtag(3)
STAMP_core__Lisp_O = ADJUST_STAMP(1683), // Stamp(420)  wtag(3)
STAMP_clang__RecursiveASTVisitor_asttooling__AstVisitor_O_ = ADJUST_STAMP(1687), // Stamp(421)  wtag(3)
STAMP_asttooling__AstVisitor_O = ADJUST_STAMP(1691), // Stamp(422)  wtag(3)
STAMP_clang__tooling__ToolAction = ADJUST_STAMP(1695), // Stamp(423)  wtag(3)
STAMP_clang__tooling__FrontendActionFactory = ADJUST_STAMP(1699), // Stamp(424)  wtag(3)
STAMP_clang__ast_matchers__MatchFinder__MatchCallback = ADJUST_STAMP(1703), // Stamp(425)  wtag(3)
STAMP_gctools__GCContainer = ADJUST_STAMP(1707), // Stamp(426)  wtag(3)
STAMP_gctools__GCArray_moveable_unsigned_int_ = ADJUST_STAMP(1711), // Stamp(427)  wtag(3)
STAMP_gctools__GCVector_moveable_core__CacheRecord_ = ADJUST_STAMP(1715), // Stamp(428)  wtag(3)
STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__Cons_O__ = ADJUST_STAMP(1719), // Stamp(429)  wtag(3)
STAMP_gctools__GCVector_moveable_double_ = ADJUST_STAMP(1723), // Stamp(430)  wtag(3)
STAMP_gctools__GCArray_moveable_short_ = ADJUST_STAMP(1727), // Stamp(431)  wtag(3)
STAMP_gctools__GCVector_moveable_gctools__smart_ptr_clbind__ClassRep_O__ = ADJUST_STAMP(1731), // Stamp(432)  wtag(3)
STAMP_gctools__GCBitUnitArray_moveable_4_0_ = ADJUST_STAMP(1735), // Stamp(433)  wtag(3)
STAMP_gctools__GCVector_moveable_core__Cons_O_ = ADJUST_STAMP(1739), // Stamp(434)  wtag(3)
STAMP_gctools__GCVector_moveable_core__SymbolClassHolderPair_ = ADJUST_STAMP(1743), // Stamp(435)  wtag(3)
STAMP_gctools__GCArray_moveable_signed_char_ = ADJUST_STAMP(1747), // Stamp(436)  wtag(3)
STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__List_V__ = ADJUST_STAMP(1751), // Stamp(437)  wtag(3)
STAMP_gctools__GCVector_moveable_std__pair_gctools__smart_ptr_core__T_O__gctools__smart_ptr_core__T_O___ = ADJUST_STAMP(1755), // Stamp(438)  wtag(3)
STAMP_gctools__GCArray_moveable_unsigned_char_ = ADJUST_STAMP(1759), // Stamp(439)  wtag(3)
STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__Symbol_O__ = ADJUST_STAMP(1763), // Stamp(440)  wtag(3)
STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__T_O__ = ADJUST_STAMP(1767), // Stamp(441)  wtag(3)
STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__SingleDispatchMethod_O__ = ADJUST_STAMP(1771), // Stamp(442)  wtag(3)
STAMP_gctools__GCArray_moveable_double_ = ADJUST_STAMP(1775), // Stamp(443)  wtag(3)
STAMP_gctools__GCVector_moveable_core__OptionalArgument_ = ADJUST_STAMP(1779), // Stamp(444)  wtag(3)
STAMP_gctools__GCVector_moveable_core__KeywordArgument_ = ADJUST_STAMP(1783), // Stamp(445)  wtag(3)
STAMP_gctools__GCVector_moveable_core__RequiredArgument_ = ADJUST_STAMP(1787), // Stamp(446)  wtag(3)
STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__FileScope_O__ = ADJUST_STAMP(1791), // Stamp(447)  wtag(3)
STAMP_gctools__GCBitUnitArray_moveable_4_1_ = ADJUST_STAMP(1795), // Stamp(448)  wtag(3)
STAMP_gctools__GCVector_moveable_core__SymbolStorage_ = ADJUST_STAMP(1799), // Stamp(449)  wtag(3)
STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__Instance_O__ = ADJUST_STAMP(1803), // Stamp(450)  wtag(3)
STAMP_gctools__GCArray_moveable_unsigned_long_ = ADJUST_STAMP(1807), // Stamp(451)  wtag(3)
STAMP_gctools__GCVector_moveable_std__pair_gctools__smart_ptr_core__Symbol_O__gctools__smart_ptr_core__T_O___ = ADJUST_STAMP(1811), // Stamp(452)  wtag(3)
STAMP_gctools__GCBitUnitArray_moveable_2_0_ = ADJUST_STAMP(1815), // Stamp(453)  wtag(3)
STAMP_gctools__GCArray_moveable_int_ = ADJUST_STAMP(1819), // Stamp(454)  wtag(3)
STAMP_gctools__GCBitUnitArray_moveable_1_0_ = ADJUST_STAMP(1823), // Stamp(455)  wtag(3)
STAMP_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__ = ADJUST_STAMP(1827), // Stamp(456)  wtag(3)
STAMP_gctools__GCVector_moveable_core__AuxArgument_ = ADJUST_STAMP(1831), // Stamp(457)  wtag(3)
STAMP_gctools__GCBitUnitArray_moveable_2_1_ = ADJUST_STAMP(1835), // Stamp(458)  wtag(3)
STAMP_gctools__GCArray_moveable_long_ = ADJUST_STAMP(1839), // Stamp(459)  wtag(3)
STAMP_gctools__GCVector_moveable_int_ = ADJUST_STAMP(1843), // Stamp(460)  wtag(3)
STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__Package_O__ = ADJUST_STAMP(1847), // Stamp(461)  wtag(3)
STAMP_gctools__GCArray_moveable_float_ = ADJUST_STAMP(1851), // Stamp(462)  wtag(3)
STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__Creator_O__ = ADJUST_STAMP(1855), // Stamp(463)  wtag(3)
STAMP_gctools__GCVector_moveable_core__T_O___ = ADJUST_STAMP(1859), // Stamp(464)  wtag(3)
STAMP_gctools__GCArray_moveable_unsigned_short_ = ADJUST_STAMP(1863), // Stamp(465)  wtag(3)
STAMP_gctools__GCVector_moveable_float_ = ADJUST_STAMP(1867), // Stamp(466)  wtag(3)
STAMP_clang__FrontendAction = ADJUST_STAMP(1871), // Stamp(467)  wtag(3)
STAMP_clang__ASTFrontendAction = ADJUST_STAMP(1875), // Stamp(468)  wtag(3)
STAMP_clang__SyntaxOnlyAction = ADJUST_STAMP(1879), // Stamp(469)  wtag(3)
// Unused CORE::FORMAT-WARNING-TOO-FEW-ARGUMENTS = 804, 
// Unused CLEAVIR-IR::SLOT-WRITE-INSTRUCTION = 1322, 
// Unused CONCRETE-SYNTAX-TREE::AUX-PARAMETER-GROUP = 905, 
// Unused CORE::INDENTATION = 828, 
// Unused CLEAVIR-IR::FETCH-INSTRUCTION = 1331, 
// Unused ECLECTOR.READER::INVALID-RADIX = 998, 
// Unused CLEAVIR-IR::MULTIPLE-VALUE-CALL-INSTRUCTION = 1327, 
// Unused CLEAVIR-ENVIRONMENT::NO-FUNCTION-INFO = 1130, 
// Unused CLASP-CLEAVIR-AST::DEBUG-MESSAGE-AST = 1457, 
// Unused CLEAVIR-GENERATE-AST::LAMBDA-CALL-FIRST-SYMBOL-NOT-LAMBDA = 1197, 
// Unused CLEAVIR-GENERATE-AST::BINDING-MUST-BE-SYMBOL-OR-LIST = 1183, 
// Unused CLEAVIR-GENERATE-AST::NOT-ENOUGH-ARGUMENTS = 1172, 
// Unused CLEAVIR-AST::FIXNUM-NOT-GREATER-AST = 1066, 
// Unused CLASP-CLEAVIR-AST::THROW-AST = 1456, 
// Unused SICL-ADDITIONAL-CONDITIONS::SLOT-OPTION-NAME-MUST-BE-SYMBOL = 1427, 
// Unused CONCRETE-SYNTAX-TREE::NULL-CST-REQUIRED = 884, 
// Unused CLEAVIR-IR::FIXED-TO-MULTIPLE-INSTRUCTION = 1326, 
// Unused CLASP-CLEAVIR-AST::FOREIGN-CALL-POINTER-AST = 1462, 
// Unused CONCRETE-SYNTAX-TREE::MACRO-LAMBDA-LIST = 940, 
// Unused CLEAVIR-AST-TO-HIR::MISCONTEXT = 1339, 
// Unused CLEAVIR-IR::IMMEDIATE-INPUT = 1272, 
// Unused ECLECTOR.READER::SHARPSIGN-EQUALS-LABEL-DEFINED-MORE-THAN-ONCE = 1015, 
// Unused CLEAVIR-CODE-UTILITIES::REQUIRED-MUST-BE-VARIABLE = 1123, 
// Unused CLEAVIR-CODE-UTILITIES::ENVIRONMENT-CAN-APPEAR-AT-MOST-ONCE = 1112, 
// Unused CLASP-CLEAVIR-AST::PRECALC-VECTOR-FUNCTION-AST = 1477, 
// Unused CORE::FRAME = 730, 
// Unused CLEAVIR-KILDALL-TYPE-INFERENCE::TYPE-INFERENCE = 1351, 
// Unused CLEAVIR-AST::FIXNUM-LESS-AST = 1065, 
// Unused CLEAVIR-AST-TO-HIR::CONTEXT = 1338, 
// Unused CONCRETE-SYNTAX-TREE::DESTRUCTURING-LAMBDA-LIST = 941, 
// Unused CLASP-CLEAVIR-HIR::ARRAY-TOTAL-SIZE-INSTRUCTION = 1492, 
// Unused CLASP-CLEAVIR-HIR::SETF-FDEFINITION-INSTRUCTION = 1504, 
// Unused CLEAVIR-IR::MEMSET1-INSTRUCTION = 1363, 
// Unused SICL-ADDITIONAL-CONDITIONS::INVALID-START-INDEX = 1396, 
// Unused CORE::PPRINT-DISPATCH-ENTRY = 832, 
// Unused CLEAVIR-AST::FLOAT-ADD-AST = 1070, 
// Unused GRAY::FUNDAMENTAL-STREAM = 813, 
// Unused CLEAVIR-IR::THE-VALUES-INSTRUCTION = 1328, 
// Unused CLEAVIR-GENERATE-AST::FLET-FUNCTIONS-MUST-BE-PROPER-LIST = 1179, 
// Unused CLEAVIR-AST::FIXNUM-EQUAL-AST = 1069, 
// Unused CLASP-ANALYZER::DEPENDENT-NAME-CTYPE = 1562, 
// Unused CLEAVIR-LIVENESS::LIVE-AFTER-MIXIN = 1350, 
// Unused CLEAVIR-METER::METER = 1023, 
// Unused CLEAVIR-IR::UNSIGNED-NOT-GREATER-INSTRUCTION = 1372, 
// Unused CLASP-CLEAVIR-HIR::WRAPPED-STAMP-INSTRUCTION = 1497, 
// Unused CLEAVIR-CODE-UTILITIES::LAMBDA-LIST-KEYWORD-NOT-ALLOWED = 1101, 
// Unused CLANG-TOOL::MULTITOOL = 1526, 
// Unused ECLECTOR.READER::READ-OBJECT-TYPE-ERROR = 967, 
// Unused CLANG-TOOL::COMPILATION-TOOL-DATABASE = 1517, 
// Unused SICL-ADDITIONAL-CONDITIONS::SICL-TYPE-ERROR = 1384, 
// Unused CLASP-ANALYZER::ENUM-CTYPE = 1563, 
// Unused CLEAVIR-AST::SET-CONSTANT-SYMBOL-VALUE-AST = 1038, 
// Unused CLEAVIR-CST-TO-AST::COMPILER-MACRO-EXPANSION-ERROR = 1253, 
// Unused CONCRETE-SYNTAX-TREE::KEYWORD-ALLOW-OTHER-KEYS = 932, 
// Unused CLEAVIR-CODE-UTILITIES::ODD-NUMBER-OF-KEYWORD-ARGUMENTS = 1097, 
// Unused CLEAVIR-CST-TO-AST::SITUATIONS-MUST-BE-PROPER-LIST = 1226, 
// Unused CLASP-CLEAVIR-AST::SETF-FDEFINITION-AST = 1454, 
// Unused ACCLIMATION::TIENG-VIET = 873, 
// Unused CLEAVIR-METER::BASIC-METER = 1024, 
// Unused CLEAVIR-GENERATE-AST::FUNCTION-NAME-UNKNOWN = 1192, 
// Unused SICL-ADDITIONAL-CONDITIONS::SLOT-OPTIONS-MUST-BE-EVEN = 1426, 
// Unused CLEAVIR-AST::FIXNUM-ADD-AST = 1063, 
// Unused CLASP-ANALYZER::POINTER-CTYPE = 1573, 
// Unused CLEAVIR-ENVIRONMENT::LOCAL-MACRO-INFO = 1139, 
// Unused CLEAVIR-CST-TO-AST::INCORRECT-NUMBER-OF-ARGUMENTS = 1214, 
// Unused CLASP-CLEAVIR-AST::ARRAY-TOTAL-SIZE-AST = 1468, 
// Unused CLEAVIR-AST::SLOT-READ-AST = 1087, 
// Unused COMMON-LISP::METHOD = 736, 
// Unused COMMON-LISP::FLOATING-POINT-OVERFLOW = 791, 
// Unused CLEAVIR-IR::CAR-INSTRUCTION = 1317, 
// Unused COMMON-LISP::TYPE-ERROR = 763, 
// Unused CLEAVIR-AST::FLOAT-GREATER-AST = 1076, 
// Unused COMMON-LISP::SIMPLE-CONDITION = 751, 
// Unused CLEAVIR-IR::RAW-FLOAT = 1360, 
// Unused CONCRETE-SYNTAX-TREE::EXPLICIT-MULTI-PARAMETER-GROUP = 898, 
// Unused CLASP-CLEAVIR-AST::HEADER-STAMP-AST = 1471, 
// Unused CONCRETE-SYNTAX-TREE::DEFINE-MODIFY-MACRO-LAMBDA-LIST = 945, 
// Unused CORE::SIMPLE-STREAM-ERROR = 777, 
// Unused CORE::UNRECOGNIZED-KEYWORD-ARGUMENT-ERROR = 797, 
// Unused SICL-ADDITIONAL-CONDITIONS::UNKNOWN-CLASS-OPTION = 1441, 
// Unused ECLECTOR.READER::INVALID-DEFAULT-FLOAT-FORMAT = 999, 
// Unused EXT::STACK-OVERFLOW = 758, 
// Unused COMMON-LISP::PACKAGE-ERROR = 782, 
// Unused CC-MIR::HEADERQ-INSTRUCTION = 1513, 
// Unused CLEAVIR-CODE-UTILITIES::LAMBDA-LIST = 1127, 
// Unused CLEAVIR-IR::DYNAMIC-ALLOCATION-INSTRUCTION = 1284, 
// Unused CLEAVIR-CST-TO-AST::ODD-KEYWORD-PORTION = 1215, 
// Unused ECLECTOR.READER::READ-TIME-EVALUATION-INHIBITED = 994, 
// Unused CONCRETE-SYNTAX-TREE::PARAMETER-GROUP = 893, 
// Unused CLEAVIR-CST-TO-AST::READ-ONLY-P-MUST-BE-BOOLEAN = 1236, 
// Unused CLEAVIR-IR::ALLOCATION-MIXIN = 1266, 
// Unused CONCRETE-SYNTAX-TREE::DEFSETF-LAMBDA-LIST = 943, 
// Unused CLASP-ANALYZER::STAMP = 1543, 
// Unused SB-BSD-SOCKETS::OUT-OF-MEMORY-ERROR = 856, 
// Unused COMMON-LISP::UNBOUND-VARIABLE = 785, 
// Unused SB-BSD-SOCKETS::NETWORK-UNREACHABLE-ERROR = 861, 
// Unused CLEAVIR-LIVENESS::LIVENESS = 1346, 
// Unused CLASP-CLEAVIR-HIR::DERIVABLE-STAMP-INSTRUCTION = 1498, 
// Unused CLEAVIR-AST::MULTIPLE-VALUE-CALL-AST = 1056, 
// Unused CLEAVIR-GENERATE-AST::LAMBDA-MUST-BE-PROPER-LIST = 1180, 
// Unused COMMON-LISP::ERROR = 750, 
// Unused CONCRETE-SYNTAX-TREE::IMPLICIT-PARAMETER-GROUP = 896, 
// Unused CLEAVIR-LIVENESS::LIVENESS-MIXIN = 1348, 
// Unused CLEAVIR-GENERATE-AST::ODD-KEYWORD-PORTION-STYLE-WARNING = 1203, 
// Unused COMMON-LISP::STANDARD-METHOD = 737, 
// Unused SICL-ADDITIONAL-CONDITIONS::EMPTY-BODY = 1442, 
// Unused CLEAVIR-IR::STORE-TO-STATIC-ENVIRONMENT-INSTRUCTION = 1337, 
// Unused CLEAVIR-IR::SLOT-READ-INSTRUCTION = 1321, 
// Unused CLEAVIR-AST::AST = 1026, 
// Unused CLASP-CLEAVIR-HIR::DISPLACED-INDEX-OFFSET-INSTRUCTION = 1491, 
// Unused CLASP-ANALYZER::CCLASS = 1532, 
// Unused CONCRETE-SYNTAX-TREE::EXPLICIT-PARAMETER-GROUP = 897, 
// Unused SB-BSD-SOCKETS::NO-BUFFERS-ERROR = 855, 
// Unused CLASP-CLEAVIR::CONTINUE-HIR = 1508, 
// Unused CLEAVIR-AST::RETURN-FROM-AST = 1046, 
// Unused CLASP-CLEAVIR-HIR::HEADER-STAMP-INSTRUCTION = 1495, 
// Unused CLEAVIR-CST-TO-AST::BLOCK-NAME-MUST-BE-A-SYMBOL = 1224, 
// Unused CLASP-CLEAVIR::CLASP-ORDINARY-LAMBDA-LIST = 1452, 
// Unused CLASP-ANALYZER::ROOTCLASSALLOC = 1540, 
// Unused SB-BSD-SOCKETS::HOST-NOT-FOUND-ERROR = 865, 
// Unused CLEAVIR-ENVIRONMENT::INLINE-EXPANSION = 1161, 
// Unused CLEAVIR-CST-TO-AST::SETQ-MUST-HAVE-EVEN-NUMBER-OF-ARGUMENTS = 1238, 
// Unused CLEAVIR-AST::AREF-AST = 1089, 
// Unused SB-BSD-SOCKETS::NO-ADDRESS-ERROR = 868, 
// Unused CLASP-ANALYZER::MANAGER = 1599, 
// Unused CLASP-ANALYZER::INSTANCE-VARIABLE = 1534, 
// Unused COMMON-LISP::VARIABLE = 1546, 
// Unused ECLECTOR.READER::SINGLE-FEATURE-EXPECTED/READER = 1012, 
// Unused COMMON-LISP::CONDITION = 747, 
// Unused ECLECTOR.READER::TWO-PACKAGE-MARKERS-MUST-NOT-BE-FIRST = 989, 
// Unused COMPILER::UNDEFINED-WARNING = 836, 
// Unused CLEAVIR-IR::COERCE-INSTRUCTION = 1316, 
// Unused CLEAVIR-GENERATE-AST::COMPILATION-WARNING = 1166, 
// Unused CORE::FORMAT-ERROR = 803, 
// Unused CONCRETE-SYNTAX-TREE::WHOLE-PARAMETER-GROUP = 914, 
// Unused CLEAVIR-CODE-UTILITIES::MALFORMED-SPECIALIZED-REQUIRED = 1113, 
// Unused CLEAVIR-IR::MULTIPLE-SUCCESSORS-MIXIN = 1264, 
// Unused ECLECTOR.READER::REFERENCE-ERROR = 1014, 
// Unused ECLECTOR.READER::FEATURE-EXPRESSION-TYPE-ERROR = 1009, 
// Unused ECLECTOR.READER::NON-LIST-FOLLOWING-SHARPSIGN-S = 1004, 
// Unused CORE::ROW-MAJOR-OUT-OF-BOUNDS = 765, 
// Unused CLEAVIR-PARTIAL-INLINING::WORKLIST-ITEM = 1356, 
// Unused CLEAVIR-IR::SYMBOL-VALUE-INSTRUCTION = 1291, 
// Unused COMPILER::COMPILER-MACRO-EXPANSION-ERROR-WARNING = 841, 
// Unused CLEAVIR-IR::FIXNUM-LESS-INSTRUCTION = 1303, 
// Unused CLEAVIR-AST::FDEFINITION-AST = 1039, 
// Unused CLEAVIR-ENVIRONMENT::NO-TAG-INFO = 1132, 
// Unused COMPILER::SIMPLE-COMPILER-WARNING = 842, 
// Unused CLOS::FORWARD-REFERENCED-CLASS = 717, 
// Unused CLEAVIR-IR::DATUM = 1260, 
// Unused CLEAVIR-ENVIRONMENT::BLOCK-INFO = 1142, 
// Unused SICL-ADDITIONAL-CONDITIONS::MALFORMED-SLOT-SPEC = 1424, 
// Unused CLEAVIR-IR::MULTIPLE-TO-FIXED-INSTRUCTION = 1325, 
// Unused CLASP-ANALYZER::CLASS-LAYOUT = 1542, 
// Unused CLEAVIR-AST::ONE-VALUE-AST-MIXIN = 1029, 
// Unused CLASP-CLEAVIR-HIR::DEBUG-MESSAGE-INSTRUCTION = 1480, 
// Unused CORE::TAB = 831, 
// Unused SB-BSD-SOCKETS::PROTOCOL-NOT-SUPPORTED-ERROR = 859, 
// Unused CLEAVIR-CODE-UTILITIES::MALFORMED-DEFGENERIC-OPTIONAL = 1115, 
// Unused ECLECTOR.READER::SINGLE-FEATURE-EXPECTED = 1011, 
// Unused CONCRETE-SYNTAX-TREE::MULTI-PARAMETER-GROUP-MIXIN = 895, 
// Unused COMMON-LISP::UNDEFINED-FUNCTION = 787, 
// Unused CLOS::METAOBJECT = 709, 
// Unused CONCRETE-SYNTAX-TREE::SINGLETON-PARAMETER-GROUP-MIXIN = 894, 
// Unused CLEAVIR-LIVENESS::LIVE-BEFORE-MIXIN = 1349, 
// Unused CLEAVIR-IR::REMOVE-ACTIVATION-RECORD-INSTRUCTION = 1335, 
// Unused CLEAVIR-CST-TO-AST::FUNCTION-NAME-UNKNOWN = 1243, 
// Unused STAMP_gctools__GCVector_moveable_core__BacktraceEntry_ = 366, 
// Unused COMMON-LISP::RESTART = 746, 
// Unused COMMON-LISP::CELL-ERROR = 784, 
// Unused CLEAVIR-AST::BLOCK-AST = 1045, 
// Unused CORE::PRETTY-STREAM = 823, 
// Unused CLASP-CLEAVIR-HIR::ARRAY-RANK-INSTRUCTION = 1493, 
// Unused CLANG-TOOL::GOOD-DUMP-MATCH-CALLBACK = 1519, 
// Unused CLASP-CLEAVIR-AST::DISPLACEMENT-AST = 1466, 
// Unused CORE::FOREIGN-DATA = 729, 
// Unused CLASP-CLEAVIR-AST::DEFCALLBACK-AST = 1463, 
// Unused COMMON-LISP::FLOATING-POINT-INEXACT = 793, 
// Unused CLEAVIR-CST-TO-AST::INCORRECT-NUMBER-OF-ARGUMENTS-WARNING = 1218, 
// Unused SICL-ADDITIONAL-CONDITIONS::UNRECOGNIZED-KEYWORD-ARGUMENT = 1419, 
// Unused SICL-ADDITIONAL-CONDITIONS::UNKNOWN-EVAL-WHEN-SITUATION = 1411, 
// Unused SICL-ADDITIONAL-CONDITIONS::SUPERCLASS-LIST-MUST-BE-PROPER-LIST = 1422, 
// Unused EXT::CHARACTER-CODING-ERROR = 808, 
// Unused CLOS::INITARGS-UPDATER = 742, 
// Unused CONCRETE-SYNTAX-TREE::CCL = 891, 
// Unused COMMON-LISP::SIMPLE-ERROR = 755, 
// Unused COMMON-LISP::PARSE-ERROR = 799, 
// Unused CLEAVIR-IR::RPLACD-INSTRUCTION = 1320, 
// Unused ECLECTOR.READER::TOO-MANY-ELEMENTS = 1001, 
// Unused CLEAVIR-AST::TAGBODY-AST = 1050, 
// Unused CLASP-CLEAVIR-HIR::VECTOR-LENGTH-INSTRUCTION = 1489, 
// Unused EXT::CHARACTER-DECODING-ERROR = 810, 
// Unused CLEAVIR-GENERATE-AST::NOT-ENOUGH-ARGUMENTS-STYLE-WARNING = 1201, 
// Unused CLEAVIR-IR::CATCH-INSTRUCTION = 1285, 
// Unused CONCRETE-SYNTAX-TREE::RULE = 948, 
// Unused CLASP-CLEAVIR::KEYWORD-VA-REST = 1451, 
// Unused SB-BSD-SOCKETS::SOCKET-TYPE-NOT-SUPPORTED-ERROR = 860, 
// Unused CLASP-CLEAVIR-HIR::DISPLACEMENT-INSTRUCTION = 1490, 
// Unused CLEAVIR-GENERATE-AST::COMPILATION-PROGRAM-ERROR = 1165, 
// Unused CLEAVIR-COMPILATION-POLICY::UNKNOWN-OPTIMIZE-QUALITY = 1163, 
// Unused ECLECTOR.READER::UNQUOTE-SPLICING-AT-TOP = 974, 
// Unused CLEAVIR-IR::SET-SYMBOL-VALUE-INSTRUCTION = 1293, 
// Unused CLEAVIR-AST::CONSTANT-FDEFINITION-AST = 1040, 
// Unused CLASP-ANALYZER::CTYPE = 1555, 
// Unused CLOS::STANDARD-DIRECT-SLOT-DEFINITION = 707, 
// Unused CLEAVIR-ENVIRONMENT::BLOCK = 1151, 
// Unused CLASP-ANALYZER::SIMPLE-CTYPE = 1557, 
// Unused CLEAVIR-IR::ENTER-INSTRUCTION = 1267, 
// Unused SICL-ADDITIONAL-CONDITIONS::FORM-MUST-BE-PROPER-LIST = 1402, 
// Unused CLEAVIR-ENVIRONMENT::NO-BLOCK-INFO = 1131, 
// Unused CLEAVIR-CODE-UTILITIES::WHOLE-MUST-BE-FOLLOWED-BY-VARIABLE = 1110, 
// Unused CLEAVIR-IR::FLOAT-SUB-INSTRUCTION = 1307, 
// Unused SICL-ADDITIONAL-CONDITIONS::MALFORMED-SLOTS-LIST = 1423, 
// Unused ECLECTOR.READER::INVALID-CONTEXT-FOR-BACKQUOTE = 969, 
// Unused CLASP-ANALYZER::POD-OFFSET = 1590, 
// Unused SICL-ADDITIONAL-CONDITIONS::FORM-TOO-LONG = 1410, 
// Unused ACCLIMATION::VIETNAMESE = 877, 
// Unused SB-BSD-SOCKETS::ADDRESS-IN-USE-ERROR = 849, 
// Unused CONCRETE-SYNTAX-TREE::KEYWORD-BODY = 930, 
// Unused CLEAVIR-IR::FIXNUM-SUB-INSTRUCTION = 1302, 
// Unused CLEAVIR-IR::FUNCALL-NO-RETURN-INSTRUCTION = 1279, 
// Unused CLASP-CLEAVIR-AST::BIND-VA-LIST-AST = 1479, 
// Unused CLASP-CLEAVIR-AST::ARRAY-RANK-AST = 1469, 
// Unused STAMP_gctools__GCBitUnitArray_moveable_4__false_ = 355, 
// Unused CLEAVIR-IR::ENCLOSE-INSTRUCTION = 1268, 
// Unused COMMON-LISP::UNBOUND-SLOT = 786, 
// Unused CLEAVIR-ENVIRONMENT::FUNCTION-DYNAMIC-EXTENT = 1158, 
// Unused CORE::SIMPLE-PARSE-ERROR = 800, 
// Unused ECLECTOR.READER::NO-SLOT-VALUE-FOUND = 1008, 
// Unused CLEAVIR-IR::SIGNED-SUB-INSTRUCTION = 1366, 
// Unused CLASP-ANALYZER::ALLOC = 1536, 
// Unused ECLECTOR.READER::END-OF-LIST = 965, 
// Unused COMMON-LISP::SIMPLE-WARNING = 752, 
// Unused CONCRETE-SYNTAX-TREE::BOA-LAMBDA-LIST = 942, 
// Unused COMMON-LISP::FLOATING-POINT-UNDERFLOW = 792, 
// Unused CONCRETE-SYNTAX-TREE::CLIENT = 886, 
// Unused SICL-ADDITIONAL-CONDITIONS::FORM-TOO-SHORT = 1409, 
// Unused CC-MIR::SAVE-FRAME-INSTRUCTION = 1514, 
// Unused CLEAVIR-IR::RAW-INTEGER = 1359, 
// Unused CLEAVIR-GENERATE-AST::ODD-KEYWORD-PORTION-WARNING = 1202, 
// Unused CLEAVIR-CST-TO-AST::ENCAPSULATED-CONDITION = 1213, 
// Unused CLEAVIR-AST::BIND-AST = 1061, 
// Unused CLEAVIR-ENVIRONMENT::VARIABLE-TYPE = 1153, 
// Unused STATIC-GFS::CONSTRUCTOR-CELL = 743, 
// Unused CC-MIR::TYPED-LEXICAL-LOCATION = 1509, 
// Unused CLEAVIR-GENERATE-AST::NO-DEFAULT-METHOD = 1196, 
// Unused CLEAVIR-GENERATE-AST::SOURCE-LOCATION = 1204, 
// Unused ECLECTOR.CONCRETE-SYNTAX-TREE::CST-CLIENT = 1019, 
// Unused COMMON-LISP::FLOATING-POINT-INVALID-OPERATION = 794, 
// Unused CLEAVIR-IR::ASSIGNMENT-INSTRUCTION = 1277, 
// Unused CLANG-TOOL::DUMP-MATCH-CALLBACK = 1520, 
// Unused COMPILER::REDEFINED-FUNCTION-WARNING = 840, 
// Unused CLEAVIR-ENVIRONMENT::FUNCTION-TYPE = 1154, 
// Unused CLEAVIR-CODE-UTILITIES::MULTIPLE-OCCURRENCES-OF-LAMBDA-LIST-KEYWORD = 1104, 
// Unused CLASP-ANALYZER::PROJECT = 1550, 
// Unused CLASP-CLEAVIR-HIR::LOAD-VALUES-INSTRUCTION = 1483, 
// Unused ACCLIMATION::SWEDISH = 876, 
// Unused CLEAVIR-CST-TO-AST::FORM-MUST-BE-PROPER-LIST = 1225, 
// Unused COMMON-LISP::STORAGE-CONDITION = 756, 
// Unused CLASP-ANALYZER::INSTANCE-FIELD = 1533, 
// Unused SB-BSD-SOCKETS::INVALID-ARGUMENT-ERROR = 854, 
// Unused CLASP-ANALYZER::INSTANCE-ARRAY-ELEMENT = 1535, 
// Unused COMMON-LISP::READER-ERROR = 801, 
// Unused CLEAVIR-AST::FLOAT-COS-AST = 1080, 
// Unused CLEAVIR-CST-TO-AST::SETQ-CONSTANT-VARIABLE = 1240, 
// Unused COMMON-LISP::PROGRAM-ERROR = 771, 
// Unused CLEAVIR-IO::UNKNOWN-FILE-VERSION = 1022, 
// Unused CLEAVIR-ENVIRONMENT::FUNCTION = 1149, 
// Unused SICL-ADDITIONAL-CONDITIONS::ILLEGAL-SLOT-NAME = 1425, 
// Unused COMMON-LISP::VECTOR = 723, 
// Unused SICL-ADDITIONAL-CONDITIONS::AT-LEAST-ONE-LIST-REQUIRED = 1389, 
// Unused CLEAVIR-AST::EQ-AST = 1062, 
// Unused CLEAVIR-IR::BOTH-OR-NO-INDIVIDUAL-SUCCESSORS-MUST-BE-GIVEN = 1378, 
// Unused CLASP-ANALYZER::RECORD-CTYPE = 1570, 
// Unused CLEAVIR-IR::AREF-INSTRUCTION = 1323, 
// Unused CLANG-TOOL::CODE-MATCH-TIMER = 1518, 
// Unused CLEAVIR-GENERATE-AST::BODY = 1205, 
// Unused CONCRETE-SYNTAX-TREE::TARGET = 947, 
// Unused EXT::SEGMENTATION-VIOLATION = 757, 
// Unused CORE::LOGICAL-BLOCK = 824, 
// Unused CONCRETE-SYNTAX-TREE::CST = 880, 
// Unused CLEAVIR-GENERATE-AST::BINDING-MUST-HAVE-LENGTH-ONE-OR-TWO = 1184, 
// Unused SICL-ADDITIONAL-CONDITIONS::CLASS-OPTION-NAME-MUST-BE-SYMBOL = 1434, 
// Unused SB-BSD-SOCKETS::NO-RECOVERY-ERROR = 867, 
// Unused CLEAVIR-CST-TO-AST::BINDINGS-MUST-BE-PROPER-LIST = 1232, 
// Unused CLEAVIR-AST::SETQ-AST = 1047, 
// Unused CLEAVIR-IR::SIDE-EFFECT-MIXIN = 1265, 
// Unused STATIC-GFS::CELL-UPDATER = 744, 
// Unused CLEAVIR-IR::THE-INSTRUCTION = 1283, 
// Unused CLEAVIR-IR::FLOAT-SQRT-INSTRUCTION = 1315, 
// Unused STAMP_gctools__GCBitUnitArray_moveable_1__false_ = 353, 
// Unused CLASP-ANALYZER::SIMPLE-STAMP = 1544, 
// Unused CLEAVIR-IR::INSTRUCTION = 1261, 
// Unused CLEAVIR-IR::FUNCALL-INSTRUCTION = 1278, 
// Unused CLEAVIR-IR::RAW-DATUM = 1358, 
// Unused CLEAVIR-AST::PROGN-AST = 1044, 
// Unused ECLECTOR.READER::SLOT-NAME-IS-NOT-A-SYMBOL = 1007, 
// Unused CLEAVIR-IR::UNREACHABLE-INSTRUCTION = 1276, 
// Unused ACCLIMATION::LANGUAGE = 870, 
// Unused SICL-ADDITIONAL-CONDITIONS::DECLARATIONS-NOT-ALLOWED-IN-BODY = 1407, 
// Unused SICL-ADDITIONAL-CONDITIONS::MALFORMED-DEFAULT-INITARGS-OPTION = 1437, 
// Unused CLEAVIR-IR::WRITE-CELL-INSTRUCTION = 1333, 
// Unused CLOS::STANDARD-EFFECTIVE-SLOT-DEFINITION = 706, 
// Unused EXT::STORAGE-EXHAUSTED = 759, 
// Unused CLASP-CLEAVIR-HIR::BIND-VA-LIST-INSTRUCTION = 1501, 
// Unused CLEAVIR-IR::FLOAT-ADD-INSTRUCTION = 1306, 
// Unused CONCRETE-SYNTAX-TREE::CST-ERROR = 883, 
// Unused GRAY::FUNDAMENTAL-BINARY-OUTPUT-STREAM = 821, 
// Unused CLEAVIR-CODE-UTILITIES::SUSPECT-LAMBDA-LIST-KEYWORD = 1124, 
// Unused CLEAVIR-AST::SET-SYMBOL-VALUE-AST = 1037, 
// Unused CLASP-ANALYZER::PARALLEL-RESULT = 1603, 
// Unused CLEAVIR-AST::CALL-AST = 1041, 
// Unused CLEAVIR-CODE-UTILITIES::MALFORMED-AUX = 1120, 
// Unused CORE::FORMAT-WARNING-TOO-MANY-ARGUMENTS = 805, 
// Unused ECLECTOR.PARSE-RESULT::PARSE-RESULT-CLIENT = 1018, 
// Unused CORE::CXX-CLASS = 718, 
// Unused CONCRETE-SYNTAX-TREE::KEY-PARAMETER-GROUP = 902, 
// Unused CLEAVIR-IR::LEXICAL-LOCATION = 1270, 
// Unused CLEAVIR-IR::FLOAT-COS-INSTRUCTION = 1314, 
// Unused SB-BSD-SOCKETS::SOCKET-ERROR = 848, 
// Unused CONCRETE-SYNTAX-TREE::LAMBDA-LIST-TYPE = 936, 
// Unused CONCRETE-SYNTAX-TREE::SUPPLIED-P-MIXIN = 917, 
// Unused SB-BSD-SOCKETS::SOCKET = 845, 
// Unused CONCRETE-SYNTAX-TREE::KEYWORD-REST = 929, 
// Unused CLEAVIR-AST::SYMBOL-VALUE-AST = 1035, 
// Unused CLEAVIR-GENERATE-AST::TOO-MANY-ARGUMENTS-WARNING = 1198, 
// Unused CLASP-CLEAVIR-HIR::DEFCALLBACK-INSTRUCTION = 1487, 
// Unused CORE::NEWLINE = 827, 
// Unused CORE::PPRINT-DISPATCH-TABLE = 833, 
// Unused ECLECTOR.READER::SHARPSIGN-INVALID = 1013, 
// Unused CLEAVIR-ENVIRONMENT::TAG-INFO = 1143, 
// Unused ECLECTOR.READER::FEATURE-EXPRESSION-TYPE-ERROR/READER = 1010, 
// Unused CLEAVIR-AST::RPLACD-AST = 1086, 
// Unused CONCRETE-SYNTAX-TREE::ORDINARY-OPTIONAL-PARAMETER = 920, 
// Unused CONCRETE-SYNTAX-TREE::GENERIC-FUNCTION-OPTIONAL-PARAMETER-GROUP = 906, 
// Unused CLEAVIR-GENERATE-AST::BINDINGS-MUST-BE-PROPER-LIST = 1182, 
// Unused CLEAVIR-CST-TO-AST::VARIABLE-NAME-UNKNOWN = 1242, 
// Unused CLASP-ANALYZER::CONTAINER-OFFSET = 1593, 
// Unused CLEAVIR-IR::READ-CELL-INSTRUCTION = 1332, 
// Unused CLEAVIR-CODE-UTILITIES::MALFORMED-ORDINARY-KEY = 1117, 
// Unused CLASP-ANALYZER::GLOBAL-VARIABLE = 1547, 
// Unused CC-MIR::SINGLE-FLOAT-P-INSTRUCTION = 1511, 
// Unused CLEAVIR-KILDALL::ITERATE-MIXIN = 1340, 
// Unused STAMP_gctools__GCVector_moveable_core__ExceptionEntry_ = 360, 
// Unused CORE::SIMPLE-FILE-ERROR = 781, 
// Unused COMMON-LISP::STYLE-WARNING = 753, 
// Unused CONCRETE-SYNTAX-TREE::GENERIC-FUNCTION-LAMBDA-LIST = 938, 
// Unused CLEAVIR-CST-TO-AST::INVALID-EVAL-WHEN-SITUATION = 1227, 
// Unused CLEAVIR-IR::FLOAT-NOT-GREATER-INSTRUCTION = 1311, 
// Unused SICL-ADDITIONAL-CONDITIONS::DUPLICATE-CLASS-OPTION-NOT-ALLOWED = 1435, 
// Unused ECLECTOR.READER::UNQUOTE-SPLICING-IN-DOTTED-LIST = 973, 
// Unused COMMON-LISP::STANDARD-OBJECT = 708, 
// Unused CLEAVIR-CST-TO-AST::LAMBDA-MUST-BE-PROPER-LIST = 1229, 
// Unused EXT::UNIX-SIGNAL-RECEIVED = 762, 
// Unused CLEAVIR-CST-TO-AST::VARIABLE-MUST-BE-A-SYMBOL = 1235, 
// Unused SICL-ADDITIONAL-CONDITIONS::SICL-SYNTAX-ERROR = 1399, 
// Unused CONCRETE-SYNTAX-TREE::EARLEY-ITEM = 950, 
// Unused CLEAVIR-IR::FDEFINITION-INSTRUCTION = 1295, 
// Unused CLEAVIR-GENERATE-AST::SETQ-VAR-MUST-BE-SYMBOL = 1189, 
// Unused CLEAVIR-AST::TAG-AST = 1049, 
// Unused CLEAVIR-CODE-UTILITIES::FUNCTION-BODY-MUST-BE-PROPER-LIST = 1126, 
// Unused CLASP-ANALYZER::GCVECTOR-OFFSET = 1596, 
// Unused CLASP-ANALYZER::ARRAY-OFFSET = 1591, 
// Unused CLEAVIR-IR::USE-INSTRUCTION = 1298, 
// Unused CLEAVIR-IR::LOAD-FROM-STATIC-ENVIRONMENT-INSTRUCTION = 1336, 
// Unused EXT::STREAM-DECODING-ERROR = 812, 
// Unused CLEAVIR-CODE-UTILITIES::FORM-MUST-BE-PROPER-LIST = 1093, 
// Unused CONCRETE-SYNTAX-TREE::ORDINARY-OPTIONAL-PARAMETER-GROUP = 901, 
// Unused CLASP-ANALYZER::FUNCTION-PROTO-CTYPE = 1558, 
// Unused CLEAVIR-IR::FIXNUM-ADD-INSTRUCTION = 1301, 
// Unused CLANG-TOOL::COUNT-MATCH-CALLBACK = 1521, 
// Unused CONCRETE-SYNTAX-TREE::FORM-MIXIN = 916, 
// Unused CLEAVIR-BASIC-BLOCKS::BASIC-BLOCK = 1380, 
// Unused CLEAVIR-GENERATE-AST::ARGUMENT-MISMATCH-WARNING = 1169, 
// Unused CONCRETE-SYNTAX-TREE::GENERIC-FUNCTION-OPTIONAL-PARAMETER = 924, 
// Unused COMMON-LISP::SERIOUS-CONDITION = 749, 
// Unused CLEAVIR-CST-TO-AST::SPECIAL-SYMBOL-MACRO = 1241, 
// Unused CORE::CODE-BLOCK = 728, 
// Unused ACCLIMATION::JAPANESE = 878, 
// Unused ECLECTOR.READER::INCORRECT-INITIALIZATION-LENGTH = 1003, 
// Unused CLEAVIR-ENVIRONMENT::SPECIAL-VARIABLE-INFO = 1134, 
// Unused CLEAVIR-AST::LEXICAL-AST = 1034, 
// Unused CLASP-ANALYZER::POINTER-OFFSET = 1589, 
// Unused SICL-ADDITIONAL-CONDITIONS::TAGBODY-ELEMENT-MUST-BE-SYMBOL-INTEGER-OR-COMPOUND-FORM = 1415, 
// Unused SICL-ADDITIONAL-CONDITIONS::BOTH-TEST-AND-TEST-NOT-GIVEN = 1388, 
// Unused SICL-ADDITIONAL-CONDITIONS::BODY-MUST-BE-PROPER-LIST = 1404, 
// Unused CONCRETE-SYNTAX-TREE::ORDINARY-KEY-PARAMETER-GROUP = 903, 
// Unused CLEAVIR-KILDALL::INTERFUNCTION-MIXIN = 1345, 
// Unused CORE::WRONG-NUMBER-OF-ARGUMENTS = 796, 
// Unused CLEAVIR-KILDALL::ALIST-POOL-MIXIN = 1343, 
// Unused CLEAVIR-ENVIRONMENT::GLOBAL-FUNCTION-INFO = 1138, 
// Unused CLOS::EFFECTIVE-SLOT-DEFINITION = 713, 
// Unused CLEAVIR-AST::FLOAT-EQUAL-AST = 1078, 
// Unused CLASP-CLEAVIR-HIR::FOREIGN-CALL-INSTRUCTION = 1485, 
// Unused CLEAVIR-AST::COERCE-AST = 1082, 
// Unused CLASP-ANALYZER::CLASSALLOC = 1539, 
// Unused CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE = 1577, 
// Unused CLASP-CLEAVIR-HIR::VASLIST-LENGTH-INSTRUCTION = 1500, 
// Unused ECLECTOR.READTABLE::UNKNOWN-MACRO-SUB-CHARACTER = 963, 
// Unused CLEAVIR-IR::FLOAT-EQUAL-INSTRUCTION = 1312, 
// Unused CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT = 1554, 
// Unused SB-BSD-SOCKETS::TRY-AGAIN-ERROR = 866, 
// Unused SICL-ADDITIONAL-CONDITIONS::SICL-UNBOUND-VARIABLE = 1386, 
// Unused CONCRETE-SYNTAX-TREE::CONS-CST-REQUIRED = 885, 
// Unused CLASP-CLEAVIR-AST::DERIVABLE-STAMP-AST = 1474, 
// Unused CONCRETE-SYNTAX-TREE::DESTRUCTURING-REQUIRED-PARAMETER-GROUP = 908, 
// Unused CLEAVIR-AST::MULTIPLE-VALUE-SETQ-AST = 1048, 
// Unused CLASP-CLEAVIR-HIR::DEBUG-BREAK-INSTRUCTION = 1481, 
// Unused CLEAVIR-IR::BOTH-INDIVIDUAL-INPUTS-MUST-BE-GIVEN = 1376, 
// Unused CLEAVIR-ENVIRONMENT::SPECIAL-OPERATOR-INFO = 1141, 
// Unused CONCRETE-SYNTAX-TREE::DESTRUCTURING-PARAMETER = 926, 
// Unused CORE::QUEUE = 1516, 
// Unused CLEAVIR-GENERATE-AST::NOT-ENOUGH-ARGUMENTS-WARNING = 1200, 
// Unused CLEAVIR-CST-TO-AST::EVAL-ERROR = 1256, 
// Unused CLASP-ANALYZER::STATIC-LOCAL-VARIABLE = 1548, 
// Unused ACCLIMATION::CONDITION = 879, 
// Unused CLEAVIR-AST::DYNAMIC-ENVIRONMENT-OUTPUT-AST-MIXIN = 1031, 
// Unused CLEAVIR-AST::IMMEDIATE-AST = 1032, 
// Unused ALEXANDRIA.0.DEV::SIMPLE-PARSE-ERROR = 955, 
// Unused CLOS::DIRECT-SLOT-DEFINITION = 712, 
// Unused COMPILER::COMPILED-PROGRAM-ERROR = 834, 
// Unused MP::LOCK = 731, 
// Unused SB-BSD-SOCKETS::LOCAL-SOCKET = 847, 
// Unused CLANG-TOOL::WRONG-MATCHER = 1528, 
// Unused CLEAVIR-AST::DYNAMIC-ALLOCATION-AST = 1059, 
// Unused COMMON-LISP::WARNING = 748, 
// Unused CLEAVIR-IR::LOAD-TIME-VALUE-INPUT = 1273, 
// Unused CLEAVIR-AST::FLOAT-SUB-AST = 1071, 
// Unused CLASP-ANALYZER::CONSTANT-ARRAY-OFFSET = 1592, 
// Unused CLEAVIR-IR::UNSIGNED-SUB-INSTRUCTION = 1370, 
// Unused CLANG-TOOL::MATCH-INFO = 1522, 
// Unused ECLECTOR.READER::SYMBOL-NAME-MUST-NOT-END-WITH-PACKAGE-MARKER = 987, 
// Unused CLEAVIR-GENERATE-AST::FUNCTION-NAME-NAMES-LOCAL-MACRO = 1194, 
// Unused SICL-ADDITIONAL-CONDITIONS::TOO-FEW-ARGUMENTS = 1417, 
// Unused CLEAVIR-IR::PHI-INSTRUCTION = 1297, 
// Unused CONCRETE-SYNTAX-TREE::ORDINARY-REQUIRED-PARAMETER-GROUP = 899, 
// Unused CONCRETE-SYNTAX-TREE::SIMPLE-VARIABLE = 919, 
// Unused SB-BSD-SOCKETS::INTERRUPTED-ERROR = 850, 
// Unused SICL-ADDITIONAL-CONDITIONS::DECLARATION-FOLLOWS-FORM-IN-BODY = 1408, 
// Unused ECLECTOR.READER::INVALID-CONTEXT-FOR-RIGHT-PARENTHESIS = 979, 
// Unused CLEAVIR-HIR-TRANSFORMATIONS::DAG-NODE = 1353, 
// Unused MP::RWLOCK = 732, 
// Unused GRAY::FUNDAMENTAL-CHARACTER-INPUT-STREAM = 818, 
// Unused COMMON-LISP::DIVISION-BY-ZERO = 790, 
// Unused CLEAVIR-CODE-UTILITIES::LAMBDA-LIST-MUST-NOT-BE-CIRCULAR = 1099, 
// Unused CLASP-CLEAVIR-AST::ARRAY-DIMENSION-AST = 1470, 
// Unused CLASP-CLEAVIR-HIR::THROW-INSTRUCTION = 1505, 
// Unused CONCRETE-SYNTAX-TREE::STRUCTURE-MISMATCH-ERROR = 1206, 
// Unused COMPILER::COMPILER-CONDITION = 835, 
// Unused COMMON-LISP::STANDARD-GENERIC-FUNCTION = 735, 
// Unused SB-BSD-SOCKETS::NAME-SERVICE-ERROR = 862, 
// Unused CLEAVIR-ENVIRONMENT::INLINE = 1160, 
// Unused CLASP-CLEAVIR-AST::MULTIPLE-VALUE-FOREIGN-CALL-AST = 1460, 
// Unused ECLECTOR.READER::MULTIPLE-OBJECTS-FOLLOWING-CONSING-DOT = 978, 
// Unused SB-BSD-SOCKETS::INET-SOCKET = 846, 
// Unused CLOSER-MOP::STANDARD-GENERIC-FUNCTION = 957, 
// Unused CORE::ARRAY-OUT-OF-BOUNDS = 766, 
// Unused CLEAVIR-AST::RPLACA-AST = 1085, 
// Unused ECLECTOR.READER::UNINTERNED-SYMBOL-MUST-NOT-CONTAIN-PACKAGE-MARKER = 991, 
// Unused CLASP-ANALYZER::RVALUE-REFERENCE-CTYPE = 1561, 
// Unused ACCLIMATION::LOCALE = 869, 
// Unused SICL-ADDITIONAL-CONDITIONS::MULTIPLE-INITFORM-OPTIONS-NOT-PERMITTED = 1428, 
// Unused CLASP-ANALYZER::CONSTANT-ARRAY-CTYPE = 1574, 
// Unused CLASP-CLEAVIR-AST::RACK-STAMP-AST = 1472, 
// Unused CONCRETE-SYNTAX-TREE::CONS-CST = 882, 
// Unused CLEAVIR-IR::FLOAT-SIN-INSTRUCTION = 1313, 
// Unused CLEAVIR-ENVIRONMENT::NO-INFO = 1128, 
// Unused CLEAVIR-CODE-UTILITIES::LAMBDA-LIST-KEYWORD-NOT-ALLOWED-IN-DOTTED-LAMBDA-LIST = 1102, 
// Unused CLASP-CLEAVIR::CLASP-CST-CLIENT = 1515, 
// Unused SICL-ADDITIONAL-CONDITIONS::SICL-PROGRAM-STYLE-WARNING = 1401, 
// Unused SICL-ADDITIONAL-CONDITIONS::TOO-MANY-ARGUMENTS = 1418, 
// Unused ECLECTOR.READER::SYMBOL-DOES-NOT-EXIST = 982, 
// Unused CLEAVIR-ENVIRONMENT::VARIABLE-IGNORE = 1155, 
// Unused CLEAVIR-CODE-UTILITIES::REST/BODY-MUST-BE-FOLLOWED-BY-VARIABLE = 1107, 
// Unused CLASP-ANALYZER::UNCLASSIFIED-TEMPLATE-SPECIALIZATION-CTYPE = 1569, 
// Unused CLASP-ANALYZER::GCVECTOR-MOVEABLE-CTYPE = 1581, 
// Unused CLASP-ANALYZER::BITUNIT-CTYPE = 1556, 
// Unused CLEAVIR-CODE-UTILITIES::LAMBDA-LIST-MUST-BE-LIST = 1098, 
// Unused CLEAVIR-IR::SIGNED-NOT-GREATER-INSTRUCTION = 1368, 
// Unused CONCRETE-SYNTAX-TREE::KEYWORD-AUX = 933, 
// Unused CLASP-CLEAVIR-HIR::ARRAY-DIMENSION-INSTRUCTION = 1494, 
// Unused CLEAVIR-CODE-UTILITIES::TOO-MANY-ARGUMENTS = 1096, 
// Unused CLASP-ANALYZER::UNKNOWN-CTYPE = 1567, 
// Unused CLASP-CLEAVIR-HIR::RACK-STAMP-INSTRUCTION = 1496, 
// Unused CLEAVIR-GENERATE-AST::FUNCTION-ARGUMENT-MUST-BE-FUNCTION-NAME-OR-LAMBDA-EXPRESSION = 1181, 
// Unused SICL-ADDITIONAL-CONDITIONS::GO-TAG-MUST-BE-SYMBOL-OR-INTEGER = 1412, 
// Unused SICL-ADDITIONAL-CONDITIONS::SICL-CELL-ERROR = 1385, 
// Unused CLEAVIR-IR::MEMREF2-INSTRUCTION = 1362, 
// Unused GRAY::FUNDAMENTAL-INPUT-STREAM = 814, 
// Unused CLEAVIR-IR::FIXNUMP-INSTRUCTION = 1289, 
// Unused CLEAVIR-AST::THE-AST = 1052, 
// Unused CLASP-ANALYZER::TEMPLATE-TYPE-PARM-CTYPE = 1560, 
// Unused CLEAVIR-ENVIRONMENT::SYMBOL-MACRO-INFO = 1136, 
// Unused CLEAVIR-ENVIRONMENT::CONSTANT-VARIABLE-INFO = 1135, 
// Unused CLEAVIR-IR::UNSIGNED-ADD-INSTRUCTION = 1369, 
// Unused CLASP-CLEAVIR-HIR::SAVE-VALUES-INSTRUCTION = 1482, 
// Unused SICL-ADDITIONAL-CONDITIONS::DOCUMENTATION-STRING-NOT-ALLOWED-IN-BODY = 1406, 
// Unused GRAY::FUNDAMENTAL-BINARY-STREAM = 817, 
// Unused COMPILER::UNDEFINED-FUNCTION-WARNING = 838, 
// Unused GRAY::FUNDAMENTAL-CHARACTER-OUTPUT-STREAM = 819, 
// Unused CLEAVIR-IR::SET-CONSTANT-SYMBOL-VALUE-INSTRUCTION = 1294, 
// Unused CLEAVIR-GENERATE-AST::FUNCTION-NAME-NAMES-GLOBAL-MACRO = 1193, 
// Unused CLEAVIR-AST::LOAD-TIME-VALUE-AST = 1054, 
// Unused CLEAVIR-IR::INITIALIZE-CLOSURE-INSTRUCTION = 1329, 
// Unused CLEAVIR-AST::FLOAT-DIV-AST = 1073, 
// Unused CLANG-TOOL::SOURCE-LOC-MATCH-CALLBACK = 1524, 
// Unused SICL-ADDITIONAL-CONDITIONS::SETQ-VARIABLE-MUST-BE-SYMBOL = 1414, 
// Unused CLOSER-MOP::DEFMETHOD-WITHOUT-GENERIC-FUNCTION = 958, 
// Unused CONCRETE-SYNTAX-TREE::ORDINARY-KEY-PARAMETER = 921, 
// Unused CLOS::FUNCALLABLE-STANDARD-CLASS = 720, 
// Unused CLEAVIR-CST-TO-AST::RUN-TIME-PROGRAM-ERROR = 1216, 
// Unused CLEAVIR-CST-TO-AST::COMPILER-MACRO-EXPANSION-STYLE-WARNING = 1255, 
// Unused EXT::STREAM-ENCODING-ERROR = 811, 
// Unused CLEAVIR-GENERATE-AST::ARGUMENT-MISMATCH-STYLE-WARNING = 1170, 
// Unused CLEAVIR-IR::RETURN-INSTRUCTION = 1281, 
// Unused CLASP-ANALYZER::UNSUPPORTED-TYPE = 1530, 
// Unused ECLECTOR.READER::NUMERIC-PARAMETER-SUPPLIED-BUT-IGNORED = 992, 
// Unused ECLECTOR.READER::OBJECT-MUST-FOLLOW-COMMA = 972, 
// Unused CLEAVIR-COMPILATION-POLICY::BAD-OPTIMIZE-VALUE = 1162, 
// Unused CLEAVIR-AST::CAR-AST = 1083, 
// Unused CLEAVIR-CST-TO-AST::COMPILATION-PROGRAM-ERROR = 1210, 
// Unused CONCRETE-SYNTAX-TREE::PARSER = 952, 
// Unused CONCRETE-SYNTAX-TREE::PARAMETER = 915, 
// Unused CLASP-ANALYZER::PARALLEL-JOB = 1602, 
// Unused SICL-ADDITIONAL-CONDITIONS::DEPRECATED-EVAL-WHEN-SITUATION = 1444, 
// Unused CLASP-CLEAVIR-AST::NAMED-FUNCTION-AST = 1455, 
// Unused SB-BSD-SOCKETS::HOST-ENT = 844, 
// Unused GRAY::FUNDAMENTAL-OUTPUT-STREAM = 815, 
// Unused CLEAVIR-IR::FLOAT-MUL-INSTRUCTION = 1308, 
// Unused CLEAVIR-CODE-UTILITIES::ORDINARY-BODY-MUST-BE-PROPER-LIST = 1125, 
// Unused ECLECTOR.READER::SYMBOL-SYNTAX-ERROR = 984, 
// Unused CC-MIR::GENERALP-INSTRUCTION = 1512, 
// Unused EXT::BUS-ERROR = 761, 
// Unused CLOS::SLOT-DEFINITION = 710, 
// Unused CLEAVIR-CST-TO-AST::COMPILATION-WARNING = 1211, 
// Unused CLEAVIR-CST-TO-AST::IGNORED-VARIABLE-REFERENCED = 1223, 
// Unused SEQUENCE::PROTOCOL-UNIMPLEMENTED = 822, 
// Unused ECLECTOR.READER::SYMBOL-IS-NOT-EXTERNAL = 983, 
// Unused ECLECTOR.READER::SYMBOL-CAN-HAVE-AT-MOST-TWO-PACKAGE-MARKERS = 990, 
// Unused CLOS::STANDARD-ACCESSOR-METHOD = 738, 
// Unused CLASP-ANALYZER::TEMPLATE-SPECIALIZATION-CTYPE = 1568, 
// Unused CLASP-ANALYZER::GCSTRING-OFFSET = 1597, 
// Unused SICL-ADDITIONAL-CONDITIONS::MULTIPLE-DOCUMENTATION-OPTIONS-NOT-PERMITTED = 1429, 
// Unused CLASP-ANALYZER::BUILTIN-CTYPE = 1564, 
// Unused CLEAVIR-AST::FUNCTION-AST = 1042, 
// Unused CLEAVIR-CODE-UTILITIES::WHOLE-MUST-APPEAR-FIRST = 1109, 
// Unused CLEAVIR-CODE-UTILITIES::MALFORMED-LAMBDA-LIST-PATTERN = 1122, 
// Unused CLEAVIR-CODE-UTILITIES::CODE-CONDITION = 1092, 
// Unused CLASP-CLEAVIR::CLASP-GLOBAL-ENVIRONMENT = 1448, 
// Unused CLEAVIR-IR::SIGNED-LESS-INSTRUCTION = 1367, 
// Unused CLEAVIR-AST::FIXNUM-SUB-AST = 1064, 
// Unused CLASP-ANALYZER::TAGGED-POINTER-OFFSET = 1588, 
// Unused ACCLIMATION::SVENSKA = 871, 
// Unused CLASP-ANALYZER::LOCAL-VARIABLE = 1549, 
// Unused COMMON-LISP::STRUCTURE-OBJECT = 741, 
// Unused CLASP-ANALYZER::NAMESPACE = 1601, 
// Unused ECLECTOR.READTABLE.SIMPLE::READTABLE = 964, 
// Unused CLEAVIR-CST-TO-AST::FUNCTION-NAME-NAMES-SPECIAL-OPERATOR = 1246, 
// Unused CONCRETE-SYNTAX-TREE::CONS-STRUCTURE-MISMATCH-ERROR = 1208, 
// Unused CLEAVIR-KILDALL::START-EVERYWHERE-MIXIN = 1341, 
// Unused ECLECTOR.READER::INVALID-CONSTITUENT-CHARACTER = 985, 
// Unused ECLECTOR.READER::PACKAGE-DOES-NOT-EXIST = 980, 
// Unused COMMON-LISP::METHOD-COMBINATION = 714, 
// Unused CLEAVIR-CST-TO-AST::ODD-KEYWORD-PORTION-STYLE-WARNING = 1221, 
// Unused CLEAVIR-GENERATE-AST::VARIABLE-NAME-UNKNOWN = 1191, 
// Unused CLEAVIR-AST::FLOAT-SIN-AST = 1079, 
// Unused ECLECTOR.READTABLE::CHAR-MUST-BE-A-DISPATCHING-CHARACTER = 962, 
// Unused CLEAVIR-CST-TO-AST::FUNCTION-NAME-NAMES-LOCAL-MACRO = 1245, 
// Unused CLEAVIR-AST::FLOAT-NOT-GREATER-AST = 1075, 
// Unused CLASP-ANALYZER::CONTAINERALLOC = 1541, 
// Unused CLEAVIR-ENVIRONMENT::FUNCTION-IGNORE = 1156, 
// Unused ECLECTOR.READER::NUMERIC-PARAMETER-NOT-SUPPLIED-BUT-REQUIRED = 993, 
// Unused SICL-ADDITIONAL-CONDITIONS::WARN-BOTH-TEST-AND-TEST-NOT-GIVEN = 1392, 
// Unused CONCRETE-SYNTAX-TREE::ORDINARY-LAMBDA-LIST = 937, 
// Unused CLEAVIR-IR::SIGNED-ADD-INSTRUCTION = 1365, 
// Unused CLASP-ANALYZER::INCOMPLETE-ARRAY-CTYPE = 1575, 
// Unused CORE::CLOSED-STREAM = 778, 
// Unused CLEAVIR-IR::OUTPUT-MUST-BE-GIVEN = 1375, 
// Unused ACCLIMATION::FRENCH = 875, 
// Unused CLASP-CLEAVIR-AST::VECTOR-LENGTH-AST = 1465, 
// Unused ECLECTOR.READER::STRUCTURE-TYPE-NAME-IS-NOT-A-SYMBOL = 1006, 
// Unused CLEAVIR-ENVIRONMENT::GLOBAL-MACRO-INFO = 1140, 
// Unused SICL-ADDITIONAL-CONDITIONS::SLOT-DOCUMENTATION-OPTION-MUST-BE-STRING = 1432, 
// Unused CLEAVIR-IR::UNBOX-INSTRUCTION = 1300, 
// Unused CLEAVIR-CST-TO-AST::MACROEXPANSION-STYLE-WARNING = 1252, 
// Unused CONCRETE-SYNTAX-TREE::SPECIALIZED-REQUIRED-PARAMETER = 925, 
// Unused CLEAVIR-PARTIAL-INLINING::BINDING-ASSIGNMENT-INSTRUCTION = 1357, 
// Unused CLEAVIR-CST-TO-AST::FUNCTION-NAME-MUST-BE-PROPER-FUNCTION-NAME = 1231, 
// Unused INTERPRET-AST::CANNOT-INTERPRET = 1507, 
// Unused CLEAVIR-AST::ASET-AST = 1090, 
// Unused CLASP-CLEAVIR::FUNCTION-INFO = 1506, 
// Unused STAMP_gctools__GCBitUnitArray_moveable_2__false_ = 354, 
// Unused CLASP-ANALYZER::GCARRAY-OFFSET = 1594, 
// Unused COMMON-LISP::CONTROL-ERROR = 773, 
// Unused CLEAVIR-LIVENESS::LIVENESS-TRAVERSE = 1347, 
// Unused SICL-ADDITIONAL-CONDITIONS::MULTIPLE-ALLOCATION-OPTIONS-NOT-PERMITTED = 1430, 
// Unused CLASP-ANALYZER::CXXRECORD-CTYPE = 1576, 
// Unused CLASP-ANALYZER::GCARRAY-MOVEABLE-CTYPE = 1582, 
// Unused SICL-ADDITIONAL-CONDITIONS::NUMERIC-CATCH-TAG = 1443, 
// Unused CLEAVIR-CST-TO-AST::NO-DEFAULT-METHOD = 1247, 
// Unused CONCRETE-SYNTAX-TREE::ECL = 890, 
// Unused CORE::SEQUENCE-OUT-OF-BOUNDS = 767, 
// Unused CLEAVIR-GENERATE-AST::INVALID-EVAL-WHEN-SITUATION = 1178, 
// Unused COMMON-LISP::PRINT-NOT-READABLE = 798, 
// Unused CONCRETE-SYNTAX-TREE::NULL-STRUCTURE-MISMATCH-ERROR = 1207, 
// Unused CLEAVIR-AST::UNREACHABLE-AST = 1060, 
// Unused CLASP-CLEAVIR::ABI-X86-64 = 1449, 
// Unused CLOS::SPECIALIZER = 715, 
// Unused CLEAVIR-IR::RPLACA-INSTRUCTION = 1319, 
// Unused CLEAVIR-GENERATE-AST::VARIABLE-MUST-BE-A-SYMBOL = 1185, 
// Unused SICL-ADDITIONAL-CONDITIONS::LOAD-TIME-VALUE-READ-ONLY-P-NOT-EVALUATED = 1445, 
// Unused CONCRETE-SYNTAX-TREE::KEYWORD-MIXIN = 918, 
// Unused COMMON-LISP::SIMPLE-TYPE-ERROR = 768, 
// Unused CLEAVIR-IO::FILE-DOES-NOT-EXIST = 1021, 
// Unused SB-BSD-SOCKETS::OPERATION-TIMEOUT-ERROR = 853, 
// Unused SB-BSD-SOCKETS::OPERATION-NOT-PERMITTED-ERROR = 858, 
// Unused CLEAVIR-GENERATE-AST::ARGUMENT-MISMATCH = 1168, 
// Unused CLOS::STANDARD-WRITER-METHOD = 740, 
// Unused CLANG-TOOL::NO-NODE-FOR-TAG-ERROR = 1525, 
// Unused ECLECTOR.READER::TOO-MANY-DOTS = 975, 
// Unused CONCRETE-SYNTAX-TREE::KEYWORD-OPTIONAL = 928, 
// Unused CLEAVIR-HIR-TRANSFORMATIONS::INTERIOR-NODE = 1355, 
// Unused CLEAVIR-IR::ONE-SUCCESSOR-MIXIN = 1263, 
// Unused CLEAVIR-GENERATE-AST::SITUATIONS-MUST-BE-PROPER-LIST = 1177, 
// Unused CLEAVIR-GENERATE-AST::READ-ONLY-P-MUST-BE-BOOLEAN = 1186, 
// Unused COMMON-LISP::STREAM-ERROR = 776, 
// Unused EXT::ASSERT-ERROR = 807, 
// Unused SICL-ADDITIONAL-CONDITIONS::INVALID-END-INDEX = 1397, 
// Unused SB-BSD-SOCKETS::CONNECTION-REFUSED-ERROR = 852, 
// Unused CLASP-CLEAVIR::CLASP = 1446, 
// Unused CONCRETE-SYNTAX-TREE::DEFTYPE-LAMBDA-LIST = 944, 
// Unused CLASP-CLEAVIR-HIR::NAMED-ENTER-INSTRUCTION = 1502, 
// Unused CORE::CASE-FAILURE = 769, 
// Unused CLEAVIR-IR::BOX-INSTRUCTION = 1299, 
// Unused CORE::SECTION-START = 826, 
// Unused CONCRETE-SYNTAX-TREE::GRAMMAR = 949, 
// Unused CLEAVIR-CODE-UTILITIES::BOTH-REST-AND-BODY-OCCUR-IN-LAMBDA-LIST = 1106, 
// Unused CLEAVIR-GENERATE-AST::COMPILATION-STYLE-WARNING = 1167, 
// Unused SICL-ADDITIONAL-CONDITIONS::LIST-AS-SEQUENCE-MUST-BE-PROPER = 1393, 
// Unused SICL-ADDITIONAL-CONDITIONS::DEFAULT-INITARGS-OPTION-ONCE = 1438, 
// Unused CORE::SIMPLE-READER-ERROR = 802, 
// Unused CLEAVIR-IR::SUCCESSOR1-MUST-BE-GIVEN = 1379, 
// Unused CLEAVIR-IR::CHARACTERP-INSTRUCTION = 1290, 
// Unused ECLECTOR.READER::TWO-PACKAGE-MARKERS-MUST-BE-ADJACENT = 988, 
// Unused COMMON-LISP::FILE-ERROR = 780, 
// Unused CLEAVIR-ENVIRONMENT::LEXICAL-VARIABLE = 1146, 
// Unused CLEAVIR-CST-TO-AST::VALUES-&REST-SYNTAX = 1222, 
// Unused CLEAVIR-CODE-UTILITIES::ATOMIC-LAMBDA-LIST-TAIL-MUST-BE-VARIABLE = 1108, 
// Unused CONCRETE-SYNTAX-TREE::GENERIC-FUNCTION-KEY-PARAMETER = 922, 
// Unused CONCRETE-SYNTAX-TREE::CLASP = 889, 
// Unused CLEAVIR-AST::IF-AST = 1055, 
// Unused CORE::SIMPLE-PROGRAM-ERROR = 772, 
// Unused CLEAVIR-ENVIRONMENT::VARIABLE-DYNAMIC-EXTENT = 1157, 
// Unused CLASP-ANALYZER::OFFSET = 1585, 
// Unused SICL-ADDITIONAL-CONDITIONS::ODD-NUMBER-OF-KEYWORD-ARGUMENTS = 1421, 
// Unused ECLECTOR.READER::NO-STRUCTURE-TYPE-NAME-FOUND = 1005, 
// Unused COMMON-LISP::END-OF-FILE = 779, 
// Unused CLASP-CLEAVIR-HIR::FOREIGN-CALL-POINTER-INSTRUCTION = 1486, 
// Unused CONCRETE-SYNTAX-TREE::KEYWORD-KEY = 931, 
// Unused COMPILER::UNDEFINED-TYPE-WARNING = 839, 
// Unused CLEAVIR-IR::EQ-INSTRUCTION = 1287, 
// Unused CLEAVIR-CST-TO-AST::BODY = 1259, 
// Unused CLANG-TOOL::SINGLE-TOOL = 1527, 
// Unused CORE::BLOCK-START = 829, 
// Unused CLEAVIR-ENVIRONMENT::TAG = 1152, 
// Unused SB-BSD-SOCKETS::OPERATION-NOT-SUPPORTED-ERROR = 857, 
// Unused CLEAVIR-IR::CDR-INSTRUCTION = 1318, 
// Unused CLASP-ANALYZER::SMART-PTR-OFFSET = 1587, 
// Unused CLEAVIR-IR::TYPEQ-INSTRUCTION = 1282, 
// Unused COMPILER::SIMPLE-COMPILER-STYLE-WARNING = 843, 
// Unused CLEAVIR-ENVIRONMENT::LEXICAL-VARIABLE-INFO = 1133, 
// Unused CLASP-CLEAVIR::CLASP-64BIT = 1447, 
// Unused SICL-ADDITIONAL-CONDITIONS::LISTS-MUST-HAVE-THE-SAME-LENGTH = 1391, 
// Unused CLEAVIR-IR::VALUES-LOCATION = 1271, 
// Unused SICL-ADDITIONAL-CONDITIONS::SICL-PROGRAM-ERROR = 1398, 
// Unused CLOS::STANDARD-SLOT-DEFINITION = 711, 
// Unused CLEAVIR-IR::EQUAL-INSTRUCTION = 1373, 
// Unused STAMP_gctools__GCVector_moveable_core__DynamicBinding_ = 359, 
// Unused SICL-ADDITIONAL-CONDITIONS::CLASS-OPTION-MUST-BE-NON-EMPTY-LIST = 1433, 
// Unused SICL-ADDITIONAL-CONDITIONS::AT-LEAST-ONE-ARGUMENT-REQUIRED = 1390, 
// Unused CLEAVIR-CODE-UTILITIES::MALFORMED-DEFGENERIC-KEY = 1118, 
// Unused CLASP-CLEAVIR-AST::DEBUG-BREAK-AST = 1458, 
// Unused CLASP-ANALYZER::SMART-PTR-CTYPE = 1571, 
// Unused CONCRETE-SYNTAX-TREE::EARLEY-STATE = 951, 
// Unused CLEAVIR-AST::FLOAT-NOT-LESS-AST = 1077, 
// Unused ECLECTOR.READER::READ-TIME-EVALUATION-ERROR = 995, 
// Unused CLASP-CLEAVIR-AST::BASE-FOREIGN-CALL-AST = 1459, 
// Unused CLEAVIR-AST::SLOT-WRITE-AST = 1088, 
// Unused CC-MIR::CHARACTERP-INSTRUCTION = 1510, 
// Unused CLEAVIR-IR::FLOAT-DIV-INSTRUCTION = 1309, 
// Unused ECLECTOR.READER::END-OF-FILE = 966, 
// Unused CLEAVIR-GENERATE-AST::SETQ-CONSTANT-VARIABLE = 1190, 
// Unused CLEAVIR-CODE-UTILITIES::MALFORMED-ORDINARY-OPTIONAL = 1114, 
// Unused CLASP-ANALYZER::TAGGED-POINTER-CTYPE = 1572, 
// Unused CLEAVIR-IR::TAILCALL-INSTRUCTION = 1280, 
// Unused CLEAVIR-IR::FIXNUM-EQUAL-INSTRUCTION = 1305, 
// Unused CLEAVIR-COMPILATION-POLICY::NO-POLICY-COMPUTER = 1164, 
// Unused SB-BSD-SOCKETS::BAD-FILE-DESCRIPTOR-ERROR = 851, 
// Unused CLEAVIR-ENVIRONMENT::MACRO = 1150, 
// Unused CLEAVIR-CODE-UTILITIES::INVALID-NUMBER-OF-ARGUMENTS = 1094, 
// Unused CLASP-ANALYZER::STAMP-VALUE-GENERATOR = 1551, 
// Unused CLASP-ANALYZER::HNODE = 1553, 
// Unused ECLECTOR.READER::OBJECT-MUST-FOLLOW-CONSING-DOT = 977, 
// Unused CLEAVIR-ENVIRONMENT::OPTIMIZE-INFO = 1144, 
// Unused CLEAVIR-CST-TO-AST::INCORRECT-NUMBER-OF-ARGUMENTS-STYLE-WARNING = 1219, 
// Unused COMMON-LISP::LIST = 722, 
// Unused CLEAVIR-CST-TO-AST::COMPILATION-STYLE-WARNING = 1212, 
// Unused CLEAVIR-ESCAPE::ESCAPE = 1352, 
// Unused CLEAVIR-KILDALL::BITSET-POOL-MIXIN = 1344, 
// Unused CLASP-CLEAVIR::CLASP-ORDINARY-REST-PARAMETER-GROUP = 1453, 
// Unused CORE::DO-NOT-FUNCALL-SPECIAL-OPERATOR = 795, 
// Unused CLEAVIR-HIR-TRANSFORMATIONS::FUNCTION-DAG = 1354, 
// Unused CLEAVIR-AST::FIXNUM-GREATER-AST = 1067, 
// Unused CLASP-ANALYZER::TEMPLATED-STAMP = 1545, 
// Unused CLEAVIR-CST-TO-AST::FUNCTION-ARGUMENT-MUST-BE-FUNCTION-NAME-OR-LAMBDA-EXPRESSION = 1230, 
// Unused CLEAVIR-AST::GO-AST = 1051, 
// Unused CLASP-ANALYZER::LVALUE-REFERENCE-CTYPE = 1559, 
// Unused CLASP-ANALYZER::INJECTED-CLASS-NAME-CTYPE = 1578, 
// Unused CLASP-ANALYZER::ABSTRACTALLOC = 1537, 
// Unused CLEAVIR-CST-TO-AST::BINDING-MUST-BE-SYMBOL-OR-LIST = 1233, 
// Unused CORE::SIMPLE-STYLE-WARNING = 754, 
// Unused SICL-ADDITIONAL-CONDITIONS::DOCUMENTATION-OPTION-ONCE = 1439, 
// Unused ECLECTOR.READER::BACKQUOTE-CONDITION = 968, 
// Unused CORE::SIMPLE-CONTROL-ERROR = 774, 
// Unused CONCRETE-SYNTAX-TREE::KEYWORD-ENVIRONMENT = 934, 
// Unused CLEAVIR-AST::BOOLEAN-AST-MIXIN = 1027, 
// Unused ALEXANDRIA.0.DEV::SIMPLE-READER-ERROR = 954, 
// Unused SICL-ADDITIONAL-CONDITIONS::MALFORMED-METACLASS-OPTION = 1436, 
// Unused CONCRETE-SYNTAX-TREE::SINGLETON-PARAMETER-GROUP = 909, 
// Unused CLEAVIR-CODE-UTILITIES::MALFORMED-DESTRUCTURING-KEY = 1119, 
// Unused SB-BSD-SOCKETS::NETDB-INTERNAL-ERROR = 863, 
// Unused SICL-ADDITIONAL-CONDITIONS::SEQUENCE-ERROR-MIXIN = 1394, 
// Unused CLEAVIR-CODE-UTILITIES::LAMBDA-LIST-MUST-BE-PROPER-LIST = 1100, 
// Unused CLEAVIR-AST::SIDE-EFFECT-FREE-AST-MIXIN = 1030, 
// Unused CLEAVIR-CODE-UTILITIES::INCORRECT-KEYWORD-ORDER = 1105, 
// Unused SICL-ADDITIONAL-CONDITIONS::METACLASS-OPTION-ONCE = 1440, 
// Unused SICL-ADDITIONAL-CONDITIONS::SICL-ERROR = 1383, 
// Unused CLEAVIR-ENVIRONMENT::SYMBOL-MACRO = 1148, 
// Unused COMMON-LISP::SEQUENCE = 721, 
// Unused CLEAVIR-IR::SUCCESSOR-SUCCESSORS-MUTUALLY-EXCLUSIVE = 1377, 
// Unused CLEAVIR-CST-TO-AST::MACROEXPANSION-WARNING = 1251, 
// Unused CLEAVIR-CST-TO-AST::INCORRECT-NUMBER-OF-ARGUMENTS-ERROR = 1217, 
// Unused CLEAVIR-GENERATE-AST::VALUES-&REST-SYNTAX = 1174, 
// Unused SICL-ADDITIONAL-CONDITIONS::INVALID-KEYWORD-ARGUMENT = 1420, 
// Unused CLEAVIR-ENVIRONMENT::ENTRY = 1145, 
// Unused CONCRETE-SYNTAX-TREE::SICL = 888, 
// Unused CLASP-CLEAVIR-AST::HEADER-STAMP-CASE-AST = 1464, 
// Unused SICL-ADDITIONAL-CONDITIONS::MULTIPLE-TYPE-OPTIONS-NOT-PERMITTED = 1431, 
// Unused CONCRETE-SYNTAX-TREE::ENVIRONMENT-PARAMETER-GROUP = 913, 
// Unused CLASP-ANALYZER::GCBITUNITARRAY-OFFSET = 1595, 
// Unused CONCRETE-SYNTAX-TREE::SPECIALIZED-REQUIRED-PARAMETER-GROUP = 907, 
// Unused ACCLIMATION::ENGLISH = 874, 
// Unused CORE::STD-CLASS = 719, 
// Unused CLASP-ANALYZER::ANALYSIS = 1552, 
// Unused CONCRETE-SYNTAX-TREE::AUX-PARAMETER = 923, 
// Unused CLEAVIR-GENERATE-AST::BLOCK-NAME-UNKNOWN = 1187, 
// Unused CLEAVIR-GENERATE-AST::BLOCK-NAME-MUST-BE-A-SYMBOL = 1176, 
// Unused CLOS::STANDARD-READER-METHOD = 739, 
// Unused CLEAVIR-IR::ADD-ACTIVATION-RECORD-INSTRUCTION = 1334, 
// Unused CLEAVIR-AST::FIXNUM-NOT-LESS-AST = 1068, 
// Unused EXT::SOURCE-LOCATION = 745, 
// Unused CONCRETE-SYNTAX-TREE::GENERIC-FUNCTION-KEY-PARAMETER-GROUP = 904, 
// Unused COMMON-LISP::BIT-VECTOR = 726, 
// Unused CLASP-ANALYZER::COPYABLE-OFFSET = 1586, 
// Unused ECLECTOR.READER::UNKNOWN-CHARACTER-NAME = 996, 
// Unused ECLECTOR.READTABLE::SUB-CHAR-MUST-NOT-BE-A-DECIMAL-DIGIT = 961, 
// Unused CLEAVIR-IR::ASET-INSTRUCTION = 1324, 
// Unused CLEAVIR-CST-TO-AST::ODD-KEYWORD-PORTION-WARNING = 1220, 
// Unused CLEAVIR-CST-TO-AST::BLOCK-NAME-UNKNOWN = 1237, 
// Unused CLASP-CLEAVIR-AST::VASLIST-LENGTH-AST = 1476, 
// Unused ECLECTOR.READER::DIGIT-EXPECTED = 997, 
// Unused CLASP-CLEAVIR-AST::PRECALC-VALUE-REFERENCE-AST = 1478, 
// Unused CLASP-ANALYZER::UNINTERESTING-CTYPE = 1566, 
// Unused SICL-ADDITIONAL-CONDITIONS::BLOCK-TAG-MUST-BE-SYMBOL = 1403, 
// Unused SICL-ADDITIONAL-CONDITIONS::ARGUMENT-MISMATCH = 1416, 
// Unused CLEAVIR-IR::MEMSET2-INSTRUCTION = 1364, 
// Unused CLEAVIR-GENERATE-AST::IGNORED-VARIABLE-REFERENCED = 1175, 
// Unused CLASP-ANALYZER::DEBUG-INFO = 1531, 
// Unused SICL-ADDITIONAL-CONDITIONS::SETQ-MUST-HAVE-EVEN-NUMBER-ARGUMENTS = 1413, 
// Unused CLEAVIR-AST::NO-VALUE-AST-MIXIN = 1028, 
// Unused CLASP-CLEAVIR-AST::WRAPPED-STAMP-AST = 1473, 
// Unused ECLECTOR.READER::SYMBOL-NAME-MUST-NOT-BE-ONLY-PACKAGE-MARKERS = 986, 
// Unused CLEAVIR-IR::CONSTANT-SYMBOL-VALUE-INSTRUCTION = 1292, 
// Unused CLEAVIR-CST-TO-AST::MACROEXPANSION-ERROR = 1250, 
// Unused SICL-ADDITIONAL-CONDITIONS::MULTIPLE-DOCUMENTATION-STRINGS-IN-BODY = 1405, 
// Unused CLEAVIR-CST-TO-AST::EVAL-WARNING = 1257, 
// Unused CLASP-ANALYZER::GCBITUNITARRAY-MOVEABLE-CTYPE = 1583, 
// Unused CLEAVIR-GENERATE-AST::SETQ-MUST-HAVE-EVEN-NUMBER-OF-ARGUMENTS = 1188, 
// Unused CLEAVIR-AST::MULTIPLE-VALUE-PROG1-AST = 1058, 
// Unused CLEAVIR-CST-TO-AST::MALFORMED-LAMBDA-LIST = 1249, 
// Unused ECLECTOR.BASE::STREAM-POSITION-READER-ERROR = 959, 
// Unused CLOS::EQL-SPECIALIZER = 716, 
// Unused CLEAVIR-IR::NOP-INSTRUCTION = 1275, 
// Unused CLASP-ANALYZER::GCSTRING-MOVEABLE-CTYPE = 1584, 
// Unused CLEAVIR-IR::FIXNUM-NOT-GREATER-INSTRUCTION = 1304, 
// Unused CLEAVIR-GENERATE-AST::TOO-MANY-ARGUMENTS = 1171, 
// Unused CLEAVIR-GENERATE-AST::FUNCTION-NAME-NAMES-SPECIAL-OPERATOR = 1195, 
// Unused CLASP-ANALYZER::DESTINATION = 1600, 
// Unused CLEAVIR-METER::SIZE-METER = 1025, 
// Unused CONCRETE-SYNTAX-TREE::KEYWORD-WHOLE = 935, 
// Unused SICL-ADDITIONAL-CONDITIONS::SICL-UNDEFINED-FUNCTION = 1387, 
// Unused CLASP-ANALYZER::CONTAINER = 1580, 
// Unused CLEAVIR-IR::MEMREF1-INSTRUCTION = 1361, 
// Unused CLEAVIR-ENVIRONMENT::OPTIMIZE = 1159, 
// Unused CLEAVIR-CST-TO-AST::COMPILATION-CONDITION = 1209, 
// Unused CLEAVIR-AST::SCOPE-AST = 1091, 
// Unused CLANG-TOOL::CODE-MATCH-CALLBACK = 1523, 
// Unused ECLECTOR.READER::SYMBOL-ACCESS-ERROR = 981, 
// Unused CONCRETE-SYNTAX-TREE::ATOM-CST = 881, 
// Unused GRAY::FUNDAMENTAL-CHARACTER-STREAM = 816, 
// Unused CONCRETE-SYNTAX-TREE::OPTIONAL-PARAMETER-GROUP = 900, 
// Unused CLEAVIR-IR::CONSTANT-INPUT = 1269, 
// Unused ALEXANDRIA.0.DEV::SIMPLE-PROGRAM-ERROR = 956, 
// Unused CONCRETE-SYNTAX-TREE::DESTRUCTURING-REST-PARAMETER-GROUP = 912, 
// Unused COMPILER::UNDEFINED-VARIABLE-WARNING = 837, 
// Unused CLASP-CLEAVIR-HIR::VASLIST-POP-INSTRUCTION = 1499, 
// Unused ECLECTOR.READER::ARRAY-INITIALIZATION-ERROR = 1000, 
// Unused CLEAVIR-IR::UNWIND-INSTRUCTION = 1286, 
// Unused COMMON-LISP::STRING = 724, 
// Unused CLEAVIR-AST::FLOAT-LESS-AST = 1074, 
// Unused CLEAVIR-IR::CONSP-INSTRUCTION = 1288, 
// Unused CONCRETE-SYNTAX-TREE::SBCL = 887, 
// Unused CLEAVIR-KILDALL::START-ENTER-MIXIN = 1342, 
// Unused EXT::SEQUENCE-STREAM = 727, 
// Unused SB-BSD-SOCKETS::NETDB-SUCCESS-ERROR = 864, 
// Unused CORE::SIMPLE-PACKAGE-ERROR = 783, 
// Unused CLEAVIR-IR::FLOAT-LESS-INSTRUCTION = 1310, 
// Unused ECLECTOR.READTABLE::DISPATCH-MACRO-CHARACTER-ERROR = 960, 
// Unused CLEAVIR-ENVIRONMENT::NO-VARIABLE-INFO = 1129, 
// Unused CLEAVIR-CST-TO-AST::EVAL-STYLE-WARNING = 1258, 
// Unused CLEAVIR-CODE-UTILITIES::LAMBDA-LIST-TOO-MANY-PARAMETERS = 1103, 
// Unused CLEAVIR-CODE-UTILITIES::ENVIRONMENT-MUST-BE-FOLLOWED-BY-VARIABLE = 1111, 
// Unused CLASP-ANALYZER::LISPALLOC = 1538, 
// Unused CLANG-TOOL::NODE-MATCHER-AMBIGUOUS-ERROR = 1529, 
// Unused CLEAVIR-AST::FLOAT-MUL-AST = 1072, 
// Unused CLEAVIR-IR::INPUT-INPUTS-MUTUALLY-EXCLUSIVE = 1374, 
// Unused CLOS::FUNCALLABLE-STANDARD-OBJECT = 733, 
// Unused EXT::CHARACTER-ENCODING-ERROR = 809, 
// Unused COMMON-LISP::ARITHMETIC-ERROR = 789, 
// Unused CLEAVIR-CST-TO-AST::COMPILER-MACRO-EXPANSION-WARNING = 1254, 
// Unused CLASP-ANALYZER::SPECIES = 1598, 
// Unused SICL-ADDITIONAL-CONDITIONS::SICL-PROGRAM-WARNING = 1400, 
// Unused CLEAVIR-ENVIRONMENT::LOCAL-FUNCTION-INFO = 1137, 
// Unused ACCLIMATION::DEUTSCH = 872, 
// Unused CLEAVIR-CST-TO-AST::SETQ-VAR-MUST-BE-SYMBOL = 1239, 
// Unused COMMON-LISP::BASE-STRING = 725, 
// Unused CLASP-CLEAVIR-HIR::MULTIPLE-VALUE-FOREIGN-CALL-INSTRUCTION = 1484, 
// Unused CLEAVIR-CODE-UTILITIES::MALFORMED-DESTRUCTURING-OPTIONAL = 1116, 
// Unused CORE::QUEUED-OP = 825, 
// Unused CLEAVIR-CODE-UTILITIES::TOO-FEW-ARGUMENTS = 1095, 
// Unused CLEAVIR-AST::TOP-LEVEL-FUNCTION-AST = 1043, 
// Unused CLEAVIR-CST-TO-AST::LOCAL-FUNCTION-DEFINITION-MUST-BE-PROPER-LIST = 1228, 
// Unused EXT::UNDEFINED-CLASS = 788, 
// Unused CLEAVIR-AST::CDR-AST = 1084, 
// Unused CLASP-ANALYZER::POINTER-TO-RECORD-CTYPE = 1579, 
// Unused ECLECTOR.READER::COMMA-NOT-INSIDE-BACKQUOTE = 971, 
// Unused CORE::BLOCK-END = 830, 
// Unused ECLECTOR.READER::SHARPSIGN-SHARPSIGN-UNDEFINED-LABEL = 1017, 
// Unused ALEXANDRIA.0.DEV::SIMPLE-STYLE-WARNING = 953, 
// Unused CONCRETE-SYNTAX-TREE::SPECIALIZED-LAMBDA-LIST = 939, 
// Unused SICL-ADDITIONAL-CONDITIONS::INVALID-BOUDING-INDEXES = 1395, 
// Unused EXT::INTERACTIVE-INTERRUPT = 806, 
// Unused ECLECTOR.READER::NO-ELEMENTS-FOUND = 1002, 
// Unused CONCRETE-SYNTAX-TREE::LAMBDA-LIST-KEYWORD = 927, 
// Unused CORE::OUT-OF-BOUNDS = 764, 
// Unused SICL-ADDITIONAL-CONDITIONS::SICL-WARNING = 1381, 
// Unused CONCRETE-SYNTAX-TREE::DEFINE-METHOD-COMBINATION-LAMBDA-LIST = 946, 
// Unused CLOS::NO-APPLICABLE-METHOD-ERROR = 770, 
// Unused CLEAVIR-CST-TO-AST::BINDING-MUST-HAVE-LENGTH-ONE-OR-TWO = 1234, 
// Unused CLEAVIR-AST::CONSTANT-AST = 1033, 
// Unused CLEAVIR-AST::FLOAT-SQRT-AST = 1081, 
// Unused EXT::ILLEGAL-INSTRUCTION = 760, 
// Unused CORE::OUT-OF-EXTENT-UNWIND = 775, 
// Unused CLEAVIR-GENERATE-AST::ODD-KEYWORD-PORTION = 1173, 
// Unused CONCRETE-SYNTAX-TREE::GRAMMAR-SYMBOL = 892, 
// Unused CLASP-CLEAVIR-HIR::HEADER-STAMP-CASE-INSTRUCTION = 1488, 
// Unused CLASP-CLEAVIR-AST::FOREIGN-CALL-AST = 1461, 
// Unused CLEAVIR-IR::UNSIGNED-LESS-INSTRUCTION = 1371, 
// Unused CLEAVIR-AST::CONSTANT-SYMBOL-VALUE-AST = 1036, 
// Unused CLASP-CLEAVIR::ABI-X86-32 = 1450, 
// Unused COMMON-LISP::GENERIC-FUNCTION = 734, 
// Unused CONCRETE-SYNTAX-TREE::ORDINARY-REST-PARAMETER-GROUP = 911, 
// Unused CLEAVIR-GENERATE-AST::TOO-MANY-ARGUMENTS-STYLE-WARNING = 1199, 
// Unused CONCRETE-SYNTAX-TREE::REST-PARAMETER-GROUP = 910, 
// Unused CLEAVIR-IR::CONSTANT-FDEFINITION-INSTRUCTION = 1296, 
// Unused CLEAVIR-IR::NO-SUCCESSORS-MIXIN = 1262, 
// Unused SICL-ADDITIONAL-CONDITIONS::SICL-STYLE-WARNING = 1382, 
// Unused CLEAVIR-ENVIRONMENT::SPECIAL-VARIABLE = 1147, 
// Unused CLEAVIR-AST::VALUES-AST = 1057, 
// Unused CLEAVIR-AST::TYPEQ-AST = 1053, 
// Unused CLEAVIR-IR::CREATE-CELL-INSTRUCTION = 1330, 
// Unused GRAY::FUNDAMENTAL-BINARY-INPUT-STREAM = 820, 
// Unused CLEAVIR-CODE-UTILITIES::MALFORMED-DESTRUCTURING-TREE = 1121, 
// Unused CLEAVIR-CST-TO-AST::FUNCTION-NAME-NAMES-GLOBAL-MACRO = 1244, 
// Unused CLASP-CLEAVIR-HIR::PRECALC-VALUE-INSTRUCTION = 1503, 
// Unused ECLECTOR.READER::SHARPSIGN-EQUALS-ONLY-REFERS-TO-SELF = 1016, 
// Unused CLEAVIR-IO::MODEL-CONDITION = 1020, 
// Unused CLASP-CLEAVIR-AST::DISPLACED-INDEX-OFFSET-AST = 1467, 
// Unused CLASP-ANALYZER::UNCLASSIFIED-CTYPE = 1565, 
// Unused CLEAVIR-IR::TOP-LEVEL-ENTER-INSTRUCTION = 1274, 
// Unused CLEAVIR-CST-TO-AST::LAMBDA-CALL-FIRST-SYMBOL-NOT-LAMBDA = 1248, 
// Unused CLASP-CLEAVIR-AST::VASLIST-POP-AST = 1475, 
// Unused ECLECTOR.READER::COMMA-SYNTAX-ERROR = 970, 
// Unused ECLECTOR.READER::INVALID-CONTEXT-FOR-CONSING-DOT = 976, 
  STAMP_max = 1879,

#endif // defined(GC_STAMP)
#if defined(GC_ENUM_NAMES)
register_stamp_name("STAMP_null",0); 
register_stamp_name("STAMP_core__T_O", ADJUST_STAMP(7));
register_stamp_name("STAMP_core__VaList_dummy_O", ADJUST_STAMP(11));
register_stamp_name("STAMP_core__Unused_dummy_O", ADJUST_STAMP(15));
register_stamp_name("STAMP_core__General_O", ADJUST_STAMP(19));
register_stamp_name("STAMP_core__MultiStringBuffer_O", ADJUST_STAMP(23));
register_stamp_name("STAMP_core__ClassHolder_O", ADJUST_STAMP(27));
register_stamp_name("STAMP_core__WrappedPointer_O", ADJUST_STAMP(30));
register_stamp_name("STAMP_core__FdSet_O", ADJUST_STAMP(35));
register_stamp_name("STAMP_core__SymbolToEnumConverter_O", ADJUST_STAMP(39));
register_stamp_name("STAMP_llvmo__Attribute_O", ADJUST_STAMP(43));
register_stamp_name("STAMP_core__LambdaListHandler_O", ADJUST_STAMP(47));
register_stamp_name("STAMP_llvmo__AttributeSet_O", ADJUST_STAMP(51));
register_stamp_name("STAMP_core__AtomicT_Holder_O", ADJUST_STAMP(55));
register_stamp_name("STAMP_core__Function_O", ADJUST_STAMP(59));
register_stamp_name("STAMP_core__FuncallableInstance_O", ADJUST_STAMP(61));
register_stamp_name("STAMP_core__Creator_O", ADJUST_STAMP(67));
register_stamp_name("STAMP_core__ClassRepCreator_O", ADJUST_STAMP(71));
register_stamp_name("STAMP_core__DerivableCxxClassCreator_O", ADJUST_STAMP(75));
register_stamp_name("STAMP_core__FuncallableInstanceCreator_O", ADJUST_STAMP(79));
register_stamp_name("STAMP_clbind__ConstructorCreator_O", ADJUST_STAMP(83));
register_stamp_name("STAMP_clbind__DummyCreator_O", ADJUST_STAMP(87));
register_stamp_name("STAMP_core__InstanceCreator_O", ADJUST_STAMP(91));
register_stamp_name("STAMP_core__StandardClassCreator_O", ADJUST_STAMP(95));
register_stamp_name("STAMP_core__SpecialForm_O", ADJUST_STAMP(99));
register_stamp_name("STAMP_core__Closure_O", ADJUST_STAMP(103));
register_stamp_name("STAMP_core__ClosureWithSlots_O", ADJUST_STAMP(107));
register_stamp_name("STAMP_core__SingleDispatchCxxEffectiveMethodFunction_O", ADJUST_STAMP(111));
register_stamp_name("STAMP_core__SingleDispatchMethodFunction_O", ADJUST_STAMP(115));
register_stamp_name("STAMP_core__CxxMethodFunction_O", ADJUST_STAMP(119));
register_stamp_name("STAMP_core__BuiltinClosure_O", ADJUST_STAMP(123));
register_stamp_name("STAMP_core__TranslationFunctor_O", ADJUST_STAMP(127));
register_stamp_name("STAMP_core__SingleDispatchGenericFunctionClosure_O", ADJUST_STAMP(131));
register_stamp_name("STAMP_core__SingleDispatchEffectiveMethodFunction_O", ADJUST_STAMP(135));
register_stamp_name("STAMP_core__WeakPointer_O", ADJUST_STAMP(139));
register_stamp_name("STAMP_llvmo__DebugLoc_O", ADJUST_STAMP(143));
register_stamp_name("STAMP_core__Pointer_O", ADJUST_STAMP(147));
register_stamp_name("STAMP_clasp_ffi__ForeignData_O", ADJUST_STAMP(151));
register_stamp_name("STAMP_core__CxxObject_O", ADJUST_STAMP(155));
register_stamp_name("STAMP_core__NativeVector_float_O", ADJUST_STAMP(159));
register_stamp_name("STAMP_llvmo__MDBuilder_O", ADJUST_STAMP(163));
register_stamp_name("STAMP_mp__ConditionVariable_O", ADJUST_STAMP(167));
register_stamp_name("STAMP_core__NativeVector_double_O", ADJUST_STAMP(171));
register_stamp_name("STAMP_core__NativeVector_int_O", ADJUST_STAMP(175));
register_stamp_name("STAMP_llvmo__FunctionCallee_O", ADJUST_STAMP(179));
register_stamp_name("STAMP_core__Serializer_O", ADJUST_STAMP(183));
register_stamp_name("STAMP_llvmo__DINodeArray_O", ADJUST_STAMP(187));
register_stamp_name("STAMP_mp__Mutex_O", ADJUST_STAMP(191));
register_stamp_name("STAMP_mp__RecursiveMutex_O", ADJUST_STAMP(195));
register_stamp_name("STAMP_llvmo__DITypeRefArray_O", ADJUST_STAMP(199));
register_stamp_name("STAMP_mp__SharedMutex_O", ADJUST_STAMP(203));
register_stamp_name("STAMP_mp__Process_O", ADJUST_STAMP(207));
register_stamp_name("STAMP_core__SingleDispatchMethod_O", ADJUST_STAMP(211));
register_stamp_name("STAMP_core__Iterator_O", ADJUST_STAMP(215));
register_stamp_name("STAMP_core__DirectoryIterator_O", ADJUST_STAMP(219));
register_stamp_name("STAMP_core__RecursiveDirectoryIterator_O", ADJUST_STAMP(223));
register_stamp_name("STAMP_core__Array_O", ADJUST_STAMP(227));
register_stamp_name("STAMP_core__MDArray_O", ADJUST_STAMP(231));
register_stamp_name("STAMP_core__template_Array_core__MDArray_int16_t_O_core__SimpleMDArray_int16_t_O_core__SimpleVector_int16_t_O_core__MDArray_O_", ADJUST_STAMP(235));
register_stamp_name("STAMP_core__MDArray_int16_t_O", ADJUST_STAMP(239));
register_stamp_name("STAMP_core__template_Array_core__MDArray_int8_t_O_core__SimpleMDArray_int8_t_O_core__SimpleVector_int8_t_O_core__MDArray_O_", ADJUST_STAMP(243));
register_stamp_name("STAMP_core__MDArray_int8_t_O", ADJUST_STAMP(247));
register_stamp_name("STAMP_core__template_Array_core__MDArray_int32_t_O_core__SimpleMDArray_int32_t_O_core__SimpleVector_int32_t_O_core__MDArray_O_", ADJUST_STAMP(251));
register_stamp_name("STAMP_core__MDArray_int32_t_O", ADJUST_STAMP(255));
register_stamp_name("STAMP_core__template_Array_core__MDArray_byte4_t_O_core__SimpleMDArray_byte4_t_O_core__SimpleVector_byte4_t_O_core__MDArray_O_", ADJUST_STAMP(259));
register_stamp_name("STAMP_core__MDArray_byte4_t_O", ADJUST_STAMP(263));
register_stamp_name("STAMP_core__template_Array_core__MDArray_float_O_core__SimpleMDArray_float_O_core__SimpleVector_float_O_core__MDArray_O_", ADJUST_STAMP(267));
register_stamp_name("STAMP_core__MDArray_float_O", ADJUST_STAMP(271));
register_stamp_name("STAMP_core__template_Array_core__MDArray_size_t_O_core__SimpleMDArray_size_t_O_core__SimpleVector_size_t_O_core__MDArray_O_", ADJUST_STAMP(275));
register_stamp_name("STAMP_core__MDArray_size_t_O", ADJUST_STAMP(279));
register_stamp_name("STAMP_core__template_Array_core__MDArray_byte8_t_O_core__SimpleMDArray_byte8_t_O_core__SimpleVector_byte8_t_O_core__MDArray_O_", ADJUST_STAMP(283));
register_stamp_name("STAMP_core__MDArray_byte8_t_O", ADJUST_STAMP(287));
register_stamp_name("STAMP_core__template_Array_core__MDArray_int64_t_O_core__SimpleMDArray_int64_t_O_core__SimpleVector_int64_t_O_core__MDArray_O_", ADJUST_STAMP(291));
register_stamp_name("STAMP_core__MDArray_int64_t_O", ADJUST_STAMP(295));
register_stamp_name("STAMP_core__template_Array_core__MDArray_byte32_t_O_core__SimpleMDArray_byte32_t_O_core__SimpleVector_byte32_t_O_core__MDArray_O_", ADJUST_STAMP(299));
register_stamp_name("STAMP_core__MDArray_byte32_t_O", ADJUST_STAMP(303));
register_stamp_name("STAMP_core__template_Array_core__MDArray_byte2_t_O_core__SimpleMDArray_byte2_t_O_core__SimpleVector_byte2_t_O_core__MDArray_O_", ADJUST_STAMP(307));
register_stamp_name("STAMP_core__MDArray_byte2_t_O", ADJUST_STAMP(311));
register_stamp_name("STAMP_core__template_Array_core__MDArray_int2_t_O_core__SimpleMDArray_int2_t_O_core__SimpleVector_int2_t_O_core__MDArray_O_", ADJUST_STAMP(315));
register_stamp_name("STAMP_core__MDArray_int2_t_O", ADJUST_STAMP(319));
register_stamp_name("STAMP_core__template_Array_core__MDArray_fixnum_O_core__SimpleMDArray_fixnum_O_core__SimpleVector_fixnum_O_core__MDArray_O_", ADJUST_STAMP(323));
register_stamp_name("STAMP_core__MDArray_fixnum_O", ADJUST_STAMP(327));
register_stamp_name("STAMP_core__template_Array_core__MDArrayBaseChar_O_core__SimpleMDArrayBaseChar_O_core__SimpleBaseString_O_core__MDArray_O_", ADJUST_STAMP(331));
register_stamp_name("STAMP_core__MDArrayBaseChar_O", ADJUST_STAMP(335));
register_stamp_name("STAMP_core__template_Array_core__MDArray_byte64_t_O_core__SimpleMDArray_byte64_t_O_core__SimpleVector_byte64_t_O_core__MDArray_O_", ADJUST_STAMP(339));
register_stamp_name("STAMP_core__MDArray_byte64_t_O", ADJUST_STAMP(343));
register_stamp_name("STAMP_core__template_Array_core__MDArrayCharacter_O_core__SimpleMDArrayCharacter_O_core__SimpleCharacterString_O_core__MDArray_O_", ADJUST_STAMP(347));
register_stamp_name("STAMP_core__MDArrayCharacter_O", ADJUST_STAMP(351));
register_stamp_name("STAMP_core__template_Array_core__MDArrayT_O_core__SimpleMDArrayT_O_core__SimpleVector_O_core__MDArray_O_", ADJUST_STAMP(355));
register_stamp_name("STAMP_core__MDArrayT_O", ADJUST_STAMP(359));
register_stamp_name("STAMP_core__template_Array_core__MDArrayBit_O_core__SimpleMDArrayBit_O_core__SimpleBitVector_O_core__MDArray_O_", ADJUST_STAMP(363));
register_stamp_name("STAMP_core__MDArrayBit_O", ADJUST_STAMP(367));
register_stamp_name("STAMP_core__template_Array_core__MDArray_byte16_t_O_core__SimpleMDArray_byte16_t_O_core__SimpleVector_byte16_t_O_core__MDArray_O_", ADJUST_STAMP(371));
register_stamp_name("STAMP_core__MDArray_byte16_t_O", ADJUST_STAMP(375));
register_stamp_name("STAMP_core__SimpleMDArray_O", ADJUST_STAMP(379));
register_stamp_name("STAMP_core__template_SimpleArray_core__SimpleMDArray_int8_t_O_core__SimpleVector_int8_t_O_core__SimpleMDArray_O_", ADJUST_STAMP(383));
register_stamp_name("STAMP_core__SimpleMDArray_int8_t_O", ADJUST_STAMP(387));
register_stamp_name("STAMP_core__template_SimpleArray_core__SimpleMDArray_double_O_core__SimpleVector_double_O_core__SimpleMDArray_O_", ADJUST_STAMP(391));
register_stamp_name("STAMP_core__SimpleMDArray_double_O", ADJUST_STAMP(395));
register_stamp_name("STAMP_core__template_SimpleArray_core__SimpleMDArray_byte32_t_O_core__SimpleVector_byte32_t_O_core__SimpleMDArray_O_", ADJUST_STAMP(399));
register_stamp_name("STAMP_core__SimpleMDArray_byte32_t_O", ADJUST_STAMP(403));
register_stamp_name("STAMP_core__template_SimpleArray_core__SimpleMDArrayT_O_core__SimpleVector_O_core__SimpleMDArray_O_", ADJUST_STAMP(407));
register_stamp_name("STAMP_core__SimpleMDArrayT_O", ADJUST_STAMP(411));
register_stamp_name("STAMP_core__template_SimpleArray_core__SimpleMDArray_int2_t_O_core__SimpleVector_int2_t_O_core__SimpleMDArray_O_", ADJUST_STAMP(415));
register_stamp_name("STAMP_core__SimpleMDArray_int2_t_O", ADJUST_STAMP(419));
register_stamp_name("STAMP_core__template_SimpleArray_core__SimpleMDArray_byte4_t_O_core__SimpleVector_byte4_t_O_core__SimpleMDArray_O_", ADJUST_STAMP(423));
register_stamp_name("STAMP_core__SimpleMDArray_byte4_t_O", ADJUST_STAMP(427));
register_stamp_name("STAMP_core__template_SimpleArray_core__SimpleMDArray_int32_t_O_core__SimpleVector_int32_t_O_core__SimpleMDArray_O_", ADJUST_STAMP(431));
register_stamp_name("STAMP_core__SimpleMDArray_int32_t_O", ADJUST_STAMP(435));
register_stamp_name("STAMP_core__template_SimpleArray_core__SimpleMDArray_float_O_core__SimpleVector_float_O_core__SimpleMDArray_O_", ADJUST_STAMP(439));
register_stamp_name("STAMP_core__SimpleMDArray_float_O", ADJUST_STAMP(443));
register_stamp_name("STAMP_core__template_SimpleArray_core__SimpleMDArray_int16_t_O_core__SimpleVector_int16_t_O_core__SimpleMDArray_O_", ADJUST_STAMP(447));
register_stamp_name("STAMP_core__SimpleMDArray_int16_t_O", ADJUST_STAMP(451));
register_stamp_name("STAMP_core__template_SimpleArray_core__SimpleMDArray_size_t_O_core__SimpleVector_size_t_O_core__SimpleMDArray_O_", ADJUST_STAMP(455));
register_stamp_name("STAMP_core__SimpleMDArray_size_t_O", ADJUST_STAMP(459));
register_stamp_name("STAMP_core__template_SimpleArray_core__SimpleMDArray_int4_t_O_core__SimpleVector_int4_t_O_core__SimpleMDArray_O_", ADJUST_STAMP(463));
register_stamp_name("STAMP_core__SimpleMDArray_int4_t_O", ADJUST_STAMP(467));
register_stamp_name("STAMP_core__template_SimpleArray_core__SimpleMDArrayCharacter_O_core__SimpleCharacterString_O_core__SimpleMDArray_O_", ADJUST_STAMP(471));
register_stamp_name("STAMP_core__SimpleMDArrayCharacter_O", ADJUST_STAMP(475));
register_stamp_name("STAMP_core__template_SimpleArray_core__SimpleMDArray_byte2_t_O_core__SimpleVector_byte2_t_O_core__SimpleMDArray_O_", ADJUST_STAMP(479));
register_stamp_name("STAMP_core__SimpleMDArray_byte2_t_O", ADJUST_STAMP(483));
register_stamp_name("STAMP_core__template_SimpleArray_core__SimpleMDArray_fixnum_O_core__SimpleVector_fixnum_O_core__SimpleMDArray_O_", ADJUST_STAMP(487));
register_stamp_name("STAMP_core__SimpleMDArray_fixnum_O", ADJUST_STAMP(491));
register_stamp_name("STAMP_core__template_SimpleArray_core__SimpleMDArray_byte16_t_O_core__SimpleVector_byte16_t_O_core__SimpleMDArray_O_", ADJUST_STAMP(495));
register_stamp_name("STAMP_core__SimpleMDArray_byte16_t_O", ADJUST_STAMP(499));
register_stamp_name("STAMP_core__template_SimpleArray_core__SimpleMDArrayBaseChar_O_core__SimpleBaseString_O_core__SimpleMDArray_O_", ADJUST_STAMP(503));
register_stamp_name("STAMP_core__SimpleMDArrayBaseChar_O", ADJUST_STAMP(507));
register_stamp_name("STAMP_core__template_SimpleArray_core__SimpleMDArray_byte64_t_O_core__SimpleVector_byte64_t_O_core__SimpleMDArray_O_", ADJUST_STAMP(511));
register_stamp_name("STAMP_core__SimpleMDArray_byte64_t_O", ADJUST_STAMP(515));
register_stamp_name("STAMP_core__template_SimpleArray_core__SimpleMDArrayBit_O_core__SimpleBitVector_O_core__SimpleMDArray_O_", ADJUST_STAMP(519));
register_stamp_name("STAMP_core__SimpleMDArrayBit_O", ADJUST_STAMP(523));
register_stamp_name("STAMP_core__template_SimpleArray_core__SimpleMDArray_byte8_t_O_core__SimpleVector_byte8_t_O_core__SimpleMDArray_O_", ADJUST_STAMP(527));
register_stamp_name("STAMP_core__SimpleMDArray_byte8_t_O", ADJUST_STAMP(531));
register_stamp_name("STAMP_core__template_SimpleArray_core__SimpleMDArray_int64_t_O_core__SimpleVector_int64_t_O_core__SimpleMDArray_O_", ADJUST_STAMP(535));
register_stamp_name("STAMP_core__SimpleMDArray_int64_t_O", ADJUST_STAMP(539));
register_stamp_name("STAMP_core__template_Array_core__MDArray_int4_t_O_core__SimpleMDArray_int4_t_O_core__SimpleVector_int4_t_O_core__MDArray_O_", ADJUST_STAMP(543));
register_stamp_name("STAMP_core__MDArray_int4_t_O", ADJUST_STAMP(547));
register_stamp_name("STAMP_core__template_Array_core__MDArray_double_O_core__SimpleMDArray_double_O_core__SimpleVector_double_O_core__MDArray_O_", ADJUST_STAMP(551));
register_stamp_name("STAMP_core__MDArray_double_O", ADJUST_STAMP(555));
register_stamp_name("STAMP_core__ComplexVector_O", ADJUST_STAMP(559));
register_stamp_name("STAMP_core__template_Vector_core__ComplexVector_double_O_core__SimpleVector_double_O_core__ComplexVector_O_", ADJUST_STAMP(563));
register_stamp_name("STAMP_core__ComplexVector_double_O", ADJUST_STAMP(567));
register_stamp_name("STAMP_core__template_Vector_core__ComplexVector_int8_t_O_core__SimpleVector_int8_t_O_core__ComplexVector_O_", ADJUST_STAMP(571));
register_stamp_name("STAMP_core__ComplexVector_int8_t_O", ADJUST_STAMP(575));
register_stamp_name("STAMP_core__template_Vector_core__ComplexVector_byte64_t_O_core__SimpleVector_byte64_t_O_core__ComplexVector_O_", ADJUST_STAMP(579));
register_stamp_name("STAMP_core__ComplexVector_byte64_t_O", ADJUST_STAMP(583));
register_stamp_name("STAMP_core__template_Vector_core__ComplexVector_T_O_core__SimpleVector_O_core__ComplexVector_O_", ADJUST_STAMP(587));
register_stamp_name("STAMP_core__ComplexVector_T_O", ADJUST_STAMP(591));
register_stamp_name("STAMP_core__template_Vector_core__ComplexVector_int2_t_O_core__SimpleVector_int2_t_O_core__ComplexVector_O_", ADJUST_STAMP(595));
register_stamp_name("STAMP_core__ComplexVector_int2_t_O", ADJUST_STAMP(599));
register_stamp_name("STAMP_core__template_Vector_core__ComplexVector_int32_t_O_core__SimpleVector_int32_t_O_core__ComplexVector_O_", ADJUST_STAMP(603));
register_stamp_name("STAMP_core__ComplexVector_int32_t_O", ADJUST_STAMP(607));
register_stamp_name("STAMP_core__template_Vector_core__ComplexVector_byte16_t_O_core__SimpleVector_byte16_t_O_core__ComplexVector_O_", ADJUST_STAMP(611));
register_stamp_name("STAMP_core__ComplexVector_byte16_t_O", ADJUST_STAMP(615));
register_stamp_name("STAMP_core__template_Vector_core__ComplexVector_float_O_core__SimpleVector_float_O_core__ComplexVector_O_", ADJUST_STAMP(619));
register_stamp_name("STAMP_core__ComplexVector_float_O", ADJUST_STAMP(623));
register_stamp_name("STAMP_core__template_Vector_core__ComplexVector_int16_t_O_core__SimpleVector_int16_t_O_core__ComplexVector_O_", ADJUST_STAMP(627));
register_stamp_name("STAMP_core__ComplexVector_int16_t_O", ADJUST_STAMP(631));
register_stamp_name("STAMP_core__template_Vector_core__ComplexVector_int4_t_O_core__SimpleVector_int4_t_O_core__ComplexVector_O_", ADJUST_STAMP(635));
register_stamp_name("STAMP_core__ComplexVector_int4_t_O", ADJUST_STAMP(639));
register_stamp_name("STAMP_core__template_Vector_core__ComplexVector_size_t_O_core__SimpleVector_size_t_O_core__ComplexVector_O_", ADJUST_STAMP(643));
register_stamp_name("STAMP_core__ComplexVector_size_t_O", ADJUST_STAMP(647));
register_stamp_name("STAMP_core__template_Vector_core__ComplexVector_byte2_t_O_core__SimpleVector_byte2_t_O_core__ComplexVector_O_", ADJUST_STAMP(651));
register_stamp_name("STAMP_core__ComplexVector_byte2_t_O", ADJUST_STAMP(655));
register_stamp_name("STAMP_core__template_Vector_core__ComplexVector_byte8_t_O_core__SimpleVector_byte8_t_O_core__ComplexVector_O_", ADJUST_STAMP(659));
register_stamp_name("STAMP_core__ComplexVector_byte8_t_O", ADJUST_STAMP(663));
register_stamp_name("STAMP_core__template_Vector_core__ComplexVector_byte32_t_O_core__SimpleVector_byte32_t_O_core__ComplexVector_O_", ADJUST_STAMP(667));
register_stamp_name("STAMP_core__ComplexVector_byte32_t_O", ADJUST_STAMP(671));
register_stamp_name("STAMP_core__template_Vector_core__BitVectorNs_O_core__SimpleBitVector_O_core__ComplexVector_O_", ADJUST_STAMP(675));
register_stamp_name("STAMP_core__BitVectorNs_O", ADJUST_STAMP(679));
register_stamp_name("STAMP_core__StrNs_O", ADJUST_STAMP(683));
register_stamp_name("STAMP_core__template_Vector_core__Str8Ns_O_core__SimpleBaseString_O_core__StrNs_O_", ADJUST_STAMP(687));
register_stamp_name("STAMP_core__Str8Ns_O", ADJUST_STAMP(691));
register_stamp_name("STAMP_core__template_Vector_core__StrWNs_O_core__SimpleCharacterString_O_core__StrNs_O_", ADJUST_STAMP(695));
register_stamp_name("STAMP_core__StrWNs_O", ADJUST_STAMP(699));
register_stamp_name("STAMP_core__template_Vector_core__ComplexVector_byte4_t_O_core__SimpleVector_byte4_t_O_core__ComplexVector_O_", ADJUST_STAMP(703));
register_stamp_name("STAMP_core__ComplexVector_byte4_t_O", ADJUST_STAMP(707));
register_stamp_name("STAMP_core__template_Vector_core__ComplexVector_fixnum_O_core__SimpleVector_fixnum_O_core__ComplexVector_O_", ADJUST_STAMP(711));
register_stamp_name("STAMP_core__ComplexVector_fixnum_O", ADJUST_STAMP(715));
register_stamp_name("STAMP_core__template_Vector_core__ComplexVector_int64_t_O_core__SimpleVector_int64_t_O_core__ComplexVector_O_", ADJUST_STAMP(719));
register_stamp_name("STAMP_core__ComplexVector_int64_t_O", ADJUST_STAMP(723));
register_stamp_name("STAMP_core__AbstractSimpleVector_O", ADJUST_STAMP(727));
register_stamp_name("STAMP_core__SimpleString_O", ADJUST_STAMP(731));
register_stamp_name("STAMP_core__template_SimpleVector_core__SimpleCharacterString_O_int_core__SimpleString_O_", ADJUST_STAMP(735));
register_stamp_name("STAMP_core__SimpleCharacterString_O", ADJUST_STAMP(739));
register_stamp_name("STAMP_core__template_SimpleVector_core__SimpleBaseString_O_unsigned_char_core__SimpleString_O_", ADJUST_STAMP(743));
register_stamp_name("STAMP_core__SimpleBaseString_O", ADJUST_STAMP(747));
register_stamp_name("STAMP_core__template_SimpleVector_core__SimpleVector_int16_t_O_short_core__AbstractSimpleVector_O_", ADJUST_STAMP(751));
register_stamp_name("STAMP_core__SimpleVector_int16_t_O", ADJUST_STAMP(755));
register_stamp_name("STAMP_core__template_SimpleVector_core__SimpleVector_byte16_t_O_unsigned_short_core__AbstractSimpleVector_O_", ADJUST_STAMP(759));
register_stamp_name("STAMP_core__SimpleVector_byte16_t_O", ADJUST_STAMP(763));
register_stamp_name("STAMP_core__template_SimpleBitUnitVector_core__SimpleBitVector_O_1_0_", ADJUST_STAMP(767));
register_stamp_name("STAMP_core__SimpleBitVector_O", ADJUST_STAMP(771));
register_stamp_name("STAMP_core__template_SimpleBitUnitVector_core__SimpleVector_int4_t_O_4_1_", ADJUST_STAMP(775));
register_stamp_name("STAMP_core__SimpleVector_int4_t_O", ADJUST_STAMP(779));
register_stamp_name("STAMP_core__template_SimpleVector_core__SimpleVector_byte32_t_O_unsigned_int_core__AbstractSimpleVector_O_", ADJUST_STAMP(783));
register_stamp_name("STAMP_core__SimpleVector_byte32_t_O", ADJUST_STAMP(787));
register_stamp_name("STAMP_core__template_SimpleVector_core__SimpleVector_size_t_O_unsigned_long_core__AbstractSimpleVector_O_", ADJUST_STAMP(791));
register_stamp_name("STAMP_core__SimpleVector_size_t_O", ADJUST_STAMP(795));
register_stamp_name("STAMP_core__template_SimpleVector_core__SimpleVector_double_O_double_core__AbstractSimpleVector_O_", ADJUST_STAMP(799));
register_stamp_name("STAMP_core__SimpleVector_double_O", ADJUST_STAMP(803));
register_stamp_name("STAMP_core__template_SimpleVector_core__SimpleVector_byte64_t_O_unsigned_long_core__AbstractSimpleVector_O_", ADJUST_STAMP(807));
register_stamp_name("STAMP_core__SimpleVector_byte64_t_O", ADJUST_STAMP(811));
register_stamp_name("STAMP_core__template_SimpleBitUnitVector_core__SimpleVector_int2_t_O_2_1_", ADJUST_STAMP(815));
register_stamp_name("STAMP_core__SimpleVector_int2_t_O", ADJUST_STAMP(819));
register_stamp_name("STAMP_core__template_SimpleVector_core__SimpleVector_int64_t_O_long_core__AbstractSimpleVector_O_", ADJUST_STAMP(823));
register_stamp_name("STAMP_core__SimpleVector_int64_t_O", ADJUST_STAMP(827));
register_stamp_name("STAMP_core__template_SimpleVector_core__SimpleVector_fixnum_O_long_core__AbstractSimpleVector_O_", ADJUST_STAMP(831));
register_stamp_name("STAMP_core__SimpleVector_fixnum_O", ADJUST_STAMP(835));
register_stamp_name("STAMP_core__template_SimpleVector_core__SimpleVector_int8_t_O_signed_char_core__AbstractSimpleVector_O_", ADJUST_STAMP(839));
register_stamp_name("STAMP_core__SimpleVector_int8_t_O", ADJUST_STAMP(843));
register_stamp_name("STAMP_core__template_SimpleVector_core__SimpleVector_float_O_float_core__AbstractSimpleVector_O_", ADJUST_STAMP(847));
register_stamp_name("STAMP_core__SimpleVector_float_O", ADJUST_STAMP(851));
register_stamp_name("STAMP_core__template_SimpleVector_core__SimpleVector_O_gctools__smart_ptr_core__T_O__core__AbstractSimpleVector_O_", ADJUST_STAMP(855));
register_stamp_name("STAMP_core__SimpleVector_O", ADJUST_STAMP(859));
register_stamp_name("STAMP_core__template_SimpleVector_core__SimpleVector_byte8_t_O_unsigned_char_core__AbstractSimpleVector_O_", ADJUST_STAMP(863));
register_stamp_name("STAMP_core__SimpleVector_byte8_t_O", ADJUST_STAMP(867));
register_stamp_name("STAMP_core__template_SimpleBitUnitVector_core__SimpleVector_byte2_t_O_2_0_", ADJUST_STAMP(871));
register_stamp_name("STAMP_core__SimpleVector_byte2_t_O", ADJUST_STAMP(875));
register_stamp_name("STAMP_core__template_SimpleVector_core__SimpleVector_int32_t_O_int_core__AbstractSimpleVector_O_", ADJUST_STAMP(879));
register_stamp_name("STAMP_core__SimpleVector_int32_t_O", ADJUST_STAMP(883));
register_stamp_name("STAMP_core__template_SimpleBitUnitVector_core__SimpleVector_byte4_t_O_4_0_", ADJUST_STAMP(887));
register_stamp_name("STAMP_core__SimpleVector_byte4_t_O", ADJUST_STAMP(891));
register_stamp_name("STAMP_core__Symbol_O", ADJUST_STAMP(895));
register_stamp_name("STAMP_core__Null_O", ADJUST_STAMP(899));
register_stamp_name("STAMP_core__Character_dummy_O", ADJUST_STAMP(903));
register_stamp_name("STAMP_llvmo__DataLayout_O", ADJUST_STAMP(907));
register_stamp_name("STAMP_core__LoadTimeValues_O", ADJUST_STAMP(911));
register_stamp_name("STAMP_core__SharpEqualWrapper_O", ADJUST_STAMP(915));
register_stamp_name("STAMP_llvmo__ClaspJIT_O", ADJUST_STAMP(919));
register_stamp_name("STAMP_core__Readtable_O", ADJUST_STAMP(923));
register_stamp_name("STAMP_core__PosixTime_O", ADJUST_STAMP(927));
register_stamp_name("STAMP_core__Exposer_O", ADJUST_STAMP(931));
register_stamp_name("STAMP_core__CoreExposer_O", ADJUST_STAMP(935));
register_stamp_name("STAMP_asttooling__AsttoolingExposer_O", ADJUST_STAMP(939));
register_stamp_name("STAMP_llvmo__StructLayout_O", ADJUST_STAMP(943));
register_stamp_name("STAMP_core__PosixTimeDuration_O", ADJUST_STAMP(947));
register_stamp_name("STAMP_clasp_ffi__ForeignTypeSpec_O", ADJUST_STAMP(951));
register_stamp_name("STAMP_core__Instance_O", ADJUST_STAMP(953));
register_stamp_name("STAMP_core__DerivableCxxObject_O", ADJUST_STAMP(956));
register_stamp_name("STAMP_clbind__ClassRep_O", ADJUST_STAMP(961));
register_stamp_name("STAMP_core__SmallMap_O", ADJUST_STAMP(967));
register_stamp_name("STAMP_mpip__Mpi_O", ADJUST_STAMP(971));
register_stamp_name("STAMP_core__ExternalObject_O", ADJUST_STAMP(975));
register_stamp_name("STAMP_llvmo__Pass_O", ADJUST_STAMP(979));
register_stamp_name("STAMP_llvmo__ModulePass_O", ADJUST_STAMP(983));
register_stamp_name("STAMP_llvmo__ImmutablePass_O", ADJUST_STAMP(987));
register_stamp_name("STAMP_llvmo__TargetLibraryInfoWrapperPass_O", ADJUST_STAMP(991));
register_stamp_name("STAMP_llvmo__FunctionPass_O", ADJUST_STAMP(995));
register_stamp_name("STAMP_llvmo__ExecutionEngine_O", ADJUST_STAMP(999));
register_stamp_name("STAMP_llvmo__MCSubtargetInfo_O", ADJUST_STAMP(1003));
register_stamp_name("STAMP_llvmo__TargetSubtargetInfo_O", ADJUST_STAMP(1007));
register_stamp_name("STAMP_llvmo__Type_O", ADJUST_STAMP(1011));
register_stamp_name("STAMP_llvmo__FunctionType_O", ADJUST_STAMP(1015));
register_stamp_name("STAMP_llvmo__CompositeType_O", ADJUST_STAMP(1019));
register_stamp_name("STAMP_llvmo__SequentialType_O", ADJUST_STAMP(1023));
register_stamp_name("STAMP_llvmo__PointerType_O", ADJUST_STAMP(1027));
register_stamp_name("STAMP_llvmo__ArrayType_O", ADJUST_STAMP(1031));
register_stamp_name("STAMP_llvmo__VectorType_O", ADJUST_STAMP(1035));
register_stamp_name("STAMP_llvmo__StructType_O", ADJUST_STAMP(1039));
register_stamp_name("STAMP_llvmo__IntegerType_O", ADJUST_STAMP(1043));
register_stamp_name("STAMP_llvmo__JITDylib_O", ADJUST_STAMP(1047));
register_stamp_name("STAMP_llvmo__DIContext_O", ADJUST_STAMP(1051));
register_stamp_name("STAMP_llvmo__TargetPassConfig_O", ADJUST_STAMP(1055));
register_stamp_name("STAMP_llvmo__IRBuilderBase_O", ADJUST_STAMP(1059));
register_stamp_name("STAMP_llvmo__IRBuilder_O", ADJUST_STAMP(1063));
register_stamp_name("STAMP_llvmo__APFloat_O", ADJUST_STAMP(1067));
register_stamp_name("STAMP_llvmo__APInt_O", ADJUST_STAMP(1071));
register_stamp_name("STAMP_llvmo__DIBuilder_O", ADJUST_STAMP(1075));
register_stamp_name("STAMP_llvmo__SectionedAddress_O", ADJUST_STAMP(1079));
register_stamp_name("STAMP_llvmo__EngineBuilder_O", ADJUST_STAMP(1083));
register_stamp_name("STAMP_llvmo__PassManagerBase_O", ADJUST_STAMP(1087));
register_stamp_name("STAMP_llvmo__PassManager_O", ADJUST_STAMP(1091));
register_stamp_name("STAMP_llvmo__FunctionPassManager_O", ADJUST_STAMP(1095));
register_stamp_name("STAMP_llvmo__Metadata_O", ADJUST_STAMP(1099));
register_stamp_name("STAMP_llvmo__MDNode_O", ADJUST_STAMP(1103));
register_stamp_name("STAMP_llvmo__DINode_O", ADJUST_STAMP(1107));
register_stamp_name("STAMP_llvmo__DIVariable_O", ADJUST_STAMP(1111));
register_stamp_name("STAMP_llvmo__DILocalVariable_O", ADJUST_STAMP(1115));
register_stamp_name("STAMP_llvmo__DIScope_O", ADJUST_STAMP(1119));
register_stamp_name("STAMP_llvmo__DIFile_O", ADJUST_STAMP(1123));
register_stamp_name("STAMP_llvmo__DIType_O", ADJUST_STAMP(1127));
register_stamp_name("STAMP_llvmo__DICompositeType_O", ADJUST_STAMP(1131));
register_stamp_name("STAMP_llvmo__DIDerivedType_O", ADJUST_STAMP(1135));
register_stamp_name("STAMP_llvmo__DIBasicType_O", ADJUST_STAMP(1139));
register_stamp_name("STAMP_llvmo__DISubroutineType_O", ADJUST_STAMP(1143));
register_stamp_name("STAMP_llvmo__DILocalScope_O", ADJUST_STAMP(1147));
register_stamp_name("STAMP_llvmo__DISubprogram_O", ADJUST_STAMP(1151));
register_stamp_name("STAMP_llvmo__DILexicalBlockBase_O", ADJUST_STAMP(1155));
register_stamp_name("STAMP_llvmo__DILexicalBlock_O", ADJUST_STAMP(1159));
register_stamp_name("STAMP_llvmo__DICompileUnit_O", ADJUST_STAMP(1163));
register_stamp_name("STAMP_llvmo__DIExpression_O", ADJUST_STAMP(1167));
register_stamp_name("STAMP_llvmo__DILocation_O", ADJUST_STAMP(1171));
register_stamp_name("STAMP_llvmo__ValueAsMetadata_O", ADJUST_STAMP(1175));
register_stamp_name("STAMP_llvmo__MDString_O", ADJUST_STAMP(1179));
register_stamp_name("STAMP_llvmo__Value_O", ADJUST_STAMP(1183));
register_stamp_name("STAMP_llvmo__Argument_O", ADJUST_STAMP(1187));
register_stamp_name("STAMP_llvmo__BasicBlock_O", ADJUST_STAMP(1191));
register_stamp_name("STAMP_llvmo__MetadataAsValue_O", ADJUST_STAMP(1195));
register_stamp_name("STAMP_llvmo__User_O", ADJUST_STAMP(1199));
register_stamp_name("STAMP_llvmo__Instruction_O", ADJUST_STAMP(1203));
register_stamp_name("STAMP_llvmo__UnaryInstruction_O", ADJUST_STAMP(1207));
register_stamp_name("STAMP_llvmo__VAArgInst_O", ADJUST_STAMP(1211));
register_stamp_name("STAMP_llvmo__LoadInst_O", ADJUST_STAMP(1215));
register_stamp_name("STAMP_llvmo__AllocaInst_O", ADJUST_STAMP(1219));
register_stamp_name("STAMP_llvmo__SwitchInst_O", ADJUST_STAMP(1223));
register_stamp_name("STAMP_llvmo__AtomicRMWInst_O", ADJUST_STAMP(1227));
register_stamp_name("STAMP_llvmo__LandingPadInst_O", ADJUST_STAMP(1231));
register_stamp_name("STAMP_llvmo__StoreInst_O", ADJUST_STAMP(1235));
register_stamp_name("STAMP_llvmo__UnreachableInst_O", ADJUST_STAMP(1239));
register_stamp_name("STAMP_llvmo__ReturnInst_O", ADJUST_STAMP(1243));
register_stamp_name("STAMP_llvmo__ResumeInst_O", ADJUST_STAMP(1247));
register_stamp_name("STAMP_llvmo__AtomicCmpXchgInst_O", ADJUST_STAMP(1251));
register_stamp_name("STAMP_llvmo__FenceInst_O", ADJUST_STAMP(1255));
register_stamp_name("STAMP_llvmo__CallBase_O", ADJUST_STAMP(1259));
register_stamp_name("STAMP_llvmo__CallInst_O", ADJUST_STAMP(1263));
register_stamp_name("STAMP_llvmo__InvokeInst_O", ADJUST_STAMP(1267));
register_stamp_name("STAMP_llvmo__PHINode_O", ADJUST_STAMP(1271));
register_stamp_name("STAMP_llvmo__IndirectBrInst_O", ADJUST_STAMP(1275));
register_stamp_name("STAMP_llvmo__BranchInst_O", ADJUST_STAMP(1279));
register_stamp_name("STAMP_llvmo__Constant_O", ADJUST_STAMP(1283));
register_stamp_name("STAMP_llvmo__GlobalValue_O", ADJUST_STAMP(1287));
register_stamp_name("STAMP_llvmo__Function_O", ADJUST_STAMP(1291));
register_stamp_name("STAMP_llvmo__GlobalVariable_O", ADJUST_STAMP(1295));
register_stamp_name("STAMP_llvmo__BlockAddress_O", ADJUST_STAMP(1299));
register_stamp_name("STAMP_llvmo__ConstantDataSequential_O", ADJUST_STAMP(1303));
register_stamp_name("STAMP_llvmo__ConstantDataArray_O", ADJUST_STAMP(1307));
register_stamp_name("STAMP_llvmo__ConstantStruct_O", ADJUST_STAMP(1311));
register_stamp_name("STAMP_llvmo__ConstantInt_O", ADJUST_STAMP(1315));
register_stamp_name("STAMP_llvmo__ConstantFP_O", ADJUST_STAMP(1319));
register_stamp_name("STAMP_llvmo__ConstantExpr_O", ADJUST_STAMP(1323));
register_stamp_name("STAMP_llvmo__ConstantPointerNull_O", ADJUST_STAMP(1327));
register_stamp_name("STAMP_llvmo__UndefValue_O", ADJUST_STAMP(1331));
register_stamp_name("STAMP_llvmo__ConstantArray_O", ADJUST_STAMP(1335));
register_stamp_name("STAMP_llvmo__TargetMachine_O", ADJUST_STAMP(1339));
register_stamp_name("STAMP_llvmo__LLVMTargetMachine_O", ADJUST_STAMP(1343));
register_stamp_name("STAMP_llvmo__ThreadSafeContext_O", ADJUST_STAMP(1347));
register_stamp_name("STAMP_llvmo__NamedMDNode_O", ADJUST_STAMP(1351));
register_stamp_name("STAMP_llvmo__Triple_O", ADJUST_STAMP(1355));
register_stamp_name("STAMP_llvmo__DWARFContext_O", ADJUST_STAMP(1359));
register_stamp_name("STAMP_llvmo__TargetOptions_O", ADJUST_STAMP(1363));
register_stamp_name("STAMP_llvmo__ObjectFile_O", ADJUST_STAMP(1367));
register_stamp_name("STAMP_llvmo__LLVMContext_O", ADJUST_STAMP(1371));
register_stamp_name("STAMP_llvmo__PassManagerBuilder_O", ADJUST_STAMP(1375));
register_stamp_name("STAMP_llvmo__Module_O", ADJUST_STAMP(1379));
register_stamp_name("STAMP_llvmo__Target_O", ADJUST_STAMP(1383));
register_stamp_name("STAMP_llvmo__Linker_O", ADJUST_STAMP(1387));
register_stamp_name("STAMP_core__Rack_O", ADJUST_STAMP(1391));
register_stamp_name("STAMP_core__SmallMultimap_O", ADJUST_STAMP(1395));
register_stamp_name("STAMP_core__Sigset_O", ADJUST_STAMP(1399));
register_stamp_name("STAMP_core__Environment_O", ADJUST_STAMP(1403));
register_stamp_name("STAMP_core__GlueEnvironment_O", ADJUST_STAMP(1407));
register_stamp_name("STAMP_core__LexicalEnvironment_O", ADJUST_STAMP(1411));
register_stamp_name("STAMP_core__RuntimeVisibleEnvironment_O", ADJUST_STAMP(1415));
register_stamp_name("STAMP_core__FunctionValueEnvironment_O", ADJUST_STAMP(1419));
register_stamp_name("STAMP_core__TagbodyEnvironment_O", ADJUST_STAMP(1423));
register_stamp_name("STAMP_core__BlockEnvironment_O", ADJUST_STAMP(1427));
register_stamp_name("STAMP_core__ValueEnvironment_O", ADJUST_STAMP(1431));
register_stamp_name("STAMP_core__CompileTimeEnvironment_O", ADJUST_STAMP(1435));
register_stamp_name("STAMP_core__CatchEnvironment_O", ADJUST_STAMP(1439));
register_stamp_name("STAMP_core__MacroletEnvironment_O", ADJUST_STAMP(1443));
register_stamp_name("STAMP_core__SymbolMacroletEnvironment_O", ADJUST_STAMP(1447));
register_stamp_name("STAMP_core__FunctionContainerEnvironment_O", ADJUST_STAMP(1451));
register_stamp_name("STAMP_core__UnwindProtectEnvironment_O", ADJUST_STAMP(1455));
register_stamp_name("STAMP_core__ActivationFrame_O", ADJUST_STAMP(1459));
register_stamp_name("STAMP_core__ValueFrame_O", ADJUST_STAMP(1463));
register_stamp_name("STAMP_core__FunctionFrame_O", ADJUST_STAMP(1467));
register_stamp_name("STAMP_core__RandomState_O", ADJUST_STAMP(1471));
register_stamp_name("STAMP_core__AtomicFixnumHolder_O", ADJUST_STAMP(1475));
register_stamp_name("STAMP_core__HashTableBase_O", ADJUST_STAMP(1479));
register_stamp_name("STAMP_core__WeakKeyHashTable_O", ADJUST_STAMP(1483));
register_stamp_name("STAMP_core__HashTable_O", ADJUST_STAMP(1487));
register_stamp_name("STAMP_core__HashTableEqualp_O", ADJUST_STAMP(1491));
register_stamp_name("STAMP_core__HashTableEq_O", ADJUST_STAMP(1495));
register_stamp_name("STAMP_core__HashTableEql_O", ADJUST_STAMP(1499));
register_stamp_name("STAMP_core__HashTableEqual_O", ADJUST_STAMP(1503));
register_stamp_name("STAMP_llvmo__InsertPoint_O", ADJUST_STAMP(1507));
register_stamp_name("STAMP_core__Scope_O", ADJUST_STAMP(1511));
register_stamp_name("STAMP_core__FileScope_O", ADJUST_STAMP(1515));
register_stamp_name("STAMP_core__Path_O", ADJUST_STAMP(1519));
register_stamp_name("STAMP_core__Pathname_O", ADJUST_STAMP(1523));
register_stamp_name("STAMP_core__LogicalPathname_O", ADJUST_STAMP(1527));
register_stamp_name("STAMP_core__Cache_O", ADJUST_STAMP(1531));
register_stamp_name("STAMP_core__Number_O", ADJUST_STAMP(1535));
register_stamp_name("STAMP_core__Real_O", ADJUST_STAMP(1539));
register_stamp_name("STAMP_core__Rational_O", ADJUST_STAMP(1543));
register_stamp_name("STAMP_core__Ratio_O", ADJUST_STAMP(1547));
register_stamp_name("STAMP_core__Integer_O", ADJUST_STAMP(1551));
register_stamp_name("STAMP_core__Bignum_O", ADJUST_STAMP(1555));
register_stamp_name("STAMP_core__Fixnum_dummy_O", ADJUST_STAMP(1559));
register_stamp_name("STAMP_core__Float_O", ADJUST_STAMP(1563));
register_stamp_name("STAMP_core__DoubleFloat_O", ADJUST_STAMP(1567));
register_stamp_name("STAMP_core__SingleFloat_dummy_O", ADJUST_STAMP(1571));
register_stamp_name("STAMP_core__LongFloat_O", ADJUST_STAMP(1575));
register_stamp_name("STAMP_core__ShortFloat_O", ADJUST_STAMP(1579));
register_stamp_name("STAMP_core__Complex_O", ADJUST_STAMP(1583));
register_stamp_name("STAMP_core__Stream_O", ADJUST_STAMP(1587));
register_stamp_name("STAMP_core__AnsiStream_O", ADJUST_STAMP(1591));
register_stamp_name("STAMP_core__SynonymStream_O", ADJUST_STAMP(1595));
register_stamp_name("STAMP_core__ConcatenatedStream_O", ADJUST_STAMP(1599));
register_stamp_name("STAMP_core__FileStream_O", ADJUST_STAMP(1603));
register_stamp_name("STAMP_core__IOFileStream_O", ADJUST_STAMP(1607));
register_stamp_name("STAMP_core__IOStreamStream_O", ADJUST_STAMP(1611));
register_stamp_name("STAMP_core__BroadcastStream_O", ADJUST_STAMP(1615));
register_stamp_name("STAMP_core__StringStream_O", ADJUST_STAMP(1619));
register_stamp_name("STAMP_core__StringOutputStream_O", ADJUST_STAMP(1623));
register_stamp_name("STAMP_core__StringInputStream_O", ADJUST_STAMP(1627));
register_stamp_name("STAMP_core__EchoStream_O", ADJUST_STAMP(1631));
register_stamp_name("STAMP_core__TwoWayStream_O", ADJUST_STAMP(1635));
register_stamp_name("STAMP_core__Package_O", ADJUST_STAMP(1639));
register_stamp_name("STAMP_core__FileStatus_O", ADJUST_STAMP(1643));
register_stamp_name("STAMP_core__InvocationHistoryFrameIterator_O", ADJUST_STAMP(1647));
register_stamp_name("STAMP_core__SourcePosInfo_O", ADJUST_STAMP(1651));
register_stamp_name("STAMP_core__IntArray_O", ADJUST_STAMP(1655));
register_stamp_name("STAMP_core__DirectoryEntry_O", ADJUST_STAMP(1659));
register_stamp_name("STAMP_core__LightUserData_O", ADJUST_STAMP(1663));
register_stamp_name("STAMP_core__UserData_O", ADJUST_STAMP(1667));
register_stamp_name("STAMP_core__Record_O", ADJUST_STAMP(1671));
register_stamp_name("STAMP_clbind__ClassRegistry_O", ADJUST_STAMP(1675));
register_stamp_name("STAMP_core__Cons_O", ADJUST_STAMP(1679));
register_stamp_name("STAMP_core__Lisp_O", ADJUST_STAMP(1683));
register_stamp_name("STAMP_clang__RecursiveASTVisitor_asttooling__AstVisitor_O_", ADJUST_STAMP(1687));
register_stamp_name("STAMP_asttooling__AstVisitor_O", ADJUST_STAMP(1691));
register_stamp_name("STAMP_clang__tooling__ToolAction", ADJUST_STAMP(1695));
register_stamp_name("STAMP_clang__tooling__FrontendActionFactory", ADJUST_STAMP(1699));
register_stamp_name("STAMP_clang__ast_matchers__MatchFinder__MatchCallback", ADJUST_STAMP(1703));
register_stamp_name("STAMP_gctools__GCContainer", ADJUST_STAMP(1707));
register_stamp_name("STAMP_gctools__GCArray_moveable_unsigned_int_", ADJUST_STAMP(1711));
register_stamp_name("STAMP_gctools__GCVector_moveable_core__CacheRecord_", ADJUST_STAMP(1715));
register_stamp_name("STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__Cons_O__", ADJUST_STAMP(1719));
register_stamp_name("STAMP_gctools__GCVector_moveable_double_", ADJUST_STAMP(1723));
register_stamp_name("STAMP_gctools__GCArray_moveable_short_", ADJUST_STAMP(1727));
register_stamp_name("STAMP_gctools__GCVector_moveable_gctools__smart_ptr_clbind__ClassRep_O__", ADJUST_STAMP(1731));
register_stamp_name("STAMP_gctools__GCBitUnitArray_moveable_4_0_", ADJUST_STAMP(1735));
register_stamp_name("STAMP_gctools__GCVector_moveable_core__Cons_O_", ADJUST_STAMP(1739));
register_stamp_name("STAMP_gctools__GCVector_moveable_core__SymbolClassHolderPair_", ADJUST_STAMP(1743));
register_stamp_name("STAMP_gctools__GCArray_moveable_signed_char_", ADJUST_STAMP(1747));
register_stamp_name("STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__List_V__", ADJUST_STAMP(1751));
register_stamp_name("STAMP_gctools__GCVector_moveable_std__pair_gctools__smart_ptr_core__T_O__gctools__smart_ptr_core__T_O___", ADJUST_STAMP(1755));
register_stamp_name("STAMP_gctools__GCArray_moveable_unsigned_char_", ADJUST_STAMP(1759));
register_stamp_name("STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__Symbol_O__", ADJUST_STAMP(1763));
register_stamp_name("STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__T_O__", ADJUST_STAMP(1767));
register_stamp_name("STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__SingleDispatchMethod_O__", ADJUST_STAMP(1771));
register_stamp_name("STAMP_gctools__GCArray_moveable_double_", ADJUST_STAMP(1775));
register_stamp_name("STAMP_gctools__GCVector_moveable_core__OptionalArgument_", ADJUST_STAMP(1779));
register_stamp_name("STAMP_gctools__GCVector_moveable_core__KeywordArgument_", ADJUST_STAMP(1783));
register_stamp_name("STAMP_gctools__GCVector_moveable_core__RequiredArgument_", ADJUST_STAMP(1787));
register_stamp_name("STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__FileScope_O__", ADJUST_STAMP(1791));
register_stamp_name("STAMP_gctools__GCBitUnitArray_moveable_4_1_", ADJUST_STAMP(1795));
register_stamp_name("STAMP_gctools__GCVector_moveable_core__SymbolStorage_", ADJUST_STAMP(1799));
register_stamp_name("STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__Instance_O__", ADJUST_STAMP(1803));
register_stamp_name("STAMP_gctools__GCArray_moveable_unsigned_long_", ADJUST_STAMP(1807));
register_stamp_name("STAMP_gctools__GCVector_moveable_std__pair_gctools__smart_ptr_core__Symbol_O__gctools__smart_ptr_core__T_O___", ADJUST_STAMP(1811));
register_stamp_name("STAMP_gctools__GCBitUnitArray_moveable_2_0_", ADJUST_STAMP(1815));
register_stamp_name("STAMP_gctools__GCArray_moveable_int_", ADJUST_STAMP(1819));
register_stamp_name("STAMP_gctools__GCBitUnitArray_moveable_1_0_", ADJUST_STAMP(1823));
register_stamp_name("STAMP_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__", ADJUST_STAMP(1827));
register_stamp_name("STAMP_gctools__GCVector_moveable_core__AuxArgument_", ADJUST_STAMP(1831));
register_stamp_name("STAMP_gctools__GCBitUnitArray_moveable_2_1_", ADJUST_STAMP(1835));
register_stamp_name("STAMP_gctools__GCArray_moveable_long_", ADJUST_STAMP(1839));
register_stamp_name("STAMP_gctools__GCVector_moveable_int_", ADJUST_STAMP(1843));
register_stamp_name("STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__Package_O__", ADJUST_STAMP(1847));
register_stamp_name("STAMP_gctools__GCArray_moveable_float_", ADJUST_STAMP(1851));
register_stamp_name("STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__Creator_O__", ADJUST_STAMP(1855));
register_stamp_name("STAMP_gctools__GCVector_moveable_core__T_O___", ADJUST_STAMP(1859));
register_stamp_name("STAMP_gctools__GCArray_moveable_unsigned_short_", ADJUST_STAMP(1863));
register_stamp_name("STAMP_gctools__GCVector_moveable_float_", ADJUST_STAMP(1867));
register_stamp_name("STAMP_clang__FrontendAction", ADJUST_STAMP(1871));
register_stamp_name("STAMP_clang__ASTFrontendAction", ADJUST_STAMP(1875));
register_stamp_name("STAMP_clang__SyntaxOnlyAction", ADJUST_STAMP(1879));

#endif // defined(GC_ENUM_NAMES)
#if defined(GC_DYNAMIC_CAST)
// STAMP_core__TwoWayStream_O
template <typename FP> struct Cast<core::TwoWayStream_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::TwoWayStream_O val -> 1635
      return (kindVal == ISA_ADJUST_STAMP(1635));
  };
};
// STAMP_core__MDArray_size_t_O
template <typename FP> struct Cast<core::MDArray_size_t_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::MDArray_size_t_O val -> 279
      return (kindVal == ISA_ADJUST_STAMP(279));
  };
};
// STAMP_core__SimpleVector_byte2_t_O
template <typename FP> struct Cast<core::SimpleVector_byte2_t_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::SimpleVector_byte2_t_O val -> 875
      return (kindVal == ISA_ADJUST_STAMP(875));
  };
};
// STAMP_gctools__GCVector_moveable_float_
template <typename FP> struct Cast<gctools::GCVector_moveable<float>*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range gctools::GCVector_moveable<float> val -> 1867
      return (kindVal == ISA_ADJUST_STAMP(1867));
  };
};
// STAMP_core__SimpleMDArray_fixnum_O
template <typename FP> struct Cast<core::SimpleMDArray_fixnum_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::SimpleMDArray_fixnum_O val -> 491
      return (kindVal == ISA_ADJUST_STAMP(491));
  };
};
// STAMP_gctools__GCArray_moveable_unsigned_short_
template <typename FP> struct Cast<gctools::GCArray_moveable<unsigned short>*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range gctools::GCArray_moveable<unsigned short> val -> 1863
      return (kindVal == ISA_ADJUST_STAMP(1863));
  };
};
// STAMP_core__ComplexVector_O
template <typename FP> struct Cast<core::ComplexVector_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::ComplexVector_O low high --> 559 723 
      return ((ISA_ADJUST_STAMP(559) <= kindVal) && (kindVal <= ISA_ADJUST_STAMP(723)));
  };
};
// STAMP_core__SimpleMDArray_int32_t_O
template <typename FP> struct Cast<core::SimpleMDArray_int32_t_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::SimpleMDArray_int32_t_O val -> 435
      return (kindVal == ISA_ADJUST_STAMP(435));
  };
};
// STAMP_core__Integer_O
template <typename FP> struct Cast<core::Integer_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::Integer_O low high --> 1551 1559 
      return ((ISA_ADJUST_STAMP(1551) <= kindVal) && (kindVal <= ISA_ADJUST_STAMP(1559)));
  };
};
// STAMP_clbind__ClassRegistry_O
template <typename FP> struct Cast<clbind::ClassRegistry_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range clbind::ClassRegistry_O val -> 1675
      return (kindVal == ISA_ADJUST_STAMP(1675));
  };
};
// STAMP_asttooling__AstVisitor_O
template <typename FP> struct Cast<asttooling::AstVisitor_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range asttooling::AstVisitor_O val -> 1691
      return (kindVal == ISA_ADJUST_STAMP(1691));
  };
};
// STAMP_mp__Process_O
template <typename FP> struct Cast<mp::Process_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range mp::Process_O val -> 207
      return (kindVal == ISA_ADJUST_STAMP(207));
  };
};
// STAMP_core__Record_O
template <typename FP> struct Cast<core::Record_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::Record_O val -> 1671
      return (kindVal == ISA_ADJUST_STAMP(1671));
  };
};
// STAMP_core__LightUserData_O
template <typename FP> struct Cast<core::LightUserData_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::LightUserData_O low high --> 1663 1667 
      return ((ISA_ADJUST_STAMP(1663) <= kindVal) && (kindVal <= ISA_ADJUST_STAMP(1667)));
  };
};
// STAMP_core__MDArrayT_O
template <typename FP> struct Cast<core::MDArrayT_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::MDArrayT_O val -> 359
      return (kindVal == ISA_ADJUST_STAMP(359));
  };
};
// STAMP_gctools__GCVector_moveable_core__T_O___
template <typename FP> struct Cast<gctools::GCVector_moveable<core::T_O *>*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range gctools::GCVector_moveable<core::T_O *> val -> 1859
      return (kindVal == ISA_ADJUST_STAMP(1859));
  };
};
// STAMP_core__DirectoryEntry_O
template <typename FP> struct Cast<core::DirectoryEntry_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::DirectoryEntry_O val -> 1659
      return (kindVal == ISA_ADJUST_STAMP(1659));
  };
};
// STAMP_llvmo__Linker_O
template <typename FP> struct Cast<llvmo::Linker_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range llvmo::Linker_O val -> 1387
      return (kindVal == ISA_ADJUST_STAMP(1387));
  };
};
// STAMP_core__IntArray_O
template <typename FP> struct Cast<core::IntArray_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::IntArray_O val -> 1655
      return (kindVal == ISA_ADJUST_STAMP(1655));
  };
};
// STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__Creator_O__
template <typename FP> struct Cast<gctools::GCVector_moveable<gctools::smart_ptr<core::Creator_O>>*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range gctools::GCVector_moveable<gctools::smart_ptr<core::Creator_O>> val -> 1855
      return (kindVal == ISA_ADJUST_STAMP(1855));
  };
};
// STAMP_core__MDArray_float_O
template <typename FP> struct Cast<core::MDArray_float_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::MDArray_float_O val -> 271
      return (kindVal == ISA_ADJUST_STAMP(271));
  };
};
// STAMP_core__SourcePosInfo_O
template <typename FP> struct Cast<core::SourcePosInfo_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::SourcePosInfo_O val -> 1651
      return (kindVal == ISA_ADJUST_STAMP(1651));
  };
};
// STAMP_llvmo__BranchInst_O
template <typename FP> struct Cast<llvmo::BranchInst_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range llvmo::BranchInst_O val -> 1279
      return (kindVal == ISA_ADJUST_STAMP(1279));
  };
};
// STAMP_llvmo__AllocaInst_O
template <typename FP> struct Cast<llvmo::AllocaInst_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range llvmo::AllocaInst_O val -> 1219
      return (kindVal == ISA_ADJUST_STAMP(1219));
  };
};
// STAMP_core__StandardClassCreator_O
template <typename FP> struct Cast<core::StandardClassCreator_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::StandardClassCreator_O val -> 95
      return (kindVal == ISA_ADJUST_STAMP(95));
  };
};
// STAMP_core__ComplexVector_float_O
template <typename FP> struct Cast<core::ComplexVector_float_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::ComplexVector_float_O val -> 623
      return (kindVal == ISA_ADJUST_STAMP(623));
  };
};
// STAMP_core__ComplexVector_byte8_t_O
template <typename FP> struct Cast<core::ComplexVector_byte8_t_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::ComplexVector_byte8_t_O val -> 663
      return (kindVal == ISA_ADJUST_STAMP(663));
  };
};
// STAMP_core__HashTable_O
template <typename FP> struct Cast<core::HashTable_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::HashTable_O low high --> 1487 1503 
      return ((ISA_ADJUST_STAMP(1487) <= kindVal) && (kindVal <= ISA_ADJUST_STAMP(1503)));
  };
};
// STAMP_gctools__GCArray_moveable_float_
template <typename FP> struct Cast<gctools::GCArray_moveable<float>*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range gctools::GCArray_moveable<float> val -> 1851
      return (kindVal == ISA_ADJUST_STAMP(1851));
  };
};
// STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__Package_O__
template <typename FP> struct Cast<gctools::GCVector_moveable<gctools::smart_ptr<core::Package_O>>*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range gctools::GCVector_moveable<gctools::smart_ptr<core::Package_O>> val -> 1847
      return (kindVal == ISA_ADJUST_STAMP(1847));
  };
};
// STAMP_core__InvocationHistoryFrameIterator_O
template <typename FP> struct Cast<core::InvocationHistoryFrameIterator_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::InvocationHistoryFrameIterator_O val -> 1647
      return (kindVal == ISA_ADJUST_STAMP(1647));
  };
};
// STAMP_core__SimpleVector_size_t_O
template <typename FP> struct Cast<core::SimpleVector_size_t_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::SimpleVector_size_t_O val -> 795
      return (kindVal == ISA_ADJUST_STAMP(795));
  };
};
// STAMP_llvmo__DIScope_O
template <typename FP> struct Cast<llvmo::DIScope_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range llvmo::DIScope_O low high --> 1119 1163 
      return ((ISA_ADJUST_STAMP(1119) <= kindVal) && (kindVal <= ISA_ADJUST_STAMP(1163)));
  };
};
// STAMP_core__FileStatus_O
template <typename FP> struct Cast<core::FileStatus_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::FileStatus_O val -> 1643
      return (kindVal == ISA_ADJUST_STAMP(1643));
  };
};
// STAMP_llvmo__IndirectBrInst_O
template <typename FP> struct Cast<llvmo::IndirectBrInst_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range llvmo::IndirectBrInst_O val -> 1275
      return (kindVal == ISA_ADJUST_STAMP(1275));
  };
};
// STAMP_llvmo__ConstantArray_O
template <typename FP> struct Cast<llvmo::ConstantArray_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range llvmo::ConstantArray_O val -> 1335
      return (kindVal == ISA_ADJUST_STAMP(1335));
  };
};
// STAMP_llvmo__PHINode_O
template <typename FP> struct Cast<llvmo::PHINode_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range llvmo::PHINode_O val -> 1271
      return (kindVal == ISA_ADJUST_STAMP(1271));
  };
};
// STAMP_core__Package_O
template <typename FP> struct Cast<core::Package_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::Package_O val -> 1639
      return (kindVal == ISA_ADJUST_STAMP(1639));
  };
};
// STAMP_core__SimpleMDArrayBaseChar_O
template <typename FP> struct Cast<core::SimpleMDArrayBaseChar_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::SimpleMDArrayBaseChar_O val -> 507
      return (kindVal == ISA_ADJUST_STAMP(507));
  };
};
// STAMP_llvmo__DILocation_O
template <typename FP> struct Cast<llvmo::DILocation_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range llvmo::DILocation_O val -> 1171
      return (kindVal == ISA_ADJUST_STAMP(1171));
  };
};
// STAMP_core__SimpleMDArray_O
template <typename FP> struct Cast<core::SimpleMDArray_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::SimpleMDArray_O low high --> 379 539 
      return ((ISA_ADJUST_STAMP(379) <= kindVal) && (kindVal <= ISA_ADJUST_STAMP(539)));
  };
};
// STAMP_core__Stream_O
template <typename FP> struct Cast<core::Stream_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::Stream_O low high --> 1587 1635 
      return ((ISA_ADJUST_STAMP(1587) <= kindVal) && (kindVal <= ISA_ADJUST_STAMP(1635)));
  };
};
// STAMP_gctools__GCVector_moveable_int_
template <typename FP> struct Cast<gctools::GCVector_moveable<int>*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range gctools::GCVector_moveable<int> val -> 1843
      return (kindVal == ISA_ADJUST_STAMP(1843));
  };
};
// STAMP_gctools__GCArray_moveable_long_
template <typename FP> struct Cast<gctools::GCArray_moveable<long>*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range gctools::GCArray_moveable<long> val -> 1839
      return (kindVal == ISA_ADJUST_STAMP(1839));
  };
};
// STAMP_llvmo__MDString_O
template <typename FP> struct Cast<llvmo::MDString_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range llvmo::MDString_O val -> 1179
      return (kindVal == ISA_ADJUST_STAMP(1179));
  };
};
// STAMP_core__ShortFloat_O
template <typename FP> struct Cast<core::ShortFloat_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::ShortFloat_O val -> 1579
      return (kindVal == ISA_ADJUST_STAMP(1579));
  };
};
// STAMP_core__Number_O
template <typename FP> struct Cast<core::Number_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::Number_O low high --> 1535 1583 
      return ((ISA_ADJUST_STAMP(1535) <= kindVal) && (kindVal <= ISA_ADJUST_STAMP(1583)));
  };
};
// STAMP_core__T_O
template <typename FP> struct Cast<core::T_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::T_O low high --> 7 1679 
      return ((ISA_ADJUST_STAMP(7) <= kindVal) && (kindVal <= ISA_ADJUST_STAMP(1679)));
  };
};
// STAMP_llvmo__DICompileUnit_O
template <typename FP> struct Cast<llvmo::DICompileUnit_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range llvmo::DICompileUnit_O val -> 1163
      return (kindVal == ISA_ADJUST_STAMP(1163));
  };
};
// STAMP_core__Cache_O
template <typename FP> struct Cast<core::Cache_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::Cache_O val -> 1531
      return (kindVal == ISA_ADJUST_STAMP(1531));
  };
};
// STAMP_core__AbstractSimpleVector_O
template <typename FP> struct Cast<core::AbstractSimpleVector_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::AbstractSimpleVector_O low high --> 727 891 
      return ((ISA_ADJUST_STAMP(727) <= kindVal) && (kindVal <= ISA_ADJUST_STAMP(891)));
  };
};
// STAMP_core__SimpleMDArray_byte16_t_O
template <typename FP> struct Cast<core::SimpleMDArray_byte16_t_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::SimpleMDArray_byte16_t_O val -> 499
      return (kindVal == ISA_ADJUST_STAMP(499));
  };
};
// STAMP_core__Pathname_O
template <typename FP> struct Cast<core::Pathname_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::Pathname_O low high --> 1523 1527 
      return ((ISA_ADJUST_STAMP(1523) <= kindVal) && (kindVal <= ISA_ADJUST_STAMP(1527)));
  };
};
// STAMP_core__Str8Ns_O
template <typename FP> struct Cast<core::Str8Ns_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::Str8Ns_O val -> 691
      return (kindVal == ISA_ADJUST_STAMP(691));
  };
};
// STAMP_llvmo__FunctionPass_O
template <typename FP> struct Cast<llvmo::FunctionPass_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range llvmo::FunctionPass_O val -> 995
      return (kindVal == ISA_ADJUST_STAMP(995));
  };
};
// STAMP_core__SimpleVector_byte4_t_O
template <typename FP> struct Cast<core::SimpleVector_byte4_t_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::SimpleVector_byte4_t_O val -> 891
      return (kindVal == ISA_ADJUST_STAMP(891));
  };
};
// STAMP_llvmo__UndefValue_O
template <typename FP> struct Cast<llvmo::UndefValue_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range llvmo::UndefValue_O val -> 1331
      return (kindVal == ISA_ADJUST_STAMP(1331));
  };
};
// STAMP_gctools__GCBitUnitArray_moveable_2_1_
template <typename FP> struct Cast<gctools::GCBitUnitArray_moveable<2,1>*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range gctools::GCBitUnitArray_moveable<2,1> val -> 1835
      return (kindVal == ISA_ADJUST_STAMP(1835));
  };
};
// STAMP_gctools__GCVector_moveable_core__AuxArgument_
template <typename FP> struct Cast<gctools::GCVector_moveable<core::AuxArgument>*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range gctools::GCVector_moveable<core::AuxArgument> val -> 1831
      return (kindVal == ISA_ADJUST_STAMP(1831));
  };
};
// STAMP_llvmo__CallBase_O
template <typename FP> struct Cast<llvmo::CallBase_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range llvmo::CallBase_O low high --> 1259 1267 
      return ((ISA_ADJUST_STAMP(1259) <= kindVal) && (kindVal <= ISA_ADJUST_STAMP(1267)));
  };
};
// STAMP_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__
template <typename FP> struct Cast<gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>>*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>> val -> 1827
      return (kindVal == ISA_ADJUST_STAMP(1827));
  };
};
// STAMP_core__CompileTimeEnvironment_O
template <typename FP> struct Cast<core::CompileTimeEnvironment_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::CompileTimeEnvironment_O low high --> 1435 1455 
      return ((ISA_ADJUST_STAMP(1435) <= kindVal) && (kindVal <= ISA_ADJUST_STAMP(1455)));
  };
};
// STAMP_core__Path_O
template <typename FP> struct Cast<core::Path_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::Path_O val -> 1519
      return (kindVal == ISA_ADJUST_STAMP(1519));
  };
};
// STAMP_mp__SharedMutex_O
template <typename FP> struct Cast<mp::SharedMutex_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range mp::SharedMutex_O val -> 203
      return (kindVal == ISA_ADJUST_STAMP(203));
  };
};
// STAMP_gctools__GCBitUnitArray_moveable_1_0_
template <typename FP> struct Cast<gctools::GCBitUnitArray_moveable<1,0>*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range gctools::GCBitUnitArray_moveable<1,0> val -> 1823
      return (kindVal == ISA_ADJUST_STAMP(1823));
  };
};
// STAMP_gctools__GCArray_moveable_int_
template <typename FP> struct Cast<gctools::GCArray_moveable<int>*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range gctools::GCArray_moveable<int> val -> 1819
      return (kindVal == ISA_ADJUST_STAMP(1819));
  };
};
// STAMP_core__InstanceCreator_O
template <typename FP> struct Cast<core::InstanceCreator_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::InstanceCreator_O val -> 91
      return (kindVal == ISA_ADJUST_STAMP(91));
  };
};
// STAMP_core__IOStreamStream_O
template <typename FP> struct Cast<core::IOStreamStream_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::IOStreamStream_O val -> 1611
      return (kindVal == ISA_ADJUST_STAMP(1611));
  };
};
// STAMP_core__Scope_O
template <typename FP> struct Cast<core::Scope_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::Scope_O low high --> 1511 1515 
      return ((ISA_ADJUST_STAMP(1511) <= kindVal) && (kindVal <= ISA_ADJUST_STAMP(1515)));
  };
};
// STAMP_llvmo__InsertPoint_O
template <typename FP> struct Cast<llvmo::InsertPoint_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range llvmo::InsertPoint_O val -> 1507
      return (kindVal == ISA_ADJUST_STAMP(1507));
  };
};
// STAMP_core__ComplexVector_double_O
template <typename FP> struct Cast<core::ComplexVector_double_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::ComplexVector_double_O val -> 567
      return (kindVal == ISA_ADJUST_STAMP(567));
  };
};
// STAMP_core__StrWNs_O
template <typename FP> struct Cast<core::StrWNs_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::StrWNs_O val -> 699
      return (kindVal == ISA_ADJUST_STAMP(699));
  };
};
// STAMP_core__EchoStream_O
template <typename FP> struct Cast<core::EchoStream_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::EchoStream_O val -> 1631
      return (kindVal == ISA_ADJUST_STAMP(1631));
  };
};
// STAMP_core__HashTableBase_O
template <typename FP> struct Cast<core::HashTableBase_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::HashTableBase_O low high --> 1479 1503 
      return ((ISA_ADJUST_STAMP(1479) <= kindVal) && (kindVal <= ISA_ADJUST_STAMP(1503)));
  };
};
// STAMP_core__SimpleMDArrayBit_O
template <typename FP> struct Cast<core::SimpleMDArrayBit_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::SimpleMDArrayBit_O val -> 523
      return (kindVal == ISA_ADJUST_STAMP(523));
  };
};
// STAMP_core__MDArrayBit_O
template <typename FP> struct Cast<core::MDArrayBit_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::MDArrayBit_O val -> 367
      return (kindVal == ISA_ADJUST_STAMP(367));
  };
};
// STAMP_core__ComplexVector_byte16_t_O
template <typename FP> struct Cast<core::ComplexVector_byte16_t_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::ComplexVector_byte16_t_O val -> 615
      return (kindVal == ISA_ADJUST_STAMP(615));
  };
};
// STAMP_core__AtomicFixnumHolder_O
template <typename FP> struct Cast<core::AtomicFixnumHolder_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::AtomicFixnumHolder_O val -> 1475
      return (kindVal == ISA_ADJUST_STAMP(1475));
  };
};
// STAMP_llvmo__DILocalScope_O
template <typename FP> struct Cast<llvmo::DILocalScope_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range llvmo::DILocalScope_O low high --> 1147 1159 
      return ((ISA_ADJUST_STAMP(1147) <= kindVal) && (kindVal <= ISA_ADJUST_STAMP(1159)));
  };
};
// STAMP_core__ComplexVector_int2_t_O
template <typename FP> struct Cast<core::ComplexVector_int2_t_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::ComplexVector_int2_t_O val -> 599
      return (kindVal == ISA_ADJUST_STAMP(599));
  };
};
// STAMP_gctools__GCBitUnitArray_moveable_2_0_
template <typename FP> struct Cast<gctools::GCBitUnitArray_moveable<2,0>*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range gctools::GCBitUnitArray_moveable<2,0> val -> 1815
      return (kindVal == ISA_ADJUST_STAMP(1815));
  };
};
// STAMP_gctools__GCVector_moveable_std__pair_gctools__smart_ptr_core__Symbol_O__gctools__smart_ptr_core__T_O___
template <typename FP> struct Cast<gctools::GCVector_moveable<std::pair<gctools::smart_ptr<core::Symbol_O>,gctools::smart_ptr<core::T_O>>>*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range gctools::GCVector_moveable<std::pair<gctools::smart_ptr<core::Symbol_O>,gctools::smart_ptr<core::T_O>>> val -> 1811
      return (kindVal == ISA_ADJUST_STAMP(1811));
  };
};
// STAMP_llvmo__DILexicalBlock_O
template <typename FP> struct Cast<llvmo::DILexicalBlock_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range llvmo::DILexicalBlock_O val -> 1159
      return (kindVal == ISA_ADJUST_STAMP(1159));
  };
};
// STAMP_llvmo__DITypeRefArray_O
template <typename FP> struct Cast<llvmo::DITypeRefArray_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range llvmo::DITypeRefArray_O val -> 199
      return (kindVal == ISA_ADJUST_STAMP(199));
  };
};
// STAMP_mp__Mutex_O
template <typename FP> struct Cast<mp::Mutex_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range mp::Mutex_O low high --> 191 195 
      return ((ISA_ADJUST_STAMP(191) <= kindVal) && (kindVal <= ISA_ADJUST_STAMP(195)));
  };
};
// STAMP_core__RecursiveDirectoryIterator_O
template <typename FP> struct Cast<core::RecursiveDirectoryIterator_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::RecursiveDirectoryIterator_O val -> 223
      return (kindVal == ISA_ADJUST_STAMP(223));
  };
};
// STAMP_core__StringInputStream_O
template <typename FP> struct Cast<core::StringInputStream_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::StringInputStream_O val -> 1627
      return (kindVal == ISA_ADJUST_STAMP(1627));
  };
};
// STAMP_llvmo__ModulePass_O
template <typename FP> struct Cast<llvmo::ModulePass_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range llvmo::ModulePass_O low high --> 983 991 
      return ((ISA_ADJUST_STAMP(983) <= kindVal) && (kindVal <= ISA_ADJUST_STAMP(991)));
  };
};
// STAMP_core__FunctionFrame_O
template <typename FP> struct Cast<core::FunctionFrame_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::FunctionFrame_O val -> 1467
      return (kindVal == ISA_ADJUST_STAMP(1467));
  };
};
// STAMP_llvmo__DILocalVariable_O
template <typename FP> struct Cast<llvmo::DILocalVariable_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range llvmo::DILocalVariable_O val -> 1115
      return (kindVal == ISA_ADJUST_STAMP(1115));
  };
};
// STAMP_core__LongFloat_O
template <typename FP> struct Cast<core::LongFloat_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::LongFloat_O val -> 1575
      return (kindVal == ISA_ADJUST_STAMP(1575));
  };
};
// STAMP_core__ComplexVector_int4_t_O
template <typename FP> struct Cast<core::ComplexVector_int4_t_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::ComplexVector_int4_t_O val -> 639
      return (kindVal == ISA_ADJUST_STAMP(639));
  };
};
// STAMP_llvmo__TargetLibraryInfoWrapperPass_O
template <typename FP> struct Cast<llvmo::TargetLibraryInfoWrapperPass_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range llvmo::TargetLibraryInfoWrapperPass_O val -> 991
      return (kindVal == ISA_ADJUST_STAMP(991));
  };
};
// STAMP_llvmo__User_O
template <typename FP> struct Cast<llvmo::User_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range llvmo::User_O low high --> 1199 1335 
      return ((ISA_ADJUST_STAMP(1199) <= kindVal) && (kindVal <= ISA_ADJUST_STAMP(1335)));
  };
};
// STAMP_core__MDArray_int16_t_O
template <typename FP> struct Cast<core::MDArray_int16_t_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::MDArray_int16_t_O val -> 239
      return (kindVal == ISA_ADJUST_STAMP(239));
  };
};
// STAMP_core__ComplexVector_T_O
template <typename FP> struct Cast<core::ComplexVector_T_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::ComplexVector_T_O val -> 591
      return (kindVal == ISA_ADJUST_STAMP(591));
  };
};
// STAMP_llvmo__FenceInst_O
template <typename FP> struct Cast<llvmo::FenceInst_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range llvmo::FenceInst_O val -> 1255
      return (kindVal == ISA_ADJUST_STAMP(1255));
  };
};
// STAMP_llvmo__AtomicCmpXchgInst_O
template <typename FP> struct Cast<llvmo::AtomicCmpXchgInst_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range llvmo::AtomicCmpXchgInst_O val -> 1251
      return (kindVal == ISA_ADJUST_STAMP(1251));
  };
};
// STAMP_core__ValueFrame_O
template <typename FP> struct Cast<core::ValueFrame_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::ValueFrame_O val -> 1463
      return (kindVal == ISA_ADJUST_STAMP(1463));
  };
};
// STAMP_core__ComplexVector_int8_t_O
template <typename FP> struct Cast<core::ComplexVector_int8_t_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::ComplexVector_int8_t_O val -> 575
      return (kindVal == ISA_ADJUST_STAMP(575));
  };
};
// STAMP_gctools__GCArray_moveable_unsigned_long_
template <typename FP> struct Cast<gctools::GCArray_moveable<unsigned long>*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range gctools::GCArray_moveable<unsigned long> val -> 1807
      return (kindVal == ISA_ADJUST_STAMP(1807));
  };
};
// STAMP_core__SimpleMDArray_int4_t_O
template <typename FP> struct Cast<core::SimpleMDArray_int4_t_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::SimpleMDArray_int4_t_O val -> 467
      return (kindVal == ISA_ADJUST_STAMP(467));
  };
};
// STAMP_core__SimpleVector_int32_t_O
template <typename FP> struct Cast<core::SimpleVector_int32_t_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::SimpleVector_int32_t_O val -> 883
      return (kindVal == ISA_ADJUST_STAMP(883));
  };
};
// STAMP_core__SimpleMDArray_double_O
template <typename FP> struct Cast<core::SimpleMDArray_double_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::SimpleMDArray_double_O val -> 395
      return (kindVal == ISA_ADJUST_STAMP(395));
  };
};
// STAMP_core__Complex_O
template <typename FP> struct Cast<core::Complex_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::Complex_O val -> 1583
      return (kindVal == ISA_ADJUST_STAMP(1583));
  };
};
// STAMP_llvmo__ConstantPointerNull_O
template <typename FP> struct Cast<llvmo::ConstantPointerNull_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range llvmo::ConstantPointerNull_O val -> 1327
      return (kindVal == ISA_ADJUST_STAMP(1327));
  };
};
// STAMP_llvmo__VectorType_O
template <typename FP> struct Cast<llvmo::VectorType_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range llvmo::VectorType_O val -> 1035
      return (kindVal == ISA_ADJUST_STAMP(1035));
  };
};
// STAMP_llvmo__ValueAsMetadata_O
template <typename FP> struct Cast<llvmo::ValueAsMetadata_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range llvmo::ValueAsMetadata_O val -> 1175
      return (kindVal == ISA_ADJUST_STAMP(1175));
  };
};
// STAMP_llvmo__ConstantExpr_O
template <typename FP> struct Cast<llvmo::ConstantExpr_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range llvmo::ConstantExpr_O val -> 1323
      return (kindVal == ISA_ADJUST_STAMP(1323));
  };
};
// STAMP_core__SingleDispatchEffectiveMethodFunction_O
template <typename FP> struct Cast<core::SingleDispatchEffectiveMethodFunction_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::SingleDispatchEffectiveMethodFunction_O val -> 135
      return (kindVal == ISA_ADJUST_STAMP(135));
  };
};
// STAMP_llvmo__StructType_O
template <typename FP> struct Cast<llvmo::StructType_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range llvmo::StructType_O val -> 1039
      return (kindVal == ISA_ADJUST_STAMP(1039));
  };
};
// STAMP_core__RandomState_O
template <typename FP> struct Cast<core::RandomState_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::RandomState_O val -> 1471
      return (kindVal == ISA_ADJUST_STAMP(1471));
  };
};
// STAMP_core__ComplexVector_int16_t_O
template <typename FP> struct Cast<core::ComplexVector_int16_t_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::ComplexVector_int16_t_O val -> 631
      return (kindVal == ISA_ADJUST_STAMP(631));
  };
};
// STAMP_core__SimpleMDArray_float_O
template <typename FP> struct Cast<core::SimpleMDArray_float_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::SimpleMDArray_float_O val -> 443
      return (kindVal == ISA_ADJUST_STAMP(443));
  };
};
// STAMP_llvmo__Target_O
template <typename FP> struct Cast<llvmo::Target_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range llvmo::Target_O val -> 1383
      return (kindVal == ISA_ADJUST_STAMP(1383));
  };
};
// STAMP_core__SimpleVector_int2_t_O
template <typename FP> struct Cast<core::SimpleVector_int2_t_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::SimpleVector_int2_t_O val -> 819
      return (kindVal == ISA_ADJUST_STAMP(819));
  };
};
// STAMP_core__MDArray_byte64_t_O
template <typename FP> struct Cast<core::MDArray_byte64_t_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::MDArray_byte64_t_O val -> 343
      return (kindVal == ISA_ADJUST_STAMP(343));
  };
};
// STAMP_core__SimpleVector_fixnum_O
template <typename FP> struct Cast<core::SimpleVector_fixnum_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::SimpleVector_fixnum_O val -> 835
      return (kindVal == ISA_ADJUST_STAMP(835));
  };
};
// STAMP_core__SimpleVector_byte32_t_O
template <typename FP> struct Cast<core::SimpleVector_byte32_t_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::SimpleVector_byte32_t_O val -> 787
      return (kindVal == ISA_ADJUST_STAMP(787));
  };
};
// STAMP_core__SingleDispatchGenericFunctionClosure_O
template <typename FP> struct Cast<core::SingleDispatchGenericFunctionClosure_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::SingleDispatchGenericFunctionClosure_O val -> 131
      return (kindVal == ISA_ADJUST_STAMP(131));
  };
};
// STAMP_core__AnsiStream_O
template <typename FP> struct Cast<core::AnsiStream_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::AnsiStream_O low high --> 1591 1635 
      return ((ISA_ADJUST_STAMP(1591) <= kindVal) && (kindVal <= ISA_ADJUST_STAMP(1635)));
  };
};
// STAMP_core__BuiltinClosure_O
template <typename FP> struct Cast<core::BuiltinClosure_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::BuiltinClosure_O low high --> 123 127 
      return ((ISA_ADJUST_STAMP(123) <= kindVal) && (kindVal <= ISA_ADJUST_STAMP(127)));
  };
};
// STAMP_core__SingleFloat_dummy_O
template <typename FP> struct Cast<core::SingleFloat_dummy_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::SingleFloat_dummy_O val -> 1571
      return (kindVal == ISA_ADJUST_STAMP(1571));
  };
};
// STAMP_llvmo__DIExpression_O
template <typename FP> struct Cast<llvmo::DIExpression_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range llvmo::DIExpression_O val -> 1167
      return (kindVal == ISA_ADJUST_STAMP(1167));
  };
};
// STAMP_llvmo__Module_O
template <typename FP> struct Cast<llvmo::Module_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range llvmo::Module_O val -> 1379
      return (kindVal == ISA_ADJUST_STAMP(1379));
  };
};
// STAMP_core__Environment_O
template <typename FP> struct Cast<core::Environment_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::Environment_O low high --> 1403 1467 
      return ((ISA_ADJUST_STAMP(1403) <= kindVal) && (kindVal <= ISA_ADJUST_STAMP(1467)));
  };
};
// STAMP_core__ValueEnvironment_O
template <typename FP> struct Cast<core::ValueEnvironment_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::ValueEnvironment_O val -> 1431
      return (kindVal == ISA_ADJUST_STAMP(1431));
  };
};
// STAMP_llvmo__InvokeInst_O
template <typename FP> struct Cast<llvmo::InvokeInst_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range llvmo::InvokeInst_O val -> 1267
      return (kindVal == ISA_ADJUST_STAMP(1267));
  };
};
// STAMP_core__CxxMethodFunction_O
template <typename FP> struct Cast<core::CxxMethodFunction_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::CxxMethodFunction_O val -> 119
      return (kindVal == ISA_ADJUST_STAMP(119));
  };
};
// STAMP_core__StrNs_O
template <typename FP> struct Cast<core::StrNs_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::StrNs_O low high --> 683 699 
      return ((ISA_ADJUST_STAMP(683) <= kindVal) && (kindVal <= ISA_ADJUST_STAMP(699)));
  };
};
// STAMP_core__UnwindProtectEnvironment_O
template <typename FP> struct Cast<core::UnwindProtectEnvironment_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::UnwindProtectEnvironment_O val -> 1455
      return (kindVal == ISA_ADJUST_STAMP(1455));
  };
};
// STAMP_clasp_ffi__ForeignData_O
template <typename FP> struct Cast<clasp_ffi::ForeignData_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range clasp_ffi::ForeignData_O val -> 151
      return (kindVal == ISA_ADJUST_STAMP(151));
  };
};
// STAMP_llvmo__CallInst_O
template <typename FP> struct Cast<llvmo::CallInst_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range llvmo::CallInst_O val -> 1263
      return (kindVal == ISA_ADJUST_STAMP(1263));
  };
};
// STAMP_llvmo__FunctionPassManager_O
template <typename FP> struct Cast<llvmo::FunctionPassManager_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range llvmo::FunctionPassManager_O val -> 1095
      return (kindVal == ISA_ADJUST_STAMP(1095));
  };
};
// STAMP_core__DoubleFloat_O
template <typename FP> struct Cast<core::DoubleFloat_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::DoubleFloat_O val -> 1567
      return (kindVal == ISA_ADJUST_STAMP(1567));
  };
};
// STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__Instance_O__
template <typename FP> struct Cast<gctools::GCVector_moveable<gctools::smart_ptr<core::Instance_O>>*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range gctools::GCVector_moveable<gctools::smart_ptr<core::Instance_O>> val -> 1803
      return (kindVal == ISA_ADJUST_STAMP(1803));
  };
};
// STAMP_core__StringStream_O
template <typename FP> struct Cast<core::StringStream_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::StringStream_O low high --> 1619 1627 
      return ((ISA_ADJUST_STAMP(1619) <= kindVal) && (kindVal <= ISA_ADJUST_STAMP(1627)));
  };
};
// STAMP_gctools__GCVector_moveable_core__SymbolStorage_
template <typename FP> struct Cast<gctools::GCVector_moveable<core::SymbolStorage>*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range gctools::GCVector_moveable<core::SymbolStorage> val -> 1799
      return (kindVal == ISA_ADJUST_STAMP(1799));
  };
};
// STAMP_core__Sigset_O
template <typename FP> struct Cast<core::Sigset_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::Sigset_O val -> 1399
      return (kindVal == ISA_ADJUST_STAMP(1399));
  };
};
// STAMP_core__MDArray_int32_t_O
template <typename FP> struct Cast<core::MDArray_int32_t_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::MDArray_int32_t_O val -> 255
      return (kindVal == ISA_ADJUST_STAMP(255));
  };
};
// STAMP_asttooling__AsttoolingExposer_O
template <typename FP> struct Cast<asttooling::AsttoolingExposer_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range asttooling::AsttoolingExposer_O val -> 939
      return (kindVal == ISA_ADJUST_STAMP(939));
  };
};
// STAMP_llvmo__IntegerType_O
template <typename FP> struct Cast<llvmo::IntegerType_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range llvmo::IntegerType_O val -> 1043
      return (kindVal == ISA_ADJUST_STAMP(1043));
  };
};
// STAMP_core__MDArray_int64_t_O
template <typename FP> struct Cast<core::MDArray_int64_t_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::MDArray_int64_t_O val -> 295
      return (kindVal == ISA_ADJUST_STAMP(295));
  };
};
// STAMP_core__SimpleMDArray_size_t_O
template <typename FP> struct Cast<core::SimpleMDArray_size_t_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::SimpleMDArray_size_t_O val -> 459
      return (kindVal == ISA_ADJUST_STAMP(459));
  };
};
// STAMP_core__SmallMultimap_O
template <typename FP> struct Cast<core::SmallMultimap_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::SmallMultimap_O val -> 1395
      return (kindVal == ISA_ADJUST_STAMP(1395));
  };
};
// STAMP_llvmo__PassManagerBuilder_O
template <typename FP> struct Cast<llvmo::PassManagerBuilder_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range llvmo::PassManagerBuilder_O val -> 1375
      return (kindVal == ISA_ADJUST_STAMP(1375));
  };
};
// STAMP_core__Fixnum_dummy_O
template <typename FP> struct Cast<core::Fixnum_dummy_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::Fixnum_dummy_O val -> 1559
      return (kindVal == ISA_ADJUST_STAMP(1559));
  };
};
// STAMP_core__MDArray_int8_t_O
template <typename FP> struct Cast<core::MDArray_int8_t_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::MDArray_int8_t_O val -> 247
      return (kindVal == ISA_ADJUST_STAMP(247));
  };
};
// STAMP_llvmo__ConstantFP_O
template <typename FP> struct Cast<llvmo::ConstantFP_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range llvmo::ConstantFP_O val -> 1319
      return (kindVal == ISA_ADJUST_STAMP(1319));
  };
};
// STAMP_core__SingleDispatchMethodFunction_O
template <typename FP> struct Cast<core::SingleDispatchMethodFunction_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::SingleDispatchMethodFunction_O low high --> 115 119 
      return ((ISA_ADJUST_STAMP(115) <= kindVal) && (kindVal <= ISA_ADJUST_STAMP(119)));
  };
};
// STAMP_core__Cons_O
template <typename FP> struct Cast<core::Cons_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::Cons_O val -> 1679
      return (kindVal == ISA_ADJUST_STAMP(1679));
  };
};
// STAMP_gctools__GCBitUnitArray_moveable_4_1_
template <typename FP> struct Cast<gctools::GCBitUnitArray_moveable<4,1>*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range gctools::GCBitUnitArray_moveable<4,1> val -> 1795
      return (kindVal == ISA_ADJUST_STAMP(1795));
  };
};
// STAMP_llvmo__LLVMContext_O
template <typename FP> struct Cast<llvmo::LLVMContext_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range llvmo::LLVMContext_O val -> 1371
      return (kindVal == ISA_ADJUST_STAMP(1371));
  };
};
// STAMP_core__MDArray_int4_t_O
template <typename FP> struct Cast<core::MDArray_int4_t_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::MDArray_int4_t_O val -> 547
      return (kindVal == ISA_ADJUST_STAMP(547));
  };
};
// STAMP_core__WeakKeyHashTable_O
template <typename FP> struct Cast<core::WeakKeyHashTable_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::WeakKeyHashTable_O val -> 1483
      return (kindVal == ISA_ADJUST_STAMP(1483));
  };
};
// STAMP_core__Rack_O
template <typename FP> struct Cast<core::Rack_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::Rack_O val -> 1391
      return (kindVal == ISA_ADJUST_STAMP(1391));
  };
};
// STAMP_core__MDArrayBaseChar_O
template <typename FP> struct Cast<core::MDArrayBaseChar_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::MDArrayBaseChar_O val -> 335
      return (kindVal == ISA_ADJUST_STAMP(335));
  };
};
// STAMP_core__UserData_O
template <typename FP> struct Cast<core::UserData_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::UserData_O val -> 1667
      return (kindVal == ISA_ADJUST_STAMP(1667));
  };
};
// STAMP_core__ExternalObject_O
template <typename FP> struct Cast<core::ExternalObject_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::ExternalObject_O low high --> 975 1387 
      return ((ISA_ADJUST_STAMP(975) <= kindVal) && (kindVal <= ISA_ADJUST_STAMP(1387)));
  };
};
// STAMP_llvmo__DINode_O
template <typename FP> struct Cast<llvmo::DINode_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range llvmo::DINode_O low high --> 1107 1163 
      return ((ISA_ADJUST_STAMP(1107) <= kindVal) && (kindVal <= ISA_ADJUST_STAMP(1163)));
  };
};
// STAMP_llvmo__GlobalVariable_O
template <typename FP> struct Cast<llvmo::GlobalVariable_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range llvmo::GlobalVariable_O val -> 1295
      return (kindVal == ISA_ADJUST_STAMP(1295));
  };
};
// STAMP_core__BroadcastStream_O
template <typename FP> struct Cast<core::BroadcastStream_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::BroadcastStream_O val -> 1615
      return (kindVal == ISA_ADJUST_STAMP(1615));
  };
};
// STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__FileScope_O__
template <typename FP> struct Cast<gctools::GCVector_moveable<gctools::smart_ptr<core::FileScope_O>>*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range gctools::GCVector_moveable<gctools::smart_ptr<core::FileScope_O>> val -> 1791
      return (kindVal == ISA_ADJUST_STAMP(1791));
  };
};
// STAMP_core__General_O
template <typename FP> struct Cast<core::General_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::General_O low high --> 19 1675 
      return ((ISA_ADJUST_STAMP(19) <= kindVal) && (kindVal <= ISA_ADJUST_STAMP(1675)));
  };
};
// STAMP_llvmo__ObjectFile_O
template <typename FP> struct Cast<llvmo::ObjectFile_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range llvmo::ObjectFile_O val -> 1367
      return (kindVal == ISA_ADJUST_STAMP(1367));
  };
};
// STAMP_core__Closure_O
template <typename FP> struct Cast<core::Closure_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::Closure_O low high --> 103 135 
      return ((ISA_ADJUST_STAMP(103) <= kindVal) && (kindVal <= ISA_ADJUST_STAMP(135)));
  };
};
// STAMP_core__ComplexVector_size_t_O
template <typename FP> struct Cast<core::ComplexVector_size_t_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::ComplexVector_size_t_O val -> 647
      return (kindVal == ISA_ADJUST_STAMP(647));
  };
};
// STAMP_gctools__GCVector_moveable_core__RequiredArgument_
template <typename FP> struct Cast<gctools::GCVector_moveable<core::RequiredArgument>*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range gctools::GCVector_moveable<core::RequiredArgument> val -> 1787
      return (kindVal == ISA_ADJUST_STAMP(1787));
  };
};
// STAMP_core__BlockEnvironment_O
template <typename FP> struct Cast<core::BlockEnvironment_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::BlockEnvironment_O val -> 1427
      return (kindVal == ISA_ADJUST_STAMP(1427));
  };
};
// STAMP_mpip__Mpi_O
template <typename FP> struct Cast<mpip::Mpi_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range mpip::Mpi_O val -> 971
      return (kindVal == ISA_ADJUST_STAMP(971));
  };
};
// STAMP_llvmo__DINodeArray_O
template <typename FP> struct Cast<llvmo::DINodeArray_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range llvmo::DINodeArray_O val -> 187
      return (kindVal == ISA_ADJUST_STAMP(187));
  };
};
// STAMP_llvmo__ConstantDataArray_O
template <typename FP> struct Cast<llvmo::ConstantDataArray_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range llvmo::ConstantDataArray_O val -> 1307
      return (kindVal == ISA_ADJUST_STAMP(1307));
  };
};
// STAMP_core__SmallMap_O
template <typename FP> struct Cast<core::SmallMap_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::SmallMap_O val -> 967
      return (kindVal == ISA_ADJUST_STAMP(967));
  };
};
// STAMP_core__Instance_O
template <typename FP> struct Cast<core::Instance_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::Instance_O low high --> 953 961 
      if ((ISA_ADJUST_STAMP(953) <= kindVal) && (kindVal <= ISA_ADJUST_STAMP(961))) return true;
      return (dynamic_cast<core::Instance_O*>(client)!=NULL);
  };
};
// STAMP_llvmo__TargetOptions_O
template <typename FP> struct Cast<llvmo::TargetOptions_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range llvmo::TargetOptions_O val -> 1363
      return (kindVal == ISA_ADJUST_STAMP(1363));
  };
};
// STAMP_clasp_ffi__ForeignTypeSpec_O
template <typename FP> struct Cast<clasp_ffi::ForeignTypeSpec_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range clasp_ffi::ForeignTypeSpec_O val -> 951
      return (kindVal == ISA_ADJUST_STAMP(951));
  };
};
// STAMP_core__Unused_dummy_O
template <typename FP> struct Cast<core::Unused_dummy_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::Unused_dummy_O val -> 15
      return (kindVal == ISA_ADJUST_STAMP(15));
  };
};
// STAMP_core__PosixTimeDuration_O
template <typename FP> struct Cast<core::PosixTimeDuration_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::PosixTimeDuration_O val -> 947
      return (kindVal == ISA_ADJUST_STAMP(947));
  };
};
// STAMP_llvmo__DWARFContext_O
template <typename FP> struct Cast<llvmo::DWARFContext_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range llvmo::DWARFContext_O val -> 1359
      return (kindVal == ISA_ADJUST_STAMP(1359));
  };
};
// STAMP_core__HashTableEqual_O
template <typename FP> struct Cast<core::HashTableEqual_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::HashTableEqual_O val -> 1503
      return (kindVal == ISA_ADJUST_STAMP(1503));
  };
};
// STAMP_core__SimpleMDArray_byte64_t_O
template <typename FP> struct Cast<core::SimpleMDArray_byte64_t_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::SimpleMDArray_byte64_t_O val -> 515
      return (kindVal == ISA_ADJUST_STAMP(515));
  };
};
// STAMP_llvmo__Triple_O
template <typename FP> struct Cast<llvmo::Triple_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range llvmo::Triple_O val -> 1355
      return (kindVal == ISA_ADJUST_STAMP(1355));
  };
};
// STAMP_core__BitVectorNs_O
template <typename FP> struct Cast<core::BitVectorNs_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::BitVectorNs_O val -> 679
      return (kindVal == ISA_ADJUST_STAMP(679));
  };
};
// STAMP_core__CoreExposer_O
template <typename FP> struct Cast<core::CoreExposer_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::CoreExposer_O val -> 935
      return (kindVal == ISA_ADJUST_STAMP(935));
  };
};
// STAMP_gctools__GCVector_moveable_core__KeywordArgument_
template <typename FP> struct Cast<gctools::GCVector_moveable<core::KeywordArgument>*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range gctools::GCVector_moveable<core::KeywordArgument> val -> 1783
      return (kindVal == ISA_ADJUST_STAMP(1783));
  };
};
// STAMP_llvmo__NamedMDNode_O
template <typename FP> struct Cast<llvmo::NamedMDNode_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range llvmo::NamedMDNode_O val -> 1351
      return (kindVal == ISA_ADJUST_STAMP(1351));
  };
};
// STAMP_core__SimpleVector_byte16_t_O
template <typename FP> struct Cast<core::SimpleVector_byte16_t_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::SimpleVector_byte16_t_O val -> 763
      return (kindVal == ISA_ADJUST_STAMP(763));
  };
};
// STAMP_llvmo__ThreadSafeContext_O
template <typename FP> struct Cast<llvmo::ThreadSafeContext_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range llvmo::ThreadSafeContext_O val -> 1347
      return (kindVal == ISA_ADJUST_STAMP(1347));
  };
};
// STAMP_llvmo__TargetMachine_O
template <typename FP> struct Cast<llvmo::TargetMachine_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range llvmo::TargetMachine_O low high --> 1339 1343 
      return ((ISA_ADJUST_STAMP(1339) <= kindVal) && (kindVal <= ISA_ADJUST_STAMP(1343)));
  };
};
// STAMP_core__SimpleVector_byte64_t_O
template <typename FP> struct Cast<core::SimpleVector_byte64_t_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::SimpleVector_byte64_t_O val -> 811
      return (kindVal == ISA_ADJUST_STAMP(811));
  };
};
// STAMP_llvmo__Value_O
template <typename FP> struct Cast<llvmo::Value_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range llvmo::Value_O low high --> 1183 1335 
      return ((ISA_ADJUST_STAMP(1183) <= kindVal) && (kindVal <= ISA_ADJUST_STAMP(1335)));
  };
};
// STAMP_core__SimpleBaseString_O
template <typename FP> struct Cast<core::SimpleBaseString_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::SimpleBaseString_O val -> 747
      return (kindVal == ISA_ADJUST_STAMP(747));
  };
};
// STAMP_llvmo__Metadata_O
template <typename FP> struct Cast<llvmo::Metadata_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range llvmo::Metadata_O low high --> 1099 1179 
      return ((ISA_ADJUST_STAMP(1099) <= kindVal) && (kindVal <= ISA_ADJUST_STAMP(1179)));
  };
};
// STAMP_core__MDArray_O
template <typename FP> struct Cast<core::MDArray_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::MDArray_O low high --> 231 723 
      return ((ISA_ADJUST_STAMP(231) <= kindVal) && (kindVal <= ISA_ADJUST_STAMP(723)));
  };
};
// STAMP_gctools__GCVector_moveable_core__OptionalArgument_
template <typename FP> struct Cast<gctools::GCVector_moveable<core::OptionalArgument>*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range gctools::GCVector_moveable<core::OptionalArgument> val -> 1779
      return (kindVal == ISA_ADJUST_STAMP(1779));
  };
};
// STAMP_core__Serializer_O
template <typename FP> struct Cast<core::Serializer_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::Serializer_O val -> 183
      return (kindVal == ISA_ADJUST_STAMP(183));
  };
};
// STAMP_clbind__ClassRep_O
template <typename FP> struct Cast<clbind::ClassRep_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range clbind::ClassRep_O val -> 961
      return (kindVal == ISA_ADJUST_STAMP(961));
  };
};
// STAMP_llvmo__ConstantInt_O
template <typename FP> struct Cast<llvmo::ConstantInt_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range llvmo::ConstantInt_O val -> 1315
      return (kindVal == ISA_ADJUST_STAMP(1315));
  };
};
// STAMP_gctools__GCArray_moveable_double_
template <typename FP> struct Cast<gctools::GCArray_moveable<double>*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range gctools::GCArray_moveable<double> val -> 1775
      return (kindVal == ISA_ADJUST_STAMP(1775));
  };
};
// STAMP_core__SimpleMDArray_int16_t_O
template <typename FP> struct Cast<core::SimpleMDArray_int16_t_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::SimpleMDArray_int16_t_O val -> 451
      return (kindVal == ISA_ADJUST_STAMP(451));
  };
};
// STAMP_llvmo__StructLayout_O
template <typename FP> struct Cast<llvmo::StructLayout_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range llvmo::StructLayout_O val -> 943
      return (kindVal == ISA_ADJUST_STAMP(943));
  };
};
// STAMP_llvmo__CompositeType_O
template <typename FP> struct Cast<llvmo::CompositeType_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range llvmo::CompositeType_O low high --> 1019 1039 
      return ((ISA_ADJUST_STAMP(1019) <= kindVal) && (kindVal <= ISA_ADJUST_STAMP(1039)));
  };
};
// STAMP_core__SimpleMDArrayT_O
template <typename FP> struct Cast<core::SimpleMDArrayT_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::SimpleMDArrayT_O val -> 411
      return (kindVal == ISA_ADJUST_STAMP(411));
  };
};
// STAMP_core__ActivationFrame_O
template <typename FP> struct Cast<core::ActivationFrame_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::ActivationFrame_O low high --> 1459 1467 
      return ((ISA_ADJUST_STAMP(1459) <= kindVal) && (kindVal <= ISA_ADJUST_STAMP(1467)));
  };
};
// STAMP_llvmo__PassManagerBase_O
template <typename FP> struct Cast<llvmo::PassManagerBase_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range llvmo::PassManagerBase_O low high --> 1087 1095 
      return ((ISA_ADJUST_STAMP(1087) <= kindVal) && (kindVal <= ISA_ADJUST_STAMP(1095)));
  };
};
// STAMP_llvmo__LoadInst_O
template <typename FP> struct Cast<llvmo::LoadInst_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range llvmo::LoadInst_O val -> 1215
      return (kindVal == ISA_ADJUST_STAMP(1215));
  };
};
// STAMP_llvmo__ConstantStruct_O
template <typename FP> struct Cast<llvmo::ConstantStruct_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range llvmo::ConstantStruct_O val -> 1311
      return (kindVal == ISA_ADJUST_STAMP(1311));
  };
};
// STAMP_core__Exposer_O
template <typename FP> struct Cast<core::Exposer_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::Exposer_O low high --> 931 939 
      return ((ISA_ADJUST_STAMP(931) <= kindVal) && (kindVal <= ISA_ADJUST_STAMP(939)));
  };
};
// STAMP_core__SingleDispatchCxxEffectiveMethodFunction_O
template <typename FP> struct Cast<core::SingleDispatchCxxEffectiveMethodFunction_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::SingleDispatchCxxEffectiveMethodFunction_O val -> 111
      return (kindVal == ISA_ADJUST_STAMP(111));
  };
};
// STAMP_core__DirectoryIterator_O
template <typename FP> struct Cast<core::DirectoryIterator_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::DirectoryIterator_O val -> 219
      return (kindVal == ISA_ADJUST_STAMP(219));
  };
};
// STAMP_core__MDArray_byte2_t_O
template <typename FP> struct Cast<core::MDArray_byte2_t_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::MDArray_byte2_t_O val -> 311
      return (kindVal == ISA_ADJUST_STAMP(311));
  };
};
// STAMP_llvmo__DISubroutineType_O
template <typename FP> struct Cast<llvmo::DISubroutineType_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range llvmo::DISubroutineType_O val -> 1143
      return (kindVal == ISA_ADJUST_STAMP(1143));
  };
};
// STAMP_core__LexicalEnvironment_O
template <typename FP> struct Cast<core::LexicalEnvironment_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::LexicalEnvironment_O low high --> 1411 1455 
      return ((ISA_ADJUST_STAMP(1411) <= kindVal) && (kindVal <= ISA_ADJUST_STAMP(1455)));
  };
};
// STAMP_core__PosixTime_O
template <typename FP> struct Cast<core::PosixTime_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::PosixTime_O val -> 927
      return (kindVal == ISA_ADJUST_STAMP(927));
  };
};
// STAMP_llvmo__MetadataAsValue_O
template <typename FP> struct Cast<llvmo::MetadataAsValue_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range llvmo::MetadataAsValue_O val -> 1195
      return (kindVal == ISA_ADJUST_STAMP(1195));
  };
};
// STAMP_core__SimpleBitVector_O
template <typename FP> struct Cast<core::SimpleBitVector_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::SimpleBitVector_O val -> 771
      return (kindVal == ISA_ADJUST_STAMP(771));
  };
};
// STAMP_core__FunctionContainerEnvironment_O
template <typename FP> struct Cast<core::FunctionContainerEnvironment_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::FunctionContainerEnvironment_O val -> 1451
      return (kindVal == ISA_ADJUST_STAMP(1451));
  };
};
// STAMP_core__SimpleVector_int8_t_O
template <typename FP> struct Cast<core::SimpleVector_int8_t_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::SimpleVector_int8_t_O val -> 843
      return (kindVal == ISA_ADJUST_STAMP(843));
  };
};
// STAMP_llvmo__ResumeInst_O
template <typename FP> struct Cast<llvmo::ResumeInst_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range llvmo::ResumeInst_O val -> 1247
      return (kindVal == ISA_ADJUST_STAMP(1247));
  };
};
// STAMP_llvmo__Function_O
template <typename FP> struct Cast<llvmo::Function_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range llvmo::Function_O val -> 1291
      return (kindVal == ISA_ADJUST_STAMP(1291));
  };
};
// STAMP_llvmo__DIType_O
template <typename FP> struct Cast<llvmo::DIType_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range llvmo::DIType_O low high --> 1127 1143 
      return ((ISA_ADJUST_STAMP(1127) <= kindVal) && (kindVal <= ISA_ADJUST_STAMP(1143)));
  };
};
// STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__SingleDispatchMethod_O__
template <typename FP> struct Cast<gctools::GCVector_moveable<gctools::smart_ptr<core::SingleDispatchMethod_O>>*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range gctools::GCVector_moveable<gctools::smart_ptr<core::SingleDispatchMethod_O>> val -> 1771
      return (kindVal == ISA_ADJUST_STAMP(1771));
  };
};
// STAMP_core__Readtable_O
template <typename FP> struct Cast<core::Readtable_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::Readtable_O val -> 923
      return (kindVal == ISA_ADJUST_STAMP(923));
  };
};
// STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__T_O__
template <typename FP> struct Cast<gctools::GCVector_moveable<gctools::smart_ptr<core::T_O>>*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range gctools::GCVector_moveable<gctools::smart_ptr<core::T_O>> val -> 1767
      return (kindVal == ISA_ADJUST_STAMP(1767));
  };
};
// STAMP_llvmo__IRBuilder_O
template <typename FP> struct Cast<llvmo::IRBuilder_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range llvmo::IRBuilder_O val -> 1063
      return (kindVal == ISA_ADJUST_STAMP(1063));
  };
};
// STAMP_llvmo__ClaspJIT_O
template <typename FP> struct Cast<llvmo::ClaspJIT_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range llvmo::ClaspJIT_O val -> 919
      return (kindVal == ISA_ADJUST_STAMP(919));
  };
};
// STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__Symbol_O__
template <typename FP> struct Cast<gctools::GCVector_moveable<gctools::smart_ptr<core::Symbol_O>>*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range gctools::GCVector_moveable<gctools::smart_ptr<core::Symbol_O>> val -> 1763
      return (kindVal == ISA_ADJUST_STAMP(1763));
  };
};
// STAMP_core__SimpleVector_byte8_t_O
template <typename FP> struct Cast<core::SimpleVector_byte8_t_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::SimpleVector_byte8_t_O val -> 867
      return (kindVal == ISA_ADJUST_STAMP(867));
  };
};
// STAMP_llvmo__DILexicalBlockBase_O
template <typename FP> struct Cast<llvmo::DILexicalBlockBase_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range llvmo::DILexicalBlockBase_O low high --> 1155 1159 
      return ((ISA_ADJUST_STAMP(1155) <= kindVal) && (kindVal <= ISA_ADJUST_STAMP(1159)));
  };
};
// STAMP_llvmo__MDNode_O
template <typename FP> struct Cast<llvmo::MDNode_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range llvmo::MDNode_O low high --> 1103 1171 
      return ((ISA_ADJUST_STAMP(1103) <= kindVal) && (kindVal <= ISA_ADJUST_STAMP(1171)));
  };
};
// STAMP_core__ComplexVector_fixnum_O
template <typename FP> struct Cast<core::ComplexVector_fixnum_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::ComplexVector_fixnum_O val -> 715
      return (kindVal == ISA_ADJUST_STAMP(715));
  };
};
// STAMP_mp__RecursiveMutex_O
template <typename FP> struct Cast<mp::RecursiveMutex_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range mp::RecursiveMutex_O val -> 195
      return (kindVal == ISA_ADJUST_STAMP(195));
  };
};
// STAMP_core__SimpleVector_float_O
template <typename FP> struct Cast<core::SimpleVector_float_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::SimpleVector_float_O val -> 851
      return (kindVal == ISA_ADJUST_STAMP(851));
  };
};
// STAMP_llvmo__VAArgInst_O
template <typename FP> struct Cast<llvmo::VAArgInst_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range llvmo::VAArgInst_O val -> 1211
      return (kindVal == ISA_ADJUST_STAMP(1211));
  };
};
// STAMP_core__SimpleVector_int4_t_O
template <typename FP> struct Cast<core::SimpleVector_int4_t_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::SimpleVector_int4_t_O val -> 779
      return (kindVal == ISA_ADJUST_STAMP(779));
  };
};
// STAMP_core__MDArray_fixnum_O
template <typename FP> struct Cast<core::MDArray_fixnum_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::MDArray_fixnum_O val -> 327
      return (kindVal == ISA_ADJUST_STAMP(327));
  };
};
// STAMP_core__SharpEqualWrapper_O
template <typename FP> struct Cast<core::SharpEqualWrapper_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::SharpEqualWrapper_O val -> 915
      return (kindVal == ISA_ADJUST_STAMP(915));
  };
};
// STAMP_core__LoadTimeValues_O
template <typename FP> struct Cast<core::LoadTimeValues_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::LoadTimeValues_O val -> 911
      return (kindVal == ISA_ADJUST_STAMP(911));
  };
};
// STAMP_llvmo__DIFile_O
template <typename FP> struct Cast<llvmo::DIFile_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range llvmo::DIFile_O val -> 1123
      return (kindVal == ISA_ADJUST_STAMP(1123));
  };
};
// STAMP_llvmo__DataLayout_O
template <typename FP> struct Cast<llvmo::DataLayout_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range llvmo::DataLayout_O val -> 907
      return (kindVal == ISA_ADJUST_STAMP(907));
  };
};
// STAMP_llvmo__BasicBlock_O
template <typename FP> struct Cast<llvmo::BasicBlock_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range llvmo::BasicBlock_O val -> 1191
      return (kindVal == ISA_ADJUST_STAMP(1191));
  };
};
// STAMP_core__SimpleMDArray_int8_t_O
template <typename FP> struct Cast<core::SimpleMDArray_int8_t_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::SimpleMDArray_int8_t_O val -> 387
      return (kindVal == ISA_ADJUST_STAMP(387));
  };
};
// STAMP_llvmo__EngineBuilder_O
template <typename FP> struct Cast<llvmo::EngineBuilder_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range llvmo::EngineBuilder_O val -> 1083
      return (kindVal == ISA_ADJUST_STAMP(1083));
  };
};
// STAMP_core__ComplexVector_byte64_t_O
template <typename FP> struct Cast<core::ComplexVector_byte64_t_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::ComplexVector_byte64_t_O val -> 583
      return (kindVal == ISA_ADJUST_STAMP(583));
  };
};
// STAMP_llvmo__SectionedAddress_O
template <typename FP> struct Cast<llvmo::SectionedAddress_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range llvmo::SectionedAddress_O val -> 1079
      return (kindVal == ISA_ADJUST_STAMP(1079));
  };
};
// STAMP_core__MDArray_byte32_t_O
template <typename FP> struct Cast<core::MDArray_byte32_t_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::MDArray_byte32_t_O val -> 303
      return (kindVal == ISA_ADJUST_STAMP(303));
  };
};
// STAMP_core__Character_dummy_O
template <typename FP> struct Cast<core::Character_dummy_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::Character_dummy_O val -> 903
      return (kindVal == ISA_ADJUST_STAMP(903));
  };
};
// STAMP_core__TagbodyEnvironment_O
template <typename FP> struct Cast<core::TagbodyEnvironment_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::TagbodyEnvironment_O val -> 1423
      return (kindVal == ISA_ADJUST_STAMP(1423));
  };
};
// STAMP_llvmo__Constant_O
template <typename FP> struct Cast<llvmo::Constant_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range llvmo::Constant_O low high --> 1283 1335 
      return ((ISA_ADJUST_STAMP(1283) <= kindVal) && (kindVal <= ISA_ADJUST_STAMP(1335)));
  };
};
// STAMP_core__SpecialForm_O
template <typename FP> struct Cast<core::SpecialForm_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::SpecialForm_O val -> 99
      return (kindVal == ISA_ADJUST_STAMP(99));
  };
};
// STAMP_llvmo__FunctionCallee_O
template <typename FP> struct Cast<llvmo::FunctionCallee_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range llvmo::FunctionCallee_O val -> 179
      return (kindVal == ISA_ADJUST_STAMP(179));
  };
};
// STAMP_gctools__GCArray_moveable_unsigned_char_
template <typename FP> struct Cast<gctools::GCArray_moveable<unsigned char>*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range gctools::GCArray_moveable<unsigned char> val -> 1759
      return (kindVal == ISA_ADJUST_STAMP(1759));
  };
};
// STAMP_llvmo__DIBasicType_O
template <typename FP> struct Cast<llvmo::DIBasicType_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range llvmo::DIBasicType_O val -> 1139
      return (kindVal == ISA_ADJUST_STAMP(1139));
  };
};
// STAMP_llvmo__DIBuilder_O
template <typename FP> struct Cast<llvmo::DIBuilder_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range llvmo::DIBuilder_O val -> 1075
      return (kindVal == ISA_ADJUST_STAMP(1075));
  };
};
// STAMP_core__NativeVector_int_O
template <typename FP> struct Cast<core::NativeVector_int_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::NativeVector_int_O val -> 175
      return (kindVal == ISA_ADJUST_STAMP(175));
  };
};
// STAMP_llvmo__APInt_O
template <typename FP> struct Cast<llvmo::APInt_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range llvmo::APInt_O val -> 1071
      return (kindVal == ISA_ADJUST_STAMP(1071));
  };
};
// STAMP_llvmo__APFloat_O
template <typename FP> struct Cast<llvmo::APFloat_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range llvmo::APFloat_O val -> 1067
      return (kindVal == ISA_ADJUST_STAMP(1067));
  };
};
// STAMP_core__SimpleMDArrayCharacter_O
template <typename FP> struct Cast<core::SimpleMDArrayCharacter_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::SimpleMDArrayCharacter_O val -> 475
      return (kindVal == ISA_ADJUST_STAMP(475));
  };
};
// STAMP_core__SimpleCharacterString_O
template <typename FP> struct Cast<core::SimpleCharacterString_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::SimpleCharacterString_O val -> 739
      return (kindVal == ISA_ADJUST_STAMP(739));
  };
};
// STAMP_core__Symbol_O
template <typename FP> struct Cast<core::Symbol_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::Symbol_O low high --> 895 899 
      return ((ISA_ADJUST_STAMP(895) <= kindVal) && (kindVal <= ISA_ADJUST_STAMP(899)));
  };
};
// STAMP_gctools__GCVector_moveable_std__pair_gctools__smart_ptr_core__T_O__gctools__smart_ptr_core__T_O___
template <typename FP> struct Cast<gctools::GCVector_moveable<std::pair<gctools::smart_ptr<core::T_O>,gctools::smart_ptr<core::T_O>>>*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range gctools::GCVector_moveable<std::pair<gctools::smart_ptr<core::T_O>,gctools::smart_ptr<core::T_O>>> val -> 1755
      return (kindVal == ISA_ADJUST_STAMP(1755));
  };
};
// STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__List_V__
template <typename FP> struct Cast<gctools::GCVector_moveable<gctools::smart_ptr<core::List_V>>*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range gctools::GCVector_moveable<gctools::smart_ptr<core::List_V>> val -> 1751
      return (kindVal == ISA_ADJUST_STAMP(1751));
  };
};
// STAMP_core__Array_O
template <typename FP> struct Cast<core::Array_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::Array_O low high --> 227 891 
      return ((ISA_ADJUST_STAMP(227) <= kindVal) && (kindVal <= ISA_ADJUST_STAMP(891)));
  };
};
// STAMP_core__MDArray_byte4_t_O
template <typename FP> struct Cast<core::MDArray_byte4_t_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::MDArray_byte4_t_O val -> 263
      return (kindVal == ISA_ADJUST_STAMP(263));
  };
};
// STAMP_llvmo__Argument_O
template <typename FP> struct Cast<llvmo::Argument_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range llvmo::Argument_O val -> 1187
      return (kindVal == ISA_ADJUST_STAMP(1187));
  };
};
// STAMP_core__Iterator_O
template <typename FP> struct Cast<core::Iterator_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::Iterator_O low high --> 215 223 
      return ((ISA_ADJUST_STAMP(215) <= kindVal) && (kindVal <= ISA_ADJUST_STAMP(223)));
  };
};
// STAMP_llvmo__IRBuilderBase_O
template <typename FP> struct Cast<llvmo::IRBuilderBase_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range llvmo::IRBuilderBase_O low high --> 1059 1063 
      return ((ISA_ADJUST_STAMP(1059) <= kindVal) && (kindVal <= ISA_ADJUST_STAMP(1063)));
  };
};
// STAMP_core__Null_O
template <typename FP> struct Cast<core::Null_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::Null_O val -> 899
      return (kindVal == ISA_ADJUST_STAMP(899));
  };
};
// STAMP_llvmo__TargetPassConfig_O
template <typename FP> struct Cast<llvmo::TargetPassConfig_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range llvmo::TargetPassConfig_O val -> 1055
      return (kindVal == ISA_ADJUST_STAMP(1055));
  };
};
// STAMP_core__SingleDispatchMethod_O
template <typename FP> struct Cast<core::SingleDispatchMethod_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::SingleDispatchMethod_O val -> 211
      return (kindVal == ISA_ADJUST_STAMP(211));
  };
};
// STAMP_gctools__GCArray_moveable_signed_char_
template <typename FP> struct Cast<gctools::GCArray_moveable<signed char>*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range gctools::GCArray_moveable<signed char> val -> 1747
      return (kindVal == ISA_ADJUST_STAMP(1747));
  };
};
// STAMP_core__NativeVector_double_O
template <typename FP> struct Cast<core::NativeVector_double_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::NativeVector_double_O val -> 171
      return (kindVal == ISA_ADJUST_STAMP(171));
  };
};
// STAMP_core__GlueEnvironment_O
template <typename FP> struct Cast<core::GlueEnvironment_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::GlueEnvironment_O val -> 1407
      return (kindVal == ISA_ADJUST_STAMP(1407));
  };
};
// STAMP_core__CxxObject_O
template <typename FP> struct Cast<core::CxxObject_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::CxxObject_O low high --> 155 207 
      return ((ISA_ADJUST_STAMP(155) <= kindVal) && (kindVal <= ISA_ADJUST_STAMP(207)));
  };
};
// STAMP_llvmo__ReturnInst_O
template <typename FP> struct Cast<llvmo::ReturnInst_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range llvmo::ReturnInst_O val -> 1243
      return (kindVal == ISA_ADJUST_STAMP(1243));
  };
};
// STAMP_llvmo__FunctionType_O
template <typename FP> struct Cast<llvmo::FunctionType_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range llvmo::FunctionType_O val -> 1015
      return (kindVal == ISA_ADJUST_STAMP(1015));
  };
};
// STAMP_clbind__DummyCreator_O
template <typename FP> struct Cast<clbind::DummyCreator_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range clbind::DummyCreator_O val -> 87
      return (kindVal == ISA_ADJUST_STAMP(87));
  };
};
// STAMP_core__MDArray_byte16_t_O
template <typename FP> struct Cast<core::MDArray_byte16_t_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::MDArray_byte16_t_O val -> 375
      return (kindVal == ISA_ADJUST_STAMP(375));
  };
};
// STAMP_llvmo__DIContext_O
template <typename FP> struct Cast<llvmo::DIContext_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range llvmo::DIContext_O val -> 1051
      return (kindVal == ISA_ADJUST_STAMP(1051));
  };
};
// STAMP_llvmo__JITDylib_O
template <typename FP> struct Cast<llvmo::JITDylib_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range llvmo::JITDylib_O val -> 1047
      return (kindVal == ISA_ADJUST_STAMP(1047));
  };
};
// STAMP_llvmo__Type_O
template <typename FP> struct Cast<llvmo::Type_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range llvmo::Type_O low high --> 1011 1043 
      return ((ISA_ADJUST_STAMP(1011) <= kindVal) && (kindVal <= ISA_ADJUST_STAMP(1043)));
  };
};
// STAMP_core__Pointer_O
template <typename FP> struct Cast<core::Pointer_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::Pointer_O low high --> 147 151 
      return ((ISA_ADJUST_STAMP(147) <= kindVal) && (kindVal <= ISA_ADJUST_STAMP(151)));
  };
};
// STAMP_llvmo__UnreachableInst_O
template <typename FP> struct Cast<llvmo::UnreachableInst_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range llvmo::UnreachableInst_O val -> 1239
      return (kindVal == ISA_ADJUST_STAMP(1239));
  };
};
// STAMP_core__ComplexVector_int64_t_O
template <typename FP> struct Cast<core::ComplexVector_int64_t_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::ComplexVector_int64_t_O val -> 723
      return (kindVal == ISA_ADJUST_STAMP(723));
  };
};
// STAMP_gctools__GCVector_moveable_core__SymbolClassHolderPair_
template <typename FP> struct Cast<gctools::GCVector_moveable<core::SymbolClassHolderPair>*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range gctools::GCVector_moveable<core::SymbolClassHolderPair> val -> 1743
      return (kindVal == ISA_ADJUST_STAMP(1743));
  };
};
// STAMP_gctools__GCVector_moveable_core__Cons_O_
template <typename FP> struct Cast<gctools::GCVector_moveable<core::Cons_O>*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range gctools::GCVector_moveable<core::Cons_O> val -> 1739
      return (kindVal == ISA_ADJUST_STAMP(1739));
  };
};
// STAMP_gctools__GCBitUnitArray_moveable_4_0_
template <typename FP> struct Cast<gctools::GCBitUnitArray_moveable<4,0>*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range gctools::GCBitUnitArray_moveable<4,0> val -> 1735
      return (kindVal == ISA_ADJUST_STAMP(1735));
  };
};
// STAMP_core__FileScope_O
template <typename FP> struct Cast<core::FileScope_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::FileScope_O val -> 1515
      return (kindVal == ISA_ADJUST_STAMP(1515));
  };
};
// STAMP_core__Float_O
template <typename FP> struct Cast<core::Float_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::Float_O low high --> 1563 1579 
      return ((ISA_ADJUST_STAMP(1563) <= kindVal) && (kindVal <= ISA_ADJUST_STAMP(1579)));
  };
};
// STAMP_core__SimpleMDArray_byte4_t_O
template <typename FP> struct Cast<core::SimpleMDArray_byte4_t_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::SimpleMDArray_byte4_t_O val -> 427
      return (kindVal == ISA_ADJUST_STAMP(427));
  };
};
// STAMP_llvmo__DIDerivedType_O
template <typename FP> struct Cast<llvmo::DIDerivedType_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range llvmo::DIDerivedType_O val -> 1135
      return (kindVal == ISA_ADJUST_STAMP(1135));
  };
};
// STAMP_clbind__ConstructorCreator_O
template <typename FP> struct Cast<clbind::ConstructorCreator_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range clbind::ConstructorCreator_O val -> 83
      return (kindVal == ISA_ADJUST_STAMP(83));
  };
};
// STAMP_core__SimpleVector_int64_t_O
template <typename FP> struct Cast<core::SimpleVector_int64_t_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::SimpleVector_int64_t_O val -> 827
      return (kindVal == ISA_ADJUST_STAMP(827));
  };
};
// STAMP_llvmo__ConstantDataSequential_O
template <typename FP> struct Cast<llvmo::ConstantDataSequential_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range llvmo::ConstantDataSequential_O low high --> 1303 1307 
      return ((ISA_ADJUST_STAMP(1303) <= kindVal) && (kindVal <= ISA_ADJUST_STAMP(1307)));
  };
};
// STAMP_core__TranslationFunctor_O
template <typename FP> struct Cast<core::TranslationFunctor_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::TranslationFunctor_O val -> 127
      return (kindVal == ISA_ADJUST_STAMP(127));
  };
};
// STAMP_core__MDArray_double_O
template <typename FP> struct Cast<core::MDArray_double_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::MDArray_double_O val -> 555
      return (kindVal == ISA_ADJUST_STAMP(555));
  };
};
// STAMP_llvmo__StoreInst_O
template <typename FP> struct Cast<llvmo::StoreInst_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range llvmo::StoreInst_O val -> 1235
      return (kindVal == ISA_ADJUST_STAMP(1235));
  };
};
// STAMP_llvmo__DebugLoc_O
template <typename FP> struct Cast<llvmo::DebugLoc_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range llvmo::DebugLoc_O val -> 143
      return (kindVal == ISA_ADJUST_STAMP(143));
  };
};
// STAMP_core__WeakPointer_O
template <typename FP> struct Cast<core::WeakPointer_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::WeakPointer_O val -> 139
      return (kindVal == ISA_ADJUST_STAMP(139));
  };
};
// STAMP_core__IOFileStream_O
template <typename FP> struct Cast<core::IOFileStream_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::IOFileStream_O val -> 1607
      return (kindVal == ISA_ADJUST_STAMP(1607));
  };
};
// STAMP_core__RuntimeVisibleEnvironment_O
template <typename FP> struct Cast<core::RuntimeVisibleEnvironment_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::RuntimeVisibleEnvironment_O low high --> 1415 1431 
      return ((ISA_ADJUST_STAMP(1415) <= kindVal) && (kindVal <= ISA_ADJUST_STAMP(1431)));
  };
};
// STAMP_core__SimpleMDArray_byte8_t_O
template <typename FP> struct Cast<core::SimpleMDArray_byte8_t_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::SimpleMDArray_byte8_t_O val -> 531
      return (kindVal == ISA_ADJUST_STAMP(531));
  };
};
// STAMP_llvmo__Instruction_O
template <typename FP> struct Cast<llvmo::Instruction_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range llvmo::Instruction_O low high --> 1203 1279 
      return ((ISA_ADJUST_STAMP(1203) <= kindVal) && (kindVal <= ISA_ADJUST_STAMP(1279)));
  };
};
// STAMP_core__FileStream_O
template <typename FP> struct Cast<core::FileStream_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::FileStream_O low high --> 1603 1611 
      return ((ISA_ADJUST_STAMP(1603) <= kindVal) && (kindVal <= ISA_ADJUST_STAMP(1611)));
  };
};
// STAMP_core__Rational_O
template <typename FP> struct Cast<core::Rational_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::Rational_O low high --> 1543 1559 
      return ((ISA_ADJUST_STAMP(1543) <= kindVal) && (kindVal <= ISA_ADJUST_STAMP(1559)));
  };
};
// STAMP_core__MDArrayCharacter_O
template <typename FP> struct Cast<core::MDArrayCharacter_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::MDArrayCharacter_O val -> 351
      return (kindVal == ISA_ADJUST_STAMP(351));
  };
};
// STAMP_llvmo__LandingPadInst_O
template <typename FP> struct Cast<llvmo::LandingPadInst_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range llvmo::LandingPadInst_O val -> 1231
      return (kindVal == ISA_ADJUST_STAMP(1231));
  };
};
// STAMP_core__Function_O
template <typename FP> struct Cast<core::Function_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::Function_O low high --> 59 135 
      return ((ISA_ADJUST_STAMP(59) <= kindVal) && (kindVal <= ISA_ADJUST_STAMP(135)));
  };
};
// STAMP_core__SimpleMDArray_int2_t_O
template <typename FP> struct Cast<core::SimpleMDArray_int2_t_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::SimpleMDArray_int2_t_O val -> 419
      return (kindVal == ISA_ADJUST_STAMP(419));
  };
};
// STAMP_gctools__GCVector_moveable_gctools__smart_ptr_clbind__ClassRep_O__
template <typename FP> struct Cast<gctools::GCVector_moveable<gctools::smart_ptr<clbind::ClassRep_O>>*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range gctools::GCVector_moveable<gctools::smart_ptr<clbind::ClassRep_O>> val -> 1731
      return (kindVal == ISA_ADJUST_STAMP(1731));
  };
};
// STAMP_core__AtomicT_Holder_O
template <typename FP> struct Cast<core::AtomicT_Holder_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::AtomicT_Holder_O val -> 55
      return (kindVal == ISA_ADJUST_STAMP(55));
  };
};
// STAMP_core__HashTableEql_O
template <typename FP> struct Cast<core::HashTableEql_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::HashTableEql_O val -> 1499
      return (kindVal == ISA_ADJUST_STAMP(1499));
  };
};
// STAMP_mp__ConditionVariable_O
template <typename FP> struct Cast<mp::ConditionVariable_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range mp::ConditionVariable_O val -> 167
      return (kindVal == ISA_ADJUST_STAMP(167));
  };
};
// STAMP_core__Real_O
template <typename FP> struct Cast<core::Real_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::Real_O low high --> 1539 1579 
      return ((ISA_ADJUST_STAMP(1539) <= kindVal) && (kindVal <= ISA_ADJUST_STAMP(1579)));
  };
};
// STAMP_core__MDArray_byte8_t_O
template <typename FP> struct Cast<core::MDArray_byte8_t_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::MDArray_byte8_t_O val -> 287
      return (kindVal == ISA_ADJUST_STAMP(287));
  };
};
// STAMP_core__FuncallableInstanceCreator_O
template <typename FP> struct Cast<core::FuncallableInstanceCreator_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::FuncallableInstanceCreator_O val -> 79
      return (kindVal == ISA_ADJUST_STAMP(79));
  };
};
// STAMP_core__StringOutputStream_O
template <typename FP> struct Cast<core::StringOutputStream_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::StringOutputStream_O val -> 1623
      return (kindVal == ISA_ADJUST_STAMP(1623));
  };
};
// STAMP_llvmo__AttributeSet_O
template <typename FP> struct Cast<llvmo::AttributeSet_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range llvmo::AttributeSet_O val -> 51
      return (kindVal == ISA_ADJUST_STAMP(51));
  };
};
// STAMP_llvmo__AtomicRMWInst_O
template <typename FP> struct Cast<llvmo::AtomicRMWInst_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range llvmo::AtomicRMWInst_O val -> 1227
      return (kindVal == ISA_ADJUST_STAMP(1227));
  };
};
// STAMP_llvmo__MDBuilder_O
template <typename FP> struct Cast<llvmo::MDBuilder_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range llvmo::MDBuilder_O val -> 163
      return (kindVal == ISA_ADJUST_STAMP(163));
  };
};
// STAMP_llvmo__PassManager_O
template <typename FP> struct Cast<llvmo::PassManager_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range llvmo::PassManager_O val -> 1091
      return (kindVal == ISA_ADJUST_STAMP(1091));
  };
};
// STAMP_core__SimpleVector_O
template <typename FP> struct Cast<core::SimpleVector_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::SimpleVector_O val -> 859
      return (kindVal == ISA_ADJUST_STAMP(859));
  };
};
// STAMP_llvmo__DISubprogram_O
template <typename FP> struct Cast<llvmo::DISubprogram_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range llvmo::DISubprogram_O val -> 1151
      return (kindVal == ISA_ADJUST_STAMP(1151));
  };
};
// STAMP_core__Creator_O
template <typename FP> struct Cast<core::Creator_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::Creator_O low high --> 67 95 
      return ((ISA_ADJUST_STAMP(67) <= kindVal) && (kindVal <= ISA_ADJUST_STAMP(95)));
  };
};
// STAMP_llvmo__ArrayType_O
template <typename FP> struct Cast<llvmo::ArrayType_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range llvmo::ArrayType_O val -> 1031
      return (kindVal == ISA_ADJUST_STAMP(1031));
  };
};
// STAMP_core__SimpleMDArray_int64_t_O
template <typename FP> struct Cast<core::SimpleMDArray_int64_t_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::SimpleMDArray_int64_t_O val -> 539
      return (kindVal == ISA_ADJUST_STAMP(539));
  };
};
// STAMP_core__SimpleString_O
template <typename FP> struct Cast<core::SimpleString_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::SimpleString_O low high --> 731 747 
      return ((ISA_ADJUST_STAMP(731) <= kindVal) && (kindVal <= ISA_ADJUST_STAMP(747)));
  };
};
// STAMP_llvmo__DIVariable_O
template <typename FP> struct Cast<llvmo::DIVariable_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range llvmo::DIVariable_O low high --> 1111 1115 
      return ((ISA_ADJUST_STAMP(1111) <= kindVal) && (kindVal <= ISA_ADJUST_STAMP(1115)));
  };
};
// STAMP_core__SimpleMDArray_byte2_t_O
template <typename FP> struct Cast<core::SimpleMDArray_byte2_t_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::SimpleMDArray_byte2_t_O val -> 483
      return (kindVal == ISA_ADJUST_STAMP(483));
  };
};
// STAMP_llvmo__BlockAddress_O
template <typename FP> struct Cast<llvmo::BlockAddress_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range llvmo::BlockAddress_O val -> 1299
      return (kindVal == ISA_ADJUST_STAMP(1299));
  };
};
// STAMP_llvmo__DICompositeType_O
template <typename FP> struct Cast<llvmo::DICompositeType_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range llvmo::DICompositeType_O val -> 1131
      return (kindVal == ISA_ADJUST_STAMP(1131));
  };
};
// STAMP_llvmo__MCSubtargetInfo_O
template <typename FP> struct Cast<llvmo::MCSubtargetInfo_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range llvmo::MCSubtargetInfo_O low high --> 1003 1007 
      return ((ISA_ADJUST_STAMP(1003) <= kindVal) && (kindVal <= ISA_ADJUST_STAMP(1007)));
  };
};
// STAMP_core__FunctionValueEnvironment_O
template <typename FP> struct Cast<core::FunctionValueEnvironment_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::FunctionValueEnvironment_O val -> 1419
      return (kindVal == ISA_ADJUST_STAMP(1419));
  };
};
// STAMP_gctools__GCArray_moveable_short_
template <typename FP> struct Cast<gctools::GCArray_moveable<short>*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range gctools::GCArray_moveable<short> val -> 1727
      return (kindVal == ISA_ADJUST_STAMP(1727));
  };
};
// STAMP_core__DerivableCxxClassCreator_O
template <typename FP> struct Cast<core::DerivableCxxClassCreator_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::DerivableCxxClassCreator_O val -> 75
      return (kindVal == ISA_ADJUST_STAMP(75));
  };
};
// STAMP_core__HashTableEq_O
template <typename FP> struct Cast<core::HashTableEq_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::HashTableEq_O val -> 1495
      return (kindVal == ISA_ADJUST_STAMP(1495));
  };
};
// STAMP_core__HashTableEqualp_O
template <typename FP> struct Cast<core::HashTableEqualp_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::HashTableEqualp_O val -> 1491
      return (kindVal == ISA_ADJUST_STAMP(1491));
  };
};
// STAMP_core__LambdaListHandler_O
template <typename FP> struct Cast<core::LambdaListHandler_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::LambdaListHandler_O val -> 47
      return (kindVal == ISA_ADJUST_STAMP(47));
  };
};
// STAMP_core__ConcatenatedStream_O
template <typename FP> struct Cast<core::ConcatenatedStream_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::ConcatenatedStream_O val -> 1599
      return (kindVal == ISA_ADJUST_STAMP(1599));
  };
};
// STAMP_gctools__GCVector_moveable_double_
template <typename FP> struct Cast<gctools::GCVector_moveable<double>*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range gctools::GCVector_moveable<double> val -> 1723
      return (kindVal == ISA_ADJUST_STAMP(1723));
  };
};
// STAMP_core__SymbolMacroletEnvironment_O
template <typename FP> struct Cast<core::SymbolMacroletEnvironment_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::SymbolMacroletEnvironment_O val -> 1447
      return (kindVal == ISA_ADJUST_STAMP(1447));
  };
};
// STAMP_core__MacroletEnvironment_O
template <typename FP> struct Cast<core::MacroletEnvironment_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::MacroletEnvironment_O val -> 1443
      return (kindVal == ISA_ADJUST_STAMP(1443));
  };
};
// STAMP_llvmo__ImmutablePass_O
template <typename FP> struct Cast<llvmo::ImmutablePass_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range llvmo::ImmutablePass_O low high --> 987 991 
      return ((ISA_ADJUST_STAMP(987) <= kindVal) && (kindVal <= ISA_ADJUST_STAMP(991)));
  };
};
// STAMP_core__FuncallableInstance_O
template <typename FP> struct Cast<core::FuncallableInstance_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::FuncallableInstance_O val -> 61
      return (kindVal == ISA_ADJUST_STAMP(61));
  };
};
// STAMP_core__SynonymStream_O
template <typename FP> struct Cast<core::SynonymStream_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::SynonymStream_O val -> 1595
      return (kindVal == ISA_ADJUST_STAMP(1595));
  };
};
// STAMP_core__Ratio_O
template <typename FP> struct Cast<core::Ratio_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::Ratio_O val -> 1547
      return (kindVal == ISA_ADJUST_STAMP(1547));
  };
};
// STAMP_core__MDArray_int2_t_O
template <typename FP> struct Cast<core::MDArray_int2_t_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::MDArray_int2_t_O val -> 319
      return (kindVal == ISA_ADJUST_STAMP(319));
  };
};
// STAMP_core__ComplexVector_byte2_t_O
template <typename FP> struct Cast<core::ComplexVector_byte2_t_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::ComplexVector_byte2_t_O val -> 655
      return (kindVal == ISA_ADJUST_STAMP(655));
  };
};
// STAMP_core__ClosureWithSlots_O
template <typename FP> struct Cast<core::ClosureWithSlots_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::ClosureWithSlots_O val -> 107
      return (kindVal == ISA_ADJUST_STAMP(107));
  };
};
// STAMP_llvmo__ExecutionEngine_O
template <typename FP> struct Cast<llvmo::ExecutionEngine_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range llvmo::ExecutionEngine_O val -> 999
      return (kindVal == ISA_ADJUST_STAMP(999));
  };
};
// STAMP_core__ClassRepCreator_O
template <typename FP> struct Cast<core::ClassRepCreator_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::ClassRepCreator_O val -> 71
      return (kindVal == ISA_ADJUST_STAMP(71));
  };
};
// STAMP_core__SimpleVector_int16_t_O
template <typename FP> struct Cast<core::SimpleVector_int16_t_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::SimpleVector_int16_t_O val -> 755
      return (kindVal == ISA_ADJUST_STAMP(755));
  };
};
// STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__Cons_O__
template <typename FP> struct Cast<gctools::GCVector_moveable<gctools::smart_ptr<core::Cons_O>>*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range gctools::GCVector_moveable<gctools::smart_ptr<core::Cons_O>> val -> 1719
      return (kindVal == ISA_ADJUST_STAMP(1719));
  };
};
// STAMP_llvmo__Attribute_O
template <typename FP> struct Cast<llvmo::Attribute_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range llvmo::Attribute_O val -> 43
      return (kindVal == ISA_ADJUST_STAMP(43));
  };
};
// STAMP_core__DerivableCxxObject_O
template <typename FP> struct Cast<core::DerivableCxxObject_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::DerivableCxxObject_O val -> 956
      return (kindVal == ISA_ADJUST_STAMP(956));
  };
};
// STAMP_core__SymbolToEnumConverter_O
template <typename FP> struct Cast<core::SymbolToEnumConverter_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::SymbolToEnumConverter_O val -> 39
      return (kindVal == ISA_ADJUST_STAMP(39));
  };
};
// STAMP_llvmo__SwitchInst_O
template <typename FP> struct Cast<llvmo::SwitchInst_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range llvmo::SwitchInst_O val -> 1223
      return (kindVal == ISA_ADJUST_STAMP(1223));
  };
};
// STAMP_core__NativeVector_float_O
template <typename FP> struct Cast<core::NativeVector_float_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::NativeVector_float_O val -> 159
      return (kindVal == ISA_ADJUST_STAMP(159));
  };
};
// STAMP_llvmo__Pass_O
template <typename FP> struct Cast<llvmo::Pass_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range llvmo::Pass_O low high --> 979 995 
      return ((ISA_ADJUST_STAMP(979) <= kindVal) && (kindVal <= ISA_ADJUST_STAMP(995)));
  };
};
// STAMP_core__ComplexVector_int32_t_O
template <typename FP> struct Cast<core::ComplexVector_int32_t_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::ComplexVector_int32_t_O val -> 607
      return (kindVal == ISA_ADJUST_STAMP(607));
  };
};
// STAMP_core__Lisp_O
template <typename FP> struct Cast<core::Lisp_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::Lisp_O val -> 1683
      return (kindVal == ISA_ADJUST_STAMP(1683));
  };
};
// STAMP_core__VaList_dummy_O
template <typename FP> struct Cast<core::VaList_dummy_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::VaList_dummy_O val -> 11
      return (kindVal == ISA_ADJUST_STAMP(11));
  };
};
// STAMP_core__FdSet_O
template <typename FP> struct Cast<core::FdSet_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::FdSet_O val -> 35
      return (kindVal == ISA_ADJUST_STAMP(35));
  };
};
// STAMP_core__ComplexVector_byte4_t_O
template <typename FP> struct Cast<core::ComplexVector_byte4_t_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::ComplexVector_byte4_t_O val -> 707
      return (kindVal == ISA_ADJUST_STAMP(707));
  };
};
// STAMP_core__CatchEnvironment_O
template <typename FP> struct Cast<core::CatchEnvironment_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::CatchEnvironment_O val -> 1439
      return (kindVal == ISA_ADJUST_STAMP(1439));
  };
};
// STAMP_gctools__GCVector_moveable_core__CacheRecord_
template <typename FP> struct Cast<gctools::GCVector_moveable<core::CacheRecord>*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range gctools::GCVector_moveable<core::CacheRecord> val -> 1715
      return (kindVal == ISA_ADJUST_STAMP(1715));
  };
};
// STAMP_core__LogicalPathname_O
template <typename FP> struct Cast<core::LogicalPathname_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::LogicalPathname_O val -> 1527
      return (kindVal == ISA_ADJUST_STAMP(1527));
  };
};
// STAMP_llvmo__TargetSubtargetInfo_O
template <typename FP> struct Cast<llvmo::TargetSubtargetInfo_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range llvmo::TargetSubtargetInfo_O val -> 1007
      return (kindVal == ISA_ADJUST_STAMP(1007));
  };
};
// STAMP_core__WrappedPointer_O
template <typename FP> struct Cast<core::WrappedPointer_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::WrappedPointer_O val -> 30
      return (kindVal == ISA_ADJUST_STAMP(30));
  };
};
// STAMP_core__SimpleVector_double_O
template <typename FP> struct Cast<core::SimpleVector_double_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::SimpleVector_double_O val -> 803
      return (kindVal == ISA_ADJUST_STAMP(803));
  };
};
// STAMP_core__SimpleMDArray_byte32_t_O
template <typename FP> struct Cast<core::SimpleMDArray_byte32_t_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::SimpleMDArray_byte32_t_O val -> 403
      return (kindVal == ISA_ADJUST_STAMP(403));
  };
};
// STAMP_core__Bignum_O
template <typename FP> struct Cast<core::Bignum_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::Bignum_O val -> 1555
      return (kindVal == ISA_ADJUST_STAMP(1555));
  };
};
// STAMP_llvmo__LLVMTargetMachine_O
template <typename FP> struct Cast<llvmo::LLVMTargetMachine_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range llvmo::LLVMTargetMachine_O val -> 1343
      return (kindVal == ISA_ADJUST_STAMP(1343));
  };
};
// STAMP_core__ClassHolder_O
template <typename FP> struct Cast<core::ClassHolder_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::ClassHolder_O val -> 27
      return (kindVal == ISA_ADJUST_STAMP(27));
  };
};
// STAMP_llvmo__SequentialType_O
template <typename FP> struct Cast<llvmo::SequentialType_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range llvmo::SequentialType_O low high --> 1023 1035 
      return ((ISA_ADJUST_STAMP(1023) <= kindVal) && (kindVal <= ISA_ADJUST_STAMP(1035)));
  };
};
// STAMP_core__ComplexVector_byte32_t_O
template <typename FP> struct Cast<core::ComplexVector_byte32_t_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::ComplexVector_byte32_t_O val -> 671
      return (kindVal == ISA_ADJUST_STAMP(671));
  };
};
// STAMP_llvmo__UnaryInstruction_O
template <typename FP> struct Cast<llvmo::UnaryInstruction_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range llvmo::UnaryInstruction_O low high --> 1207 1219 
      return ((ISA_ADJUST_STAMP(1207) <= kindVal) && (kindVal <= ISA_ADJUST_STAMP(1219)));
  };
};
// STAMP_llvmo__GlobalValue_O
template <typename FP> struct Cast<llvmo::GlobalValue_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range llvmo::GlobalValue_O low high --> 1287 1295 
      return ((ISA_ADJUST_STAMP(1287) <= kindVal) && (kindVal <= ISA_ADJUST_STAMP(1295)));
  };
};
// STAMP_llvmo__PointerType_O
template <typename FP> struct Cast<llvmo::PointerType_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range llvmo::PointerType_O val -> 1027
      return (kindVal == ISA_ADJUST_STAMP(1027));
  };
};
// STAMP_gctools__GCArray_moveable_unsigned_int_
template <typename FP> struct Cast<gctools::GCArray_moveable<unsigned int>*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range gctools::GCArray_moveable<unsigned int> val -> 1711
      return (kindVal == ISA_ADJUST_STAMP(1711));
  };
};
// STAMP_core__MultiStringBuffer_O
template <typename FP> struct Cast<core::MultiStringBuffer_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->shifted_stamp();
    // IsA-stamp-range core::MultiStringBuffer_O val -> 23
      return (kindVal == ISA_ADJUST_STAMP(23));
  };
};
#endif // defined(GC_DYNAMIC_CAST)
#if defined(GC_TYPEQ)
      ADD_SINGLE_TYPEQ_TEST(core::TwoWayStream_O,TYPEQ_ADJUST_STAMP(1635));
      ADD_SINGLE_TYPEQ_TEST(core::MDArray_size_t_O,TYPEQ_ADJUST_STAMP(279));
      ADD_SINGLE_TYPEQ_TEST(core::SimpleVector_byte2_t_O,TYPEQ_ADJUST_STAMP(875));
      ADD_SINGLE_TYPEQ_TEST(core::SimpleMDArray_fixnum_O,TYPEQ_ADJUST_STAMP(491));
      ADD_RANGE_TYPEQ_TEST(core::ComplexVector_O,core::ComplexVector_int64_t_O,TYPEQ_ADJUST_STAMP(559),TYPEQ_ADJUST_STAMP(723));
      ADD_SINGLE_TYPEQ_TEST(core::SimpleMDArray_int32_t_O,TYPEQ_ADJUST_STAMP(435));
      ADD_RANGE_TYPEQ_TEST(core::Integer_O,core::Fixnum_dummy_O,TYPEQ_ADJUST_STAMP(1551),TYPEQ_ADJUST_STAMP(1559));
      ADD_SINGLE_TYPEQ_TEST(clbind::ClassRegistry_O,TYPEQ_ADJUST_STAMP(1675));
      ADD_SINGLE_TYPEQ_TEST(asttooling::AstVisitor_O,TYPEQ_ADJUST_STAMP(1691));
      ADD_SINGLE_TYPEQ_TEST(mp::Process_O,TYPEQ_ADJUST_STAMP(207));
      ADD_SINGLE_TYPEQ_TEST(core::Record_O,TYPEQ_ADJUST_STAMP(1671));
      ADD_RANGE_TYPEQ_TEST(core::LightUserData_O,core::UserData_O,TYPEQ_ADJUST_STAMP(1663),TYPEQ_ADJUST_STAMP(1667));
      ADD_SINGLE_TYPEQ_TEST(core::MDArrayT_O,TYPEQ_ADJUST_STAMP(359));
      ADD_SINGLE_TYPEQ_TEST(core::DirectoryEntry_O,TYPEQ_ADJUST_STAMP(1659));
      ADD_SINGLE_TYPEQ_TEST(llvmo::Linker_O,TYPEQ_ADJUST_STAMP(1387));
      ADD_SINGLE_TYPEQ_TEST(core::IntArray_O,TYPEQ_ADJUST_STAMP(1655));
      ADD_SINGLE_TYPEQ_TEST(core::MDArray_float_O,TYPEQ_ADJUST_STAMP(271));
      ADD_SINGLE_TYPEQ_TEST(core::SourcePosInfo_O,TYPEQ_ADJUST_STAMP(1651));
      ADD_SINGLE_TYPEQ_TEST(llvmo::BranchInst_O,TYPEQ_ADJUST_STAMP(1279));
      ADD_SINGLE_TYPEQ_TEST(llvmo::AllocaInst_O,TYPEQ_ADJUST_STAMP(1219));
      ADD_SINGLE_TYPEQ_TEST(core::StandardClassCreator_O,TYPEQ_ADJUST_STAMP(95));
      ADD_SINGLE_TYPEQ_TEST(core::ComplexVector_float_O,TYPEQ_ADJUST_STAMP(623));
      ADD_SINGLE_TYPEQ_TEST(core::ComplexVector_byte8_t_O,TYPEQ_ADJUST_STAMP(663));
      ADD_RANGE_TYPEQ_TEST(core::HashTable_O,core::HashTableEqual_O,TYPEQ_ADJUST_STAMP(1487),TYPEQ_ADJUST_STAMP(1503));
      ADD_SINGLE_TYPEQ_TEST(core::InvocationHistoryFrameIterator_O,TYPEQ_ADJUST_STAMP(1647));
      ADD_SINGLE_TYPEQ_TEST(core::SimpleVector_size_t_O,TYPEQ_ADJUST_STAMP(795));
      ADD_RANGE_TYPEQ_TEST(llvmo::DIScope_O,llvmo::DICompileUnit_O,TYPEQ_ADJUST_STAMP(1119),TYPEQ_ADJUST_STAMP(1163));
      ADD_SINGLE_TYPEQ_TEST(core::FileStatus_O,TYPEQ_ADJUST_STAMP(1643));
      ADD_SINGLE_TYPEQ_TEST(llvmo::IndirectBrInst_O,TYPEQ_ADJUST_STAMP(1275));
      ADD_SINGLE_TYPEQ_TEST(llvmo::ConstantArray_O,TYPEQ_ADJUST_STAMP(1335));
      ADD_SINGLE_TYPEQ_TEST(llvmo::PHINode_O,TYPEQ_ADJUST_STAMP(1271));
      ADD_SINGLE_TYPEQ_TEST(core::Package_O,TYPEQ_ADJUST_STAMP(1639));
      ADD_SINGLE_TYPEQ_TEST(core::SimpleMDArrayBaseChar_O,TYPEQ_ADJUST_STAMP(507));
      ADD_SINGLE_TYPEQ_TEST(llvmo::DILocation_O,TYPEQ_ADJUST_STAMP(1171));
      ADD_RANGE_TYPEQ_TEST(core::SimpleMDArray_O,core::SimpleMDArray_int64_t_O,TYPEQ_ADJUST_STAMP(379),TYPEQ_ADJUST_STAMP(539));
      ADD_RANGE_TYPEQ_TEST(core::Stream_O,core::TwoWayStream_O,TYPEQ_ADJUST_STAMP(1587),TYPEQ_ADJUST_STAMP(1635));
      ADD_SINGLE_TYPEQ_TEST(llvmo::MDString_O,TYPEQ_ADJUST_STAMP(1179));
      ADD_SINGLE_TYPEQ_TEST(core::ShortFloat_O,TYPEQ_ADJUST_STAMP(1579));
      ADD_RANGE_TYPEQ_TEST(core::Number_O,core::Complex_O,TYPEQ_ADJUST_STAMP(1535),TYPEQ_ADJUST_STAMP(1583));
      ADD_RANGE_TYPEQ_TEST(core::T_O,core::Cons_O,TYPEQ_ADJUST_STAMP(7),TYPEQ_ADJUST_STAMP(1679));
      ADD_SINGLE_TYPEQ_TEST(llvmo::DICompileUnit_O,TYPEQ_ADJUST_STAMP(1163));
      ADD_SINGLE_TYPEQ_TEST(core::Cache_O,TYPEQ_ADJUST_STAMP(1531));
      ADD_RANGE_TYPEQ_TEST(core::AbstractSimpleVector_O,core::SimpleVector_byte4_t_O,TYPEQ_ADJUST_STAMP(727),TYPEQ_ADJUST_STAMP(891));
      ADD_SINGLE_TYPEQ_TEST(core::SimpleMDArray_byte16_t_O,TYPEQ_ADJUST_STAMP(499));
      ADD_RANGE_TYPEQ_TEST(core::Pathname_O,core::LogicalPathname_O,TYPEQ_ADJUST_STAMP(1523),TYPEQ_ADJUST_STAMP(1527));
      ADD_SINGLE_TYPEQ_TEST(core::Str8Ns_O,TYPEQ_ADJUST_STAMP(691));
      ADD_SINGLE_TYPEQ_TEST(llvmo::FunctionPass_O,TYPEQ_ADJUST_STAMP(995));
      ADD_SINGLE_TYPEQ_TEST(core::SimpleVector_byte4_t_O,TYPEQ_ADJUST_STAMP(891));
      ADD_SINGLE_TYPEQ_TEST(llvmo::UndefValue_O,TYPEQ_ADJUST_STAMP(1331));
      ADD_RANGE_TYPEQ_TEST(llvmo::CallBase_O,llvmo::InvokeInst_O,TYPEQ_ADJUST_STAMP(1259),TYPEQ_ADJUST_STAMP(1267));
      ADD_RANGE_TYPEQ_TEST(core::CompileTimeEnvironment_O,core::UnwindProtectEnvironment_O,TYPEQ_ADJUST_STAMP(1435),TYPEQ_ADJUST_STAMP(1455));
      ADD_SINGLE_TYPEQ_TEST(core::Path_O,TYPEQ_ADJUST_STAMP(1519));
      ADD_SINGLE_TYPEQ_TEST(mp::SharedMutex_O,TYPEQ_ADJUST_STAMP(203));
      ADD_SINGLE_TYPEQ_TEST(core::InstanceCreator_O,TYPEQ_ADJUST_STAMP(91));
      ADD_SINGLE_TYPEQ_TEST(core::IOStreamStream_O,TYPEQ_ADJUST_STAMP(1611));
      ADD_RANGE_TYPEQ_TEST(core::Scope_O,core::FileScope_O,TYPEQ_ADJUST_STAMP(1511),TYPEQ_ADJUST_STAMP(1515));
      ADD_SINGLE_TYPEQ_TEST(llvmo::InsertPoint_O,TYPEQ_ADJUST_STAMP(1507));
      ADD_SINGLE_TYPEQ_TEST(core::ComplexVector_double_O,TYPEQ_ADJUST_STAMP(567));
      ADD_SINGLE_TYPEQ_TEST(core::StrWNs_O,TYPEQ_ADJUST_STAMP(699));
      ADD_SINGLE_TYPEQ_TEST(core::EchoStream_O,TYPEQ_ADJUST_STAMP(1631));
      ADD_RANGE_TYPEQ_TEST(core::HashTableBase_O,core::HashTableEqual_O,TYPEQ_ADJUST_STAMP(1479),TYPEQ_ADJUST_STAMP(1503));
      ADD_SINGLE_TYPEQ_TEST(core::SimpleMDArrayBit_O,TYPEQ_ADJUST_STAMP(523));
      ADD_SINGLE_TYPEQ_TEST(core::MDArrayBit_O,TYPEQ_ADJUST_STAMP(367));
      ADD_SINGLE_TYPEQ_TEST(core::ComplexVector_byte16_t_O,TYPEQ_ADJUST_STAMP(615));
      ADD_SINGLE_TYPEQ_TEST(core::AtomicFixnumHolder_O,TYPEQ_ADJUST_STAMP(1475));
      ADD_RANGE_TYPEQ_TEST(llvmo::DILocalScope_O,llvmo::DILexicalBlock_O,TYPEQ_ADJUST_STAMP(1147),TYPEQ_ADJUST_STAMP(1159));
      ADD_SINGLE_TYPEQ_TEST(core::ComplexVector_int2_t_O,TYPEQ_ADJUST_STAMP(599));
      ADD_SINGLE_TYPEQ_TEST(llvmo::DILexicalBlock_O,TYPEQ_ADJUST_STAMP(1159));
      ADD_SINGLE_TYPEQ_TEST(llvmo::DITypeRefArray_O,TYPEQ_ADJUST_STAMP(199));
      ADD_RANGE_TYPEQ_TEST(mp::Mutex_O,mp::RecursiveMutex_O,TYPEQ_ADJUST_STAMP(191),TYPEQ_ADJUST_STAMP(195));
      ADD_SINGLE_TYPEQ_TEST(core::RecursiveDirectoryIterator_O,TYPEQ_ADJUST_STAMP(223));
      ADD_SINGLE_TYPEQ_TEST(core::StringInputStream_O,TYPEQ_ADJUST_STAMP(1627));
      ADD_RANGE_TYPEQ_TEST(llvmo::ModulePass_O,llvmo::TargetLibraryInfoWrapperPass_O,TYPEQ_ADJUST_STAMP(983),TYPEQ_ADJUST_STAMP(991));
      ADD_SINGLE_TYPEQ_TEST(core::FunctionFrame_O,TYPEQ_ADJUST_STAMP(1467));
      ADD_SINGLE_TYPEQ_TEST(llvmo::DILocalVariable_O,TYPEQ_ADJUST_STAMP(1115));
      ADD_SINGLE_TYPEQ_TEST(core::LongFloat_O,TYPEQ_ADJUST_STAMP(1575));
      ADD_SINGLE_TYPEQ_TEST(core::ComplexVector_int4_t_O,TYPEQ_ADJUST_STAMP(639));
      ADD_SINGLE_TYPEQ_TEST(llvmo::TargetLibraryInfoWrapperPass_O,TYPEQ_ADJUST_STAMP(991));
      ADD_RANGE_TYPEQ_TEST(llvmo::User_O,llvmo::ConstantArray_O,TYPEQ_ADJUST_STAMP(1199),TYPEQ_ADJUST_STAMP(1335));
      ADD_SINGLE_TYPEQ_TEST(core::MDArray_int16_t_O,TYPEQ_ADJUST_STAMP(239));
      ADD_SINGLE_TYPEQ_TEST(core::ComplexVector_T_O,TYPEQ_ADJUST_STAMP(591));
      ADD_SINGLE_TYPEQ_TEST(llvmo::FenceInst_O,TYPEQ_ADJUST_STAMP(1255));
      ADD_SINGLE_TYPEQ_TEST(llvmo::AtomicCmpXchgInst_O,TYPEQ_ADJUST_STAMP(1251));
      ADD_SINGLE_TYPEQ_TEST(core::ValueFrame_O,TYPEQ_ADJUST_STAMP(1463));
      ADD_SINGLE_TYPEQ_TEST(core::ComplexVector_int8_t_O,TYPEQ_ADJUST_STAMP(575));
      ADD_SINGLE_TYPEQ_TEST(core::SimpleMDArray_int4_t_O,TYPEQ_ADJUST_STAMP(467));
      ADD_SINGLE_TYPEQ_TEST(core::SimpleVector_int32_t_O,TYPEQ_ADJUST_STAMP(883));
      ADD_SINGLE_TYPEQ_TEST(core::SimpleMDArray_double_O,TYPEQ_ADJUST_STAMP(395));
      ADD_SINGLE_TYPEQ_TEST(core::Complex_O,TYPEQ_ADJUST_STAMP(1583));
      ADD_SINGLE_TYPEQ_TEST(llvmo::ConstantPointerNull_O,TYPEQ_ADJUST_STAMP(1327));
      ADD_SINGLE_TYPEQ_TEST(llvmo::VectorType_O,TYPEQ_ADJUST_STAMP(1035));
      ADD_SINGLE_TYPEQ_TEST(llvmo::ValueAsMetadata_O,TYPEQ_ADJUST_STAMP(1175));
      ADD_SINGLE_TYPEQ_TEST(llvmo::ConstantExpr_O,TYPEQ_ADJUST_STAMP(1323));
      ADD_SINGLE_TYPEQ_TEST(core::SingleDispatchEffectiveMethodFunction_O,TYPEQ_ADJUST_STAMP(135));
      ADD_SINGLE_TYPEQ_TEST(llvmo::StructType_O,TYPEQ_ADJUST_STAMP(1039));
      ADD_SINGLE_TYPEQ_TEST(core::RandomState_O,TYPEQ_ADJUST_STAMP(1471));
      ADD_SINGLE_TYPEQ_TEST(core::ComplexVector_int16_t_O,TYPEQ_ADJUST_STAMP(631));
      ADD_SINGLE_TYPEQ_TEST(core::SimpleMDArray_float_O,TYPEQ_ADJUST_STAMP(443));
      ADD_SINGLE_TYPEQ_TEST(llvmo::Target_O,TYPEQ_ADJUST_STAMP(1383));
      ADD_SINGLE_TYPEQ_TEST(core::SimpleVector_int2_t_O,TYPEQ_ADJUST_STAMP(819));
      ADD_SINGLE_TYPEQ_TEST(core::MDArray_byte64_t_O,TYPEQ_ADJUST_STAMP(343));
      ADD_SINGLE_TYPEQ_TEST(core::SimpleVector_fixnum_O,TYPEQ_ADJUST_STAMP(835));
      ADD_SINGLE_TYPEQ_TEST(core::SimpleVector_byte32_t_O,TYPEQ_ADJUST_STAMP(787));
      ADD_SINGLE_TYPEQ_TEST(core::SingleDispatchGenericFunctionClosure_O,TYPEQ_ADJUST_STAMP(131));
      ADD_RANGE_TYPEQ_TEST(core::AnsiStream_O,core::TwoWayStream_O,TYPEQ_ADJUST_STAMP(1591),TYPEQ_ADJUST_STAMP(1635));
      ADD_RANGE_TYPEQ_TEST(core::BuiltinClosure_O,core::TranslationFunctor_O,TYPEQ_ADJUST_STAMP(123),TYPEQ_ADJUST_STAMP(127));
      ADD_SINGLE_TYPEQ_TEST(core::SingleFloat_dummy_O,TYPEQ_ADJUST_STAMP(1571));
      ADD_SINGLE_TYPEQ_TEST(llvmo::DIExpression_O,TYPEQ_ADJUST_STAMP(1167));
      ADD_SINGLE_TYPEQ_TEST(llvmo::Module_O,TYPEQ_ADJUST_STAMP(1379));
      ADD_RANGE_TYPEQ_TEST(core::Environment_O,core::FunctionFrame_O,TYPEQ_ADJUST_STAMP(1403),TYPEQ_ADJUST_STAMP(1467));
      ADD_SINGLE_TYPEQ_TEST(core::ValueEnvironment_O,TYPEQ_ADJUST_STAMP(1431));
      ADD_SINGLE_TYPEQ_TEST(llvmo::InvokeInst_O,TYPEQ_ADJUST_STAMP(1267));
      ADD_SINGLE_TYPEQ_TEST(core::CxxMethodFunction_O,TYPEQ_ADJUST_STAMP(119));
      ADD_RANGE_TYPEQ_TEST(core::StrNs_O,core::StrWNs_O,TYPEQ_ADJUST_STAMP(683),TYPEQ_ADJUST_STAMP(699));
      ADD_SINGLE_TYPEQ_TEST(core::UnwindProtectEnvironment_O,TYPEQ_ADJUST_STAMP(1455));
      ADD_SINGLE_TYPEQ_TEST(clasp_ffi::ForeignData_O,TYPEQ_ADJUST_STAMP(151));
      ADD_SINGLE_TYPEQ_TEST(llvmo::CallInst_O,TYPEQ_ADJUST_STAMP(1263));
      ADD_SINGLE_TYPEQ_TEST(llvmo::FunctionPassManager_O,TYPEQ_ADJUST_STAMP(1095));
      ADD_SINGLE_TYPEQ_TEST(core::DoubleFloat_O,TYPEQ_ADJUST_STAMP(1567));
      ADD_RANGE_TYPEQ_TEST(core::StringStream_O,core::StringInputStream_O,TYPEQ_ADJUST_STAMP(1619),TYPEQ_ADJUST_STAMP(1627));
      ADD_SINGLE_TYPEQ_TEST(core::Sigset_O,TYPEQ_ADJUST_STAMP(1399));
      ADD_SINGLE_TYPEQ_TEST(core::MDArray_int32_t_O,TYPEQ_ADJUST_STAMP(255));
      ADD_SINGLE_TYPEQ_TEST(asttooling::AsttoolingExposer_O,TYPEQ_ADJUST_STAMP(939));
      ADD_SINGLE_TYPEQ_TEST(llvmo::IntegerType_O,TYPEQ_ADJUST_STAMP(1043));
      ADD_SINGLE_TYPEQ_TEST(core::MDArray_int64_t_O,TYPEQ_ADJUST_STAMP(295));
      ADD_SINGLE_TYPEQ_TEST(core::SimpleMDArray_size_t_O,TYPEQ_ADJUST_STAMP(459));
      ADD_SINGLE_TYPEQ_TEST(core::SmallMultimap_O,TYPEQ_ADJUST_STAMP(1395));
      ADD_SINGLE_TYPEQ_TEST(llvmo::PassManagerBuilder_O,TYPEQ_ADJUST_STAMP(1375));
      ADD_SINGLE_TYPEQ_TEST(core::Fixnum_dummy_O,TYPEQ_ADJUST_STAMP(1559));
      ADD_SINGLE_TYPEQ_TEST(core::MDArray_int8_t_O,TYPEQ_ADJUST_STAMP(247));
      ADD_SINGLE_TYPEQ_TEST(llvmo::ConstantFP_O,TYPEQ_ADJUST_STAMP(1319));
      ADD_RANGE_TYPEQ_TEST(core::SingleDispatchMethodFunction_O,core::CxxMethodFunction_O,TYPEQ_ADJUST_STAMP(115),TYPEQ_ADJUST_STAMP(119));
      ADD_SINGLE_TYPEQ_TEST(core::Cons_O,TYPEQ_ADJUST_STAMP(1679));
      ADD_SINGLE_TYPEQ_TEST(llvmo::LLVMContext_O,TYPEQ_ADJUST_STAMP(1371));
      ADD_SINGLE_TYPEQ_TEST(core::MDArray_int4_t_O,TYPEQ_ADJUST_STAMP(547));
      ADD_SINGLE_TYPEQ_TEST(core::WeakKeyHashTable_O,TYPEQ_ADJUST_STAMP(1483));
      ADD_SINGLE_TYPEQ_TEST(core::Rack_O,TYPEQ_ADJUST_STAMP(1391));
      ADD_SINGLE_TYPEQ_TEST(core::MDArrayBaseChar_O,TYPEQ_ADJUST_STAMP(335));
      ADD_SINGLE_TYPEQ_TEST(core::UserData_O,TYPEQ_ADJUST_STAMP(1667));
      ADD_RANGE_TYPEQ_TEST(core::ExternalObject_O,llvmo::Linker_O,TYPEQ_ADJUST_STAMP(975),TYPEQ_ADJUST_STAMP(1387));
      ADD_RANGE_TYPEQ_TEST(llvmo::DINode_O,llvmo::DICompileUnit_O,TYPEQ_ADJUST_STAMP(1107),TYPEQ_ADJUST_STAMP(1163));
      ADD_SINGLE_TYPEQ_TEST(llvmo::GlobalVariable_O,TYPEQ_ADJUST_STAMP(1295));
      ADD_SINGLE_TYPEQ_TEST(core::BroadcastStream_O,TYPEQ_ADJUST_STAMP(1615));
      ADD_RANGE_TYPEQ_TEST(core::General_O,clbind::ClassRegistry_O,TYPEQ_ADJUST_STAMP(19),TYPEQ_ADJUST_STAMP(1675));
      ADD_SINGLE_TYPEQ_TEST(llvmo::ObjectFile_O,TYPEQ_ADJUST_STAMP(1367));
      ADD_RANGE_TYPEQ_TEST(core::Closure_O,core::SingleDispatchEffectiveMethodFunction_O,TYPEQ_ADJUST_STAMP(103),TYPEQ_ADJUST_STAMP(135));
      ADD_SINGLE_TYPEQ_TEST(core::ComplexVector_size_t_O,TYPEQ_ADJUST_STAMP(647));
      ADD_SINGLE_TYPEQ_TEST(core::BlockEnvironment_O,TYPEQ_ADJUST_STAMP(1427));
      ADD_SINGLE_TYPEQ_TEST(mpip::Mpi_O,TYPEQ_ADJUST_STAMP(971));
      ADD_SINGLE_TYPEQ_TEST(llvmo::DINodeArray_O,TYPEQ_ADJUST_STAMP(187));
      ADD_SINGLE_TYPEQ_TEST(llvmo::ConstantDataArray_O,TYPEQ_ADJUST_STAMP(1307));
      ADD_SINGLE_TYPEQ_TEST(core::SmallMap_O,TYPEQ_ADJUST_STAMP(967));
      ADD_RANGE_TYPEQ_TEST_INSTANCE(core::Instance_O,clbind::ClassRep_O,TYPEQ_ADJUST_STAMP(953),TYPEQ_ADJUST_STAMP(961));
      ADD_SINGLE_TYPEQ_TEST(llvmo::TargetOptions_O,TYPEQ_ADJUST_STAMP(1363));
      ADD_SINGLE_TYPEQ_TEST(clasp_ffi::ForeignTypeSpec_O,TYPEQ_ADJUST_STAMP(951));
      ADD_SINGLE_TYPEQ_TEST(core::Unused_dummy_O,TYPEQ_ADJUST_STAMP(15));
      ADD_SINGLE_TYPEQ_TEST(core::PosixTimeDuration_O,TYPEQ_ADJUST_STAMP(947));
      ADD_SINGLE_TYPEQ_TEST(llvmo::DWARFContext_O,TYPEQ_ADJUST_STAMP(1359));
      ADD_SINGLE_TYPEQ_TEST(core::HashTableEqual_O,TYPEQ_ADJUST_STAMP(1503));
      ADD_SINGLE_TYPEQ_TEST(core::SimpleMDArray_byte64_t_O,TYPEQ_ADJUST_STAMP(515));
      ADD_SINGLE_TYPEQ_TEST(llvmo::Triple_O,TYPEQ_ADJUST_STAMP(1355));
      ADD_SINGLE_TYPEQ_TEST(core::BitVectorNs_O,TYPEQ_ADJUST_STAMP(679));
      ADD_SINGLE_TYPEQ_TEST(core::CoreExposer_O,TYPEQ_ADJUST_STAMP(935));
      ADD_SINGLE_TYPEQ_TEST(llvmo::NamedMDNode_O,TYPEQ_ADJUST_STAMP(1351));
      ADD_SINGLE_TYPEQ_TEST(core::SimpleVector_byte16_t_O,TYPEQ_ADJUST_STAMP(763));
      ADD_SINGLE_TYPEQ_TEST(llvmo::ThreadSafeContext_O,TYPEQ_ADJUST_STAMP(1347));
      ADD_RANGE_TYPEQ_TEST(llvmo::TargetMachine_O,llvmo::LLVMTargetMachine_O,TYPEQ_ADJUST_STAMP(1339),TYPEQ_ADJUST_STAMP(1343));
      ADD_SINGLE_TYPEQ_TEST(core::SimpleVector_byte64_t_O,TYPEQ_ADJUST_STAMP(811));
      ADD_RANGE_TYPEQ_TEST(llvmo::Value_O,llvmo::ConstantArray_O,TYPEQ_ADJUST_STAMP(1183),TYPEQ_ADJUST_STAMP(1335));
      ADD_SINGLE_TYPEQ_TEST(core::SimpleBaseString_O,TYPEQ_ADJUST_STAMP(747));
      ADD_RANGE_TYPEQ_TEST(llvmo::Metadata_O,llvmo::MDString_O,TYPEQ_ADJUST_STAMP(1099),TYPEQ_ADJUST_STAMP(1179));
      ADD_RANGE_TYPEQ_TEST(core::MDArray_O,core::ComplexVector_int64_t_O,TYPEQ_ADJUST_STAMP(231),TYPEQ_ADJUST_STAMP(723));
      ADD_SINGLE_TYPEQ_TEST(core::Serializer_O,TYPEQ_ADJUST_STAMP(183));
      ADD_SINGLE_TYPEQ_TEST(clbind::ClassRep_O,TYPEQ_ADJUST_STAMP(961));
      ADD_SINGLE_TYPEQ_TEST(llvmo::ConstantInt_O,TYPEQ_ADJUST_STAMP(1315));
      ADD_SINGLE_TYPEQ_TEST(core::SimpleMDArray_int16_t_O,TYPEQ_ADJUST_STAMP(451));
      ADD_SINGLE_TYPEQ_TEST(llvmo::StructLayout_O,TYPEQ_ADJUST_STAMP(943));
      ADD_RANGE_TYPEQ_TEST(llvmo::CompositeType_O,llvmo::StructType_O,TYPEQ_ADJUST_STAMP(1019),TYPEQ_ADJUST_STAMP(1039));
      ADD_SINGLE_TYPEQ_TEST(core::SimpleMDArrayT_O,TYPEQ_ADJUST_STAMP(411));
      ADD_RANGE_TYPEQ_TEST(core::ActivationFrame_O,core::FunctionFrame_O,TYPEQ_ADJUST_STAMP(1459),TYPEQ_ADJUST_STAMP(1467));
      ADD_RANGE_TYPEQ_TEST(llvmo::PassManagerBase_O,llvmo::FunctionPassManager_O,TYPEQ_ADJUST_STAMP(1087),TYPEQ_ADJUST_STAMP(1095));
      ADD_SINGLE_TYPEQ_TEST(llvmo::LoadInst_O,TYPEQ_ADJUST_STAMP(1215));
      ADD_SINGLE_TYPEQ_TEST(llvmo::ConstantStruct_O,TYPEQ_ADJUST_STAMP(1311));
      ADD_RANGE_TYPEQ_TEST(core::Exposer_O,asttooling::AsttoolingExposer_O,TYPEQ_ADJUST_STAMP(931),TYPEQ_ADJUST_STAMP(939));
      ADD_SINGLE_TYPEQ_TEST(core::SingleDispatchCxxEffectiveMethodFunction_O,TYPEQ_ADJUST_STAMP(111));
      ADD_SINGLE_TYPEQ_TEST(core::DirectoryIterator_O,TYPEQ_ADJUST_STAMP(219));
      ADD_SINGLE_TYPEQ_TEST(core::MDArray_byte2_t_O,TYPEQ_ADJUST_STAMP(311));
      ADD_SINGLE_TYPEQ_TEST(llvmo::DISubroutineType_O,TYPEQ_ADJUST_STAMP(1143));
      ADD_RANGE_TYPEQ_TEST(core::LexicalEnvironment_O,core::UnwindProtectEnvironment_O,TYPEQ_ADJUST_STAMP(1411),TYPEQ_ADJUST_STAMP(1455));
      ADD_SINGLE_TYPEQ_TEST(core::PosixTime_O,TYPEQ_ADJUST_STAMP(927));
      ADD_SINGLE_TYPEQ_TEST(llvmo::MetadataAsValue_O,TYPEQ_ADJUST_STAMP(1195));
      ADD_SINGLE_TYPEQ_TEST(core::SimpleBitVector_O,TYPEQ_ADJUST_STAMP(771));
      ADD_SINGLE_TYPEQ_TEST(core::FunctionContainerEnvironment_O,TYPEQ_ADJUST_STAMP(1451));
      ADD_SINGLE_TYPEQ_TEST(core::SimpleVector_int8_t_O,TYPEQ_ADJUST_STAMP(843));
      ADD_SINGLE_TYPEQ_TEST(llvmo::ResumeInst_O,TYPEQ_ADJUST_STAMP(1247));
      ADD_SINGLE_TYPEQ_TEST(llvmo::Function_O,TYPEQ_ADJUST_STAMP(1291));
      ADD_RANGE_TYPEQ_TEST(llvmo::DIType_O,llvmo::DISubroutineType_O,TYPEQ_ADJUST_STAMP(1127),TYPEQ_ADJUST_STAMP(1143));
      ADD_SINGLE_TYPEQ_TEST(core::Readtable_O,TYPEQ_ADJUST_STAMP(923));
      ADD_SINGLE_TYPEQ_TEST(llvmo::IRBuilder_O,TYPEQ_ADJUST_STAMP(1063));
      ADD_SINGLE_TYPEQ_TEST(llvmo::ClaspJIT_O,TYPEQ_ADJUST_STAMP(919));
      ADD_SINGLE_TYPEQ_TEST(core::SimpleVector_byte8_t_O,TYPEQ_ADJUST_STAMP(867));
      ADD_RANGE_TYPEQ_TEST(llvmo::DILexicalBlockBase_O,llvmo::DILexicalBlock_O,TYPEQ_ADJUST_STAMP(1155),TYPEQ_ADJUST_STAMP(1159));
      ADD_RANGE_TYPEQ_TEST(llvmo::MDNode_O,llvmo::DILocation_O,TYPEQ_ADJUST_STAMP(1103),TYPEQ_ADJUST_STAMP(1171));
      ADD_SINGLE_TYPEQ_TEST(core::ComplexVector_fixnum_O,TYPEQ_ADJUST_STAMP(715));
      ADD_SINGLE_TYPEQ_TEST(mp::RecursiveMutex_O,TYPEQ_ADJUST_STAMP(195));
      ADD_SINGLE_TYPEQ_TEST(core::SimpleVector_float_O,TYPEQ_ADJUST_STAMP(851));
      ADD_SINGLE_TYPEQ_TEST(llvmo::VAArgInst_O,TYPEQ_ADJUST_STAMP(1211));
      ADD_SINGLE_TYPEQ_TEST(core::SimpleVector_int4_t_O,TYPEQ_ADJUST_STAMP(779));
      ADD_SINGLE_TYPEQ_TEST(core::MDArray_fixnum_O,TYPEQ_ADJUST_STAMP(327));
      ADD_SINGLE_TYPEQ_TEST(core::SharpEqualWrapper_O,TYPEQ_ADJUST_STAMP(915));
      ADD_SINGLE_TYPEQ_TEST(core::LoadTimeValues_O,TYPEQ_ADJUST_STAMP(911));
      ADD_SINGLE_TYPEQ_TEST(llvmo::DIFile_O,TYPEQ_ADJUST_STAMP(1123));
      ADD_SINGLE_TYPEQ_TEST(llvmo::DataLayout_O,TYPEQ_ADJUST_STAMP(907));
      ADD_SINGLE_TYPEQ_TEST(llvmo::BasicBlock_O,TYPEQ_ADJUST_STAMP(1191));
      ADD_SINGLE_TYPEQ_TEST(core::SimpleMDArray_int8_t_O,TYPEQ_ADJUST_STAMP(387));
      ADD_SINGLE_TYPEQ_TEST(llvmo::EngineBuilder_O,TYPEQ_ADJUST_STAMP(1083));
      ADD_SINGLE_TYPEQ_TEST(core::ComplexVector_byte64_t_O,TYPEQ_ADJUST_STAMP(583));
      ADD_SINGLE_TYPEQ_TEST(llvmo::SectionedAddress_O,TYPEQ_ADJUST_STAMP(1079));
      ADD_SINGLE_TYPEQ_TEST(core::MDArray_byte32_t_O,TYPEQ_ADJUST_STAMP(303));
      ADD_SINGLE_TYPEQ_TEST(core::Character_dummy_O,TYPEQ_ADJUST_STAMP(903));
      ADD_SINGLE_TYPEQ_TEST(core::TagbodyEnvironment_O,TYPEQ_ADJUST_STAMP(1423));
      ADD_RANGE_TYPEQ_TEST(llvmo::Constant_O,llvmo::ConstantArray_O,TYPEQ_ADJUST_STAMP(1283),TYPEQ_ADJUST_STAMP(1335));
      ADD_SINGLE_TYPEQ_TEST(core::SpecialForm_O,TYPEQ_ADJUST_STAMP(99));
      ADD_SINGLE_TYPEQ_TEST(llvmo::FunctionCallee_O,TYPEQ_ADJUST_STAMP(179));
      ADD_SINGLE_TYPEQ_TEST(llvmo::DIBasicType_O,TYPEQ_ADJUST_STAMP(1139));
      ADD_SINGLE_TYPEQ_TEST(llvmo::DIBuilder_O,TYPEQ_ADJUST_STAMP(1075));
      ADD_SINGLE_TYPEQ_TEST(core::NativeVector_int_O,TYPEQ_ADJUST_STAMP(175));
      ADD_SINGLE_TYPEQ_TEST(llvmo::APInt_O,TYPEQ_ADJUST_STAMP(1071));
      ADD_SINGLE_TYPEQ_TEST(llvmo::APFloat_O,TYPEQ_ADJUST_STAMP(1067));
      ADD_SINGLE_TYPEQ_TEST(core::SimpleMDArrayCharacter_O,TYPEQ_ADJUST_STAMP(475));
      ADD_SINGLE_TYPEQ_TEST(core::SimpleCharacterString_O,TYPEQ_ADJUST_STAMP(739));
      ADD_RANGE_TYPEQ_TEST(core::Symbol_O,core::Null_O,TYPEQ_ADJUST_STAMP(895),TYPEQ_ADJUST_STAMP(899));
      ADD_RANGE_TYPEQ_TEST(core::Array_O,core::SimpleVector_byte4_t_O,TYPEQ_ADJUST_STAMP(227),TYPEQ_ADJUST_STAMP(891));
      ADD_SINGLE_TYPEQ_TEST(core::MDArray_byte4_t_O,TYPEQ_ADJUST_STAMP(263));
      ADD_SINGLE_TYPEQ_TEST(llvmo::Argument_O,TYPEQ_ADJUST_STAMP(1187));
      ADD_RANGE_TYPEQ_TEST(core::Iterator_O,core::RecursiveDirectoryIterator_O,TYPEQ_ADJUST_STAMP(215),TYPEQ_ADJUST_STAMP(223));
      ADD_RANGE_TYPEQ_TEST(llvmo::IRBuilderBase_O,llvmo::IRBuilder_O,TYPEQ_ADJUST_STAMP(1059),TYPEQ_ADJUST_STAMP(1063));
      ADD_SINGLE_TYPEQ_TEST(core::Null_O,TYPEQ_ADJUST_STAMP(899));
      ADD_SINGLE_TYPEQ_TEST(llvmo::TargetPassConfig_O,TYPEQ_ADJUST_STAMP(1055));
      ADD_SINGLE_TYPEQ_TEST(core::SingleDispatchMethod_O,TYPEQ_ADJUST_STAMP(211));
      ADD_SINGLE_TYPEQ_TEST(core::NativeVector_double_O,TYPEQ_ADJUST_STAMP(171));
      ADD_SINGLE_TYPEQ_TEST(core::GlueEnvironment_O,TYPEQ_ADJUST_STAMP(1407));
      ADD_RANGE_TYPEQ_TEST(core::CxxObject_O,mp::Process_O,TYPEQ_ADJUST_STAMP(155),TYPEQ_ADJUST_STAMP(207));
      ADD_SINGLE_TYPEQ_TEST(llvmo::ReturnInst_O,TYPEQ_ADJUST_STAMP(1243));
      ADD_SINGLE_TYPEQ_TEST(llvmo::FunctionType_O,TYPEQ_ADJUST_STAMP(1015));
      ADD_SINGLE_TYPEQ_TEST(clbind::DummyCreator_O,TYPEQ_ADJUST_STAMP(87));
      ADD_SINGLE_TYPEQ_TEST(core::MDArray_byte16_t_O,TYPEQ_ADJUST_STAMP(375));
      ADD_SINGLE_TYPEQ_TEST(llvmo::DIContext_O,TYPEQ_ADJUST_STAMP(1051));
      ADD_SINGLE_TYPEQ_TEST(llvmo::JITDylib_O,TYPEQ_ADJUST_STAMP(1047));
      ADD_RANGE_TYPEQ_TEST(llvmo::Type_O,llvmo::IntegerType_O,TYPEQ_ADJUST_STAMP(1011),TYPEQ_ADJUST_STAMP(1043));
      ADD_RANGE_TYPEQ_TEST(core::Pointer_O,clasp_ffi::ForeignData_O,TYPEQ_ADJUST_STAMP(147),TYPEQ_ADJUST_STAMP(151));
      ADD_SINGLE_TYPEQ_TEST(llvmo::UnreachableInst_O,TYPEQ_ADJUST_STAMP(1239));
      ADD_SINGLE_TYPEQ_TEST(core::ComplexVector_int64_t_O,TYPEQ_ADJUST_STAMP(723));
      ADD_SINGLE_TYPEQ_TEST(core::FileScope_O,TYPEQ_ADJUST_STAMP(1515));
      ADD_RANGE_TYPEQ_TEST(core::Float_O,core::ShortFloat_O,TYPEQ_ADJUST_STAMP(1563),TYPEQ_ADJUST_STAMP(1579));
      ADD_SINGLE_TYPEQ_TEST(core::SimpleMDArray_byte4_t_O,TYPEQ_ADJUST_STAMP(427));
      ADD_SINGLE_TYPEQ_TEST(llvmo::DIDerivedType_O,TYPEQ_ADJUST_STAMP(1135));
      ADD_SINGLE_TYPEQ_TEST(clbind::ConstructorCreator_O,TYPEQ_ADJUST_STAMP(83));
      ADD_SINGLE_TYPEQ_TEST(core::SimpleVector_int64_t_O,TYPEQ_ADJUST_STAMP(827));
      ADD_RANGE_TYPEQ_TEST(llvmo::ConstantDataSequential_O,llvmo::ConstantDataArray_O,TYPEQ_ADJUST_STAMP(1303),TYPEQ_ADJUST_STAMP(1307));
      ADD_SINGLE_TYPEQ_TEST(core::TranslationFunctor_O,TYPEQ_ADJUST_STAMP(127));
      ADD_SINGLE_TYPEQ_TEST(core::MDArray_double_O,TYPEQ_ADJUST_STAMP(555));
      ADD_SINGLE_TYPEQ_TEST(llvmo::StoreInst_O,TYPEQ_ADJUST_STAMP(1235));
      ADD_SINGLE_TYPEQ_TEST(llvmo::DebugLoc_O,TYPEQ_ADJUST_STAMP(143));
      ADD_SINGLE_TYPEQ_TEST(core::WeakPointer_O,TYPEQ_ADJUST_STAMP(139));
      ADD_SINGLE_TYPEQ_TEST(core::IOFileStream_O,TYPEQ_ADJUST_STAMP(1607));
      ADD_RANGE_TYPEQ_TEST(core::RuntimeVisibleEnvironment_O,core::ValueEnvironment_O,TYPEQ_ADJUST_STAMP(1415),TYPEQ_ADJUST_STAMP(1431));
      ADD_SINGLE_TYPEQ_TEST(core::SimpleMDArray_byte8_t_O,TYPEQ_ADJUST_STAMP(531));
      ADD_RANGE_TYPEQ_TEST(llvmo::Instruction_O,llvmo::BranchInst_O,TYPEQ_ADJUST_STAMP(1203),TYPEQ_ADJUST_STAMP(1279));
      ADD_RANGE_TYPEQ_TEST(core::FileStream_O,core::IOStreamStream_O,TYPEQ_ADJUST_STAMP(1603),TYPEQ_ADJUST_STAMP(1611));
      ADD_RANGE_TYPEQ_TEST(core::Rational_O,core::Fixnum_dummy_O,TYPEQ_ADJUST_STAMP(1543),TYPEQ_ADJUST_STAMP(1559));
      ADD_SINGLE_TYPEQ_TEST(core::MDArrayCharacter_O,TYPEQ_ADJUST_STAMP(351));
      ADD_SINGLE_TYPEQ_TEST(llvmo::LandingPadInst_O,TYPEQ_ADJUST_STAMP(1231));
      ADD_RANGE_TYPEQ_TEST(core::Function_O,core::SingleDispatchEffectiveMethodFunction_O,TYPEQ_ADJUST_STAMP(59),TYPEQ_ADJUST_STAMP(135));
      ADD_SINGLE_TYPEQ_TEST(core::SimpleMDArray_int2_t_O,TYPEQ_ADJUST_STAMP(419));
      ADD_SINGLE_TYPEQ_TEST(core::AtomicT_Holder_O,TYPEQ_ADJUST_STAMP(55));
      ADD_SINGLE_TYPEQ_TEST(core::HashTableEql_O,TYPEQ_ADJUST_STAMP(1499));
      ADD_SINGLE_TYPEQ_TEST(mp::ConditionVariable_O,TYPEQ_ADJUST_STAMP(167));
      ADD_RANGE_TYPEQ_TEST(core::Real_O,core::ShortFloat_O,TYPEQ_ADJUST_STAMP(1539),TYPEQ_ADJUST_STAMP(1579));
      ADD_SINGLE_TYPEQ_TEST(core::MDArray_byte8_t_O,TYPEQ_ADJUST_STAMP(287));
      ADD_SINGLE_TYPEQ_TEST(core::FuncallableInstanceCreator_O,TYPEQ_ADJUST_STAMP(79));
      ADD_SINGLE_TYPEQ_TEST(core::StringOutputStream_O,TYPEQ_ADJUST_STAMP(1623));
      ADD_SINGLE_TYPEQ_TEST(llvmo::AttributeSet_O,TYPEQ_ADJUST_STAMP(51));
      ADD_SINGLE_TYPEQ_TEST(llvmo::AtomicRMWInst_O,TYPEQ_ADJUST_STAMP(1227));
      ADD_SINGLE_TYPEQ_TEST(llvmo::MDBuilder_O,TYPEQ_ADJUST_STAMP(163));
      ADD_SINGLE_TYPEQ_TEST(llvmo::PassManager_O,TYPEQ_ADJUST_STAMP(1091));
      ADD_SINGLE_TYPEQ_TEST(core::SimpleVector_O,TYPEQ_ADJUST_STAMP(859));
      ADD_SINGLE_TYPEQ_TEST(llvmo::DISubprogram_O,TYPEQ_ADJUST_STAMP(1151));
      ADD_RANGE_TYPEQ_TEST(core::Creator_O,core::StandardClassCreator_O,TYPEQ_ADJUST_STAMP(67),TYPEQ_ADJUST_STAMP(95));
      ADD_SINGLE_TYPEQ_TEST(llvmo::ArrayType_O,TYPEQ_ADJUST_STAMP(1031));
      ADD_SINGLE_TYPEQ_TEST(core::SimpleMDArray_int64_t_O,TYPEQ_ADJUST_STAMP(539));
      ADD_RANGE_TYPEQ_TEST(core::SimpleString_O,core::SimpleBaseString_O,TYPEQ_ADJUST_STAMP(731),TYPEQ_ADJUST_STAMP(747));
      ADD_RANGE_TYPEQ_TEST(llvmo::DIVariable_O,llvmo::DILocalVariable_O,TYPEQ_ADJUST_STAMP(1111),TYPEQ_ADJUST_STAMP(1115));
      ADD_SINGLE_TYPEQ_TEST(core::SimpleMDArray_byte2_t_O,TYPEQ_ADJUST_STAMP(483));
      ADD_SINGLE_TYPEQ_TEST(llvmo::BlockAddress_O,TYPEQ_ADJUST_STAMP(1299));
      ADD_SINGLE_TYPEQ_TEST(llvmo::DICompositeType_O,TYPEQ_ADJUST_STAMP(1131));
      ADD_RANGE_TYPEQ_TEST(llvmo::MCSubtargetInfo_O,llvmo::TargetSubtargetInfo_O,TYPEQ_ADJUST_STAMP(1003),TYPEQ_ADJUST_STAMP(1007));
      ADD_SINGLE_TYPEQ_TEST(core::FunctionValueEnvironment_O,TYPEQ_ADJUST_STAMP(1419));
      ADD_SINGLE_TYPEQ_TEST(core::DerivableCxxClassCreator_O,TYPEQ_ADJUST_STAMP(75));
      ADD_SINGLE_TYPEQ_TEST(core::HashTableEq_O,TYPEQ_ADJUST_STAMP(1495));
      ADD_SINGLE_TYPEQ_TEST(core::HashTableEqualp_O,TYPEQ_ADJUST_STAMP(1491));
      ADD_SINGLE_TYPEQ_TEST(core::LambdaListHandler_O,TYPEQ_ADJUST_STAMP(47));
      ADD_SINGLE_TYPEQ_TEST(core::ConcatenatedStream_O,TYPEQ_ADJUST_STAMP(1599));
      ADD_SINGLE_TYPEQ_TEST(core::SymbolMacroletEnvironment_O,TYPEQ_ADJUST_STAMP(1447));
      ADD_SINGLE_TYPEQ_TEST(core::MacroletEnvironment_O,TYPEQ_ADJUST_STAMP(1443));
      ADD_RANGE_TYPEQ_TEST(llvmo::ImmutablePass_O,llvmo::TargetLibraryInfoWrapperPass_O,TYPEQ_ADJUST_STAMP(987),TYPEQ_ADJUST_STAMP(991));
      ADD_SINGLE_TYPEQ_TEST(core::FuncallableInstance_O,TYPEQ_ADJUST_STAMP(61));
      ADD_SINGLE_TYPEQ_TEST(core::SynonymStream_O,TYPEQ_ADJUST_STAMP(1595));
      ADD_SINGLE_TYPEQ_TEST(core::Ratio_O,TYPEQ_ADJUST_STAMP(1547));
      ADD_SINGLE_TYPEQ_TEST(core::MDArray_int2_t_O,TYPEQ_ADJUST_STAMP(319));
      ADD_SINGLE_TYPEQ_TEST(core::ComplexVector_byte2_t_O,TYPEQ_ADJUST_STAMP(655));
      ADD_SINGLE_TYPEQ_TEST(core::ClosureWithSlots_O,TYPEQ_ADJUST_STAMP(107));
      ADD_SINGLE_TYPEQ_TEST(llvmo::ExecutionEngine_O,TYPEQ_ADJUST_STAMP(999));
      ADD_SINGLE_TYPEQ_TEST(core::ClassRepCreator_O,TYPEQ_ADJUST_STAMP(71));
      ADD_SINGLE_TYPEQ_TEST(core::SimpleVector_int16_t_O,TYPEQ_ADJUST_STAMP(755));
      ADD_SINGLE_TYPEQ_TEST(llvmo::Attribute_O,TYPEQ_ADJUST_STAMP(43));
      ADD_SINGLE_TYPEQ_TEST(core::DerivableCxxObject_O,TYPEQ_ADJUST_STAMP(956));
      ADD_SINGLE_TYPEQ_TEST(core::SymbolToEnumConverter_O,TYPEQ_ADJUST_STAMP(39));
      ADD_SINGLE_TYPEQ_TEST(llvmo::SwitchInst_O,TYPEQ_ADJUST_STAMP(1223));
      ADD_SINGLE_TYPEQ_TEST(core::NativeVector_float_O,TYPEQ_ADJUST_STAMP(159));
      ADD_RANGE_TYPEQ_TEST(llvmo::Pass_O,llvmo::FunctionPass_O,TYPEQ_ADJUST_STAMP(979),TYPEQ_ADJUST_STAMP(995));
      ADD_SINGLE_TYPEQ_TEST(core::ComplexVector_int32_t_O,TYPEQ_ADJUST_STAMP(607));
      ADD_SINGLE_TYPEQ_TEST(core::VaList_dummy_O,TYPEQ_ADJUST_STAMP(11));
      ADD_SINGLE_TYPEQ_TEST(core::FdSet_O,TYPEQ_ADJUST_STAMP(35));
      ADD_SINGLE_TYPEQ_TEST(core::ComplexVector_byte4_t_O,TYPEQ_ADJUST_STAMP(707));
      ADD_SINGLE_TYPEQ_TEST(core::CatchEnvironment_O,TYPEQ_ADJUST_STAMP(1439));
      ADD_SINGLE_TYPEQ_TEST(core::LogicalPathname_O,TYPEQ_ADJUST_STAMP(1527));
      ADD_SINGLE_TYPEQ_TEST(llvmo::TargetSubtargetInfo_O,TYPEQ_ADJUST_STAMP(1007));
      ADD_SINGLE_TYPEQ_TEST(core::WrappedPointer_O,TYPEQ_ADJUST_STAMP(30));
      ADD_SINGLE_TYPEQ_TEST(core::SimpleVector_double_O,TYPEQ_ADJUST_STAMP(803));
      ADD_SINGLE_TYPEQ_TEST(core::SimpleMDArray_byte32_t_O,TYPEQ_ADJUST_STAMP(403));
      ADD_SINGLE_TYPEQ_TEST(core::Bignum_O,TYPEQ_ADJUST_STAMP(1555));
      ADD_SINGLE_TYPEQ_TEST(llvmo::LLVMTargetMachine_O,TYPEQ_ADJUST_STAMP(1343));
      ADD_SINGLE_TYPEQ_TEST(core::ClassHolder_O,TYPEQ_ADJUST_STAMP(27));
      ADD_RANGE_TYPEQ_TEST(llvmo::SequentialType_O,llvmo::VectorType_O,TYPEQ_ADJUST_STAMP(1023),TYPEQ_ADJUST_STAMP(1035));
      ADD_SINGLE_TYPEQ_TEST(core::ComplexVector_byte32_t_O,TYPEQ_ADJUST_STAMP(671));
      ADD_RANGE_TYPEQ_TEST(llvmo::UnaryInstruction_O,llvmo::AllocaInst_O,TYPEQ_ADJUST_STAMP(1207),TYPEQ_ADJUST_STAMP(1219));
      ADD_RANGE_TYPEQ_TEST(llvmo::GlobalValue_O,llvmo::GlobalVariable_O,TYPEQ_ADJUST_STAMP(1287),TYPEQ_ADJUST_STAMP(1295));
      ADD_SINGLE_TYPEQ_TEST(llvmo::PointerType_O,TYPEQ_ADJUST_STAMP(1027));
      ADD_SINGLE_TYPEQ_TEST(core::MultiStringBuffer_O,TYPEQ_ADJUST_STAMP(23));
#endif // defined(GC_TYPEQ)
#if defined(GC_STAMP_SELECTORS)
template <> class gctools::GCStamp<core::TwoWayStream_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__TwoWayStream_O ;
};
template <> class gctools::GCStamp<core::MDArray_size_t_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__MDArray_size_t_O ;
};
template <> class gctools::GCStamp<core::SimpleVector_byte2_t_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__SimpleVector_byte2_t_O ;
};
template <> class gctools::GCStamp<gctools::GCVector_moveable<float>> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_gctools__GCVector_moveable_float_ ;
};
template <> class gctools::GCStamp<core::SimpleMDArray_fixnum_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__SimpleMDArray_fixnum_O ;
};
template <> class gctools::GCStamp<gctools::GCArray_moveable<unsigned short>> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_gctools__GCArray_moveable_unsigned_short_ ;
};
template <> class gctools::GCStamp<core::ComplexVector_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__ComplexVector_O ;
};
template <> class gctools::GCStamp<core::SimpleMDArray_int32_t_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__SimpleMDArray_int32_t_O ;
};
template <> class gctools::GCStamp<core::Integer_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__Integer_O ;
};
template <> class gctools::GCStamp<clbind::ClassRegistry_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_clbind__ClassRegistry_O ;
};
template <> class gctools::GCStamp<asttooling::AstVisitor_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_asttooling__AstVisitor_O ;
};
template <> class gctools::GCStamp<mp::Process_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_mp__Process_O ;
};
template <> class gctools::GCStamp<core::Record_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__Record_O ;
};
template <> class gctools::GCStamp<core::LightUserData_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__LightUserData_O ;
};
template <> class gctools::GCStamp<core::MDArrayT_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__MDArrayT_O ;
};
template <> class gctools::GCStamp<gctools::GCVector_moveable<core::T_O *>> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_gctools__GCVector_moveable_core__T_O___ ;
};
template <> class gctools::GCStamp<core::DirectoryEntry_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__DirectoryEntry_O ;
};
template <> class gctools::GCStamp<llvmo::Linker_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__Linker_O ;
};
template <> class gctools::GCStamp<core::IntArray_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__IntArray_O ;
};
template <> class gctools::GCStamp<gctools::GCVector_moveable<gctools::smart_ptr<core::Creator_O>>> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__Creator_O__ ;
};
template <> class gctools::GCStamp<core::MDArray_float_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__MDArray_float_O ;
};
template <> class gctools::GCStamp<core::SourcePosInfo_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__SourcePosInfo_O ;
};
template <> class gctools::GCStamp<llvmo::BranchInst_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__BranchInst_O ;
};
template <> class gctools::GCStamp<llvmo::AllocaInst_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__AllocaInst_O ;
};
template <> class gctools::GCStamp<core::StandardClassCreator_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__StandardClassCreator_O ;
};
template <> class gctools::GCStamp<core::ComplexVector_float_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__ComplexVector_float_O ;
};
template <> class gctools::GCStamp<core::ComplexVector_byte8_t_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__ComplexVector_byte8_t_O ;
};
template <> class gctools::GCStamp<core::HashTable_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__HashTable_O ;
};
template <> class gctools::GCStamp<gctools::GCArray_moveable<float>> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_gctools__GCArray_moveable_float_ ;
};
template <> class gctools::GCStamp<gctools::GCVector_moveable<gctools::smart_ptr<core::Package_O>>> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__Package_O__ ;
};
template <> class gctools::GCStamp<core::InvocationHistoryFrameIterator_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__InvocationHistoryFrameIterator_O ;
};
template <> class gctools::GCStamp<core::SimpleVector_size_t_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__SimpleVector_size_t_O ;
};
template <> class gctools::GCStamp<llvmo::DIScope_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__DIScope_O ;
};
template <> class gctools::GCStamp<core::FileStatus_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__FileStatus_O ;
};
template <> class gctools::GCStamp<llvmo::IndirectBrInst_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__IndirectBrInst_O ;
};
template <> class gctools::GCStamp<llvmo::ConstantArray_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__ConstantArray_O ;
};
template <> class gctools::GCStamp<llvmo::PHINode_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__PHINode_O ;
};
template <> class gctools::GCStamp<core::Package_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__Package_O ;
};
template <> class gctools::GCStamp<core::SimpleMDArrayBaseChar_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__SimpleMDArrayBaseChar_O ;
};
template <> class gctools::GCStamp<llvmo::DILocation_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__DILocation_O ;
};
template <> class gctools::GCStamp<core::SimpleMDArray_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__SimpleMDArray_O ;
};
template <> class gctools::GCStamp<core::Stream_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__Stream_O ;
};
template <> class gctools::GCStamp<gctools::GCVector_moveable<int>> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_gctools__GCVector_moveable_int_ ;
};
template <> class gctools::GCStamp<gctools::GCArray_moveable<long>> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_gctools__GCArray_moveable_long_ ;
};
template <> class gctools::GCStamp<llvmo::MDString_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__MDString_O ;
};
template <> class gctools::GCStamp<core::ShortFloat_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__ShortFloat_O ;
};
template <> class gctools::GCStamp<core::Number_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__Number_O ;
};
template <> class gctools::GCStamp<core::T_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__T_O ;
};
template <> class gctools::GCStamp<llvmo::DICompileUnit_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__DICompileUnit_O ;
};
template <> class gctools::GCStamp<core::Cache_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__Cache_O ;
};
template <> class gctools::GCStamp<core::AbstractSimpleVector_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__AbstractSimpleVector_O ;
};
template <> class gctools::GCStamp<core::SimpleMDArray_byte16_t_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__SimpleMDArray_byte16_t_O ;
};
template <> class gctools::GCStamp<core::Pathname_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__Pathname_O ;
};
template <> class gctools::GCStamp<core::Str8Ns_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__Str8Ns_O ;
};
template <> class gctools::GCStamp<llvmo::FunctionPass_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__FunctionPass_O ;
};
template <> class gctools::GCStamp<core::SimpleVector_byte4_t_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__SimpleVector_byte4_t_O ;
};
template <> class gctools::GCStamp<llvmo::UndefValue_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__UndefValue_O ;
};
template <> class gctools::GCStamp<gctools::GCBitUnitArray_moveable<2,1>> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_gctools__GCBitUnitArray_moveable_2_1_ ;
};
template <> class gctools::GCStamp<gctools::GCVector_moveable<core::AuxArgument>> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_gctools__GCVector_moveable_core__AuxArgument_ ;
};
template <> class gctools::GCStamp<llvmo::CallBase_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__CallBase_O ;
};
template <> class gctools::GCStamp<gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>>> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__ ;
};
template <> class gctools::GCStamp<core::CompileTimeEnvironment_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__CompileTimeEnvironment_O ;
};
template <> class gctools::GCStamp<core::Path_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__Path_O ;
};
template <> class gctools::GCStamp<mp::SharedMutex_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_mp__SharedMutex_O ;
};
template <> class gctools::GCStamp<gctools::GCBitUnitArray_moveable<1,0>> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_gctools__GCBitUnitArray_moveable_1_0_ ;
};
template <> class gctools::GCStamp<gctools::GCArray_moveable<int>> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_gctools__GCArray_moveable_int_ ;
};
template <> class gctools::GCStamp<core::InstanceCreator_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__InstanceCreator_O ;
};
template <> class gctools::GCStamp<core::IOStreamStream_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__IOStreamStream_O ;
};
template <> class gctools::GCStamp<core::Scope_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__Scope_O ;
};
template <> class gctools::GCStamp<llvmo::InsertPoint_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__InsertPoint_O ;
};
template <> class gctools::GCStamp<core::ComplexVector_double_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__ComplexVector_double_O ;
};
template <> class gctools::GCStamp<core::StrWNs_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__StrWNs_O ;
};
template <> class gctools::GCStamp<core::EchoStream_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__EchoStream_O ;
};
template <> class gctools::GCStamp<core::HashTableBase_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__HashTableBase_O ;
};
template <> class gctools::GCStamp<core::SimpleMDArrayBit_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__SimpleMDArrayBit_O ;
};
template <> class gctools::GCStamp<core::MDArrayBit_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__MDArrayBit_O ;
};
template <> class gctools::GCStamp<core::ComplexVector_byte16_t_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__ComplexVector_byte16_t_O ;
};
template <> class gctools::GCStamp<core::AtomicFixnumHolder_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__AtomicFixnumHolder_O ;
};
template <> class gctools::GCStamp<llvmo::DILocalScope_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__DILocalScope_O ;
};
template <> class gctools::GCStamp<core::ComplexVector_int2_t_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__ComplexVector_int2_t_O ;
};
template <> class gctools::GCStamp<gctools::GCBitUnitArray_moveable<2,0>> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_gctools__GCBitUnitArray_moveable_2_0_ ;
};
template <> class gctools::GCStamp<gctools::GCVector_moveable<std::pair<gctools::smart_ptr<core::Symbol_O>,gctools::smart_ptr<core::T_O>>>> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_gctools__GCVector_moveable_std__pair_gctools__smart_ptr_core__Symbol_O__gctools__smart_ptr_core__T_O___ ;
};
template <> class gctools::GCStamp<llvmo::DILexicalBlock_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__DILexicalBlock_O ;
};
template <> class gctools::GCStamp<llvmo::DITypeRefArray_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__DITypeRefArray_O ;
};
template <> class gctools::GCStamp<mp::Mutex_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_mp__Mutex_O ;
};
template <> class gctools::GCStamp<core::RecursiveDirectoryIterator_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__RecursiveDirectoryIterator_O ;
};
template <> class gctools::GCStamp<core::StringInputStream_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__StringInputStream_O ;
};
template <> class gctools::GCStamp<llvmo::ModulePass_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__ModulePass_O ;
};
template <> class gctools::GCStamp<core::FunctionFrame_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__FunctionFrame_O ;
};
template <> class gctools::GCStamp<llvmo::DILocalVariable_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__DILocalVariable_O ;
};
template <> class gctools::GCStamp<core::LongFloat_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__LongFloat_O ;
};
template <> class gctools::GCStamp<core::ComplexVector_int4_t_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__ComplexVector_int4_t_O ;
};
template <> class gctools::GCStamp<llvmo::TargetLibraryInfoWrapperPass_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__TargetLibraryInfoWrapperPass_O ;
};
template <> class gctools::GCStamp<llvmo::User_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__User_O ;
};
template <> class gctools::GCStamp<core::MDArray_int16_t_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__MDArray_int16_t_O ;
};
template <> class gctools::GCStamp<core::ComplexVector_T_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__ComplexVector_T_O ;
};
template <> class gctools::GCStamp<llvmo::FenceInst_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__FenceInst_O ;
};
template <> class gctools::GCStamp<llvmo::AtomicCmpXchgInst_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__AtomicCmpXchgInst_O ;
};
template <> class gctools::GCStamp<core::ValueFrame_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__ValueFrame_O ;
};
template <> class gctools::GCStamp<core::ComplexVector_int8_t_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__ComplexVector_int8_t_O ;
};
template <> class gctools::GCStamp<gctools::GCArray_moveable<unsigned long>> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_gctools__GCArray_moveable_unsigned_long_ ;
};
template <> class gctools::GCStamp<core::SimpleMDArray_int4_t_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__SimpleMDArray_int4_t_O ;
};
template <> class gctools::GCStamp<core::SimpleVector_int32_t_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__SimpleVector_int32_t_O ;
};
template <> class gctools::GCStamp<core::SimpleMDArray_double_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__SimpleMDArray_double_O ;
};
template <> class gctools::GCStamp<core::Complex_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__Complex_O ;
};
template <> class gctools::GCStamp<llvmo::ConstantPointerNull_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__ConstantPointerNull_O ;
};
template <> class gctools::GCStamp<llvmo::VectorType_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__VectorType_O ;
};
template <> class gctools::GCStamp<llvmo::ValueAsMetadata_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__ValueAsMetadata_O ;
};
template <> class gctools::GCStamp<llvmo::ConstantExpr_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__ConstantExpr_O ;
};
template <> class gctools::GCStamp<core::SingleDispatchEffectiveMethodFunction_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__SingleDispatchEffectiveMethodFunction_O ;
};
template <> class gctools::GCStamp<llvmo::StructType_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__StructType_O ;
};
template <> class gctools::GCStamp<core::RandomState_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__RandomState_O ;
};
template <> class gctools::GCStamp<core::ComplexVector_int16_t_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__ComplexVector_int16_t_O ;
};
template <> class gctools::GCStamp<core::SimpleMDArray_float_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__SimpleMDArray_float_O ;
};
template <> class gctools::GCStamp<llvmo::Target_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__Target_O ;
};
template <> class gctools::GCStamp<core::SimpleVector_int2_t_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__SimpleVector_int2_t_O ;
};
template <> class gctools::GCStamp<core::MDArray_byte64_t_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__MDArray_byte64_t_O ;
};
template <> class gctools::GCStamp<core::SimpleVector_fixnum_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__SimpleVector_fixnum_O ;
};
template <> class gctools::GCStamp<core::SimpleVector_byte32_t_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__SimpleVector_byte32_t_O ;
};
template <> class gctools::GCStamp<core::SingleDispatchGenericFunctionClosure_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__SingleDispatchGenericFunctionClosure_O ;
};
template <> class gctools::GCStamp<core::AnsiStream_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__AnsiStream_O ;
};
template <> class gctools::GCStamp<core::BuiltinClosure_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__BuiltinClosure_O ;
};
template <> class gctools::GCStamp<core::SingleFloat_dummy_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__SingleFloat_dummy_O ;
};
template <> class gctools::GCStamp<llvmo::DIExpression_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__DIExpression_O ;
};
template <> class gctools::GCStamp<llvmo::Module_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__Module_O ;
};
template <> class gctools::GCStamp<core::Environment_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__Environment_O ;
};
template <> class gctools::GCStamp<core::ValueEnvironment_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__ValueEnvironment_O ;
};
template <> class gctools::GCStamp<llvmo::InvokeInst_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__InvokeInst_O ;
};
template <> class gctools::GCStamp<core::CxxMethodFunction_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__CxxMethodFunction_O ;
};
template <> class gctools::GCStamp<core::StrNs_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__StrNs_O ;
};
template <> class gctools::GCStamp<core::UnwindProtectEnvironment_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__UnwindProtectEnvironment_O ;
};
template <> class gctools::GCStamp<clasp_ffi::ForeignData_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_clasp_ffi__ForeignData_O ;
};
template <> class gctools::GCStamp<llvmo::CallInst_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__CallInst_O ;
};
template <> class gctools::GCStamp<llvmo::FunctionPassManager_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__FunctionPassManager_O ;
};
template <> class gctools::GCStamp<core::DoubleFloat_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__DoubleFloat_O ;
};
template <> class gctools::GCStamp<gctools::GCVector_moveable<gctools::smart_ptr<core::Instance_O>>> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__Instance_O__ ;
};
template <> class gctools::GCStamp<core::StringStream_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__StringStream_O ;
};
template <> class gctools::GCStamp<gctools::GCVector_moveable<core::SymbolStorage>> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_gctools__GCVector_moveable_core__SymbolStorage_ ;
};
template <> class gctools::GCStamp<core::Sigset_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__Sigset_O ;
};
template <> class gctools::GCStamp<core::MDArray_int32_t_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__MDArray_int32_t_O ;
};
template <> class gctools::GCStamp<asttooling::AsttoolingExposer_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_asttooling__AsttoolingExposer_O ;
};
template <> class gctools::GCStamp<llvmo::IntegerType_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__IntegerType_O ;
};
template <> class gctools::GCStamp<core::MDArray_int64_t_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__MDArray_int64_t_O ;
};
template <> class gctools::GCStamp<core::SimpleMDArray_size_t_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__SimpleMDArray_size_t_O ;
};
template <> class gctools::GCStamp<core::SmallMultimap_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__SmallMultimap_O ;
};
template <> class gctools::GCStamp<llvmo::PassManagerBuilder_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__PassManagerBuilder_O ;
};
template <> class gctools::GCStamp<core::Fixnum_dummy_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__Fixnum_dummy_O ;
};
template <> class gctools::GCStamp<core::MDArray_int8_t_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__MDArray_int8_t_O ;
};
template <> class gctools::GCStamp<llvmo::ConstantFP_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__ConstantFP_O ;
};
template <> class gctools::GCStamp<core::SingleDispatchMethodFunction_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__SingleDispatchMethodFunction_O ;
};
template <> class gctools::GCStamp<core::Cons_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__Cons_O ;
};
template <> class gctools::GCStamp<gctools::GCBitUnitArray_moveable<4,1>> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_gctools__GCBitUnitArray_moveable_4_1_ ;
};
template <> class gctools::GCStamp<llvmo::LLVMContext_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__LLVMContext_O ;
};
template <> class gctools::GCStamp<core::MDArray_int4_t_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__MDArray_int4_t_O ;
};
template <> class gctools::GCStamp<core::WeakKeyHashTable_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__WeakKeyHashTable_O ;
};
template <> class gctools::GCStamp<core::Rack_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__Rack_O ;
};
template <> class gctools::GCStamp<core::MDArrayBaseChar_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__MDArrayBaseChar_O ;
};
template <> class gctools::GCStamp<core::UserData_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__UserData_O ;
};
template <> class gctools::GCStamp<core::ExternalObject_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__ExternalObject_O ;
};
template <> class gctools::GCStamp<llvmo::DINode_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__DINode_O ;
};
template <> class gctools::GCStamp<llvmo::GlobalVariable_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__GlobalVariable_O ;
};
template <> class gctools::GCStamp<core::BroadcastStream_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__BroadcastStream_O ;
};
template <> class gctools::GCStamp<gctools::GCVector_moveable<gctools::smart_ptr<core::FileScope_O>>> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__FileScope_O__ ;
};
template <> class gctools::GCStamp<core::General_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__General_O ;
};
template <> class gctools::GCStamp<llvmo::ObjectFile_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__ObjectFile_O ;
};
template <> class gctools::GCStamp<core::Closure_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__Closure_O ;
};
template <> class gctools::GCStamp<core::ComplexVector_size_t_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__ComplexVector_size_t_O ;
};
template <> class gctools::GCStamp<gctools::GCVector_moveable<core::RequiredArgument>> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_gctools__GCVector_moveable_core__RequiredArgument_ ;
};
template <> class gctools::GCStamp<core::BlockEnvironment_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__BlockEnvironment_O ;
};
template <> class gctools::GCStamp<mpip::Mpi_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_mpip__Mpi_O ;
};
template <> class gctools::GCStamp<llvmo::DINodeArray_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__DINodeArray_O ;
};
template <> class gctools::GCStamp<llvmo::ConstantDataArray_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__ConstantDataArray_O ;
};
template <> class gctools::GCStamp<core::SmallMap_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__SmallMap_O ;
};
template <> class gctools::GCStamp<core::Instance_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__Instance_O ;
};
template <> class gctools::GCStamp<llvmo::TargetOptions_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__TargetOptions_O ;
};
template <> class gctools::GCStamp<clasp_ffi::ForeignTypeSpec_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_clasp_ffi__ForeignTypeSpec_O ;
};
template <> class gctools::GCStamp<core::Unused_dummy_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__Unused_dummy_O ;
};
template <> class gctools::GCStamp<core::PosixTimeDuration_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__PosixTimeDuration_O ;
};
template <> class gctools::GCStamp<llvmo::DWARFContext_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__DWARFContext_O ;
};
template <> class gctools::GCStamp<core::HashTableEqual_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__HashTableEqual_O ;
};
template <> class gctools::GCStamp<core::SimpleMDArray_byte64_t_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__SimpleMDArray_byte64_t_O ;
};
template <> class gctools::GCStamp<llvmo::Triple_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__Triple_O ;
};
template <> class gctools::GCStamp<core::BitVectorNs_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__BitVectorNs_O ;
};
template <> class gctools::GCStamp<core::CoreExposer_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__CoreExposer_O ;
};
template <> class gctools::GCStamp<gctools::GCVector_moveable<core::KeywordArgument>> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_gctools__GCVector_moveable_core__KeywordArgument_ ;
};
template <> class gctools::GCStamp<llvmo::NamedMDNode_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__NamedMDNode_O ;
};
template <> class gctools::GCStamp<core::SimpleVector_byte16_t_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__SimpleVector_byte16_t_O ;
};
template <> class gctools::GCStamp<llvmo::ThreadSafeContext_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__ThreadSafeContext_O ;
};
template <> class gctools::GCStamp<llvmo::TargetMachine_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__TargetMachine_O ;
};
template <> class gctools::GCStamp<core::SimpleVector_byte64_t_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__SimpleVector_byte64_t_O ;
};
template <> class gctools::GCStamp<llvmo::Value_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__Value_O ;
};
template <> class gctools::GCStamp<core::SimpleBaseString_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__SimpleBaseString_O ;
};
template <> class gctools::GCStamp<llvmo::Metadata_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__Metadata_O ;
};
template <> class gctools::GCStamp<core::MDArray_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__MDArray_O ;
};
template <> class gctools::GCStamp<gctools::GCVector_moveable<core::OptionalArgument>> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_gctools__GCVector_moveable_core__OptionalArgument_ ;
};
template <> class gctools::GCStamp<core::Serializer_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__Serializer_O ;
};
template <> class gctools::GCStamp<clbind::ClassRep_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_clbind__ClassRep_O ;
};
template <> class gctools::GCStamp<llvmo::ConstantInt_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__ConstantInt_O ;
};
template <> class gctools::GCStamp<gctools::GCArray_moveable<double>> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_gctools__GCArray_moveable_double_ ;
};
template <> class gctools::GCStamp<core::SimpleMDArray_int16_t_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__SimpleMDArray_int16_t_O ;
};
template <> class gctools::GCStamp<llvmo::StructLayout_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__StructLayout_O ;
};
template <> class gctools::GCStamp<llvmo::CompositeType_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__CompositeType_O ;
};
template <> class gctools::GCStamp<core::SimpleMDArrayT_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__SimpleMDArrayT_O ;
};
template <> class gctools::GCStamp<core::ActivationFrame_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__ActivationFrame_O ;
};
template <> class gctools::GCStamp<llvmo::PassManagerBase_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__PassManagerBase_O ;
};
template <> class gctools::GCStamp<llvmo::LoadInst_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__LoadInst_O ;
};
template <> class gctools::GCStamp<llvmo::ConstantStruct_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__ConstantStruct_O ;
};
template <> class gctools::GCStamp<core::Exposer_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__Exposer_O ;
};
template <> class gctools::GCStamp<core::SingleDispatchCxxEffectiveMethodFunction_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__SingleDispatchCxxEffectiveMethodFunction_O ;
};
template <> class gctools::GCStamp<core::DirectoryIterator_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__DirectoryIterator_O ;
};
template <> class gctools::GCStamp<core::MDArray_byte2_t_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__MDArray_byte2_t_O ;
};
template <> class gctools::GCStamp<llvmo::DISubroutineType_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__DISubroutineType_O ;
};
template <> class gctools::GCStamp<core::LexicalEnvironment_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__LexicalEnvironment_O ;
};
template <> class gctools::GCStamp<core::PosixTime_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__PosixTime_O ;
};
template <> class gctools::GCStamp<llvmo::MetadataAsValue_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__MetadataAsValue_O ;
};
template <> class gctools::GCStamp<core::SimpleBitVector_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__SimpleBitVector_O ;
};
template <> class gctools::GCStamp<core::FunctionContainerEnvironment_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__FunctionContainerEnvironment_O ;
};
template <> class gctools::GCStamp<core::SimpleVector_int8_t_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__SimpleVector_int8_t_O ;
};
template <> class gctools::GCStamp<llvmo::ResumeInst_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__ResumeInst_O ;
};
template <> class gctools::GCStamp<llvmo::Function_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__Function_O ;
};
template <> class gctools::GCStamp<llvmo::DIType_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__DIType_O ;
};
template <> class gctools::GCStamp<gctools::GCVector_moveable<gctools::smart_ptr<core::SingleDispatchMethod_O>>> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__SingleDispatchMethod_O__ ;
};
template <> class gctools::GCStamp<core::Readtable_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__Readtable_O ;
};
template <> class gctools::GCStamp<gctools::GCVector_moveable<gctools::smart_ptr<core::T_O>>> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__T_O__ ;
};
template <> class gctools::GCStamp<llvmo::IRBuilder_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__IRBuilder_O ;
};
template <> class gctools::GCStamp<llvmo::ClaspJIT_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__ClaspJIT_O ;
};
template <> class gctools::GCStamp<gctools::GCVector_moveable<gctools::smart_ptr<core::Symbol_O>>> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__Symbol_O__ ;
};
template <> class gctools::GCStamp<core::SimpleVector_byte8_t_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__SimpleVector_byte8_t_O ;
};
template <> class gctools::GCStamp<llvmo::DILexicalBlockBase_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__DILexicalBlockBase_O ;
};
template <> class gctools::GCStamp<llvmo::MDNode_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__MDNode_O ;
};
template <> class gctools::GCStamp<core::ComplexVector_fixnum_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__ComplexVector_fixnum_O ;
};
template <> class gctools::GCStamp<mp::RecursiveMutex_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_mp__RecursiveMutex_O ;
};
template <> class gctools::GCStamp<core::SimpleVector_float_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__SimpleVector_float_O ;
};
template <> class gctools::GCStamp<llvmo::VAArgInst_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__VAArgInst_O ;
};
template <> class gctools::GCStamp<core::SimpleVector_int4_t_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__SimpleVector_int4_t_O ;
};
template <> class gctools::GCStamp<core::MDArray_fixnum_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__MDArray_fixnum_O ;
};
template <> class gctools::GCStamp<core::SharpEqualWrapper_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__SharpEqualWrapper_O ;
};
template <> class gctools::GCStamp<core::LoadTimeValues_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__LoadTimeValues_O ;
};
template <> class gctools::GCStamp<llvmo::DIFile_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__DIFile_O ;
};
template <> class gctools::GCStamp<llvmo::DataLayout_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__DataLayout_O ;
};
template <> class gctools::GCStamp<llvmo::BasicBlock_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__BasicBlock_O ;
};
template <> class gctools::GCStamp<core::SimpleMDArray_int8_t_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__SimpleMDArray_int8_t_O ;
};
template <> class gctools::GCStamp<llvmo::EngineBuilder_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__EngineBuilder_O ;
};
template <> class gctools::GCStamp<core::ComplexVector_byte64_t_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__ComplexVector_byte64_t_O ;
};
template <> class gctools::GCStamp<llvmo::SectionedAddress_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__SectionedAddress_O ;
};
template <> class gctools::GCStamp<core::MDArray_byte32_t_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__MDArray_byte32_t_O ;
};
template <> class gctools::GCStamp<core::Character_dummy_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__Character_dummy_O ;
};
template <> class gctools::GCStamp<core::TagbodyEnvironment_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__TagbodyEnvironment_O ;
};
template <> class gctools::GCStamp<llvmo::Constant_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__Constant_O ;
};
template <> class gctools::GCStamp<core::SpecialForm_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__SpecialForm_O ;
};
template <> class gctools::GCStamp<llvmo::FunctionCallee_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__FunctionCallee_O ;
};
template <> class gctools::GCStamp<gctools::GCArray_moveable<unsigned char>> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_gctools__GCArray_moveable_unsigned_char_ ;
};
template <> class gctools::GCStamp<llvmo::DIBasicType_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__DIBasicType_O ;
};
template <> class gctools::GCStamp<llvmo::DIBuilder_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__DIBuilder_O ;
};
template <> class gctools::GCStamp<core::NativeVector_int_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__NativeVector_int_O ;
};
template <> class gctools::GCStamp<llvmo::APInt_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__APInt_O ;
};
template <> class gctools::GCStamp<llvmo::APFloat_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__APFloat_O ;
};
template <> class gctools::GCStamp<core::SimpleMDArrayCharacter_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__SimpleMDArrayCharacter_O ;
};
template <> class gctools::GCStamp<core::SimpleCharacterString_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__SimpleCharacterString_O ;
};
template <> class gctools::GCStamp<core::Symbol_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__Symbol_O ;
};
template <> class gctools::GCStamp<gctools::GCVector_moveable<std::pair<gctools::smart_ptr<core::T_O>,gctools::smart_ptr<core::T_O>>>> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_gctools__GCVector_moveable_std__pair_gctools__smart_ptr_core__T_O__gctools__smart_ptr_core__T_O___ ;
};
template <> class gctools::GCStamp<gctools::GCVector_moveable<gctools::smart_ptr<core::List_V>>> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__List_V__ ;
};
template <> class gctools::GCStamp<core::Array_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__Array_O ;
};
template <> class gctools::GCStamp<core::MDArray_byte4_t_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__MDArray_byte4_t_O ;
};
template <> class gctools::GCStamp<llvmo::Argument_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__Argument_O ;
};
template <> class gctools::GCStamp<core::Iterator_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__Iterator_O ;
};
template <> class gctools::GCStamp<llvmo::IRBuilderBase_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__IRBuilderBase_O ;
};
template <> class gctools::GCStamp<core::Null_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__Null_O ;
};
template <> class gctools::GCStamp<llvmo::TargetPassConfig_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__TargetPassConfig_O ;
};
template <> class gctools::GCStamp<core::SingleDispatchMethod_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__SingleDispatchMethod_O ;
};
template <> class gctools::GCStamp<gctools::GCArray_moveable<signed char>> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_gctools__GCArray_moveable_signed_char_ ;
};
template <> class gctools::GCStamp<core::NativeVector_double_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__NativeVector_double_O ;
};
template <> class gctools::GCStamp<core::GlueEnvironment_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__GlueEnvironment_O ;
};
template <> class gctools::GCStamp<core::CxxObject_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__CxxObject_O ;
};
template <> class gctools::GCStamp<llvmo::ReturnInst_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__ReturnInst_O ;
};
template <> class gctools::GCStamp<llvmo::FunctionType_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__FunctionType_O ;
};
template <> class gctools::GCStamp<clbind::DummyCreator_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_clbind__DummyCreator_O ;
};
template <> class gctools::GCStamp<core::MDArray_byte16_t_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__MDArray_byte16_t_O ;
};
template <> class gctools::GCStamp<llvmo::DIContext_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__DIContext_O ;
};
template <> class gctools::GCStamp<llvmo::JITDylib_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__JITDylib_O ;
};
template <> class gctools::GCStamp<llvmo::Type_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__Type_O ;
};
template <> class gctools::GCStamp<core::Pointer_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__Pointer_O ;
};
template <> class gctools::GCStamp<llvmo::UnreachableInst_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__UnreachableInst_O ;
};
template <> class gctools::GCStamp<core::ComplexVector_int64_t_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__ComplexVector_int64_t_O ;
};
template <> class gctools::GCStamp<gctools::GCVector_moveable<core::SymbolClassHolderPair>> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_gctools__GCVector_moveable_core__SymbolClassHolderPair_ ;
};
template <> class gctools::GCStamp<gctools::GCVector_moveable<core::Cons_O>> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_gctools__GCVector_moveable_core__Cons_O_ ;
};
template <> class gctools::GCStamp<gctools::GCBitUnitArray_moveable<4,0>> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_gctools__GCBitUnitArray_moveable_4_0_ ;
};
template <> class gctools::GCStamp<core::FileScope_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__FileScope_O ;
};
template <> class gctools::GCStamp<core::Float_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__Float_O ;
};
template <> class gctools::GCStamp<core::SimpleMDArray_byte4_t_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__SimpleMDArray_byte4_t_O ;
};
template <> class gctools::GCStamp<llvmo::DIDerivedType_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__DIDerivedType_O ;
};
template <> class gctools::GCStamp<clbind::ConstructorCreator_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_clbind__ConstructorCreator_O ;
};
template <> class gctools::GCStamp<core::SimpleVector_int64_t_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__SimpleVector_int64_t_O ;
};
template <> class gctools::GCStamp<llvmo::ConstantDataSequential_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__ConstantDataSequential_O ;
};
template <> class gctools::GCStamp<core::TranslationFunctor_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__TranslationFunctor_O ;
};
template <> class gctools::GCStamp<core::MDArray_double_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__MDArray_double_O ;
};
template <> class gctools::GCStamp<llvmo::StoreInst_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__StoreInst_O ;
};
template <> class gctools::GCStamp<llvmo::DebugLoc_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__DebugLoc_O ;
};
template <> class gctools::GCStamp<core::WeakPointer_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__WeakPointer_O ;
};
template <> class gctools::GCStamp<core::IOFileStream_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__IOFileStream_O ;
};
template <> class gctools::GCStamp<core::RuntimeVisibleEnvironment_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__RuntimeVisibleEnvironment_O ;
};
template <> class gctools::GCStamp<core::SimpleMDArray_byte8_t_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__SimpleMDArray_byte8_t_O ;
};
template <> class gctools::GCStamp<llvmo::Instruction_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__Instruction_O ;
};
template <> class gctools::GCStamp<core::FileStream_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__FileStream_O ;
};
template <> class gctools::GCStamp<core::Rational_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__Rational_O ;
};
template <> class gctools::GCStamp<core::MDArrayCharacter_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__MDArrayCharacter_O ;
};
template <> class gctools::GCStamp<llvmo::LandingPadInst_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__LandingPadInst_O ;
};
template <> class gctools::GCStamp<core::Function_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__Function_O ;
};
template <> class gctools::GCStamp<core::SimpleMDArray_int2_t_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__SimpleMDArray_int2_t_O ;
};
template <> class gctools::GCStamp<gctools::GCVector_moveable<gctools::smart_ptr<clbind::ClassRep_O>>> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_gctools__GCVector_moveable_gctools__smart_ptr_clbind__ClassRep_O__ ;
};
template <> class gctools::GCStamp<core::AtomicT_Holder_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__AtomicT_Holder_O ;
};
template <> class gctools::GCStamp<core::HashTableEql_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__HashTableEql_O ;
};
template <> class gctools::GCStamp<mp::ConditionVariable_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_mp__ConditionVariable_O ;
};
template <> class gctools::GCStamp<core::Real_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__Real_O ;
};
template <> class gctools::GCStamp<core::MDArray_byte8_t_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__MDArray_byte8_t_O ;
};
template <> class gctools::GCStamp<core::FuncallableInstanceCreator_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__FuncallableInstanceCreator_O ;
};
template <> class gctools::GCStamp<core::StringOutputStream_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__StringOutputStream_O ;
};
template <> class gctools::GCStamp<llvmo::AttributeSet_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__AttributeSet_O ;
};
template <> class gctools::GCStamp<llvmo::AtomicRMWInst_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__AtomicRMWInst_O ;
};
template <> class gctools::GCStamp<llvmo::MDBuilder_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__MDBuilder_O ;
};
template <> class gctools::GCStamp<llvmo::PassManager_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__PassManager_O ;
};
template <> class gctools::GCStamp<core::SimpleVector_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__SimpleVector_O ;
};
template <> class gctools::GCStamp<llvmo::DISubprogram_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__DISubprogram_O ;
};
template <> class gctools::GCStamp<core::Creator_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__Creator_O ;
};
template <> class gctools::GCStamp<llvmo::ArrayType_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__ArrayType_O ;
};
template <> class gctools::GCStamp<core::SimpleMDArray_int64_t_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__SimpleMDArray_int64_t_O ;
};
template <> class gctools::GCStamp<core::SimpleString_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__SimpleString_O ;
};
template <> class gctools::GCStamp<llvmo::DIVariable_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__DIVariable_O ;
};
template <> class gctools::GCStamp<core::SimpleMDArray_byte2_t_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__SimpleMDArray_byte2_t_O ;
};
template <> class gctools::GCStamp<llvmo::BlockAddress_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__BlockAddress_O ;
};
template <> class gctools::GCStamp<llvmo::DICompositeType_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__DICompositeType_O ;
};
template <> class gctools::GCStamp<llvmo::MCSubtargetInfo_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__MCSubtargetInfo_O ;
};
template <> class gctools::GCStamp<core::FunctionValueEnvironment_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__FunctionValueEnvironment_O ;
};
template <> class gctools::GCStamp<gctools::GCArray_moveable<short>> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_gctools__GCArray_moveable_short_ ;
};
template <> class gctools::GCStamp<core::DerivableCxxClassCreator_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__DerivableCxxClassCreator_O ;
};
template <> class gctools::GCStamp<core::HashTableEq_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__HashTableEq_O ;
};
template <> class gctools::GCStamp<core::HashTableEqualp_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__HashTableEqualp_O ;
};
template <> class gctools::GCStamp<core::LambdaListHandler_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__LambdaListHandler_O ;
};
template <> class gctools::GCStamp<core::ConcatenatedStream_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__ConcatenatedStream_O ;
};
template <> class gctools::GCStamp<gctools::GCVector_moveable<double>> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_gctools__GCVector_moveable_double_ ;
};
template <> class gctools::GCStamp<core::SymbolMacroletEnvironment_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__SymbolMacroletEnvironment_O ;
};
template <> class gctools::GCStamp<core::MacroletEnvironment_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__MacroletEnvironment_O ;
};
template <> class gctools::GCStamp<llvmo::ImmutablePass_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__ImmutablePass_O ;
};
template <> class gctools::GCStamp<core::FuncallableInstance_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__FuncallableInstance_O ;
};
template <> class gctools::GCStamp<core::SynonymStream_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__SynonymStream_O ;
};
template <> class gctools::GCStamp<core::Ratio_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__Ratio_O ;
};
template <> class gctools::GCStamp<core::MDArray_int2_t_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__MDArray_int2_t_O ;
};
template <> class gctools::GCStamp<core::ComplexVector_byte2_t_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__ComplexVector_byte2_t_O ;
};
template <> class gctools::GCStamp<core::ClosureWithSlots_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__ClosureWithSlots_O ;
};
template <> class gctools::GCStamp<llvmo::ExecutionEngine_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__ExecutionEngine_O ;
};
template <> class gctools::GCStamp<core::ClassRepCreator_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__ClassRepCreator_O ;
};
template <> class gctools::GCStamp<core::SimpleVector_int16_t_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__SimpleVector_int16_t_O ;
};
template <> class gctools::GCStamp<gctools::GCVector_moveable<gctools::smart_ptr<core::Cons_O>>> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__Cons_O__ ;
};
template <> class gctools::GCStamp<llvmo::Attribute_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__Attribute_O ;
};
template <> class gctools::GCStamp<core::DerivableCxxObject_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__DerivableCxxObject_O ;
};
template <> class gctools::GCStamp<core::SymbolToEnumConverter_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__SymbolToEnumConverter_O ;
};
template <> class gctools::GCStamp<llvmo::SwitchInst_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__SwitchInst_O ;
};
template <> class gctools::GCStamp<core::NativeVector_float_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__NativeVector_float_O ;
};
template <> class gctools::GCStamp<llvmo::Pass_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__Pass_O ;
};
template <> class gctools::GCStamp<core::ComplexVector_int32_t_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__ComplexVector_int32_t_O ;
};
template <> class gctools::GCStamp<core::Lisp_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__Lisp_O ;
};
template <> class gctools::GCStamp<core::VaList_dummy_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__VaList_dummy_O ;
};
template <> class gctools::GCStamp<core::FdSet_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__FdSet_O ;
};
template <> class gctools::GCStamp<core::ComplexVector_byte4_t_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__ComplexVector_byte4_t_O ;
};
template <> class gctools::GCStamp<core::CatchEnvironment_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__CatchEnvironment_O ;
};
template <> class gctools::GCStamp<gctools::GCVector_moveable<core::CacheRecord>> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_gctools__GCVector_moveable_core__CacheRecord_ ;
};
template <> class gctools::GCStamp<core::LogicalPathname_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__LogicalPathname_O ;
};
template <> class gctools::GCStamp<llvmo::TargetSubtargetInfo_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__TargetSubtargetInfo_O ;
};
template <> class gctools::GCStamp<core::WrappedPointer_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__WrappedPointer_O ;
};
template <> class gctools::GCStamp<core::SimpleVector_double_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__SimpleVector_double_O ;
};
template <> class gctools::GCStamp<core::SimpleMDArray_byte32_t_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__SimpleMDArray_byte32_t_O ;
};
template <> class gctools::GCStamp<core::Bignum_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__Bignum_O ;
};
template <> class gctools::GCStamp<llvmo::LLVMTargetMachine_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__LLVMTargetMachine_O ;
};
template <> class gctools::GCStamp<core::ClassHolder_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__ClassHolder_O ;
};
template <> class gctools::GCStamp<llvmo::SequentialType_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__SequentialType_O ;
};
template <> class gctools::GCStamp<core::ComplexVector_byte32_t_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__ComplexVector_byte32_t_O ;
};
template <> class gctools::GCStamp<llvmo::UnaryInstruction_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__UnaryInstruction_O ;
};
template <> class gctools::GCStamp<llvmo::GlobalValue_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__GlobalValue_O ;
};
template <> class gctools::GCStamp<llvmo::PointerType_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__PointerType_O ;
};
template <> class gctools::GCStamp<gctools::GCArray_moveable<unsigned int>> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_gctools__GCArray_moveable_unsigned_int_ ;
};
template <> class gctools::GCStamp<core::MultiStringBuffer_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__MultiStringBuffer_O ;
};
#endif // defined(GC_STAMP_SELECTORS)
#if defined(GC_OBJ_SCAN)
#endif // defined(GC_OBJ_SCAN)
#if defined(GC_OBJ_SCAN_HELPERS)
// Stamp = core::T_O/7
{ class_kind, STAMP_core__T_O, sizeof(core::T_O), 0, "core::T_O" },
// Stamp = core::VaList_dummy_O/11
{ class_kind, STAMP_core__VaList_dummy_O, sizeof(core::VaList_dummy_O), 0, "core::VaList_dummy_O" },
// Stamp = core::Unused_dummy_O/15
{ class_kind, STAMP_core__Unused_dummy_O, sizeof(core::Unused_dummy_O), 0, "core::Unused_dummy_O" },
// Stamp = core::General_O/19
{ class_kind, STAMP_core__General_O, sizeof(core::General_O), 0, "core::General_O" },
// Stamp = core::MultiStringBuffer_O/23
{ class_kind, STAMP_core__MultiStringBuffer_O, sizeof(core::MultiStringBuffer_O), 0, "core::MultiStringBuffer_O" },
// Stamp = core::ClassHolder_O/27
{ class_kind, STAMP_core__ClassHolder_O, sizeof(core::ClassHolder_O), 0, "core::ClassHolder_O" },
// second-last-field is-atomic atomic: T  name: "atomic"
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::atomic<gctools::smart_ptr<core::Instance_O>>" :NAME "atomic" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Instance_O>" :SPECIALIZER "class core::Instance_O") :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Instance_O>" :SPECIALIZER "class core::Instance_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(core::ClassHolder_O),_Class), "_Class" }, // atomic: T public: (T NIL) fixable: SMART-PTR-FIX good-name: T
// Stamp = core::WrappedPointer_O/30
{ templated_kind, STAMP_core__WrappedPointer_O, sizeof(core::WrappedPointer_O), 0, "core::WrappedPointer_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::WrappedPointer_O),ShiftedStamp_), "ShiftedStamp_" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Instance_O>" :SPECIALIZER "class core::Instance_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(core::WrappedPointer_O),Class_), "Class_" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// Stamp = core::FdSet_O/35
{ class_kind, STAMP_core__FdSet_O, sizeof(core::FdSet_O), 0, "core::FdSet_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "(anonymous)" :NAME "")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::FdSet_O),_fd_set.__count), "_fd_set.__count" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "(anonymous)" :NAME "")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "(anonymous struct)::(anonymous)" :NAME "")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned int")
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::FdSet_O),_fd_set.__value.__wch), "_fd_set.__value.__wch" }, // atomic: NIL public: (T T T) fixable: NIL good-name: T
// Stamp = core::SymbolToEnumConverter_O/39
{ class_kind, STAMP_core__SymbolToEnumConverter_O, sizeof(core::SymbolToEnumConverter_O), 0, "core::SymbolToEnumConverter_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::SimpleString_O>" :SPECIALIZER "class core::SimpleString_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::SimpleString_O>), offsetof(SAFE_TYPE_MACRO(core::SymbolToEnumConverter_O),_WhatTheEnumsRepresent), "_WhatTheEnumsRepresent" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::HashTableEql_O>" :SPECIALIZER "class core::HashTableEql_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::HashTableEql_O>), offsetof(SAFE_TYPE_MACRO(core::SymbolToEnumConverter_O),_EnumToSymbol), "_EnumToSymbol" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::HashTableEq_O>" :SPECIALIZER "class core::HashTableEq_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::HashTableEq_O>), offsetof(SAFE_TYPE_MACRO(core::SymbolToEnumConverter_O),_ArchiveSymbolToEnum), "_ArchiveSymbolToEnum" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::HashTableEql_O>" :SPECIALIZER "class core::HashTableEql_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::HashTableEql_O>), offsetof(SAFE_TYPE_MACRO(core::SymbolToEnumConverter_O),_EnumToArchiveSymbol), "_EnumToArchiveSymbol" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::HashTableEq_O>" :SPECIALIZER "class core::HashTableEq_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::HashTableEq_O>), offsetof(SAFE_TYPE_MACRO(core::SymbolToEnumConverter_O),_SymbolToEnum), "_SymbolToEnum" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// Stamp = llvmo::Attribute_O/43
{ class_kind, STAMP_llvmo__Attribute_O, sizeof(llvmo::Attribute_O), 0, "llvmo::Attribute_O" },
// Stamp = core::LambdaListHandler_O/47
{ class_kind, STAMP_core__LambdaListHandler_O, sizeof(core::LambdaListHandler_O), 0, "core::LambdaListHandler_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::LambdaListHandler_O),_NumberOfSpecialVariables), "_NumberOfSpecialVariables" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "_Bool")
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::LambdaListHandler_O),_CreatesBindings), "_CreatesBindings" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::List_V>" :SPECIALIZER "class core::List_V")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::List_V>), offsetof(SAFE_TYPE_MACRO(core::LambdaListHandler_O),_ClassifiedSymbolList), "_ClassifiedSymbolList" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: "Nilable"
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::Nilable<gctools::smart_ptr<core::HashTableEq_O>>" :NAME "Nilable" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::HashTableEq_O>" :SPECIALIZER "class core::HashTableEq_O") :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::POINTER-CTYPE :KEY NIL :POINTEE #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::HashTableEq_O" :NAME "HashTableEq_O"))
 {  fixed_field, POINTER_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::LambdaListHandler_O),_SpecialSymbolSet.theObject), "_SpecialSymbolSet.theObject" }, // atomic: NIL public: (T T) fixable: RAW-TAGGED-POINTER-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::List_V>" :SPECIALIZER "class core::List_V")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::List_V>), offsetof(SAFE_TYPE_MACRO(core::LambdaListHandler_O),_DeclareSpecifierList), "_DeclareSpecifierList" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: "GCVector"
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::Vec0<core::RequiredArgument>" :NAME "Vec0" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::RequiredArgument" :NAME "RequiredArgument") :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::GCVector<core::RequiredArgument,gctools::GCContainerAllocator<gctools::GCVector_moveable<core::RequiredArgument>>>" :NAME "GCVector" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::RequiredArgument" :NAME "RequiredArgument") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::GCContainerAllocator<gctools::GCVector_moveable<core::RequiredArgument>>" :NAME "GCContainerAllocator" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::GCVECTOR-MOVEABLE-CTYPE :KEY "gctools::GCVector_moveable<core::RequiredArgument>" :NAME "GCVector_moveable" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::RequiredArgument" :NAME "RequiredArgument") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::TAGGED-POINTER-CTYPE :KEY "gctools::tagged_pointer<gctools::GCVector_moveable<core::RequiredArgument>>" :SPECIALIZER "class gctools::GCVector_moveable<class core::RequiredArgument>")
 {  fixed_field, TAGGED_POINTER_OFFSET, sizeof(gctools::tagged_pointer<gctools::GCVector_moveable<core::RequiredArgument>>), offsetof(SAFE_TYPE_MACRO(core::LambdaListHandler_O),_RequiredArguments._Vector._Contents), "_RequiredArguments._Vector._Contents" }, // atomic: NIL public: (T T T) fixable: TAGGED-POINTER-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: "GCVector"
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::Vec0<core::OptionalArgument>" :NAME "Vec0" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::OptionalArgument" :NAME "OptionalArgument") :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::GCVector<core::OptionalArgument,gctools::GCContainerAllocator<gctools::GCVector_moveable<core::OptionalArgument>>>" :NAME "GCVector" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::OptionalArgument" :NAME "OptionalArgument") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::GCContainerAllocator<gctools::GCVector_moveable<core::OptionalArgument>>" :NAME "GCContainerAllocator" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::GCVECTOR-MOVEABLE-CTYPE :KEY "gctools::GCVector_moveable<core::OptionalArgument>" :NAME "GCVector_moveable" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::OptionalArgument" :NAME "OptionalArgument") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::TAGGED-POINTER-CTYPE :KEY "gctools::tagged_pointer<gctools::GCVector_moveable<core::OptionalArgument>>" :SPECIALIZER "class gctools::GCVector_moveable<class core::OptionalArgument>")
 {  fixed_field, TAGGED_POINTER_OFFSET, sizeof(gctools::tagged_pointer<gctools::GCVector_moveable<core::OptionalArgument>>), offsetof(SAFE_TYPE_MACRO(core::LambdaListHandler_O),_OptionalArguments._Vector._Contents), "_OptionalArguments._Vector._Contents" }, // atomic: NIL public: (T T T) fixable: TAGGED-POINTER-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::RestArgument" :NAME "RestArgument")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::LambdaListHandler_O),_RestArgument._ArgTarget), "_RestArgument._ArgTarget" }, // atomic: NIL public: (T T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::RestArgument" :NAME "RestArgument")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::LambdaListHandler_O),_RestArgument._ArgTargetFrameIndex), "_RestArgument._ArgTargetFrameIndex" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::RestArgument" :NAME "RestArgument")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "_Bool")
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::LambdaListHandler_O),_RestArgument.VaRest), "_RestArgument.VaRest" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::LambdaListHandler_O),_KeyFlag), "_KeyFlag" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: "GCVector"
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::Vec0<core::KeywordArgument>" :NAME "Vec0" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::KeywordArgument" :NAME "KeywordArgument") :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::GCVector<core::KeywordArgument,gctools::GCContainerAllocator<gctools::GCVector_moveable<core::KeywordArgument>>>" :NAME "GCVector" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::KeywordArgument" :NAME "KeywordArgument") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::GCContainerAllocator<gctools::GCVector_moveable<core::KeywordArgument>>" :NAME "GCContainerAllocator" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::GCVECTOR-MOVEABLE-CTYPE :KEY "gctools::GCVector_moveable<core::KeywordArgument>" :NAME "GCVector_moveable" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::KeywordArgument" :NAME "KeywordArgument") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::TAGGED-POINTER-CTYPE :KEY "gctools::tagged_pointer<gctools::GCVector_moveable<core::KeywordArgument>>" :SPECIALIZER "class gctools::GCVector_moveable<class core::KeywordArgument>")
 {  fixed_field, TAGGED_POINTER_OFFSET, sizeof(gctools::tagged_pointer<gctools::GCVector_moveable<core::KeywordArgument>>), offsetof(SAFE_TYPE_MACRO(core::LambdaListHandler_O),_KeywordArguments._Vector._Contents), "_KeywordArguments._Vector._Contents" }, // atomic: NIL public: (T T T) fixable: TAGGED-POINTER-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::LambdaListHandler_O),_AllowOtherKeys), "_AllowOtherKeys" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: "GCVector"
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::Vec0<core::AuxArgument>" :NAME "Vec0" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::AuxArgument" :NAME "AuxArgument") :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::GCVector<core::AuxArgument,gctools::GCContainerAllocator<gctools::GCVector_moveable<core::AuxArgument>>>" :NAME "GCVector" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::AuxArgument" :NAME "AuxArgument") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::GCContainerAllocator<gctools::GCVector_moveable<core::AuxArgument>>" :NAME "GCContainerAllocator" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::GCVECTOR-MOVEABLE-CTYPE :KEY "gctools::GCVector_moveable<core::AuxArgument>" :NAME "GCVector_moveable" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::AuxArgument" :NAME "AuxArgument") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::TAGGED-POINTER-CTYPE :KEY "gctools::tagged_pointer<gctools::GCVector_moveable<core::AuxArgument>>" :SPECIALIZER "class gctools::GCVector_moveable<class core::AuxArgument>")
 {  fixed_field, TAGGED_POINTER_OFFSET, sizeof(gctools::tagged_pointer<gctools::GCVector_moveable<core::AuxArgument>>), offsetof(SAFE_TYPE_MACRO(core::LambdaListHandler_O),_AuxArguments._Vector._Contents), "_AuxArguments._Vector._Contents" }, // atomic: NIL public: (T T T) fixable: TAGGED-POINTER-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::SimpleString_O>" :SPECIALIZER "class core::SimpleString_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::SimpleString_O>), offsetof(SAFE_TYPE_MACRO(core::LambdaListHandler_O),_Comment), "_Comment" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::LambdaListHandler_O),_NumberOfLexicalVariables), "_NumberOfLexicalVariables" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "_Bool")
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::LambdaListHandler_O),_RequiredLexicalArgumentsOnly), "_RequiredLexicalArgumentsOnly" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::LambdaListHandler_O),_LexicalVariableNamesForDebugging), "_LexicalVariableNamesForDebugging" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// Stamp = llvmo::AttributeSet_O/51
{ class_kind, STAMP_llvmo__AttributeSet_O, sizeof(llvmo::AttributeSet_O), 0, "llvmo::AttributeSet_O" },
// Stamp = core::AtomicT_Holder_O/55
{ class_kind, STAMP_core__AtomicT_Holder_O, sizeof(core::AtomicT_Holder_O), 0, "core::AtomicT_Holder_O" },
// second-last-field is-atomic atomic: T  name: "atomic"
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::atomic<gctools::smart_ptr<core::T_O>>" :NAME "atomic" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O") :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::AtomicT_Holder_O),_Object), "_Object" }, // atomic: T public: (T NIL) fixable: SMART-PTR-FIX good-name: T
// Stamp = core::Function_O/59
{ class_kind, STAMP_core__Function_O, sizeof(core::Function_O), 0, "core::Function_O" },
// Stamp = core::FuncallableInstance_O/61
{ class_kind, STAMP_core__FuncallableInstance_O, sizeof(core::FuncallableInstance_O), 0, "core::FuncallableInstance_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Instance_O>" :SPECIALIZER "class core::Instance_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(core::FuncallableInstance_O),_Class), "_Class" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Rack_O>" :SPECIALIZER "class core::Rack_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Rack_O>), offsetof(SAFE_TYPE_MACRO(core::FuncallableInstance_O),_Rack), "_Rack" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::FuncallableInstance_O),_Sig), "_Sig" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: T  name: "atomic"
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::atomic<unsigned long>" :NAME "atomic" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long") :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::FuncallableInstance_O),_Compilations), "_Compilations" }, // atomic: T public: (T NIL) fixable: NIL good-name: T
// second-last-field is-atomic atomic: T  name: "atomic"
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::atomic<unsigned long>" :NAME "atomic" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long") :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::FuncallableInstance_O),_InterpretedCalls), "_InterpretedCalls" }, // atomic: T public: (T NIL) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: "atomic_wrapper"
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::atomic_wrapper<gctools::smart_ptr<core::T_O>>" :NAME "atomic_wrapper" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O") :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::FuncallableInstance_O),_CallHistory._Contents), "_CallHistory._Contents" }, // atomic: NIL public: (T T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: "atomic_wrapper"
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::atomic_wrapper<gctools::smart_ptr<core::T_O>>" :NAME "atomic_wrapper" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O") :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::FuncallableInstance_O),_SpecializerProfile._Contents), "_SpecializerProfile._Contents" }, // atomic: NIL public: (T T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: "atomic_wrapper"
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::atomic_wrapper<gctools::smart_ptr<core::T_O>>" :NAME "atomic_wrapper" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O") :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::FuncallableInstance_O),_CompiledDispatchFunction._Contents), "_CompiledDispatchFunction._Contents" }, // atomic: NIL public: (T T) fixable: SMART-PTR-FIX good-name: T
// Stamp = core::Creator_O/67
{ templated_kind, STAMP_core__Creator_O, sizeof(core::Creator_O), 0, "core::Creator_O" },
// Stamp = core::ClassRepCreator_O/71
{ class_kind, STAMP_core__ClassRepCreator_O, sizeof(core::ClassRepCreator_O), 0, "core::ClassRepCreator_O" },
// Stamp = core::DerivableCxxClassCreator_O/75
{ class_kind, STAMP_core__DerivableCxxClassCreator_O, sizeof(core::DerivableCxxClassCreator_O), 0, "core::DerivableCxxClassCreator_O" },
// Stamp = core::FuncallableInstanceCreator_O/79
{ class_kind, STAMP_core__FuncallableInstanceCreator_O, sizeof(core::FuncallableInstanceCreator_O), 0, "core::FuncallableInstanceCreator_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Instance_O>" :SPECIALIZER "class core::Instance_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(core::FuncallableInstanceCreator_O),_class), "_class" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// Stamp = clbind::ConstructorCreator_O/83
{ templated_kind, STAMP_clbind__ConstructorCreator_O, sizeof(clbind::ConstructorCreator_O), 0, "clbind::ConstructorCreator_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Symbol_O>" :SPECIALIZER "class core::Symbol_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Symbol_O>), offsetof(SAFE_TYPE_MACRO(clbind::ConstructorCreator_O),_mostDerivedClassSymbol), "_mostDerivedClassSymbol" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// Stamp = clbind::DummyCreator_O/87
{ class_kind, STAMP_clbind__DummyCreator_O, sizeof(clbind::DummyCreator_O), 0, "clbind::DummyCreator_O" },
// second-last-field is-atomic atomic: NIL  name: "basic_string"
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>" :NAME "basic_string" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::char_traits<char>" :NAME "char_traits" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 2 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::allocator<char>" :NAME "allocator" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(clbind::DummyCreator_O),_name._M_string_length), "_name._M_string_length" }, // atomic: NIL public: (T NIL) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>" :NAME "basic_string" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::char_traits<char>" :NAME "char_traits" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 2 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::allocator<char>" :NAME "allocator" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::(anonymous)" :NAME "")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(clbind::DummyCreator_O),_name.NO-NAME._M_allocated_capacity), "_name.NO-NAME._M_allocated_capacity" }, // atomic: NIL public: (T NIL T) fixable: NIL good-name: T
// Stamp = core::InstanceCreator_O/91
{ class_kind, STAMP_core__InstanceCreator_O, sizeof(core::InstanceCreator_O), 0, "core::InstanceCreator_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Instance_O>" :SPECIALIZER "class core::Instance_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(core::InstanceCreator_O),_class), "_class" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// Stamp = core::StandardClassCreator_O/95
{ class_kind, STAMP_core__StandardClassCreator_O, sizeof(core::StandardClassCreator_O), 0, "core::StandardClassCreator_O" },
// Stamp = core::SpecialForm_O/99
{ class_kind, STAMP_core__SpecialForm_O, sizeof(core::SpecialForm_O), 0, "core::SpecialForm_O" },
// Stamp = core::Closure_O/103
{ templated_kind, STAMP_core__Closure_O, sizeof(core::Closure_O), 0, "core::Closure_O" },
// Stamp = core::ClosureWithSlots_O/107
{ class_kind, STAMP_core__ClosureWithSlots_O, sizeof(core::ClosureWithSlots_O), 0, "core::ClosureWithSlots_O" },
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::ClosureWithSlots_O),_Slots._Data), "_Slots._Data" },
 {  variable_capacity, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::ClosureWithSlots_O),_Slots._Length), offsetof(SAFE_TYPE_MACRO(core::ClosureWithSlots_O),_Slots._Length), NULL },
// one -> #<SMART-PTR-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O") :base #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")>
{    variable_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), 0, "only" },
// Stamp = core::SingleDispatchCxxEffectiveMethodFunction_O/111
{ class_kind, STAMP_core__SingleDispatchCxxEffectiveMethodFunction_O, sizeof(core::SingleDispatchCxxEffectiveMethodFunction_O), 0, "core::SingleDispatchCxxEffectiveMethodFunction_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::CxxMethodFunction_O>" :SPECIALIZER "class core::CxxMethodFunction_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::CxxMethodFunction_O>), offsetof(SAFE_TYPE_MACRO(core::SingleDispatchCxxEffectiveMethodFunction_O),_onlyCxxMethodFunction), "_onlyCxxMethodFunction" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// Stamp = core::SingleDispatchMethodFunction_O/115
{ class_kind, STAMP_core__SingleDispatchMethodFunction_O, sizeof(core::SingleDispatchMethodFunction_O), 0, "core::SingleDispatchMethodFunction_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Function_O>" :SPECIALIZER "class core::Function_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Function_O>), offsetof(SAFE_TYPE_MACRO(core::SingleDispatchMethodFunction_O),_body), "_body" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// Stamp = core::CxxMethodFunction_O/119
{ class_kind, STAMP_core__CxxMethodFunction_O, sizeof(core::CxxMethodFunction_O), 0, "core::CxxMethodFunction_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Function_O>" :SPECIALIZER "class core::Function_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Function_O>), offsetof(SAFE_TYPE_MACRO(core::CxxMethodFunction_O),_body), "_body" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// Stamp = core::BuiltinClosure_O/123
{ templated_kind, STAMP_core__BuiltinClosure_O, sizeof(core::BuiltinClosure_O), 0, "core::BuiltinClosure_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::LambdaListHandler_O>" :SPECIALIZER "class core::LambdaListHandler_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::LambdaListHandler_O>), offsetof(SAFE_TYPE_MACRO(core::BuiltinClosure_O),_lambdaListHandler), "_lambdaListHandler" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// Stamp = core::TranslationFunctor_O/127
{ class_kind, STAMP_core__TranslationFunctor_O, sizeof(core::TranslationFunctor_O), 0, "core::TranslationFunctor_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::LambdaListHandler_O>" :SPECIALIZER "class core::LambdaListHandler_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::LambdaListHandler_O>), offsetof(SAFE_TYPE_MACRO(core::TranslationFunctor_O),_lambdaListHandler), "_lambdaListHandler" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// Stamp = core::SingleDispatchGenericFunctionClosure_O/131
{ class_kind, STAMP_core__SingleDispatchGenericFunctionClosure_O, sizeof(core::SingleDispatchGenericFunctionClosure_O), 0, "core::SingleDispatchGenericFunctionClosure_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::List_V>" :SPECIALIZER "class core::List_V")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::List_V>), offsetof(SAFE_TYPE_MACRO(core::SingleDispatchGenericFunctionClosure_O),_Methods), "_Methods" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::LambdaListHandler_O>" :SPECIALIZER "class core::LambdaListHandler_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::LambdaListHandler_O>), offsetof(SAFE_TYPE_MACRO(core::SingleDispatchGenericFunctionClosure_O),_lambdaListHandler), "_lambdaListHandler" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SingleDispatchGenericFunctionClosure_O),_SingleDispatchArgumentIndex), "_SingleDispatchArgumentIndex" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// Stamp = core::SingleDispatchEffectiveMethodFunction_O/135
{ class_kind, STAMP_core__SingleDispatchEffectiveMethodFunction_O, sizeof(core::SingleDispatchEffectiveMethodFunction_O), 0, "core::SingleDispatchEffectiveMethodFunction_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::List_V>" :SPECIALIZER "class core::List_V")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::List_V>), offsetof(SAFE_TYPE_MACRO(core::SingleDispatchEffectiveMethodFunction_O),_Befores), "_Befores" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::List_V>" :SPECIALIZER "class core::List_V")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::List_V>), offsetof(SAFE_TYPE_MACRO(core::SingleDispatchEffectiveMethodFunction_O),_Primaries), "_Primaries" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::List_V>" :SPECIALIZER "class core::List_V")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::List_V>), offsetof(SAFE_TYPE_MACRO(core::SingleDispatchEffectiveMethodFunction_O),_Afters), "_Afters" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// Stamp = core::WeakPointer_O/139
{ class_kind, STAMP_core__WeakPointer_O, sizeof(core::WeakPointer_O), 0, "core::WeakPointer_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "gctools::WeakPointerManager" :NAME "WeakPointerManager")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::TAGGED-POINTER-CTYPE :KEY "gctools::tagged_pointer<gctools::WeakPointer>" :SPECIALIZER "struct gctools::WeakPointer")
 {  fixed_field, TAGGED_POINTER_OFFSET, sizeof(gctools::tagged_pointer<gctools::WeakPointer>), offsetof(SAFE_TYPE_MACRO(core::WeakPointer_O),_WeakObject.pointer), "_WeakObject.pointer" }, // atomic: NIL public: (T T) fixable: TAGGED-POINTER-FIX good-name: T
// Stamp = llvmo::DebugLoc_O/143
{ class_kind, STAMP_llvmo__DebugLoc_O, sizeof(llvmo::DebugLoc_O), 0, "llvmo::DebugLoc_O" },
// Stamp = core::Pointer_O/147
{ class_kind, STAMP_core__Pointer_O, sizeof(core::Pointer_O), 0, "core::Pointer_O" },
// Stamp = clasp_ffi::ForeignData_O/151
{ class_kind, STAMP_clasp_ffi__ForeignData_O, sizeof(clasp_ffi::ForeignData_O), 0, "clasp_ffi::ForeignData_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(clasp_ffi::ForeignData_O),m_kind), "m_kind" }, // atomic: NIL public: (NIL) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(clasp_ffi::ForeignData_O),m_size), "m_size" }, // atomic: NIL public: (NIL) fixable: NIL good-name: T
// Stamp = core::CxxObject_O/155
{ class_kind, STAMP_core__CxxObject_O, sizeof(core::CxxObject_O), 0, "core::CxxObject_O" },
// Stamp = core::NativeVector_float_O/159
{ class_kind, STAMP_core__NativeVector_float_O, sizeof(core::NativeVector_float_O), 0, "core::NativeVector_float_O" },
// second-last-field is-atomic atomic: NIL  name: "GCVector"
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::Vec0<float>" :NAME "Vec0" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "float") :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::GCVector<float,gctools::GCContainerAllocator<gctools::GCVector_moveable<float>>>" :NAME "GCVector" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "float") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::GCContainerAllocator<gctools::GCVector_moveable<float>>" :NAME "GCContainerAllocator" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::GCVECTOR-MOVEABLE-CTYPE :KEY "gctools::GCVector_moveable<float>" :NAME "GCVector_moveable" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "float") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::TAGGED-POINTER-CTYPE :KEY "gctools::tagged_pointer<gctools::GCVector_moveable<float>>" :SPECIALIZER "class gctools::GCVector_moveable<float>")
 {  fixed_field, TAGGED_POINTER_OFFSET, sizeof(gctools::tagged_pointer<gctools::GCVector_moveable<float>>), offsetof(SAFE_TYPE_MACRO(core::NativeVector_float_O),_Vector._Vector._Contents), "_Vector._Vector._Contents" }, // atomic: NIL public: (T T T) fixable: TAGGED-POINTER-FIX good-name: T
// Stamp = llvmo::MDBuilder_O/163
{ class_kind, STAMP_llvmo__MDBuilder_O, sizeof(llvmo::MDBuilder_O), 0, "llvmo::MDBuilder_O" },
// Stamp = mp::ConditionVariable_O/167
{ class_kind, STAMP_mp__ConditionVariable_O, sizeof(mp::ConditionVariable_O), 0, "mp::ConditionVariable_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::ConditionVariable" :NAME "ConditionVariable")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "(anonymous)" :NAME "")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(mp::ConditionVariable_O),_ConditionVariable._ConditionVariable.__count), "_ConditionVariable._ConditionVariable.__count" }, // atomic: NIL public: (T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::ConditionVariable" :NAME "ConditionVariable")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "(anonymous)" :NAME "")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "(anonymous struct)::(anonymous)" :NAME "")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned int")
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(mp::ConditionVariable_O),_ConditionVariable._ConditionVariable.__value.__wch), "_ConditionVariable._ConditionVariable.__value.__wch" }, // atomic: NIL public: (T T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(mp::ConditionVariable_O),_Name), "_Name" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// Stamp = core::NativeVector_double_O/171
{ class_kind, STAMP_core__NativeVector_double_O, sizeof(core::NativeVector_double_O), 0, "core::NativeVector_double_O" },
// second-last-field is-atomic atomic: NIL  name: "GCVector"
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::Vec0<double>" :NAME "Vec0" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "double") :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::GCVector<double,gctools::GCContainerAllocator<gctools::GCVector_moveable<double>>>" :NAME "GCVector" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "double") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::GCContainerAllocator<gctools::GCVector_moveable<double>>" :NAME "GCContainerAllocator" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::GCVECTOR-MOVEABLE-CTYPE :KEY "gctools::GCVector_moveable<double>" :NAME "GCVector_moveable" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "double") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::TAGGED-POINTER-CTYPE :KEY "gctools::tagged_pointer<gctools::GCVector_moveable<double>>" :SPECIALIZER "class gctools::GCVector_moveable<double>")
 {  fixed_field, TAGGED_POINTER_OFFSET, sizeof(gctools::tagged_pointer<gctools::GCVector_moveable<double>>), offsetof(SAFE_TYPE_MACRO(core::NativeVector_double_O),_Vector._Vector._Contents), "_Vector._Vector._Contents" }, // atomic: NIL public: (T T T) fixable: TAGGED-POINTER-FIX good-name: T
// Stamp = core::NativeVector_int_O/175
{ class_kind, STAMP_core__NativeVector_int_O, sizeof(core::NativeVector_int_O), 0, "core::NativeVector_int_O" },
// second-last-field is-atomic atomic: NIL  name: "GCVector"
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::Vec0<int>" :NAME "Vec0" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int") :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::GCVector<int,gctools::GCContainerAllocator<gctools::GCVector_moveable<int>>>" :NAME "GCVector" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::GCContainerAllocator<gctools::GCVector_moveable<int>>" :NAME "GCContainerAllocator" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::GCVECTOR-MOVEABLE-CTYPE :KEY "gctools::GCVector_moveable<int>" :NAME "GCVector_moveable" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::TAGGED-POINTER-CTYPE :KEY "gctools::tagged_pointer<gctools::GCVector_moveable<int>>" :SPECIALIZER "class gctools::GCVector_moveable<int>")
 {  fixed_field, TAGGED_POINTER_OFFSET, sizeof(gctools::tagged_pointer<gctools::GCVector_moveable<int>>), offsetof(SAFE_TYPE_MACRO(core::NativeVector_int_O),_Vector._Vector._Contents), "_Vector._Vector._Contents" }, // atomic: NIL public: (T T T) fixable: TAGGED-POINTER-FIX good-name: T
// Stamp = llvmo::FunctionCallee_O/179
{ class_kind, STAMP_llvmo__FunctionCallee_O, sizeof(llvmo::FunctionCallee_O), 0, "llvmo::FunctionCallee_O" },
// Stamp = core::Serializer_O/183
{ class_kind, STAMP_core__Serializer_O, sizeof(core::Serializer_O), 0, "core::Serializer_O" },
// second-last-field is-atomic atomic: NIL  name: "basic_string"
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>" :NAME "basic_string" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::char_traits<char>" :NAME "char_traits" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 2 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::allocator<char>" :NAME "allocator" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::Serializer_O),_Data._M_string_length), "_Data._M_string_length" }, // atomic: NIL public: (T NIL) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>" :NAME "basic_string" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::char_traits<char>" :NAME "char_traits" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 2 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::allocator<char>" :NAME "allocator" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::(anonymous)" :NAME "")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::Serializer_O),_Data.NO-NAME._M_allocated_capacity), "_Data.NO-NAME._M_allocated_capacity" }, // atomic: NIL public: (T NIL T) fixable: NIL good-name: T
// Stamp = llvmo::DINodeArray_O/187
{ class_kind, STAMP_llvmo__DINodeArray_O, sizeof(llvmo::DINodeArray_O), 0, "llvmo::DINodeArray_O" },
// Stamp = mp::Mutex_O/191
{ class_kind, STAMP_mp__Mutex_O, sizeof(mp::Mutex_O), 0, "mp::Mutex_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(mp::Mutex_O),_Name), "_Name" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(mp::Mutex_O),_Owner), "_Owner" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(mp::Mutex_O),_Mutex._NameWord), "_Mutex._NameWord" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "(anonymous)" :NAME "")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(mp::Mutex_O),_Mutex._Mutex.__count), "_Mutex._Mutex.__count" }, // atomic: NIL public: (T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "(anonymous)" :NAME "")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "(anonymous struct)::(anonymous)" :NAME "")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned int")
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(mp::Mutex_O),_Mutex._Mutex.__value.__wch), "_Mutex._Mutex.__value.__wch" }, // atomic: NIL public: (T T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "long")
// not-exposing {  fixed_field, ctype_long, sizeof(long), offsetof(SAFE_TYPE_MACRO(mp::Mutex_O),_Mutex._Counter), "_Mutex._Counter" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "_Bool")
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(mp::Mutex_O),_Mutex._Recursive), "_Mutex._Recursive" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
// Stamp = mp::RecursiveMutex_O/195
{ class_kind, STAMP_mp__RecursiveMutex_O, sizeof(mp::RecursiveMutex_O), 0, "mp::RecursiveMutex_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(mp::RecursiveMutex_O),_Name), "_Name" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(mp::RecursiveMutex_O),_Owner), "_Owner" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(mp::RecursiveMutex_O),_Mutex._NameWord), "_Mutex._NameWord" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "(anonymous)" :NAME "")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(mp::RecursiveMutex_O),_Mutex._Mutex.__count), "_Mutex._Mutex.__count" }, // atomic: NIL public: (T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "(anonymous)" :NAME "")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "(anonymous struct)::(anonymous)" :NAME "")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned int")
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(mp::RecursiveMutex_O),_Mutex._Mutex.__value.__wch), "_Mutex._Mutex.__value.__wch" }, // atomic: NIL public: (T T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "long")
// not-exposing {  fixed_field, ctype_long, sizeof(long), offsetof(SAFE_TYPE_MACRO(mp::RecursiveMutex_O),_Mutex._Counter), "_Mutex._Counter" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "_Bool")
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(mp::RecursiveMutex_O),_Mutex._Recursive), "_Mutex._Recursive" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
// Stamp = llvmo::DITypeRefArray_O/199
{ class_kind, STAMP_llvmo__DITypeRefArray_O, sizeof(llvmo::DITypeRefArray_O), 0, "llvmo::DITypeRefArray_O" },
// Stamp = mp::SharedMutex_O/203
{ class_kind, STAMP_mp__SharedMutex_O, sizeof(mp::SharedMutex_O), 0, "mp::SharedMutex_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(mp::SharedMutex_O),_Name), "_Name" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(mp::SharedMutex_O),_Owner), "_Owner" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::UpgradableSharedMutex" :NAME "UpgradableSharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(mp::SharedMutex_O),_SharedMutex.mReadMutex._NameWord), "_SharedMutex.mReadMutex._NameWord" }, // atomic: NIL public: (T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::UpgradableSharedMutex" :NAME "UpgradableSharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "(anonymous)" :NAME "")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(mp::SharedMutex_O),_SharedMutex.mReadMutex._Mutex.__count), "_SharedMutex.mReadMutex._Mutex.__count" }, // atomic: NIL public: (T T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::UpgradableSharedMutex" :NAME "UpgradableSharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "(anonymous)" :NAME "")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "(anonymous struct)::(anonymous)" :NAME "")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned int")
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(mp::SharedMutex_O),_SharedMutex.mReadMutex._Mutex.__value.__wch), "_SharedMutex.mReadMutex._Mutex.__value.__wch" }, // atomic: NIL public: (T T T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::UpgradableSharedMutex" :NAME "UpgradableSharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "long")
// not-exposing {  fixed_field, ctype_long, sizeof(long), offsetof(SAFE_TYPE_MACRO(mp::SharedMutex_O),_SharedMutex.mReadMutex._Counter), "_SharedMutex.mReadMutex._Counter" }, // atomic: NIL public: (T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::UpgradableSharedMutex" :NAME "UpgradableSharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "_Bool")
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(mp::SharedMutex_O),_SharedMutex.mReadMutex._Recursive), "_SharedMutex.mReadMutex._Recursive" }, // atomic: NIL public: (T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::UpgradableSharedMutex" :NAME "UpgradableSharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(mp::SharedMutex_O),_SharedMutex.mWriteMutex._NameWord), "_SharedMutex.mWriteMutex._NameWord" }, // atomic: NIL public: (T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::UpgradableSharedMutex" :NAME "UpgradableSharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "(anonymous)" :NAME "")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(mp::SharedMutex_O),_SharedMutex.mWriteMutex._Mutex.__count), "_SharedMutex.mWriteMutex._Mutex.__count" }, // atomic: NIL public: (T T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::UpgradableSharedMutex" :NAME "UpgradableSharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "(anonymous)" :NAME "")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "(anonymous struct)::(anonymous)" :NAME "")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned int")
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(mp::SharedMutex_O),_SharedMutex.mWriteMutex._Mutex.__value.__wch), "_SharedMutex.mWriteMutex._Mutex.__value.__wch" }, // atomic: NIL public: (T T T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::UpgradableSharedMutex" :NAME "UpgradableSharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "long")
// not-exposing {  fixed_field, ctype_long, sizeof(long), offsetof(SAFE_TYPE_MACRO(mp::SharedMutex_O),_SharedMutex.mWriteMutex._Counter), "_SharedMutex.mWriteMutex._Counter" }, // atomic: NIL public: (T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::UpgradableSharedMutex" :NAME "UpgradableSharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "_Bool")
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(mp::SharedMutex_O),_SharedMutex.mWriteMutex._Recursive), "_SharedMutex.mWriteMutex._Recursive" }, // atomic: NIL public: (T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::UpgradableSharedMutex" :NAME "UpgradableSharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "_Bool")
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(mp::SharedMutex_O),_SharedMutex.mReadsBlocked), "_SharedMutex.mReadsBlocked" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::UpgradableSharedMutex" :NAME "UpgradableSharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned int")
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(mp::SharedMutex_O),_SharedMutex.mMaxReaders), "_SharedMutex.mMaxReaders" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::UpgradableSharedMutex" :NAME "UpgradableSharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned int")
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(mp::SharedMutex_O),_SharedMutex.mReaders), "_SharedMutex.mReaders" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
// Stamp = mp::Process_O/207
{ class_kind, STAMP_mp__Process_O, sizeof(mp::Process_O), 0, "mp::Process_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(mp::Process_O),_Name), "_Name" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(mp::Process_O),_Function), "_Function" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::List_V>" :SPECIALIZER "class core::List_V")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::List_V>), offsetof(SAFE_TYPE_MACRO(mp::Process_O),_Arguments), "_Arguments" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::List_V>" :SPECIALIZER "class core::List_V")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::List_V>), offsetof(SAFE_TYPE_MACRO(mp::Process_O),_InitialSpecialBindings), "_InitialSpecialBindings" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::List_V>" :SPECIALIZER "class core::List_V")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::List_V>), offsetof(SAFE_TYPE_MACRO(mp::Process_O),_ReturnValuesList), "_ReturnValuesList" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(mp::Process_O),_SuspensionMutex._NameWord), "_SuspensionMutex._NameWord" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "(anonymous)" :NAME "")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(mp::Process_O),_SuspensionMutex._Mutex.__count), "_SuspensionMutex._Mutex.__count" }, // atomic: NIL public: (T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "(anonymous)" :NAME "")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "(anonymous struct)::(anonymous)" :NAME "")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned int")
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(mp::Process_O),_SuspensionMutex._Mutex.__value.__wch), "_SuspensionMutex._Mutex.__value.__wch" }, // atomic: NIL public: (T T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "long")
// not-exposing {  fixed_field, ctype_long, sizeof(long), offsetof(SAFE_TYPE_MACRO(mp::Process_O),_SuspensionMutex._Counter), "_SuspensionMutex._Counter" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "_Bool")
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(mp::Process_O),_SuspensionMutex._Recursive), "_SuspensionMutex._Recursive" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::ConditionVariable" :NAME "ConditionVariable")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "(anonymous)" :NAME "")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(mp::Process_O),_SuspensionCV._ConditionVariable.__count), "_SuspensionCV._ConditionVariable.__count" }, // atomic: NIL public: (T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::ConditionVariable" :NAME "ConditionVariable")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "(anonymous)" :NAME "")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "(anonymous struct)::(anonymous)" :NAME "")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned int")
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(mp::Process_O),_SuspensionCV._ConditionVariable.__value.__wch), "_SuspensionCV._ConditionVariable.__value.__wch" }, // atomic: NIL public: (T T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(mp::Process_O),_StackSize), "_StackSize" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(mp::Process_O),_Thread), "_Thread" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// Stamp = core::SingleDispatchMethod_O/211
{ class_kind, STAMP_core__SingleDispatchMethod_O, sizeof(core::SingleDispatchMethod_O), 0, "core::SingleDispatchMethod_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::SingleDispatchMethod_O),_name), "_name" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Instance_O>" :SPECIALIZER "class core::Instance_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(core::SingleDispatchMethod_O),_receiver_class), "_receiver_class" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::LambdaListHandler_O>" :SPECIALIZER "class core::LambdaListHandler_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::LambdaListHandler_O>), offsetof(SAFE_TYPE_MACRO(core::SingleDispatchMethod_O),_argument_handler), "_argument_handler" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::List_V>" :SPECIALIZER "class core::List_V")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::List_V>), offsetof(SAFE_TYPE_MACRO(core::SingleDispatchMethod_O),_declares), "_declares" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::SingleDispatchMethod_O),_docstring), "_docstring" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::SingleDispatchMethodFunction_O>" :SPECIALIZER "class core::SingleDispatchMethodFunction_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::SingleDispatchMethodFunction_O>), offsetof(SAFE_TYPE_MACRO(core::SingleDispatchMethod_O),_body), "_body" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// Stamp = core::Iterator_O/215
{ class_kind, STAMP_core__Iterator_O, sizeof(core::Iterator_O), 0, "core::Iterator_O" },
// Stamp = core::DirectoryIterator_O/219
{ class_kind, STAMP_core__DirectoryIterator_O, sizeof(core::DirectoryIterator_O), 0, "core::DirectoryIterator_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Path_O>" :SPECIALIZER "class core::Path_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Path_O>), offsetof(SAFE_TYPE_MACRO(core::DirectoryIterator_O),_Path), "_Path" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// Stamp = core::RecursiveDirectoryIterator_O/223
{ class_kind, STAMP_core__RecursiveDirectoryIterator_O, sizeof(core::RecursiveDirectoryIterator_O), 0, "core::RecursiveDirectoryIterator_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Path_O>" :SPECIALIZER "class core::Path_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Path_O>), offsetof(SAFE_TYPE_MACRO(core::RecursiveDirectoryIterator_O),_Path), "_Path" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "_Bool")
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::RecursiveDirectoryIterator_O),_EnterHidden), "_EnterHidden" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// Stamp = core::Array_O/227
{ class_kind, STAMP_core__Array_O, sizeof(core::Array_O), 0, "core::Array_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CONSTANT-ARRAY-CTYPE :KEY NIL :ARRAY-SIZE 0 :ELEMENT-TYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long"))
// not-exposing {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::Array_O),_Length), "_Length" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// Stamp = core::MDArray_O/231
{ class_kind, STAMP_core__MDArray_O, sizeof(core::MDArray_O), 0, "core::MDArray_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CONSTANT-ARRAY-CTYPE :KEY NIL :ARRAY-SIZE 0 :ELEMENT-TYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long"))
// not-exposing {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::MDArray_O),_Length), "_Length" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_O),_FillPointerOrLengthOrDummy), "_FillPointerOrLengthOrDummy" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_O),_ArrayTotalSize), "_ArrayTotalSize" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Array_O>" :SPECIALIZER "class core::Array_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Array_O>), offsetof(SAFE_TYPE_MACRO(core::MDArray_O),_Data), "_Data" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_O),_DisplacedIndexOffset), "_DisplacedIndexOffset" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::MDArray_O::Flags" :NAME "Flags")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_O),_Flags._Flags), "_Flags._Flags" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::MDArray_O),_Dimensions._Data), "_Dimensions._Data" },
 {  variable_capacity, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_O),_Dimensions._Length), offsetof(SAFE_TYPE_MACRO(core::MDArray_O),_Dimensions._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")>
{    variable_field, ctype_unsigned_long, sizeof(unsigned long), 0, "only" },
// Stamp = core::template_Array<core::MDArray_int16_t_O,core::SimpleMDArray_int16_t_O,core::SimpleVector_int16_t_O,core::MDArray_O>/235
// Stamp = core::MDArray_int16_t_O/239
{ class_kind, STAMP_core__MDArray_int16_t_O, sizeof(core::MDArray_int16_t_O), 0, "core::MDArray_int16_t_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CONSTANT-ARRAY-CTYPE :KEY NIL :ARRAY-SIZE 0 :ELEMENT-TYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long"))
// not-exposing {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::MDArray_int16_t_O),_Length), "_Length" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_int16_t_O),_FillPointerOrLengthOrDummy), "_FillPointerOrLengthOrDummy" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_int16_t_O),_ArrayTotalSize), "_ArrayTotalSize" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Array_O>" :SPECIALIZER "class core::Array_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Array_O>), offsetof(SAFE_TYPE_MACRO(core::MDArray_int16_t_O),_Data), "_Data" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_int16_t_O),_DisplacedIndexOffset), "_DisplacedIndexOffset" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::MDArray_O::Flags" :NAME "Flags")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_int16_t_O),_Flags._Flags), "_Flags._Flags" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::MDArray_int16_t_O),_Dimensions._Data), "_Dimensions._Data" },
 {  variable_capacity, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_int16_t_O),_Dimensions._Length), offsetof(SAFE_TYPE_MACRO(core::MDArray_int16_t_O),_Dimensions._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")>
{    variable_field, ctype_unsigned_long, sizeof(unsigned long), 0, "only" },
// Stamp = core::template_Array<core::MDArray_int8_t_O,core::SimpleMDArray_int8_t_O,core::SimpleVector_int8_t_O,core::MDArray_O>/243
// Stamp = core::MDArray_int8_t_O/247
{ class_kind, STAMP_core__MDArray_int8_t_O, sizeof(core::MDArray_int8_t_O), 0, "core::MDArray_int8_t_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CONSTANT-ARRAY-CTYPE :KEY NIL :ARRAY-SIZE 0 :ELEMENT-TYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long"))
// not-exposing {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::MDArray_int8_t_O),_Length), "_Length" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_int8_t_O),_FillPointerOrLengthOrDummy), "_FillPointerOrLengthOrDummy" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_int8_t_O),_ArrayTotalSize), "_ArrayTotalSize" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Array_O>" :SPECIALIZER "class core::Array_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Array_O>), offsetof(SAFE_TYPE_MACRO(core::MDArray_int8_t_O),_Data), "_Data" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_int8_t_O),_DisplacedIndexOffset), "_DisplacedIndexOffset" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::MDArray_O::Flags" :NAME "Flags")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_int8_t_O),_Flags._Flags), "_Flags._Flags" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::MDArray_int8_t_O),_Dimensions._Data), "_Dimensions._Data" },
 {  variable_capacity, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_int8_t_O),_Dimensions._Length), offsetof(SAFE_TYPE_MACRO(core::MDArray_int8_t_O),_Dimensions._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")>
{    variable_field, ctype_unsigned_long, sizeof(unsigned long), 0, "only" },
// Stamp = core::template_Array<core::MDArray_int32_t_O,core::SimpleMDArray_int32_t_O,core::SimpleVector_int32_t_O,core::MDArray_O>/251
// Stamp = core::MDArray_int32_t_O/255
{ class_kind, STAMP_core__MDArray_int32_t_O, sizeof(core::MDArray_int32_t_O), 0, "core::MDArray_int32_t_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CONSTANT-ARRAY-CTYPE :KEY NIL :ARRAY-SIZE 0 :ELEMENT-TYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long"))
// not-exposing {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::MDArray_int32_t_O),_Length), "_Length" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_int32_t_O),_FillPointerOrLengthOrDummy), "_FillPointerOrLengthOrDummy" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_int32_t_O),_ArrayTotalSize), "_ArrayTotalSize" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Array_O>" :SPECIALIZER "class core::Array_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Array_O>), offsetof(SAFE_TYPE_MACRO(core::MDArray_int32_t_O),_Data), "_Data" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_int32_t_O),_DisplacedIndexOffset), "_DisplacedIndexOffset" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::MDArray_O::Flags" :NAME "Flags")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_int32_t_O),_Flags._Flags), "_Flags._Flags" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::MDArray_int32_t_O),_Dimensions._Data), "_Dimensions._Data" },
 {  variable_capacity, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_int32_t_O),_Dimensions._Length), offsetof(SAFE_TYPE_MACRO(core::MDArray_int32_t_O),_Dimensions._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")>
{    variable_field, ctype_unsigned_long, sizeof(unsigned long), 0, "only" },
// Stamp = core::template_Array<core::MDArray_byte4_t_O,core::SimpleMDArray_byte4_t_O,core::SimpleVector_byte4_t_O,core::MDArray_O>/259
// Stamp = core::MDArray_byte4_t_O/263
{ class_kind, STAMP_core__MDArray_byte4_t_O, sizeof(core::MDArray_byte4_t_O), 0, "core::MDArray_byte4_t_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CONSTANT-ARRAY-CTYPE :KEY NIL :ARRAY-SIZE 0 :ELEMENT-TYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long"))
// not-exposing {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::MDArray_byte4_t_O),_Length), "_Length" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_byte4_t_O),_FillPointerOrLengthOrDummy), "_FillPointerOrLengthOrDummy" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_byte4_t_O),_ArrayTotalSize), "_ArrayTotalSize" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Array_O>" :SPECIALIZER "class core::Array_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Array_O>), offsetof(SAFE_TYPE_MACRO(core::MDArray_byte4_t_O),_Data), "_Data" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_byte4_t_O),_DisplacedIndexOffset), "_DisplacedIndexOffset" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::MDArray_O::Flags" :NAME "Flags")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_byte4_t_O),_Flags._Flags), "_Flags._Flags" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::MDArray_byte4_t_O),_Dimensions._Data), "_Dimensions._Data" },
 {  variable_capacity, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_byte4_t_O),_Dimensions._Length), offsetof(SAFE_TYPE_MACRO(core::MDArray_byte4_t_O),_Dimensions._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")>
{    variable_field, ctype_unsigned_long, sizeof(unsigned long), 0, "only" },
// Stamp = core::template_Array<core::MDArray_float_O,core::SimpleMDArray_float_O,core::SimpleVector_float_O,core::MDArray_O>/267
// Stamp = core::MDArray_float_O/271
{ class_kind, STAMP_core__MDArray_float_O, sizeof(core::MDArray_float_O), 0, "core::MDArray_float_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CONSTANT-ARRAY-CTYPE :KEY NIL :ARRAY-SIZE 0 :ELEMENT-TYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long"))
// not-exposing {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::MDArray_float_O),_Length), "_Length" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_float_O),_FillPointerOrLengthOrDummy), "_FillPointerOrLengthOrDummy" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_float_O),_ArrayTotalSize), "_ArrayTotalSize" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Array_O>" :SPECIALIZER "class core::Array_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Array_O>), offsetof(SAFE_TYPE_MACRO(core::MDArray_float_O),_Data), "_Data" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_float_O),_DisplacedIndexOffset), "_DisplacedIndexOffset" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::MDArray_O::Flags" :NAME "Flags")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_float_O),_Flags._Flags), "_Flags._Flags" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::MDArray_float_O),_Dimensions._Data), "_Dimensions._Data" },
 {  variable_capacity, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_float_O),_Dimensions._Length), offsetof(SAFE_TYPE_MACRO(core::MDArray_float_O),_Dimensions._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")>
{    variable_field, ctype_unsigned_long, sizeof(unsigned long), 0, "only" },
// Stamp = core::template_Array<core::MDArray_size_t_O,core::SimpleMDArray_size_t_O,core::SimpleVector_size_t_O,core::MDArray_O>/275
// Stamp = core::MDArray_size_t_O/279
{ class_kind, STAMP_core__MDArray_size_t_O, sizeof(core::MDArray_size_t_O), 0, "core::MDArray_size_t_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CONSTANT-ARRAY-CTYPE :KEY NIL :ARRAY-SIZE 0 :ELEMENT-TYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long"))
// not-exposing {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::MDArray_size_t_O),_Length), "_Length" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_size_t_O),_FillPointerOrLengthOrDummy), "_FillPointerOrLengthOrDummy" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_size_t_O),_ArrayTotalSize), "_ArrayTotalSize" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Array_O>" :SPECIALIZER "class core::Array_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Array_O>), offsetof(SAFE_TYPE_MACRO(core::MDArray_size_t_O),_Data), "_Data" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_size_t_O),_DisplacedIndexOffset), "_DisplacedIndexOffset" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::MDArray_O::Flags" :NAME "Flags")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_size_t_O),_Flags._Flags), "_Flags._Flags" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::MDArray_size_t_O),_Dimensions._Data), "_Dimensions._Data" },
 {  variable_capacity, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_size_t_O),_Dimensions._Length), offsetof(SAFE_TYPE_MACRO(core::MDArray_size_t_O),_Dimensions._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")>
{    variable_field, ctype_unsigned_long, sizeof(unsigned long), 0, "only" },
// Stamp = core::template_Array<core::MDArray_byte8_t_O,core::SimpleMDArray_byte8_t_O,core::SimpleVector_byte8_t_O,core::MDArray_O>/283
// Stamp = core::MDArray_byte8_t_O/287
{ class_kind, STAMP_core__MDArray_byte8_t_O, sizeof(core::MDArray_byte8_t_O), 0, "core::MDArray_byte8_t_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CONSTANT-ARRAY-CTYPE :KEY NIL :ARRAY-SIZE 0 :ELEMENT-TYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long"))
// not-exposing {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::MDArray_byte8_t_O),_Length), "_Length" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_byte8_t_O),_FillPointerOrLengthOrDummy), "_FillPointerOrLengthOrDummy" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_byte8_t_O),_ArrayTotalSize), "_ArrayTotalSize" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Array_O>" :SPECIALIZER "class core::Array_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Array_O>), offsetof(SAFE_TYPE_MACRO(core::MDArray_byte8_t_O),_Data), "_Data" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_byte8_t_O),_DisplacedIndexOffset), "_DisplacedIndexOffset" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::MDArray_O::Flags" :NAME "Flags")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_byte8_t_O),_Flags._Flags), "_Flags._Flags" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::MDArray_byte8_t_O),_Dimensions._Data), "_Dimensions._Data" },
 {  variable_capacity, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_byte8_t_O),_Dimensions._Length), offsetof(SAFE_TYPE_MACRO(core::MDArray_byte8_t_O),_Dimensions._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")>
{    variable_field, ctype_unsigned_long, sizeof(unsigned long), 0, "only" },
// Stamp = core::template_Array<core::MDArray_int64_t_O,core::SimpleMDArray_int64_t_O,core::SimpleVector_int64_t_O,core::MDArray_O>/291
// Stamp = core::MDArray_int64_t_O/295
{ class_kind, STAMP_core__MDArray_int64_t_O, sizeof(core::MDArray_int64_t_O), 0, "core::MDArray_int64_t_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CONSTANT-ARRAY-CTYPE :KEY NIL :ARRAY-SIZE 0 :ELEMENT-TYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long"))
// not-exposing {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::MDArray_int64_t_O),_Length), "_Length" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_int64_t_O),_FillPointerOrLengthOrDummy), "_FillPointerOrLengthOrDummy" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_int64_t_O),_ArrayTotalSize), "_ArrayTotalSize" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Array_O>" :SPECIALIZER "class core::Array_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Array_O>), offsetof(SAFE_TYPE_MACRO(core::MDArray_int64_t_O),_Data), "_Data" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_int64_t_O),_DisplacedIndexOffset), "_DisplacedIndexOffset" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::MDArray_O::Flags" :NAME "Flags")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_int64_t_O),_Flags._Flags), "_Flags._Flags" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::MDArray_int64_t_O),_Dimensions._Data), "_Dimensions._Data" },
 {  variable_capacity, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_int64_t_O),_Dimensions._Length), offsetof(SAFE_TYPE_MACRO(core::MDArray_int64_t_O),_Dimensions._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")>
{    variable_field, ctype_unsigned_long, sizeof(unsigned long), 0, "only" },
// Stamp = core::template_Array<core::MDArray_byte32_t_O,core::SimpleMDArray_byte32_t_O,core::SimpleVector_byte32_t_O,core::MDArray_O>/299
// Stamp = core::MDArray_byte32_t_O/303
{ class_kind, STAMP_core__MDArray_byte32_t_O, sizeof(core::MDArray_byte32_t_O), 0, "core::MDArray_byte32_t_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CONSTANT-ARRAY-CTYPE :KEY NIL :ARRAY-SIZE 0 :ELEMENT-TYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long"))
// not-exposing {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::MDArray_byte32_t_O),_Length), "_Length" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_byte32_t_O),_FillPointerOrLengthOrDummy), "_FillPointerOrLengthOrDummy" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_byte32_t_O),_ArrayTotalSize), "_ArrayTotalSize" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Array_O>" :SPECIALIZER "class core::Array_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Array_O>), offsetof(SAFE_TYPE_MACRO(core::MDArray_byte32_t_O),_Data), "_Data" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_byte32_t_O),_DisplacedIndexOffset), "_DisplacedIndexOffset" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::MDArray_O::Flags" :NAME "Flags")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_byte32_t_O),_Flags._Flags), "_Flags._Flags" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::MDArray_byte32_t_O),_Dimensions._Data), "_Dimensions._Data" },
 {  variable_capacity, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_byte32_t_O),_Dimensions._Length), offsetof(SAFE_TYPE_MACRO(core::MDArray_byte32_t_O),_Dimensions._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")>
{    variable_field, ctype_unsigned_long, sizeof(unsigned long), 0, "only" },
// Stamp = core::template_Array<core::MDArray_byte2_t_O,core::SimpleMDArray_byte2_t_O,core::SimpleVector_byte2_t_O,core::MDArray_O>/307
// Stamp = core::MDArray_byte2_t_O/311
{ class_kind, STAMP_core__MDArray_byte2_t_O, sizeof(core::MDArray_byte2_t_O), 0, "core::MDArray_byte2_t_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CONSTANT-ARRAY-CTYPE :KEY NIL :ARRAY-SIZE 0 :ELEMENT-TYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long"))
// not-exposing {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::MDArray_byte2_t_O),_Length), "_Length" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_byte2_t_O),_FillPointerOrLengthOrDummy), "_FillPointerOrLengthOrDummy" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_byte2_t_O),_ArrayTotalSize), "_ArrayTotalSize" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Array_O>" :SPECIALIZER "class core::Array_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Array_O>), offsetof(SAFE_TYPE_MACRO(core::MDArray_byte2_t_O),_Data), "_Data" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_byte2_t_O),_DisplacedIndexOffset), "_DisplacedIndexOffset" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::MDArray_O::Flags" :NAME "Flags")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_byte2_t_O),_Flags._Flags), "_Flags._Flags" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::MDArray_byte2_t_O),_Dimensions._Data), "_Dimensions._Data" },
 {  variable_capacity, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_byte2_t_O),_Dimensions._Length), offsetof(SAFE_TYPE_MACRO(core::MDArray_byte2_t_O),_Dimensions._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")>
{    variable_field, ctype_unsigned_long, sizeof(unsigned long), 0, "only" },
// Stamp = core::template_Array<core::MDArray_int2_t_O,core::SimpleMDArray_int2_t_O,core::SimpleVector_int2_t_O,core::MDArray_O>/315
// Stamp = core::MDArray_int2_t_O/319
{ class_kind, STAMP_core__MDArray_int2_t_O, sizeof(core::MDArray_int2_t_O), 0, "core::MDArray_int2_t_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CONSTANT-ARRAY-CTYPE :KEY NIL :ARRAY-SIZE 0 :ELEMENT-TYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long"))
// not-exposing {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::MDArray_int2_t_O),_Length), "_Length" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_int2_t_O),_FillPointerOrLengthOrDummy), "_FillPointerOrLengthOrDummy" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_int2_t_O),_ArrayTotalSize), "_ArrayTotalSize" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Array_O>" :SPECIALIZER "class core::Array_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Array_O>), offsetof(SAFE_TYPE_MACRO(core::MDArray_int2_t_O),_Data), "_Data" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_int2_t_O),_DisplacedIndexOffset), "_DisplacedIndexOffset" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::MDArray_O::Flags" :NAME "Flags")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_int2_t_O),_Flags._Flags), "_Flags._Flags" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::MDArray_int2_t_O),_Dimensions._Data), "_Dimensions._Data" },
 {  variable_capacity, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_int2_t_O),_Dimensions._Length), offsetof(SAFE_TYPE_MACRO(core::MDArray_int2_t_O),_Dimensions._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")>
{    variable_field, ctype_unsigned_long, sizeof(unsigned long), 0, "only" },
// Stamp = core::template_Array<core::MDArray_fixnum_O,core::SimpleMDArray_fixnum_O,core::SimpleVector_fixnum_O,core::MDArray_O>/323
// Stamp = core::MDArray_fixnum_O/327
{ class_kind, STAMP_core__MDArray_fixnum_O, sizeof(core::MDArray_fixnum_O), 0, "core::MDArray_fixnum_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CONSTANT-ARRAY-CTYPE :KEY NIL :ARRAY-SIZE 0 :ELEMENT-TYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long"))
// not-exposing {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::MDArray_fixnum_O),_Length), "_Length" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_fixnum_O),_FillPointerOrLengthOrDummy), "_FillPointerOrLengthOrDummy" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_fixnum_O),_ArrayTotalSize), "_ArrayTotalSize" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Array_O>" :SPECIALIZER "class core::Array_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Array_O>), offsetof(SAFE_TYPE_MACRO(core::MDArray_fixnum_O),_Data), "_Data" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_fixnum_O),_DisplacedIndexOffset), "_DisplacedIndexOffset" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::MDArray_O::Flags" :NAME "Flags")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_fixnum_O),_Flags._Flags), "_Flags._Flags" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::MDArray_fixnum_O),_Dimensions._Data), "_Dimensions._Data" },
 {  variable_capacity, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_fixnum_O),_Dimensions._Length), offsetof(SAFE_TYPE_MACRO(core::MDArray_fixnum_O),_Dimensions._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")>
{    variable_field, ctype_unsigned_long, sizeof(unsigned long), 0, "only" },
// Stamp = core::template_Array<core::MDArrayBaseChar_O,core::SimpleMDArrayBaseChar_O,core::SimpleBaseString_O,core::MDArray_O>/331
// Stamp = core::MDArrayBaseChar_O/335
{ class_kind, STAMP_core__MDArrayBaseChar_O, sizeof(core::MDArrayBaseChar_O), 0, "core::MDArrayBaseChar_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CONSTANT-ARRAY-CTYPE :KEY NIL :ARRAY-SIZE 0 :ELEMENT-TYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long"))
// not-exposing {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::MDArrayBaseChar_O),_Length), "_Length" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArrayBaseChar_O),_FillPointerOrLengthOrDummy), "_FillPointerOrLengthOrDummy" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArrayBaseChar_O),_ArrayTotalSize), "_ArrayTotalSize" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Array_O>" :SPECIALIZER "class core::Array_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Array_O>), offsetof(SAFE_TYPE_MACRO(core::MDArrayBaseChar_O),_Data), "_Data" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArrayBaseChar_O),_DisplacedIndexOffset), "_DisplacedIndexOffset" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::MDArray_O::Flags" :NAME "Flags")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArrayBaseChar_O),_Flags._Flags), "_Flags._Flags" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::MDArrayBaseChar_O),_Dimensions._Data), "_Dimensions._Data" },
 {  variable_capacity, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArrayBaseChar_O),_Dimensions._Length), offsetof(SAFE_TYPE_MACRO(core::MDArrayBaseChar_O),_Dimensions._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")>
{    variable_field, ctype_unsigned_long, sizeof(unsigned long), 0, "only" },
// Stamp = core::template_Array<core::MDArray_byte64_t_O,core::SimpleMDArray_byte64_t_O,core::SimpleVector_byte64_t_O,core::MDArray_O>/339
// Stamp = core::MDArray_byte64_t_O/343
{ class_kind, STAMP_core__MDArray_byte64_t_O, sizeof(core::MDArray_byte64_t_O), 0, "core::MDArray_byte64_t_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CONSTANT-ARRAY-CTYPE :KEY NIL :ARRAY-SIZE 0 :ELEMENT-TYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long"))
// not-exposing {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::MDArray_byte64_t_O),_Length), "_Length" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_byte64_t_O),_FillPointerOrLengthOrDummy), "_FillPointerOrLengthOrDummy" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_byte64_t_O),_ArrayTotalSize), "_ArrayTotalSize" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Array_O>" :SPECIALIZER "class core::Array_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Array_O>), offsetof(SAFE_TYPE_MACRO(core::MDArray_byte64_t_O),_Data), "_Data" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_byte64_t_O),_DisplacedIndexOffset), "_DisplacedIndexOffset" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::MDArray_O::Flags" :NAME "Flags")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_byte64_t_O),_Flags._Flags), "_Flags._Flags" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::MDArray_byte64_t_O),_Dimensions._Data), "_Dimensions._Data" },
 {  variable_capacity, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_byte64_t_O),_Dimensions._Length), offsetof(SAFE_TYPE_MACRO(core::MDArray_byte64_t_O),_Dimensions._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")>
{    variable_field, ctype_unsigned_long, sizeof(unsigned long), 0, "only" },
// Stamp = core::template_Array<core::MDArrayCharacter_O,core::SimpleMDArrayCharacter_O,core::SimpleCharacterString_O,core::MDArray_O>/347
// Stamp = core::MDArrayCharacter_O/351
{ class_kind, STAMP_core__MDArrayCharacter_O, sizeof(core::MDArrayCharacter_O), 0, "core::MDArrayCharacter_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CONSTANT-ARRAY-CTYPE :KEY NIL :ARRAY-SIZE 0 :ELEMENT-TYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long"))
// not-exposing {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::MDArrayCharacter_O),_Length), "_Length" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArrayCharacter_O),_FillPointerOrLengthOrDummy), "_FillPointerOrLengthOrDummy" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArrayCharacter_O),_ArrayTotalSize), "_ArrayTotalSize" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Array_O>" :SPECIALIZER "class core::Array_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Array_O>), offsetof(SAFE_TYPE_MACRO(core::MDArrayCharacter_O),_Data), "_Data" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArrayCharacter_O),_DisplacedIndexOffset), "_DisplacedIndexOffset" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::MDArray_O::Flags" :NAME "Flags")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArrayCharacter_O),_Flags._Flags), "_Flags._Flags" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::MDArrayCharacter_O),_Dimensions._Data), "_Dimensions._Data" },
 {  variable_capacity, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArrayCharacter_O),_Dimensions._Length), offsetof(SAFE_TYPE_MACRO(core::MDArrayCharacter_O),_Dimensions._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")>
{    variable_field, ctype_unsigned_long, sizeof(unsigned long), 0, "only" },
// Stamp = core::template_Array<core::MDArrayT_O,core::SimpleMDArrayT_O,core::SimpleVector_O,core::MDArray_O>/355
// Stamp = core::MDArrayT_O/359
{ class_kind, STAMP_core__MDArrayT_O, sizeof(core::MDArrayT_O), 0, "core::MDArrayT_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CONSTANT-ARRAY-CTYPE :KEY NIL :ARRAY-SIZE 0 :ELEMENT-TYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long"))
// not-exposing {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::MDArrayT_O),_Length), "_Length" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArrayT_O),_FillPointerOrLengthOrDummy), "_FillPointerOrLengthOrDummy" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArrayT_O),_ArrayTotalSize), "_ArrayTotalSize" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Array_O>" :SPECIALIZER "class core::Array_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Array_O>), offsetof(SAFE_TYPE_MACRO(core::MDArrayT_O),_Data), "_Data" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArrayT_O),_DisplacedIndexOffset), "_DisplacedIndexOffset" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::MDArray_O::Flags" :NAME "Flags")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArrayT_O),_Flags._Flags), "_Flags._Flags" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::MDArrayT_O),_Dimensions._Data), "_Dimensions._Data" },
 {  variable_capacity, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArrayT_O),_Dimensions._Length), offsetof(SAFE_TYPE_MACRO(core::MDArrayT_O),_Dimensions._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")>
{    variable_field, ctype_unsigned_long, sizeof(unsigned long), 0, "only" },
// Stamp = core::template_Array<core::MDArrayBit_O,core::SimpleMDArrayBit_O,core::SimpleBitVector_O,core::MDArray_O>/363
// Stamp = core::MDArrayBit_O/367
{ class_kind, STAMP_core__MDArrayBit_O, sizeof(core::MDArrayBit_O), 0, "core::MDArrayBit_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CONSTANT-ARRAY-CTYPE :KEY NIL :ARRAY-SIZE 0 :ELEMENT-TYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long"))
// not-exposing {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::MDArrayBit_O),_Length), "_Length" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArrayBit_O),_FillPointerOrLengthOrDummy), "_FillPointerOrLengthOrDummy" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArrayBit_O),_ArrayTotalSize), "_ArrayTotalSize" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Array_O>" :SPECIALIZER "class core::Array_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Array_O>), offsetof(SAFE_TYPE_MACRO(core::MDArrayBit_O),_Data), "_Data" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArrayBit_O),_DisplacedIndexOffset), "_DisplacedIndexOffset" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::MDArray_O::Flags" :NAME "Flags")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArrayBit_O),_Flags._Flags), "_Flags._Flags" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::MDArrayBit_O),_Dimensions._Data), "_Dimensions._Data" },
 {  variable_capacity, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArrayBit_O),_Dimensions._Length), offsetof(SAFE_TYPE_MACRO(core::MDArrayBit_O),_Dimensions._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")>
{    variable_field, ctype_unsigned_long, sizeof(unsigned long), 0, "only" },
// Stamp = core::template_Array<core::MDArray_byte16_t_O,core::SimpleMDArray_byte16_t_O,core::SimpleVector_byte16_t_O,core::MDArray_O>/371
// Stamp = core::MDArray_byte16_t_O/375
{ class_kind, STAMP_core__MDArray_byte16_t_O, sizeof(core::MDArray_byte16_t_O), 0, "core::MDArray_byte16_t_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CONSTANT-ARRAY-CTYPE :KEY NIL :ARRAY-SIZE 0 :ELEMENT-TYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long"))
// not-exposing {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::MDArray_byte16_t_O),_Length), "_Length" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_byte16_t_O),_FillPointerOrLengthOrDummy), "_FillPointerOrLengthOrDummy" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_byte16_t_O),_ArrayTotalSize), "_ArrayTotalSize" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Array_O>" :SPECIALIZER "class core::Array_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Array_O>), offsetof(SAFE_TYPE_MACRO(core::MDArray_byte16_t_O),_Data), "_Data" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_byte16_t_O),_DisplacedIndexOffset), "_DisplacedIndexOffset" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::MDArray_O::Flags" :NAME "Flags")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_byte16_t_O),_Flags._Flags), "_Flags._Flags" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::MDArray_byte16_t_O),_Dimensions._Data), "_Dimensions._Data" },
 {  variable_capacity, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_byte16_t_O),_Dimensions._Length), offsetof(SAFE_TYPE_MACRO(core::MDArray_byte16_t_O),_Dimensions._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")>
{    variable_field, ctype_unsigned_long, sizeof(unsigned long), 0, "only" },
// Stamp = core::SimpleMDArray_O/379
{ class_kind, STAMP_core__SimpleMDArray_O, sizeof(core::SimpleMDArray_O), 0, "core::SimpleMDArray_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CONSTANT-ARRAY-CTYPE :KEY NIL :ARRAY-SIZE 0 :ELEMENT-TYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long"))
// not-exposing {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_O),_Length), "_Length" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_O),_FillPointerOrLengthOrDummy), "_FillPointerOrLengthOrDummy" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_O),_ArrayTotalSize), "_ArrayTotalSize" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Array_O>" :SPECIALIZER "class core::Array_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Array_O>), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_O),_Data), "_Data" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_O),_DisplacedIndexOffset), "_DisplacedIndexOffset" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::MDArray_O::Flags" :NAME "Flags")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_O),_Flags._Flags), "_Flags._Flags" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_O),_Dimensions._Data), "_Dimensions._Data" },
 {  variable_capacity, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_O),_Dimensions._Length), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_O),_Dimensions._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")>
{    variable_field, ctype_unsigned_long, sizeof(unsigned long), 0, "only" },
// Stamp = core::template_SimpleArray<core::SimpleMDArray_int8_t_O,core::SimpleVector_int8_t_O,core::SimpleMDArray_O>/383
// Stamp = core::SimpleMDArray_int8_t_O/387
{ class_kind, STAMP_core__SimpleMDArray_int8_t_O, sizeof(core::SimpleMDArray_int8_t_O), 0, "core::SimpleMDArray_int8_t_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CONSTANT-ARRAY-CTYPE :KEY NIL :ARRAY-SIZE 0 :ELEMENT-TYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long"))
// not-exposing {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_int8_t_O),_Length), "_Length" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_int8_t_O),_FillPointerOrLengthOrDummy), "_FillPointerOrLengthOrDummy" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_int8_t_O),_ArrayTotalSize), "_ArrayTotalSize" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Array_O>" :SPECIALIZER "class core::Array_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Array_O>), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_int8_t_O),_Data), "_Data" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_int8_t_O),_DisplacedIndexOffset), "_DisplacedIndexOffset" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::MDArray_O::Flags" :NAME "Flags")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_int8_t_O),_Flags._Flags), "_Flags._Flags" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_int8_t_O),_Dimensions._Data), "_Dimensions._Data" },
 {  variable_capacity, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_int8_t_O),_Dimensions._Length), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_int8_t_O),_Dimensions._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")>
{    variable_field, ctype_unsigned_long, sizeof(unsigned long), 0, "only" },
// Stamp = core::template_SimpleArray<core::SimpleMDArray_double_O,core::SimpleVector_double_O,core::SimpleMDArray_O>/391
// Stamp = core::SimpleMDArray_double_O/395
{ class_kind, STAMP_core__SimpleMDArray_double_O, sizeof(core::SimpleMDArray_double_O), 0, "core::SimpleMDArray_double_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CONSTANT-ARRAY-CTYPE :KEY NIL :ARRAY-SIZE 0 :ELEMENT-TYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long"))
// not-exposing {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_double_O),_Length), "_Length" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_double_O),_FillPointerOrLengthOrDummy), "_FillPointerOrLengthOrDummy" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_double_O),_ArrayTotalSize), "_ArrayTotalSize" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Array_O>" :SPECIALIZER "class core::Array_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Array_O>), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_double_O),_Data), "_Data" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_double_O),_DisplacedIndexOffset), "_DisplacedIndexOffset" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::MDArray_O::Flags" :NAME "Flags")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_double_O),_Flags._Flags), "_Flags._Flags" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_double_O),_Dimensions._Data), "_Dimensions._Data" },
 {  variable_capacity, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_double_O),_Dimensions._Length), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_double_O),_Dimensions._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")>
{    variable_field, ctype_unsigned_long, sizeof(unsigned long), 0, "only" },
// Stamp = core::template_SimpleArray<core::SimpleMDArray_byte32_t_O,core::SimpleVector_byte32_t_O,core::SimpleMDArray_O>/399
// Stamp = core::SimpleMDArray_byte32_t_O/403
{ class_kind, STAMP_core__SimpleMDArray_byte32_t_O, sizeof(core::SimpleMDArray_byte32_t_O), 0, "core::SimpleMDArray_byte32_t_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CONSTANT-ARRAY-CTYPE :KEY NIL :ARRAY-SIZE 0 :ELEMENT-TYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long"))
// not-exposing {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_byte32_t_O),_Length), "_Length" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_byte32_t_O),_FillPointerOrLengthOrDummy), "_FillPointerOrLengthOrDummy" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_byte32_t_O),_ArrayTotalSize), "_ArrayTotalSize" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Array_O>" :SPECIALIZER "class core::Array_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Array_O>), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_byte32_t_O),_Data), "_Data" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_byte32_t_O),_DisplacedIndexOffset), "_DisplacedIndexOffset" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::MDArray_O::Flags" :NAME "Flags")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_byte32_t_O),_Flags._Flags), "_Flags._Flags" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_byte32_t_O),_Dimensions._Data), "_Dimensions._Data" },
 {  variable_capacity, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_byte32_t_O),_Dimensions._Length), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_byte32_t_O),_Dimensions._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")>
{    variable_field, ctype_unsigned_long, sizeof(unsigned long), 0, "only" },
// Stamp = core::template_SimpleArray<core::SimpleMDArrayT_O,core::SimpleVector_O,core::SimpleMDArray_O>/407
// Stamp = core::SimpleMDArrayT_O/411
{ class_kind, STAMP_core__SimpleMDArrayT_O, sizeof(core::SimpleMDArrayT_O), 0, "core::SimpleMDArrayT_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CONSTANT-ARRAY-CTYPE :KEY NIL :ARRAY-SIZE 0 :ELEMENT-TYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long"))
// not-exposing {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArrayT_O),_Length), "_Length" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArrayT_O),_FillPointerOrLengthOrDummy), "_FillPointerOrLengthOrDummy" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArrayT_O),_ArrayTotalSize), "_ArrayTotalSize" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Array_O>" :SPECIALIZER "class core::Array_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Array_O>), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArrayT_O),_Data), "_Data" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArrayT_O),_DisplacedIndexOffset), "_DisplacedIndexOffset" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::MDArray_O::Flags" :NAME "Flags")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArrayT_O),_Flags._Flags), "_Flags._Flags" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::SimpleMDArrayT_O),_Dimensions._Data), "_Dimensions._Data" },
 {  variable_capacity, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArrayT_O),_Dimensions._Length), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArrayT_O),_Dimensions._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")>
{    variable_field, ctype_unsigned_long, sizeof(unsigned long), 0, "only" },
// Stamp = core::template_SimpleArray<core::SimpleMDArray_int2_t_O,core::SimpleVector_int2_t_O,core::SimpleMDArray_O>/415
// Stamp = core::SimpleMDArray_int2_t_O/419
{ class_kind, STAMP_core__SimpleMDArray_int2_t_O, sizeof(core::SimpleMDArray_int2_t_O), 0, "core::SimpleMDArray_int2_t_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CONSTANT-ARRAY-CTYPE :KEY NIL :ARRAY-SIZE 0 :ELEMENT-TYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long"))
// not-exposing {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_int2_t_O),_Length), "_Length" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_int2_t_O),_FillPointerOrLengthOrDummy), "_FillPointerOrLengthOrDummy" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_int2_t_O),_ArrayTotalSize), "_ArrayTotalSize" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Array_O>" :SPECIALIZER "class core::Array_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Array_O>), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_int2_t_O),_Data), "_Data" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_int2_t_O),_DisplacedIndexOffset), "_DisplacedIndexOffset" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::MDArray_O::Flags" :NAME "Flags")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_int2_t_O),_Flags._Flags), "_Flags._Flags" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_int2_t_O),_Dimensions._Data), "_Dimensions._Data" },
 {  variable_capacity, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_int2_t_O),_Dimensions._Length), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_int2_t_O),_Dimensions._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")>
{    variable_field, ctype_unsigned_long, sizeof(unsigned long), 0, "only" },
// Stamp = core::template_SimpleArray<core::SimpleMDArray_byte4_t_O,core::SimpleVector_byte4_t_O,core::SimpleMDArray_O>/423
// Stamp = core::SimpleMDArray_byte4_t_O/427
{ class_kind, STAMP_core__SimpleMDArray_byte4_t_O, sizeof(core::SimpleMDArray_byte4_t_O), 0, "core::SimpleMDArray_byte4_t_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CONSTANT-ARRAY-CTYPE :KEY NIL :ARRAY-SIZE 0 :ELEMENT-TYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long"))
// not-exposing {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_byte4_t_O),_Length), "_Length" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_byte4_t_O),_FillPointerOrLengthOrDummy), "_FillPointerOrLengthOrDummy" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_byte4_t_O),_ArrayTotalSize), "_ArrayTotalSize" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Array_O>" :SPECIALIZER "class core::Array_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Array_O>), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_byte4_t_O),_Data), "_Data" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_byte4_t_O),_DisplacedIndexOffset), "_DisplacedIndexOffset" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::MDArray_O::Flags" :NAME "Flags")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_byte4_t_O),_Flags._Flags), "_Flags._Flags" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_byte4_t_O),_Dimensions._Data), "_Dimensions._Data" },
 {  variable_capacity, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_byte4_t_O),_Dimensions._Length), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_byte4_t_O),_Dimensions._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")>
{    variable_field, ctype_unsigned_long, sizeof(unsigned long), 0, "only" },
// Stamp = core::template_SimpleArray<core::SimpleMDArray_int32_t_O,core::SimpleVector_int32_t_O,core::SimpleMDArray_O>/431
// Stamp = core::SimpleMDArray_int32_t_O/435
{ class_kind, STAMP_core__SimpleMDArray_int32_t_O, sizeof(core::SimpleMDArray_int32_t_O), 0, "core::SimpleMDArray_int32_t_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CONSTANT-ARRAY-CTYPE :KEY NIL :ARRAY-SIZE 0 :ELEMENT-TYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long"))
// not-exposing {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_int32_t_O),_Length), "_Length" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_int32_t_O),_FillPointerOrLengthOrDummy), "_FillPointerOrLengthOrDummy" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_int32_t_O),_ArrayTotalSize), "_ArrayTotalSize" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Array_O>" :SPECIALIZER "class core::Array_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Array_O>), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_int32_t_O),_Data), "_Data" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_int32_t_O),_DisplacedIndexOffset), "_DisplacedIndexOffset" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::MDArray_O::Flags" :NAME "Flags")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_int32_t_O),_Flags._Flags), "_Flags._Flags" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_int32_t_O),_Dimensions._Data), "_Dimensions._Data" },
 {  variable_capacity, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_int32_t_O),_Dimensions._Length), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_int32_t_O),_Dimensions._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")>
{    variable_field, ctype_unsigned_long, sizeof(unsigned long), 0, "only" },
// Stamp = core::template_SimpleArray<core::SimpleMDArray_float_O,core::SimpleVector_float_O,core::SimpleMDArray_O>/439
// Stamp = core::SimpleMDArray_float_O/443
{ class_kind, STAMP_core__SimpleMDArray_float_O, sizeof(core::SimpleMDArray_float_O), 0, "core::SimpleMDArray_float_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CONSTANT-ARRAY-CTYPE :KEY NIL :ARRAY-SIZE 0 :ELEMENT-TYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long"))
// not-exposing {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_float_O),_Length), "_Length" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_float_O),_FillPointerOrLengthOrDummy), "_FillPointerOrLengthOrDummy" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_float_O),_ArrayTotalSize), "_ArrayTotalSize" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Array_O>" :SPECIALIZER "class core::Array_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Array_O>), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_float_O),_Data), "_Data" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_float_O),_DisplacedIndexOffset), "_DisplacedIndexOffset" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::MDArray_O::Flags" :NAME "Flags")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_float_O),_Flags._Flags), "_Flags._Flags" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_float_O),_Dimensions._Data), "_Dimensions._Data" },
 {  variable_capacity, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_float_O),_Dimensions._Length), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_float_O),_Dimensions._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")>
{    variable_field, ctype_unsigned_long, sizeof(unsigned long), 0, "only" },
// Stamp = core::template_SimpleArray<core::SimpleMDArray_int16_t_O,core::SimpleVector_int16_t_O,core::SimpleMDArray_O>/447
// Stamp = core::SimpleMDArray_int16_t_O/451
{ class_kind, STAMP_core__SimpleMDArray_int16_t_O, sizeof(core::SimpleMDArray_int16_t_O), 0, "core::SimpleMDArray_int16_t_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CONSTANT-ARRAY-CTYPE :KEY NIL :ARRAY-SIZE 0 :ELEMENT-TYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long"))
// not-exposing {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_int16_t_O),_Length), "_Length" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_int16_t_O),_FillPointerOrLengthOrDummy), "_FillPointerOrLengthOrDummy" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_int16_t_O),_ArrayTotalSize), "_ArrayTotalSize" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Array_O>" :SPECIALIZER "class core::Array_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Array_O>), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_int16_t_O),_Data), "_Data" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_int16_t_O),_DisplacedIndexOffset), "_DisplacedIndexOffset" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::MDArray_O::Flags" :NAME "Flags")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_int16_t_O),_Flags._Flags), "_Flags._Flags" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_int16_t_O),_Dimensions._Data), "_Dimensions._Data" },
 {  variable_capacity, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_int16_t_O),_Dimensions._Length), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_int16_t_O),_Dimensions._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")>
{    variable_field, ctype_unsigned_long, sizeof(unsigned long), 0, "only" },
// Stamp = core::template_SimpleArray<core::SimpleMDArray_size_t_O,core::SimpleVector_size_t_O,core::SimpleMDArray_O>/455
// Stamp = core::SimpleMDArray_size_t_O/459
{ class_kind, STAMP_core__SimpleMDArray_size_t_O, sizeof(core::SimpleMDArray_size_t_O), 0, "core::SimpleMDArray_size_t_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CONSTANT-ARRAY-CTYPE :KEY NIL :ARRAY-SIZE 0 :ELEMENT-TYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long"))
// not-exposing {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_size_t_O),_Length), "_Length" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_size_t_O),_FillPointerOrLengthOrDummy), "_FillPointerOrLengthOrDummy" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_size_t_O),_ArrayTotalSize), "_ArrayTotalSize" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Array_O>" :SPECIALIZER "class core::Array_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Array_O>), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_size_t_O),_Data), "_Data" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_size_t_O),_DisplacedIndexOffset), "_DisplacedIndexOffset" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::MDArray_O::Flags" :NAME "Flags")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_size_t_O),_Flags._Flags), "_Flags._Flags" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_size_t_O),_Dimensions._Data), "_Dimensions._Data" },
 {  variable_capacity, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_size_t_O),_Dimensions._Length), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_size_t_O),_Dimensions._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")>
{    variable_field, ctype_unsigned_long, sizeof(unsigned long), 0, "only" },
// Stamp = core::template_SimpleArray<core::SimpleMDArray_int4_t_O,core::SimpleVector_int4_t_O,core::SimpleMDArray_O>/463
// Stamp = core::SimpleMDArray_int4_t_O/467
{ class_kind, STAMP_core__SimpleMDArray_int4_t_O, sizeof(core::SimpleMDArray_int4_t_O), 0, "core::SimpleMDArray_int4_t_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CONSTANT-ARRAY-CTYPE :KEY NIL :ARRAY-SIZE 0 :ELEMENT-TYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long"))
// not-exposing {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_int4_t_O),_Length), "_Length" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_int4_t_O),_FillPointerOrLengthOrDummy), "_FillPointerOrLengthOrDummy" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_int4_t_O),_ArrayTotalSize), "_ArrayTotalSize" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Array_O>" :SPECIALIZER "class core::Array_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Array_O>), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_int4_t_O),_Data), "_Data" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_int4_t_O),_DisplacedIndexOffset), "_DisplacedIndexOffset" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::MDArray_O::Flags" :NAME "Flags")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_int4_t_O),_Flags._Flags), "_Flags._Flags" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_int4_t_O),_Dimensions._Data), "_Dimensions._Data" },
 {  variable_capacity, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_int4_t_O),_Dimensions._Length), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_int4_t_O),_Dimensions._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")>
{    variable_field, ctype_unsigned_long, sizeof(unsigned long), 0, "only" },
// Stamp = core::template_SimpleArray<core::SimpleMDArrayCharacter_O,core::SimpleCharacterString_O,core::SimpleMDArray_O>/471
// Stamp = core::SimpleMDArrayCharacter_O/475
{ class_kind, STAMP_core__SimpleMDArrayCharacter_O, sizeof(core::SimpleMDArrayCharacter_O), 0, "core::SimpleMDArrayCharacter_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CONSTANT-ARRAY-CTYPE :KEY NIL :ARRAY-SIZE 0 :ELEMENT-TYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long"))
// not-exposing {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArrayCharacter_O),_Length), "_Length" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArrayCharacter_O),_FillPointerOrLengthOrDummy), "_FillPointerOrLengthOrDummy" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArrayCharacter_O),_ArrayTotalSize), "_ArrayTotalSize" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Array_O>" :SPECIALIZER "class core::Array_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Array_O>), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArrayCharacter_O),_Data), "_Data" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArrayCharacter_O),_DisplacedIndexOffset), "_DisplacedIndexOffset" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::MDArray_O::Flags" :NAME "Flags")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArrayCharacter_O),_Flags._Flags), "_Flags._Flags" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::SimpleMDArrayCharacter_O),_Dimensions._Data), "_Dimensions._Data" },
 {  variable_capacity, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArrayCharacter_O),_Dimensions._Length), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArrayCharacter_O),_Dimensions._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")>
{    variable_field, ctype_unsigned_long, sizeof(unsigned long), 0, "only" },
// Stamp = core::template_SimpleArray<core::SimpleMDArray_byte2_t_O,core::SimpleVector_byte2_t_O,core::SimpleMDArray_O>/479
// Stamp = core::SimpleMDArray_byte2_t_O/483
{ class_kind, STAMP_core__SimpleMDArray_byte2_t_O, sizeof(core::SimpleMDArray_byte2_t_O), 0, "core::SimpleMDArray_byte2_t_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CONSTANT-ARRAY-CTYPE :KEY NIL :ARRAY-SIZE 0 :ELEMENT-TYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long"))
// not-exposing {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_byte2_t_O),_Length), "_Length" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_byte2_t_O),_FillPointerOrLengthOrDummy), "_FillPointerOrLengthOrDummy" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_byte2_t_O),_ArrayTotalSize), "_ArrayTotalSize" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Array_O>" :SPECIALIZER "class core::Array_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Array_O>), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_byte2_t_O),_Data), "_Data" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_byte2_t_O),_DisplacedIndexOffset), "_DisplacedIndexOffset" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::MDArray_O::Flags" :NAME "Flags")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_byte2_t_O),_Flags._Flags), "_Flags._Flags" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_byte2_t_O),_Dimensions._Data), "_Dimensions._Data" },
 {  variable_capacity, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_byte2_t_O),_Dimensions._Length), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_byte2_t_O),_Dimensions._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")>
{    variable_field, ctype_unsigned_long, sizeof(unsigned long), 0, "only" },
// Stamp = core::template_SimpleArray<core::SimpleMDArray_fixnum_O,core::SimpleVector_fixnum_O,core::SimpleMDArray_O>/487
// Stamp = core::SimpleMDArray_fixnum_O/491
{ class_kind, STAMP_core__SimpleMDArray_fixnum_O, sizeof(core::SimpleMDArray_fixnum_O), 0, "core::SimpleMDArray_fixnum_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CONSTANT-ARRAY-CTYPE :KEY NIL :ARRAY-SIZE 0 :ELEMENT-TYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long"))
// not-exposing {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_fixnum_O),_Length), "_Length" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_fixnum_O),_FillPointerOrLengthOrDummy), "_FillPointerOrLengthOrDummy" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_fixnum_O),_ArrayTotalSize), "_ArrayTotalSize" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Array_O>" :SPECIALIZER "class core::Array_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Array_O>), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_fixnum_O),_Data), "_Data" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_fixnum_O),_DisplacedIndexOffset), "_DisplacedIndexOffset" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::MDArray_O::Flags" :NAME "Flags")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_fixnum_O),_Flags._Flags), "_Flags._Flags" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_fixnum_O),_Dimensions._Data), "_Dimensions._Data" },
 {  variable_capacity, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_fixnum_O),_Dimensions._Length), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_fixnum_O),_Dimensions._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")>
{    variable_field, ctype_unsigned_long, sizeof(unsigned long), 0, "only" },
// Stamp = core::template_SimpleArray<core::SimpleMDArray_byte16_t_O,core::SimpleVector_byte16_t_O,core::SimpleMDArray_O>/495
// Stamp = core::SimpleMDArray_byte16_t_O/499
{ class_kind, STAMP_core__SimpleMDArray_byte16_t_O, sizeof(core::SimpleMDArray_byte16_t_O), 0, "core::SimpleMDArray_byte16_t_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CONSTANT-ARRAY-CTYPE :KEY NIL :ARRAY-SIZE 0 :ELEMENT-TYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long"))
// not-exposing {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_byte16_t_O),_Length), "_Length" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_byte16_t_O),_FillPointerOrLengthOrDummy), "_FillPointerOrLengthOrDummy" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_byte16_t_O),_ArrayTotalSize), "_ArrayTotalSize" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Array_O>" :SPECIALIZER "class core::Array_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Array_O>), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_byte16_t_O),_Data), "_Data" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_byte16_t_O),_DisplacedIndexOffset), "_DisplacedIndexOffset" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::MDArray_O::Flags" :NAME "Flags")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_byte16_t_O),_Flags._Flags), "_Flags._Flags" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_byte16_t_O),_Dimensions._Data), "_Dimensions._Data" },
 {  variable_capacity, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_byte16_t_O),_Dimensions._Length), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_byte16_t_O),_Dimensions._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")>
{    variable_field, ctype_unsigned_long, sizeof(unsigned long), 0, "only" },
// Stamp = core::template_SimpleArray<core::SimpleMDArrayBaseChar_O,core::SimpleBaseString_O,core::SimpleMDArray_O>/503
// Stamp = core::SimpleMDArrayBaseChar_O/507
{ class_kind, STAMP_core__SimpleMDArrayBaseChar_O, sizeof(core::SimpleMDArrayBaseChar_O), 0, "core::SimpleMDArrayBaseChar_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CONSTANT-ARRAY-CTYPE :KEY NIL :ARRAY-SIZE 0 :ELEMENT-TYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long"))
// not-exposing {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArrayBaseChar_O),_Length), "_Length" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArrayBaseChar_O),_FillPointerOrLengthOrDummy), "_FillPointerOrLengthOrDummy" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArrayBaseChar_O),_ArrayTotalSize), "_ArrayTotalSize" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Array_O>" :SPECIALIZER "class core::Array_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Array_O>), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArrayBaseChar_O),_Data), "_Data" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArrayBaseChar_O),_DisplacedIndexOffset), "_DisplacedIndexOffset" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::MDArray_O::Flags" :NAME "Flags")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArrayBaseChar_O),_Flags._Flags), "_Flags._Flags" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::SimpleMDArrayBaseChar_O),_Dimensions._Data), "_Dimensions._Data" },
 {  variable_capacity, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArrayBaseChar_O),_Dimensions._Length), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArrayBaseChar_O),_Dimensions._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")>
{    variable_field, ctype_unsigned_long, sizeof(unsigned long), 0, "only" },
// Stamp = core::template_SimpleArray<core::SimpleMDArray_byte64_t_O,core::SimpleVector_byte64_t_O,core::SimpleMDArray_O>/511
// Stamp = core::SimpleMDArray_byte64_t_O/515
{ class_kind, STAMP_core__SimpleMDArray_byte64_t_O, sizeof(core::SimpleMDArray_byte64_t_O), 0, "core::SimpleMDArray_byte64_t_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CONSTANT-ARRAY-CTYPE :KEY NIL :ARRAY-SIZE 0 :ELEMENT-TYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long"))
// not-exposing {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_byte64_t_O),_Length), "_Length" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_byte64_t_O),_FillPointerOrLengthOrDummy), "_FillPointerOrLengthOrDummy" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_byte64_t_O),_ArrayTotalSize), "_ArrayTotalSize" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Array_O>" :SPECIALIZER "class core::Array_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Array_O>), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_byte64_t_O),_Data), "_Data" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_byte64_t_O),_DisplacedIndexOffset), "_DisplacedIndexOffset" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::MDArray_O::Flags" :NAME "Flags")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_byte64_t_O),_Flags._Flags), "_Flags._Flags" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_byte64_t_O),_Dimensions._Data), "_Dimensions._Data" },
 {  variable_capacity, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_byte64_t_O),_Dimensions._Length), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_byte64_t_O),_Dimensions._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")>
{    variable_field, ctype_unsigned_long, sizeof(unsigned long), 0, "only" },
// Stamp = core::template_SimpleArray<core::SimpleMDArrayBit_O,core::SimpleBitVector_O,core::SimpleMDArray_O>/519
// Stamp = core::SimpleMDArrayBit_O/523
{ class_kind, STAMP_core__SimpleMDArrayBit_O, sizeof(core::SimpleMDArrayBit_O), 0, "core::SimpleMDArrayBit_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CONSTANT-ARRAY-CTYPE :KEY NIL :ARRAY-SIZE 0 :ELEMENT-TYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long"))
// not-exposing {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArrayBit_O),_Length), "_Length" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArrayBit_O),_FillPointerOrLengthOrDummy), "_FillPointerOrLengthOrDummy" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArrayBit_O),_ArrayTotalSize), "_ArrayTotalSize" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Array_O>" :SPECIALIZER "class core::Array_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Array_O>), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArrayBit_O),_Data), "_Data" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArrayBit_O),_DisplacedIndexOffset), "_DisplacedIndexOffset" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::MDArray_O::Flags" :NAME "Flags")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArrayBit_O),_Flags._Flags), "_Flags._Flags" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::SimpleMDArrayBit_O),_Dimensions._Data), "_Dimensions._Data" },
 {  variable_capacity, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArrayBit_O),_Dimensions._Length), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArrayBit_O),_Dimensions._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")>
{    variable_field, ctype_unsigned_long, sizeof(unsigned long), 0, "only" },
// Stamp = core::template_SimpleArray<core::SimpleMDArray_byte8_t_O,core::SimpleVector_byte8_t_O,core::SimpleMDArray_O>/527
// Stamp = core::SimpleMDArray_byte8_t_O/531
{ class_kind, STAMP_core__SimpleMDArray_byte8_t_O, sizeof(core::SimpleMDArray_byte8_t_O), 0, "core::SimpleMDArray_byte8_t_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CONSTANT-ARRAY-CTYPE :KEY NIL :ARRAY-SIZE 0 :ELEMENT-TYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long"))
// not-exposing {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_byte8_t_O),_Length), "_Length" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_byte8_t_O),_FillPointerOrLengthOrDummy), "_FillPointerOrLengthOrDummy" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_byte8_t_O),_ArrayTotalSize), "_ArrayTotalSize" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Array_O>" :SPECIALIZER "class core::Array_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Array_O>), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_byte8_t_O),_Data), "_Data" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_byte8_t_O),_DisplacedIndexOffset), "_DisplacedIndexOffset" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::MDArray_O::Flags" :NAME "Flags")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_byte8_t_O),_Flags._Flags), "_Flags._Flags" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_byte8_t_O),_Dimensions._Data), "_Dimensions._Data" },
 {  variable_capacity, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_byte8_t_O),_Dimensions._Length), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_byte8_t_O),_Dimensions._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")>
{    variable_field, ctype_unsigned_long, sizeof(unsigned long), 0, "only" },
// Stamp = core::template_SimpleArray<core::SimpleMDArray_int64_t_O,core::SimpleVector_int64_t_O,core::SimpleMDArray_O>/535
// Stamp = core::SimpleMDArray_int64_t_O/539
{ class_kind, STAMP_core__SimpleMDArray_int64_t_O, sizeof(core::SimpleMDArray_int64_t_O), 0, "core::SimpleMDArray_int64_t_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CONSTANT-ARRAY-CTYPE :KEY NIL :ARRAY-SIZE 0 :ELEMENT-TYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long"))
// not-exposing {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_int64_t_O),_Length), "_Length" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_int64_t_O),_FillPointerOrLengthOrDummy), "_FillPointerOrLengthOrDummy" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_int64_t_O),_ArrayTotalSize), "_ArrayTotalSize" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Array_O>" :SPECIALIZER "class core::Array_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Array_O>), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_int64_t_O),_Data), "_Data" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_int64_t_O),_DisplacedIndexOffset), "_DisplacedIndexOffset" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::MDArray_O::Flags" :NAME "Flags")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_int64_t_O),_Flags._Flags), "_Flags._Flags" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_int64_t_O),_Dimensions._Data), "_Dimensions._Data" },
 {  variable_capacity, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_int64_t_O),_Dimensions._Length), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_int64_t_O),_Dimensions._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")>
{    variable_field, ctype_unsigned_long, sizeof(unsigned long), 0, "only" },
// Stamp = core::template_Array<core::MDArray_int4_t_O,core::SimpleMDArray_int4_t_O,core::SimpleVector_int4_t_O,core::MDArray_O>/543
// Stamp = core::MDArray_int4_t_O/547
{ class_kind, STAMP_core__MDArray_int4_t_O, sizeof(core::MDArray_int4_t_O), 0, "core::MDArray_int4_t_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CONSTANT-ARRAY-CTYPE :KEY NIL :ARRAY-SIZE 0 :ELEMENT-TYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long"))
// not-exposing {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::MDArray_int4_t_O),_Length), "_Length" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_int4_t_O),_FillPointerOrLengthOrDummy), "_FillPointerOrLengthOrDummy" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_int4_t_O),_ArrayTotalSize), "_ArrayTotalSize" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Array_O>" :SPECIALIZER "class core::Array_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Array_O>), offsetof(SAFE_TYPE_MACRO(core::MDArray_int4_t_O),_Data), "_Data" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_int4_t_O),_DisplacedIndexOffset), "_DisplacedIndexOffset" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::MDArray_O::Flags" :NAME "Flags")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_int4_t_O),_Flags._Flags), "_Flags._Flags" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::MDArray_int4_t_O),_Dimensions._Data), "_Dimensions._Data" },
 {  variable_capacity, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_int4_t_O),_Dimensions._Length), offsetof(SAFE_TYPE_MACRO(core::MDArray_int4_t_O),_Dimensions._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")>
{    variable_field, ctype_unsigned_long, sizeof(unsigned long), 0, "only" },
// Stamp = core::template_Array<core::MDArray_double_O,core::SimpleMDArray_double_O,core::SimpleVector_double_O,core::MDArray_O>/551
// Stamp = core::MDArray_double_O/555
{ class_kind, STAMP_core__MDArray_double_O, sizeof(core::MDArray_double_O), 0, "core::MDArray_double_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CONSTANT-ARRAY-CTYPE :KEY NIL :ARRAY-SIZE 0 :ELEMENT-TYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long"))
// not-exposing {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::MDArray_double_O),_Length), "_Length" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_double_O),_FillPointerOrLengthOrDummy), "_FillPointerOrLengthOrDummy" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_double_O),_ArrayTotalSize), "_ArrayTotalSize" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Array_O>" :SPECIALIZER "class core::Array_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Array_O>), offsetof(SAFE_TYPE_MACRO(core::MDArray_double_O),_Data), "_Data" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_double_O),_DisplacedIndexOffset), "_DisplacedIndexOffset" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::MDArray_O::Flags" :NAME "Flags")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_double_O),_Flags._Flags), "_Flags._Flags" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::MDArray_double_O),_Dimensions._Data), "_Dimensions._Data" },
 {  variable_capacity, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_double_O),_Dimensions._Length), offsetof(SAFE_TYPE_MACRO(core::MDArray_double_O),_Dimensions._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")>
{    variable_field, ctype_unsigned_long, sizeof(unsigned long), 0, "only" },
// Stamp = core::ComplexVector_O/559
{ class_kind, STAMP_core__ComplexVector_O, sizeof(core::ComplexVector_O), 0, "core::ComplexVector_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CONSTANT-ARRAY-CTYPE :KEY NIL :ARRAY-SIZE 0 :ELEMENT-TYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long"))
// not-exposing {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_O),_Length), "_Length" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_O),_FillPointerOrLengthOrDummy), "_FillPointerOrLengthOrDummy" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_O),_ArrayTotalSize), "_ArrayTotalSize" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Array_O>" :SPECIALIZER "class core::Array_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Array_O>), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_O),_Data), "_Data" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_O),_DisplacedIndexOffset), "_DisplacedIndexOffset" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::MDArray_O::Flags" :NAME "Flags")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_O),_Flags._Flags), "_Flags._Flags" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::ComplexVector_O),_Dimensions._Data), "_Dimensions._Data" },
 {  variable_capacity, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_O),_Dimensions._Length), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_O),_Dimensions._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")>
{    variable_field, ctype_unsigned_long, sizeof(unsigned long), 0, "only" },
// Stamp = core::template_Vector<core::ComplexVector_double_O,core::SimpleVector_double_O,core::ComplexVector_O>/563
// Stamp = core::ComplexVector_double_O/567
{ class_kind, STAMP_core__ComplexVector_double_O, sizeof(core::ComplexVector_double_O), 0, "core::ComplexVector_double_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CONSTANT-ARRAY-CTYPE :KEY NIL :ARRAY-SIZE 0 :ELEMENT-TYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long"))
// not-exposing {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_double_O),_Length), "_Length" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_double_O),_FillPointerOrLengthOrDummy), "_FillPointerOrLengthOrDummy" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_double_O),_ArrayTotalSize), "_ArrayTotalSize" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Array_O>" :SPECIALIZER "class core::Array_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Array_O>), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_double_O),_Data), "_Data" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_double_O),_DisplacedIndexOffset), "_DisplacedIndexOffset" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::MDArray_O::Flags" :NAME "Flags")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_double_O),_Flags._Flags), "_Flags._Flags" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::ComplexVector_double_O),_Dimensions._Data), "_Dimensions._Data" },
 {  variable_capacity, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_double_O),_Dimensions._Length), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_double_O),_Dimensions._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")>
{    variable_field, ctype_unsigned_long, sizeof(unsigned long), 0, "only" },
// Stamp = core::template_Vector<core::ComplexVector_int8_t_O,core::SimpleVector_int8_t_O,core::ComplexVector_O>/571
// Stamp = core::ComplexVector_int8_t_O/575
{ class_kind, STAMP_core__ComplexVector_int8_t_O, sizeof(core::ComplexVector_int8_t_O), 0, "core::ComplexVector_int8_t_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CONSTANT-ARRAY-CTYPE :KEY NIL :ARRAY-SIZE 0 :ELEMENT-TYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long"))
// not-exposing {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_int8_t_O),_Length), "_Length" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_int8_t_O),_FillPointerOrLengthOrDummy), "_FillPointerOrLengthOrDummy" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_int8_t_O),_ArrayTotalSize), "_ArrayTotalSize" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Array_O>" :SPECIALIZER "class core::Array_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Array_O>), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_int8_t_O),_Data), "_Data" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_int8_t_O),_DisplacedIndexOffset), "_DisplacedIndexOffset" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::MDArray_O::Flags" :NAME "Flags")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_int8_t_O),_Flags._Flags), "_Flags._Flags" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::ComplexVector_int8_t_O),_Dimensions._Data), "_Dimensions._Data" },
 {  variable_capacity, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_int8_t_O),_Dimensions._Length), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_int8_t_O),_Dimensions._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")>
{    variable_field, ctype_unsigned_long, sizeof(unsigned long), 0, "only" },
// Stamp = core::template_Vector<core::ComplexVector_byte64_t_O,core::SimpleVector_byte64_t_O,core::ComplexVector_O>/579
// Stamp = core::ComplexVector_byte64_t_O/583
{ class_kind, STAMP_core__ComplexVector_byte64_t_O, sizeof(core::ComplexVector_byte64_t_O), 0, "core::ComplexVector_byte64_t_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CONSTANT-ARRAY-CTYPE :KEY NIL :ARRAY-SIZE 0 :ELEMENT-TYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long"))
// not-exposing {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_byte64_t_O),_Length), "_Length" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_byte64_t_O),_FillPointerOrLengthOrDummy), "_FillPointerOrLengthOrDummy" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_byte64_t_O),_ArrayTotalSize), "_ArrayTotalSize" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Array_O>" :SPECIALIZER "class core::Array_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Array_O>), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_byte64_t_O),_Data), "_Data" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_byte64_t_O),_DisplacedIndexOffset), "_DisplacedIndexOffset" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::MDArray_O::Flags" :NAME "Flags")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_byte64_t_O),_Flags._Flags), "_Flags._Flags" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::ComplexVector_byte64_t_O),_Dimensions._Data), "_Dimensions._Data" },
 {  variable_capacity, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_byte64_t_O),_Dimensions._Length), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_byte64_t_O),_Dimensions._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")>
{    variable_field, ctype_unsigned_long, sizeof(unsigned long), 0, "only" },
// Stamp = core::template_Vector<core::ComplexVector_T_O,core::SimpleVector_O,core::ComplexVector_O>/587
// Stamp = core::ComplexVector_T_O/591
{ class_kind, STAMP_core__ComplexVector_T_O, sizeof(core::ComplexVector_T_O), 0, "core::ComplexVector_T_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CONSTANT-ARRAY-CTYPE :KEY NIL :ARRAY-SIZE 0 :ELEMENT-TYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long"))
// not-exposing {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_T_O),_Length), "_Length" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_T_O),_FillPointerOrLengthOrDummy), "_FillPointerOrLengthOrDummy" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_T_O),_ArrayTotalSize), "_ArrayTotalSize" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Array_O>" :SPECIALIZER "class core::Array_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Array_O>), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_T_O),_Data), "_Data" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_T_O),_DisplacedIndexOffset), "_DisplacedIndexOffset" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::MDArray_O::Flags" :NAME "Flags")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_T_O),_Flags._Flags), "_Flags._Flags" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::ComplexVector_T_O),_Dimensions._Data), "_Dimensions._Data" },
 {  variable_capacity, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_T_O),_Dimensions._Length), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_T_O),_Dimensions._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")>
{    variable_field, ctype_unsigned_long, sizeof(unsigned long), 0, "only" },
// Stamp = core::template_Vector<core::ComplexVector_int2_t_O,core::SimpleVector_int2_t_O,core::ComplexVector_O>/595
// Stamp = core::ComplexVector_int2_t_O/599
{ class_kind, STAMP_core__ComplexVector_int2_t_O, sizeof(core::ComplexVector_int2_t_O), 0, "core::ComplexVector_int2_t_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CONSTANT-ARRAY-CTYPE :KEY NIL :ARRAY-SIZE 0 :ELEMENT-TYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long"))
// not-exposing {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_int2_t_O),_Length), "_Length" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_int2_t_O),_FillPointerOrLengthOrDummy), "_FillPointerOrLengthOrDummy" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_int2_t_O),_ArrayTotalSize), "_ArrayTotalSize" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Array_O>" :SPECIALIZER "class core::Array_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Array_O>), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_int2_t_O),_Data), "_Data" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_int2_t_O),_DisplacedIndexOffset), "_DisplacedIndexOffset" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::MDArray_O::Flags" :NAME "Flags")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_int2_t_O),_Flags._Flags), "_Flags._Flags" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::ComplexVector_int2_t_O),_Dimensions._Data), "_Dimensions._Data" },
 {  variable_capacity, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_int2_t_O),_Dimensions._Length), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_int2_t_O),_Dimensions._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")>
{    variable_field, ctype_unsigned_long, sizeof(unsigned long), 0, "only" },
// Stamp = core::template_Vector<core::ComplexVector_int32_t_O,core::SimpleVector_int32_t_O,core::ComplexVector_O>/603
// Stamp = core::ComplexVector_int32_t_O/607
{ class_kind, STAMP_core__ComplexVector_int32_t_O, sizeof(core::ComplexVector_int32_t_O), 0, "core::ComplexVector_int32_t_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CONSTANT-ARRAY-CTYPE :KEY NIL :ARRAY-SIZE 0 :ELEMENT-TYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long"))
// not-exposing {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_int32_t_O),_Length), "_Length" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_int32_t_O),_FillPointerOrLengthOrDummy), "_FillPointerOrLengthOrDummy" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_int32_t_O),_ArrayTotalSize), "_ArrayTotalSize" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Array_O>" :SPECIALIZER "class core::Array_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Array_O>), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_int32_t_O),_Data), "_Data" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_int32_t_O),_DisplacedIndexOffset), "_DisplacedIndexOffset" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::MDArray_O::Flags" :NAME "Flags")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_int32_t_O),_Flags._Flags), "_Flags._Flags" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::ComplexVector_int32_t_O),_Dimensions._Data), "_Dimensions._Data" },
 {  variable_capacity, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_int32_t_O),_Dimensions._Length), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_int32_t_O),_Dimensions._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")>
{    variable_field, ctype_unsigned_long, sizeof(unsigned long), 0, "only" },
// Stamp = core::template_Vector<core::ComplexVector_byte16_t_O,core::SimpleVector_byte16_t_O,core::ComplexVector_O>/611
// Stamp = core::ComplexVector_byte16_t_O/615
{ class_kind, STAMP_core__ComplexVector_byte16_t_O, sizeof(core::ComplexVector_byte16_t_O), 0, "core::ComplexVector_byte16_t_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CONSTANT-ARRAY-CTYPE :KEY NIL :ARRAY-SIZE 0 :ELEMENT-TYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long"))
// not-exposing {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_byte16_t_O),_Length), "_Length" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_byte16_t_O),_FillPointerOrLengthOrDummy), "_FillPointerOrLengthOrDummy" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_byte16_t_O),_ArrayTotalSize), "_ArrayTotalSize" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Array_O>" :SPECIALIZER "class core::Array_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Array_O>), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_byte16_t_O),_Data), "_Data" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_byte16_t_O),_DisplacedIndexOffset), "_DisplacedIndexOffset" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::MDArray_O::Flags" :NAME "Flags")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_byte16_t_O),_Flags._Flags), "_Flags._Flags" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::ComplexVector_byte16_t_O),_Dimensions._Data), "_Dimensions._Data" },
 {  variable_capacity, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_byte16_t_O),_Dimensions._Length), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_byte16_t_O),_Dimensions._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")>
{    variable_field, ctype_unsigned_long, sizeof(unsigned long), 0, "only" },
// Stamp = core::template_Vector<core::ComplexVector_float_O,core::SimpleVector_float_O,core::ComplexVector_O>/619
// Stamp = core::ComplexVector_float_O/623
{ class_kind, STAMP_core__ComplexVector_float_O, sizeof(core::ComplexVector_float_O), 0, "core::ComplexVector_float_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CONSTANT-ARRAY-CTYPE :KEY NIL :ARRAY-SIZE 0 :ELEMENT-TYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long"))
// not-exposing {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_float_O),_Length), "_Length" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_float_O),_FillPointerOrLengthOrDummy), "_FillPointerOrLengthOrDummy" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_float_O),_ArrayTotalSize), "_ArrayTotalSize" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Array_O>" :SPECIALIZER "class core::Array_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Array_O>), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_float_O),_Data), "_Data" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_float_O),_DisplacedIndexOffset), "_DisplacedIndexOffset" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::MDArray_O::Flags" :NAME "Flags")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_float_O),_Flags._Flags), "_Flags._Flags" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::ComplexVector_float_O),_Dimensions._Data), "_Dimensions._Data" },
 {  variable_capacity, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_float_O),_Dimensions._Length), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_float_O),_Dimensions._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")>
{    variable_field, ctype_unsigned_long, sizeof(unsigned long), 0, "only" },
// Stamp = core::template_Vector<core::ComplexVector_int16_t_O,core::SimpleVector_int16_t_O,core::ComplexVector_O>/627
// Stamp = core::ComplexVector_int16_t_O/631
{ class_kind, STAMP_core__ComplexVector_int16_t_O, sizeof(core::ComplexVector_int16_t_O), 0, "core::ComplexVector_int16_t_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CONSTANT-ARRAY-CTYPE :KEY NIL :ARRAY-SIZE 0 :ELEMENT-TYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long"))
// not-exposing {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_int16_t_O),_Length), "_Length" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_int16_t_O),_FillPointerOrLengthOrDummy), "_FillPointerOrLengthOrDummy" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_int16_t_O),_ArrayTotalSize), "_ArrayTotalSize" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Array_O>" :SPECIALIZER "class core::Array_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Array_O>), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_int16_t_O),_Data), "_Data" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_int16_t_O),_DisplacedIndexOffset), "_DisplacedIndexOffset" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::MDArray_O::Flags" :NAME "Flags")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_int16_t_O),_Flags._Flags), "_Flags._Flags" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::ComplexVector_int16_t_O),_Dimensions._Data), "_Dimensions._Data" },
 {  variable_capacity, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_int16_t_O),_Dimensions._Length), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_int16_t_O),_Dimensions._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")>
{    variable_field, ctype_unsigned_long, sizeof(unsigned long), 0, "only" },
// Stamp = core::template_Vector<core::ComplexVector_int4_t_O,core::SimpleVector_int4_t_O,core::ComplexVector_O>/635
// Stamp = core::ComplexVector_int4_t_O/639
{ class_kind, STAMP_core__ComplexVector_int4_t_O, sizeof(core::ComplexVector_int4_t_O), 0, "core::ComplexVector_int4_t_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CONSTANT-ARRAY-CTYPE :KEY NIL :ARRAY-SIZE 0 :ELEMENT-TYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long"))
// not-exposing {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_int4_t_O),_Length), "_Length" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_int4_t_O),_FillPointerOrLengthOrDummy), "_FillPointerOrLengthOrDummy" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_int4_t_O),_ArrayTotalSize), "_ArrayTotalSize" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Array_O>" :SPECIALIZER "class core::Array_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Array_O>), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_int4_t_O),_Data), "_Data" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_int4_t_O),_DisplacedIndexOffset), "_DisplacedIndexOffset" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::MDArray_O::Flags" :NAME "Flags")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_int4_t_O),_Flags._Flags), "_Flags._Flags" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::ComplexVector_int4_t_O),_Dimensions._Data), "_Dimensions._Data" },
 {  variable_capacity, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_int4_t_O),_Dimensions._Length), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_int4_t_O),_Dimensions._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")>
{    variable_field, ctype_unsigned_long, sizeof(unsigned long), 0, "only" },
// Stamp = core::template_Vector<core::ComplexVector_size_t_O,core::SimpleVector_size_t_O,core::ComplexVector_O>/643
// Stamp = core::ComplexVector_size_t_O/647
{ class_kind, STAMP_core__ComplexVector_size_t_O, sizeof(core::ComplexVector_size_t_O), 0, "core::ComplexVector_size_t_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CONSTANT-ARRAY-CTYPE :KEY NIL :ARRAY-SIZE 0 :ELEMENT-TYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long"))
// not-exposing {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_size_t_O),_Length), "_Length" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_size_t_O),_FillPointerOrLengthOrDummy), "_FillPointerOrLengthOrDummy" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_size_t_O),_ArrayTotalSize), "_ArrayTotalSize" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Array_O>" :SPECIALIZER "class core::Array_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Array_O>), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_size_t_O),_Data), "_Data" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_size_t_O),_DisplacedIndexOffset), "_DisplacedIndexOffset" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::MDArray_O::Flags" :NAME "Flags")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_size_t_O),_Flags._Flags), "_Flags._Flags" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::ComplexVector_size_t_O),_Dimensions._Data), "_Dimensions._Data" },
 {  variable_capacity, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_size_t_O),_Dimensions._Length), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_size_t_O),_Dimensions._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")>
{    variable_field, ctype_unsigned_long, sizeof(unsigned long), 0, "only" },
// Stamp = core::template_Vector<core::ComplexVector_byte2_t_O,core::SimpleVector_byte2_t_O,core::ComplexVector_O>/651
// Stamp = core::ComplexVector_byte2_t_O/655
{ class_kind, STAMP_core__ComplexVector_byte2_t_O, sizeof(core::ComplexVector_byte2_t_O), 0, "core::ComplexVector_byte2_t_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CONSTANT-ARRAY-CTYPE :KEY NIL :ARRAY-SIZE 0 :ELEMENT-TYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long"))
// not-exposing {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_byte2_t_O),_Length), "_Length" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_byte2_t_O),_FillPointerOrLengthOrDummy), "_FillPointerOrLengthOrDummy" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_byte2_t_O),_ArrayTotalSize), "_ArrayTotalSize" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Array_O>" :SPECIALIZER "class core::Array_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Array_O>), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_byte2_t_O),_Data), "_Data" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_byte2_t_O),_DisplacedIndexOffset), "_DisplacedIndexOffset" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::MDArray_O::Flags" :NAME "Flags")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_byte2_t_O),_Flags._Flags), "_Flags._Flags" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::ComplexVector_byte2_t_O),_Dimensions._Data), "_Dimensions._Data" },
 {  variable_capacity, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_byte2_t_O),_Dimensions._Length), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_byte2_t_O),_Dimensions._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")>
{    variable_field, ctype_unsigned_long, sizeof(unsigned long), 0, "only" },
// Stamp = core::template_Vector<core::ComplexVector_byte8_t_O,core::SimpleVector_byte8_t_O,core::ComplexVector_O>/659
// Stamp = core::ComplexVector_byte8_t_O/663
{ class_kind, STAMP_core__ComplexVector_byte8_t_O, sizeof(core::ComplexVector_byte8_t_O), 0, "core::ComplexVector_byte8_t_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CONSTANT-ARRAY-CTYPE :KEY NIL :ARRAY-SIZE 0 :ELEMENT-TYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long"))
// not-exposing {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_byte8_t_O),_Length), "_Length" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_byte8_t_O),_FillPointerOrLengthOrDummy), "_FillPointerOrLengthOrDummy" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_byte8_t_O),_ArrayTotalSize), "_ArrayTotalSize" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Array_O>" :SPECIALIZER "class core::Array_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Array_O>), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_byte8_t_O),_Data), "_Data" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_byte8_t_O),_DisplacedIndexOffset), "_DisplacedIndexOffset" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::MDArray_O::Flags" :NAME "Flags")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_byte8_t_O),_Flags._Flags), "_Flags._Flags" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::ComplexVector_byte8_t_O),_Dimensions._Data), "_Dimensions._Data" },
 {  variable_capacity, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_byte8_t_O),_Dimensions._Length), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_byte8_t_O),_Dimensions._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")>
{    variable_field, ctype_unsigned_long, sizeof(unsigned long), 0, "only" },
// Stamp = core::template_Vector<core::ComplexVector_byte32_t_O,core::SimpleVector_byte32_t_O,core::ComplexVector_O>/667
// Stamp = core::ComplexVector_byte32_t_O/671
{ class_kind, STAMP_core__ComplexVector_byte32_t_O, sizeof(core::ComplexVector_byte32_t_O), 0, "core::ComplexVector_byte32_t_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CONSTANT-ARRAY-CTYPE :KEY NIL :ARRAY-SIZE 0 :ELEMENT-TYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long"))
// not-exposing {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_byte32_t_O),_Length), "_Length" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_byte32_t_O),_FillPointerOrLengthOrDummy), "_FillPointerOrLengthOrDummy" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_byte32_t_O),_ArrayTotalSize), "_ArrayTotalSize" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Array_O>" :SPECIALIZER "class core::Array_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Array_O>), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_byte32_t_O),_Data), "_Data" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_byte32_t_O),_DisplacedIndexOffset), "_DisplacedIndexOffset" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::MDArray_O::Flags" :NAME "Flags")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_byte32_t_O),_Flags._Flags), "_Flags._Flags" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::ComplexVector_byte32_t_O),_Dimensions._Data), "_Dimensions._Data" },
 {  variable_capacity, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_byte32_t_O),_Dimensions._Length), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_byte32_t_O),_Dimensions._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")>
{    variable_field, ctype_unsigned_long, sizeof(unsigned long), 0, "only" },
// Stamp = core::template_Vector<core::BitVectorNs_O,core::SimpleBitVector_O,core::ComplexVector_O>/675
// Stamp = core::BitVectorNs_O/679
{ class_kind, STAMP_core__BitVectorNs_O, sizeof(core::BitVectorNs_O), 0, "core::BitVectorNs_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CONSTANT-ARRAY-CTYPE :KEY NIL :ARRAY-SIZE 0 :ELEMENT-TYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long"))
// not-exposing {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::BitVectorNs_O),_Length), "_Length" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::BitVectorNs_O),_FillPointerOrLengthOrDummy), "_FillPointerOrLengthOrDummy" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::BitVectorNs_O),_ArrayTotalSize), "_ArrayTotalSize" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Array_O>" :SPECIALIZER "class core::Array_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Array_O>), offsetof(SAFE_TYPE_MACRO(core::BitVectorNs_O),_Data), "_Data" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::BitVectorNs_O),_DisplacedIndexOffset), "_DisplacedIndexOffset" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::MDArray_O::Flags" :NAME "Flags")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::BitVectorNs_O),_Flags._Flags), "_Flags._Flags" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::BitVectorNs_O),_Dimensions._Data), "_Dimensions._Data" },
 {  variable_capacity, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::BitVectorNs_O),_Dimensions._Length), offsetof(SAFE_TYPE_MACRO(core::BitVectorNs_O),_Dimensions._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")>
{    variable_field, ctype_unsigned_long, sizeof(unsigned long), 0, "only" },
// Stamp = core::StrNs_O/683
{ class_kind, STAMP_core__StrNs_O, sizeof(core::StrNs_O), 0, "core::StrNs_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CONSTANT-ARRAY-CTYPE :KEY NIL :ARRAY-SIZE 0 :ELEMENT-TYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long"))
// not-exposing {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::StrNs_O),_Length), "_Length" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::StrNs_O),_FillPointerOrLengthOrDummy), "_FillPointerOrLengthOrDummy" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::StrNs_O),_ArrayTotalSize), "_ArrayTotalSize" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Array_O>" :SPECIALIZER "class core::Array_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Array_O>), offsetof(SAFE_TYPE_MACRO(core::StrNs_O),_Data), "_Data" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::StrNs_O),_DisplacedIndexOffset), "_DisplacedIndexOffset" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::MDArray_O::Flags" :NAME "Flags")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::StrNs_O),_Flags._Flags), "_Flags._Flags" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::StrNs_O),_Dimensions._Data), "_Dimensions._Data" },
 {  variable_capacity, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::StrNs_O),_Dimensions._Length), offsetof(SAFE_TYPE_MACRO(core::StrNs_O),_Dimensions._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")>
{    variable_field, ctype_unsigned_long, sizeof(unsigned long), 0, "only" },
// Stamp = core::template_Vector<core::Str8Ns_O,core::SimpleBaseString_O,core::StrNs_O>/687
// Stamp = core::Str8Ns_O/691
{ class_kind, STAMP_core__Str8Ns_O, sizeof(core::Str8Ns_O), 0, "core::Str8Ns_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CONSTANT-ARRAY-CTYPE :KEY NIL :ARRAY-SIZE 0 :ELEMENT-TYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long"))
// not-exposing {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::Str8Ns_O),_Length), "_Length" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::Str8Ns_O),_FillPointerOrLengthOrDummy), "_FillPointerOrLengthOrDummy" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::Str8Ns_O),_ArrayTotalSize), "_ArrayTotalSize" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Array_O>" :SPECIALIZER "class core::Array_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Array_O>), offsetof(SAFE_TYPE_MACRO(core::Str8Ns_O),_Data), "_Data" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::Str8Ns_O),_DisplacedIndexOffset), "_DisplacedIndexOffset" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::MDArray_O::Flags" :NAME "Flags")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::Str8Ns_O),_Flags._Flags), "_Flags._Flags" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::Str8Ns_O),_Dimensions._Data), "_Dimensions._Data" },
 {  variable_capacity, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::Str8Ns_O),_Dimensions._Length), offsetof(SAFE_TYPE_MACRO(core::Str8Ns_O),_Dimensions._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")>
{    variable_field, ctype_unsigned_long, sizeof(unsigned long), 0, "only" },
// Stamp = core::template_Vector<core::StrWNs_O,core::SimpleCharacterString_O,core::StrNs_O>/695
// Stamp = core::StrWNs_O/699
{ class_kind, STAMP_core__StrWNs_O, sizeof(core::StrWNs_O), 0, "core::StrWNs_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CONSTANT-ARRAY-CTYPE :KEY NIL :ARRAY-SIZE 0 :ELEMENT-TYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long"))
// not-exposing {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::StrWNs_O),_Length), "_Length" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::StrWNs_O),_FillPointerOrLengthOrDummy), "_FillPointerOrLengthOrDummy" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::StrWNs_O),_ArrayTotalSize), "_ArrayTotalSize" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Array_O>" :SPECIALIZER "class core::Array_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Array_O>), offsetof(SAFE_TYPE_MACRO(core::StrWNs_O),_Data), "_Data" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::StrWNs_O),_DisplacedIndexOffset), "_DisplacedIndexOffset" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::MDArray_O::Flags" :NAME "Flags")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::StrWNs_O),_Flags._Flags), "_Flags._Flags" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::StrWNs_O),_Dimensions._Data), "_Dimensions._Data" },
 {  variable_capacity, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::StrWNs_O),_Dimensions._Length), offsetof(SAFE_TYPE_MACRO(core::StrWNs_O),_Dimensions._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")>
{    variable_field, ctype_unsigned_long, sizeof(unsigned long), 0, "only" },
// Stamp = core::template_Vector<core::ComplexVector_byte4_t_O,core::SimpleVector_byte4_t_O,core::ComplexVector_O>/703
// Stamp = core::ComplexVector_byte4_t_O/707
{ class_kind, STAMP_core__ComplexVector_byte4_t_O, sizeof(core::ComplexVector_byte4_t_O), 0, "core::ComplexVector_byte4_t_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CONSTANT-ARRAY-CTYPE :KEY NIL :ARRAY-SIZE 0 :ELEMENT-TYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long"))
// not-exposing {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_byte4_t_O),_Length), "_Length" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_byte4_t_O),_FillPointerOrLengthOrDummy), "_FillPointerOrLengthOrDummy" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_byte4_t_O),_ArrayTotalSize), "_ArrayTotalSize" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Array_O>" :SPECIALIZER "class core::Array_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Array_O>), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_byte4_t_O),_Data), "_Data" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_byte4_t_O),_DisplacedIndexOffset), "_DisplacedIndexOffset" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::MDArray_O::Flags" :NAME "Flags")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_byte4_t_O),_Flags._Flags), "_Flags._Flags" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::ComplexVector_byte4_t_O),_Dimensions._Data), "_Dimensions._Data" },
 {  variable_capacity, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_byte4_t_O),_Dimensions._Length), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_byte4_t_O),_Dimensions._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")>
{    variable_field, ctype_unsigned_long, sizeof(unsigned long), 0, "only" },
// Stamp = core::template_Vector<core::ComplexVector_fixnum_O,core::SimpleVector_fixnum_O,core::ComplexVector_O>/711
// Stamp = core::ComplexVector_fixnum_O/715
{ class_kind, STAMP_core__ComplexVector_fixnum_O, sizeof(core::ComplexVector_fixnum_O), 0, "core::ComplexVector_fixnum_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CONSTANT-ARRAY-CTYPE :KEY NIL :ARRAY-SIZE 0 :ELEMENT-TYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long"))
// not-exposing {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_fixnum_O),_Length), "_Length" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_fixnum_O),_FillPointerOrLengthOrDummy), "_FillPointerOrLengthOrDummy" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_fixnum_O),_ArrayTotalSize), "_ArrayTotalSize" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Array_O>" :SPECIALIZER "class core::Array_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Array_O>), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_fixnum_O),_Data), "_Data" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_fixnum_O),_DisplacedIndexOffset), "_DisplacedIndexOffset" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::MDArray_O::Flags" :NAME "Flags")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_fixnum_O),_Flags._Flags), "_Flags._Flags" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::ComplexVector_fixnum_O),_Dimensions._Data), "_Dimensions._Data" },
 {  variable_capacity, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_fixnum_O),_Dimensions._Length), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_fixnum_O),_Dimensions._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")>
{    variable_field, ctype_unsigned_long, sizeof(unsigned long), 0, "only" },
// Stamp = core::template_Vector<core::ComplexVector_int64_t_O,core::SimpleVector_int64_t_O,core::ComplexVector_O>/719
// Stamp = core::ComplexVector_int64_t_O/723
{ class_kind, STAMP_core__ComplexVector_int64_t_O, sizeof(core::ComplexVector_int64_t_O), 0, "core::ComplexVector_int64_t_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CONSTANT-ARRAY-CTYPE :KEY NIL :ARRAY-SIZE 0 :ELEMENT-TYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long"))
// not-exposing {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_int64_t_O),_Length), "_Length" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_int64_t_O),_FillPointerOrLengthOrDummy), "_FillPointerOrLengthOrDummy" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_int64_t_O),_ArrayTotalSize), "_ArrayTotalSize" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Array_O>" :SPECIALIZER "class core::Array_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Array_O>), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_int64_t_O),_Data), "_Data" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_int64_t_O),_DisplacedIndexOffset), "_DisplacedIndexOffset" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::MDArray_O::Flags" :NAME "Flags")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_int64_t_O),_Flags._Flags), "_Flags._Flags" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::ComplexVector_int64_t_O),_Dimensions._Data), "_Dimensions._Data" },
 {  variable_capacity, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_int64_t_O),_Dimensions._Length), offsetof(SAFE_TYPE_MACRO(core::ComplexVector_int64_t_O),_Dimensions._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")>
{    variable_field, ctype_unsigned_long, sizeof(unsigned long), 0, "only" },
// Stamp = core::AbstractSimpleVector_O/727
{ class_kind, STAMP_core__AbstractSimpleVector_O, sizeof(core::AbstractSimpleVector_O), 0, "core::AbstractSimpleVector_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CONSTANT-ARRAY-CTYPE :KEY NIL :ARRAY-SIZE 0 :ELEMENT-TYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long"))
// not-exposing {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::AbstractSimpleVector_O),_Length), "_Length" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// Stamp = core::SimpleString_O/731
{ class_kind, STAMP_core__SimpleString_O, sizeof(core::SimpleString_O), 0, "core::SimpleString_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CONSTANT-ARRAY-CTYPE :KEY NIL :ARRAY-SIZE 0 :ELEMENT-TYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long"))
// not-exposing {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::SimpleString_O),_Length), "_Length" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// Stamp = core::template_SimpleVector<core::SimpleCharacterString_O,int,core::SimpleString_O>/735
// Stamp = core::SimpleCharacterString_O/739
{ class_kind, STAMP_core__SimpleCharacterString_O, sizeof(core::SimpleCharacterString_O), 0, "core::SimpleCharacterString_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CONSTANT-ARRAY-CTYPE :KEY NIL :ARRAY-SIZE 0 :ELEMENT-TYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long"))
// not-exposing {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::SimpleCharacterString_O),_Length), "_Length" }, // atomic: NIL public: (T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::SimpleCharacterString_O),_Data._Data), "_Data._Data" },
 {  variable_capacity, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::SimpleCharacterString_O),_Data._Length), offsetof(SAFE_TYPE_MACRO(core::SimpleCharacterString_O),_Data._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")>
{    variable_field, ctype_int, sizeof(int), 0, "only" },
// Stamp = core::template_SimpleVector<core::SimpleBaseString_O,unsigned char,core::SimpleString_O>/743
// Stamp = core::SimpleBaseString_O/747
{ class_kind, STAMP_core__SimpleBaseString_O, sizeof(core::SimpleBaseString_O), 0, "core::SimpleBaseString_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CONSTANT-ARRAY-CTYPE :KEY NIL :ARRAY-SIZE 0 :ELEMENT-TYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long"))
// not-exposing {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::SimpleBaseString_O),_Length), "_Length" }, // atomic: NIL public: (T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::SimpleBaseString_O),_Data._Data), "_Data._Data" },
 {  variable_capacity, sizeof(unsigned char), offsetof(SAFE_TYPE_MACRO(core::SimpleBaseString_O),_Data._Length), offsetof(SAFE_TYPE_MACRO(core::SimpleBaseString_O),_Data._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned char") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned char")>
{    variable_field, ctype_unsigned_char, sizeof(unsigned char), 0, "only" },
// Stamp = core::template_SimpleVector<core::SimpleVector_int16_t_O,short,core::AbstractSimpleVector_O>/751
// Stamp = core::SimpleVector_int16_t_O/755
{ class_kind, STAMP_core__SimpleVector_int16_t_O, sizeof(core::SimpleVector_int16_t_O), 0, "core::SimpleVector_int16_t_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CONSTANT-ARRAY-CTYPE :KEY NIL :ARRAY-SIZE 0 :ELEMENT-TYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long"))
// not-exposing {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::SimpleVector_int16_t_O),_Length), "_Length" }, // atomic: NIL public: (T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::SimpleVector_int16_t_O),_Data._Data), "_Data._Data" },
 {  variable_capacity, sizeof(short), offsetof(SAFE_TYPE_MACRO(core::SimpleVector_int16_t_O),_Data._Length), offsetof(SAFE_TYPE_MACRO(core::SimpleVector_int16_t_O),_Data._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "short") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "short")>
{    variable_field, ctype_short, sizeof(short), 0, "only" },
// Stamp = core::template_SimpleVector<core::SimpleVector_byte16_t_O,unsigned short,core::AbstractSimpleVector_O>/759
// Stamp = core::SimpleVector_byte16_t_O/763
{ class_kind, STAMP_core__SimpleVector_byte16_t_O, sizeof(core::SimpleVector_byte16_t_O), 0, "core::SimpleVector_byte16_t_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CONSTANT-ARRAY-CTYPE :KEY NIL :ARRAY-SIZE 0 :ELEMENT-TYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long"))
// not-exposing {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::SimpleVector_byte16_t_O),_Length), "_Length" }, // atomic: NIL public: (T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::SimpleVector_byte16_t_O),_Data._Data), "_Data._Data" },
 {  variable_capacity, sizeof(unsigned short), offsetof(SAFE_TYPE_MACRO(core::SimpleVector_byte16_t_O),_Data._Length), offsetof(SAFE_TYPE_MACRO(core::SimpleVector_byte16_t_O),_Data._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned short") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned short")>
{    variable_field, ctype_unsigned_short, sizeof(unsigned short), 0, "only" },
// Stamp = core::template_SimpleBitUnitVector<core::SimpleBitVector_O,1,0>/767
// Stamp = core::SimpleBitVector_O/771
{ class_kind, STAMP_core__SimpleBitVector_O, sizeof(core::SimpleBitVector_O), 0, "core::SimpleBitVector_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CONSTANT-ARRAY-CTYPE :KEY NIL :ARRAY-SIZE 0 :ELEMENT-TYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long"))
// not-exposing {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::SimpleBitVector_O),_Length), "_Length" }, // atomic: NIL public: (T) fixable: NIL good-name: T
 {  variable_bit_array0, 1, 0, offsetof(SAFE_TYPE_MACRO(core::SimpleBitVector_O),_Data._Data), "_Data._Data" },
 {  variable_capacity, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleBitVector_O),_Data._Length), offsetof(SAFE_TYPE_MACRO(core::SimpleBitVector_O),_Data._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")>
{    variable_field, ctype_unsigned_long, sizeof(unsigned long), 0, "only" },
// Stamp = core::template_SimpleBitUnitVector<core::SimpleVector_int4_t_O,4,1>/775
// Stamp = core::SimpleVector_int4_t_O/779
{ class_kind, STAMP_core__SimpleVector_int4_t_O, sizeof(core::SimpleVector_int4_t_O), 0, "core::SimpleVector_int4_t_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CONSTANT-ARRAY-CTYPE :KEY NIL :ARRAY-SIZE 0 :ELEMENT-TYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long"))
// not-exposing {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::SimpleVector_int4_t_O),_Length), "_Length" }, // atomic: NIL public: (T) fixable: NIL good-name: T
 {  variable_bit_array0, 4, 0, offsetof(SAFE_TYPE_MACRO(core::SimpleVector_int4_t_O),_Data._Data), "_Data._Data" },
 {  variable_capacity, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleVector_int4_t_O),_Data._Length), offsetof(SAFE_TYPE_MACRO(core::SimpleVector_int4_t_O),_Data._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")>
{    variable_field, ctype_unsigned_long, sizeof(unsigned long), 0, "only" },
// Stamp = core::template_SimpleVector<core::SimpleVector_byte32_t_O,unsigned int,core::AbstractSimpleVector_O>/783
// Stamp = core::SimpleVector_byte32_t_O/787
{ class_kind, STAMP_core__SimpleVector_byte32_t_O, sizeof(core::SimpleVector_byte32_t_O), 0, "core::SimpleVector_byte32_t_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CONSTANT-ARRAY-CTYPE :KEY NIL :ARRAY-SIZE 0 :ELEMENT-TYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long"))
// not-exposing {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::SimpleVector_byte32_t_O),_Length), "_Length" }, // atomic: NIL public: (T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::SimpleVector_byte32_t_O),_Data._Data), "_Data._Data" },
 {  variable_capacity, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::SimpleVector_byte32_t_O),_Data._Length), offsetof(SAFE_TYPE_MACRO(core::SimpleVector_byte32_t_O),_Data._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned int") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned int")>
{    variable_field, ctype_unsigned_int, sizeof(unsigned int), 0, "only" },
// Stamp = core::template_SimpleVector<core::SimpleVector_size_t_O,unsigned long,core::AbstractSimpleVector_O>/791
// Stamp = core::SimpleVector_size_t_O/795
{ class_kind, STAMP_core__SimpleVector_size_t_O, sizeof(core::SimpleVector_size_t_O), 0, "core::SimpleVector_size_t_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CONSTANT-ARRAY-CTYPE :KEY NIL :ARRAY-SIZE 0 :ELEMENT-TYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long"))
// not-exposing {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::SimpleVector_size_t_O),_Length), "_Length" }, // atomic: NIL public: (T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::SimpleVector_size_t_O),_Data._Data), "_Data._Data" },
 {  variable_capacity, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleVector_size_t_O),_Data._Length), offsetof(SAFE_TYPE_MACRO(core::SimpleVector_size_t_O),_Data._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")>
{    variable_field, ctype_unsigned_long, sizeof(unsigned long), 0, "only" },
// Stamp = core::template_SimpleVector<core::SimpleVector_double_O,double,core::AbstractSimpleVector_O>/799
// Stamp = core::SimpleVector_double_O/803
{ class_kind, STAMP_core__SimpleVector_double_O, sizeof(core::SimpleVector_double_O), 0, "core::SimpleVector_double_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CONSTANT-ARRAY-CTYPE :KEY NIL :ARRAY-SIZE 0 :ELEMENT-TYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long"))
// not-exposing {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::SimpleVector_double_O),_Length), "_Length" }, // atomic: NIL public: (T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::SimpleVector_double_O),_Data._Data), "_Data._Data" },
 {  variable_capacity, sizeof(double), offsetof(SAFE_TYPE_MACRO(core::SimpleVector_double_O),_Data._Length), offsetof(SAFE_TYPE_MACRO(core::SimpleVector_double_O),_Data._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "double") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "double")>
{    variable_field, ctype_double, sizeof(double), 0, "only" },
// Stamp = core::template_SimpleVector<core::SimpleVector_byte64_t_O,unsigned long,core::AbstractSimpleVector_O>/807
// Stamp = core::SimpleVector_byte64_t_O/811
{ class_kind, STAMP_core__SimpleVector_byte64_t_O, sizeof(core::SimpleVector_byte64_t_O), 0, "core::SimpleVector_byte64_t_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CONSTANT-ARRAY-CTYPE :KEY NIL :ARRAY-SIZE 0 :ELEMENT-TYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long"))
// not-exposing {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::SimpleVector_byte64_t_O),_Length), "_Length" }, // atomic: NIL public: (T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::SimpleVector_byte64_t_O),_Data._Data), "_Data._Data" },
 {  variable_capacity, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleVector_byte64_t_O),_Data._Length), offsetof(SAFE_TYPE_MACRO(core::SimpleVector_byte64_t_O),_Data._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")>
{    variable_field, ctype_unsigned_long, sizeof(unsigned long), 0, "only" },
// Stamp = core::template_SimpleBitUnitVector<core::SimpleVector_int2_t_O,2,1>/815
// Stamp = core::SimpleVector_int2_t_O/819
{ class_kind, STAMP_core__SimpleVector_int2_t_O, sizeof(core::SimpleVector_int2_t_O), 0, "core::SimpleVector_int2_t_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CONSTANT-ARRAY-CTYPE :KEY NIL :ARRAY-SIZE 0 :ELEMENT-TYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long"))
// not-exposing {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::SimpleVector_int2_t_O),_Length), "_Length" }, // atomic: NIL public: (T) fixable: NIL good-name: T
 {  variable_bit_array0, 2, 0, offsetof(SAFE_TYPE_MACRO(core::SimpleVector_int2_t_O),_Data._Data), "_Data._Data" },
 {  variable_capacity, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleVector_int2_t_O),_Data._Length), offsetof(SAFE_TYPE_MACRO(core::SimpleVector_int2_t_O),_Data._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")>
{    variable_field, ctype_unsigned_long, sizeof(unsigned long), 0, "only" },
// Stamp = core::template_SimpleVector<core::SimpleVector_int64_t_O,long,core::AbstractSimpleVector_O>/823
// Stamp = core::SimpleVector_int64_t_O/827
{ class_kind, STAMP_core__SimpleVector_int64_t_O, sizeof(core::SimpleVector_int64_t_O), 0, "core::SimpleVector_int64_t_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CONSTANT-ARRAY-CTYPE :KEY NIL :ARRAY-SIZE 0 :ELEMENT-TYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long"))
// not-exposing {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::SimpleVector_int64_t_O),_Length), "_Length" }, // atomic: NIL public: (T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::SimpleVector_int64_t_O),_Data._Data), "_Data._Data" },
 {  variable_capacity, sizeof(long), offsetof(SAFE_TYPE_MACRO(core::SimpleVector_int64_t_O),_Data._Length), offsetof(SAFE_TYPE_MACRO(core::SimpleVector_int64_t_O),_Data._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "long") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "long")>
{    variable_field, ctype_long, sizeof(long), 0, "only" },
// Stamp = core::template_SimpleVector<core::SimpleVector_fixnum_O,long,core::AbstractSimpleVector_O>/831
// Stamp = core::SimpleVector_fixnum_O/835
{ class_kind, STAMP_core__SimpleVector_fixnum_O, sizeof(core::SimpleVector_fixnum_O), 0, "core::SimpleVector_fixnum_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CONSTANT-ARRAY-CTYPE :KEY NIL :ARRAY-SIZE 0 :ELEMENT-TYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long"))
// not-exposing {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::SimpleVector_fixnum_O),_Length), "_Length" }, // atomic: NIL public: (T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::SimpleVector_fixnum_O),_Data._Data), "_Data._Data" },
 {  variable_capacity, sizeof(long), offsetof(SAFE_TYPE_MACRO(core::SimpleVector_fixnum_O),_Data._Length), offsetof(SAFE_TYPE_MACRO(core::SimpleVector_fixnum_O),_Data._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "long") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "long")>
{    variable_field, ctype_long, sizeof(long), 0, "only" },
// Stamp = core::template_SimpleVector<core::SimpleVector_int8_t_O,signed char,core::AbstractSimpleVector_O>/839
// Stamp = core::SimpleVector_int8_t_O/843
{ class_kind, STAMP_core__SimpleVector_int8_t_O, sizeof(core::SimpleVector_int8_t_O), 0, "core::SimpleVector_int8_t_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CONSTANT-ARRAY-CTYPE :KEY NIL :ARRAY-SIZE 0 :ELEMENT-TYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long"))
// not-exposing {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::SimpleVector_int8_t_O),_Length), "_Length" }, // atomic: NIL public: (T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::SimpleVector_int8_t_O),_Data._Data), "_Data._Data" },
 {  variable_capacity, sizeof(signed char), offsetof(SAFE_TYPE_MACRO(core::SimpleVector_int8_t_O),_Data._Length), offsetof(SAFE_TYPE_MACRO(core::SimpleVector_int8_t_O),_Data._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "signed char") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "signed char")>
{    variable_field, ctype_signed_char, sizeof(signed char), 0, "only" },
// Stamp = core::template_SimpleVector<core::SimpleVector_float_O,float,core::AbstractSimpleVector_O>/847
// Stamp = core::SimpleVector_float_O/851
{ class_kind, STAMP_core__SimpleVector_float_O, sizeof(core::SimpleVector_float_O), 0, "core::SimpleVector_float_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CONSTANT-ARRAY-CTYPE :KEY NIL :ARRAY-SIZE 0 :ELEMENT-TYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long"))
// not-exposing {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::SimpleVector_float_O),_Length), "_Length" }, // atomic: NIL public: (T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::SimpleVector_float_O),_Data._Data), "_Data._Data" },
 {  variable_capacity, sizeof(float), offsetof(SAFE_TYPE_MACRO(core::SimpleVector_float_O),_Data._Length), offsetof(SAFE_TYPE_MACRO(core::SimpleVector_float_O),_Data._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "float") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "float")>
{    variable_field, ctype_float, sizeof(float), 0, "only" },
// Stamp = core::template_SimpleVector<core::SimpleVector_O,gctools::smart_ptr<core::T_O>,core::AbstractSimpleVector_O>/855
// Stamp = core::SimpleVector_O/859
{ class_kind, STAMP_core__SimpleVector_O, sizeof(core::SimpleVector_O), 0, "core::SimpleVector_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CONSTANT-ARRAY-CTYPE :KEY NIL :ARRAY-SIZE 0 :ELEMENT-TYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long"))
// not-exposing {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::SimpleVector_O),_Length), "_Length" }, // atomic: NIL public: (T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::SimpleVector_O),_Data._Data), "_Data._Data" },
 {  variable_capacity, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::SimpleVector_O),_Data._Length), offsetof(SAFE_TYPE_MACRO(core::SimpleVector_O),_Data._Length), NULL },
// one -> #<SMART-PTR-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O") :base #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")>
{    variable_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), 0, "only" },
// Stamp = core::template_SimpleVector<core::SimpleVector_byte8_t_O,unsigned char,core::AbstractSimpleVector_O>/863
// Stamp = core::SimpleVector_byte8_t_O/867
{ class_kind, STAMP_core__SimpleVector_byte8_t_O, sizeof(core::SimpleVector_byte8_t_O), 0, "core::SimpleVector_byte8_t_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CONSTANT-ARRAY-CTYPE :KEY NIL :ARRAY-SIZE 0 :ELEMENT-TYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long"))
// not-exposing {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::SimpleVector_byte8_t_O),_Length), "_Length" }, // atomic: NIL public: (T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::SimpleVector_byte8_t_O),_Data._Data), "_Data._Data" },
 {  variable_capacity, sizeof(unsigned char), offsetof(SAFE_TYPE_MACRO(core::SimpleVector_byte8_t_O),_Data._Length), offsetof(SAFE_TYPE_MACRO(core::SimpleVector_byte8_t_O),_Data._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned char") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned char")>
{    variable_field, ctype_unsigned_char, sizeof(unsigned char), 0, "only" },
// Stamp = core::template_SimpleBitUnitVector<core::SimpleVector_byte2_t_O,2,0>/871
// Stamp = core::SimpleVector_byte2_t_O/875
{ class_kind, STAMP_core__SimpleVector_byte2_t_O, sizeof(core::SimpleVector_byte2_t_O), 0, "core::SimpleVector_byte2_t_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CONSTANT-ARRAY-CTYPE :KEY NIL :ARRAY-SIZE 0 :ELEMENT-TYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long"))
// not-exposing {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::SimpleVector_byte2_t_O),_Length), "_Length" }, // atomic: NIL public: (T) fixable: NIL good-name: T
 {  variable_bit_array0, 2, 0, offsetof(SAFE_TYPE_MACRO(core::SimpleVector_byte2_t_O),_Data._Data), "_Data._Data" },
 {  variable_capacity, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleVector_byte2_t_O),_Data._Length), offsetof(SAFE_TYPE_MACRO(core::SimpleVector_byte2_t_O),_Data._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")>
{    variable_field, ctype_unsigned_long, sizeof(unsigned long), 0, "only" },
// Stamp = core::template_SimpleVector<core::SimpleVector_int32_t_O,int,core::AbstractSimpleVector_O>/879
// Stamp = core::SimpleVector_int32_t_O/883
{ class_kind, STAMP_core__SimpleVector_int32_t_O, sizeof(core::SimpleVector_int32_t_O), 0, "core::SimpleVector_int32_t_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CONSTANT-ARRAY-CTYPE :KEY NIL :ARRAY-SIZE 0 :ELEMENT-TYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long"))
// not-exposing {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::SimpleVector_int32_t_O),_Length), "_Length" }, // atomic: NIL public: (T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::SimpleVector_int32_t_O),_Data._Data), "_Data._Data" },
 {  variable_capacity, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::SimpleVector_int32_t_O),_Data._Length), offsetof(SAFE_TYPE_MACRO(core::SimpleVector_int32_t_O),_Data._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")>
{    variable_field, ctype_int, sizeof(int), 0, "only" },
// Stamp = core::template_SimpleBitUnitVector<core::SimpleVector_byte4_t_O,4,0>/887
// Stamp = core::SimpleVector_byte4_t_O/891
{ class_kind, STAMP_core__SimpleVector_byte4_t_O, sizeof(core::SimpleVector_byte4_t_O), 0, "core::SimpleVector_byte4_t_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CONSTANT-ARRAY-CTYPE :KEY NIL :ARRAY-SIZE 0 :ELEMENT-TYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long"))
// not-exposing {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::SimpleVector_byte4_t_O),_Length), "_Length" }, // atomic: NIL public: (T) fixable: NIL good-name: T
 {  variable_bit_array0, 4, 0, offsetof(SAFE_TYPE_MACRO(core::SimpleVector_byte4_t_O),_Data._Data), "_Data._Data" },
 {  variable_capacity, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleVector_byte4_t_O),_Data._Length), offsetof(SAFE_TYPE_MACRO(core::SimpleVector_byte4_t_O),_Data._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")>
{    variable_field, ctype_unsigned_long, sizeof(unsigned long), 0, "only" },
// Stamp = core::Symbol_O/895
{ class_kind, STAMP_core__Symbol_O, sizeof(core::Symbol_O), 0, "core::Symbol_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::SimpleString_O>" :SPECIALIZER "class core::SimpleString_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::SimpleString_O>), offsetof(SAFE_TYPE_MACRO(core::Symbol_O),_Name), "_Name" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: T  name: "atomic"
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::atomic<gctools::smart_ptr<core::T_O>>" :NAME "atomic" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O") :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::Symbol_O),_HomePackage), "_HomePackage" }, // atomic: T public: (T NIL) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: T  name: "atomic"
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::atomic<gctools::smart_ptr<core::T_O>>" :NAME "atomic" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O") :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::Symbol_O),_GlobalValue), "_GlobalValue" }, // atomic: T public: (T NIL) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: T  name: "atomic"
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::atomic<gctools::smart_ptr<core::Function_O>>" :NAME "atomic" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Function_O>" :SPECIALIZER "class core::Function_O") :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Function_O>" :SPECIALIZER "class core::Function_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Function_O>), offsetof(SAFE_TYPE_MACRO(core::Symbol_O),_Function), "_Function" }, // atomic: T public: (T NIL) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: T  name: "atomic"
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::atomic<gctools::smart_ptr<core::Function_O>>" :NAME "atomic" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Function_O>" :SPECIALIZER "class core::Function_O") :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Function_O>" :SPECIALIZER "class core::Function_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Function_O>), offsetof(SAFE_TYPE_MACRO(core::Symbol_O),_SetfFunction), "_SetfFunction" }, // atomic: T public: (T NIL) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: T  name: "atomic"
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::atomic<unsigned int>" :NAME "atomic" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned int") :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned int")
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::Symbol_O),_BindingIdx), "_BindingIdx" }, // atomic: T public: (T NIL) fixable: NIL good-name: T
// second-last-field is-atomic atomic: T  name: "atomic"
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::atomic<unsigned int>" :NAME "atomic" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned int") :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned int")
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::Symbol_O),_Flags), "_Flags" }, // atomic: T public: (T NIL) fixable: NIL good-name: T
// second-last-field is-atomic atomic: T  name: "atomic"
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::atomic<gctools::smart_ptr<core::T_O>>" :NAME "atomic" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O") :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::Symbol_O),_PropertyList), "_PropertyList" }, // atomic: T public: (T NIL) fixable: SMART-PTR-FIX good-name: T
// Stamp = core::Null_O/899
{ class_kind, STAMP_core__Null_O, sizeof(core::Null_O), 0, "core::Null_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::SimpleString_O>" :SPECIALIZER "class core::SimpleString_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::SimpleString_O>), offsetof(SAFE_TYPE_MACRO(core::Null_O),_Name), "_Name" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: T  name: "atomic"
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::atomic<gctools::smart_ptr<core::T_O>>" :NAME "atomic" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O") :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::Null_O),_HomePackage), "_HomePackage" }, // atomic: T public: (T NIL) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: T  name: "atomic"
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::atomic<gctools::smart_ptr<core::T_O>>" :NAME "atomic" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O") :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::Null_O),_GlobalValue), "_GlobalValue" }, // atomic: T public: (T NIL) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: T  name: "atomic"
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::atomic<gctools::smart_ptr<core::Function_O>>" :NAME "atomic" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Function_O>" :SPECIALIZER "class core::Function_O") :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Function_O>" :SPECIALIZER "class core::Function_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Function_O>), offsetof(SAFE_TYPE_MACRO(core::Null_O),_Function), "_Function" }, // atomic: T public: (T NIL) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: T  name: "atomic"
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::atomic<gctools::smart_ptr<core::Function_O>>" :NAME "atomic" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Function_O>" :SPECIALIZER "class core::Function_O") :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Function_O>" :SPECIALIZER "class core::Function_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Function_O>), offsetof(SAFE_TYPE_MACRO(core::Null_O),_SetfFunction), "_SetfFunction" }, // atomic: T public: (T NIL) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: T  name: "atomic"
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::atomic<unsigned int>" :NAME "atomic" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned int") :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned int")
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::Null_O),_BindingIdx), "_BindingIdx" }, // atomic: T public: (T NIL) fixable: NIL good-name: T
// second-last-field is-atomic atomic: T  name: "atomic"
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::atomic<unsigned int>" :NAME "atomic" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned int") :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned int")
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::Null_O),_Flags), "_Flags" }, // atomic: T public: (T NIL) fixable: NIL good-name: T
// second-last-field is-atomic atomic: T  name: "atomic"
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::atomic<gctools::smart_ptr<core::T_O>>" :NAME "atomic" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O") :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::Null_O),_PropertyList), "_PropertyList" }, // atomic: T public: (T NIL) fixable: SMART-PTR-FIX good-name: T
// Stamp = core::Character_dummy_O/903
{ class_kind, STAMP_core__Character_dummy_O, sizeof(core::Character_dummy_O), 0, "core::Character_dummy_O" },
// Stamp = llvmo::DataLayout_O/907
{ class_kind, STAMP_llvmo__DataLayout_O, sizeof(llvmo::DataLayout_O), 0, "llvmo::DataLayout_O" },
// Stamp = core::LoadTimeValues_O/911
{ class_kind, STAMP_core__LoadTimeValues_O, sizeof(core::LoadTimeValues_O), 0, "core::LoadTimeValues_O" },
// second-last-field is-atomic atomic: NIL  name: "GCVector"
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::Vec0<gctools::smart_ptr<core::T_O>>" :NAME "Vec0" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O") :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::GCVector<gctools::smart_ptr<core::T_O>,gctools::GCContainerAllocator<gctools::GCVector_moveable<gctools::smart_ptr<core::T_O>>>>" :NAME "GCVector" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::GCContainerAllocator<gctools::GCVector_moveable<gctools::smart_ptr<core::T_O>>>" :NAME "GCContainerAllocator" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::GCVECTOR-MOVEABLE-CTYPE :KEY "gctools::GCVector_moveable<gctools::smart_ptr<core::T_O>>" :NAME "GCVector_moveable" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::TAGGED-POINTER-CTYPE :KEY "gctools::tagged_pointer<gctools::GCVector_moveable<gctools::smart_ptr<core::T_O>>>" :SPECIALIZER "class gctools::GCVector_moveable<class gctools::smart_ptr<core::T_O> >")
 {  fixed_field, TAGGED_POINTER_OFFSET, sizeof(gctools::tagged_pointer<gctools::GCVector_moveable<gctools::smart_ptr<core::T_O>>>), offsetof(SAFE_TYPE_MACRO(core::LoadTimeValues_O),_Objects._Vector._Contents), "_Objects._Vector._Contents" }, // atomic: NIL public: (T T T) fixable: TAGGED-POINTER-FIX good-name: T
// Stamp = core::SharpEqualWrapper_O/915
{ class_kind, STAMP_core__SharpEqualWrapper_O, sizeof(core::SharpEqualWrapper_O), 0, "core::SharpEqualWrapper_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::SharpEqualWrapper_O),_Value), "_Value" }, // atomic: NIL public: (NIL) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::SharpEqualWrapper_O),_Label), "_Label" }, // atomic: NIL public: (NIL) fixable: SMART-PTR-FIX good-name: T
// Stamp = llvmo::ClaspJIT_O/919
{ class_kind, STAMP_llvmo__ClaspJIT_O, sizeof(llvmo::ClaspJIT_O), 0, "llvmo::ClaspJIT_O" },
// Stamp = core::Readtable_O/923
{ class_kind, STAMP_core__Readtable_O, sizeof(core::Readtable_O), 0, "core::Readtable_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Symbol_O>" :SPECIALIZER "class core::Symbol_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Symbol_O>), offsetof(SAFE_TYPE_MACRO(core::Readtable_O),Case_), "Case_" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::HashTable_O>" :SPECIALIZER "class core::HashTable_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::HashTable_O>), offsetof(SAFE_TYPE_MACRO(core::Readtable_O),SyntaxTypes_), "SyntaxTypes_" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::HashTable_O>" :SPECIALIZER "class core::HashTable_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::HashTable_O>), offsetof(SAFE_TYPE_MACRO(core::Readtable_O),MacroCharacters_), "MacroCharacters_" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::HashTable_O>" :SPECIALIZER "class core::HashTable_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::HashTable_O>), offsetof(SAFE_TYPE_MACRO(core::Readtable_O),DispatchMacroCharacters_), "DispatchMacroCharacters_" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// Stamp = core::PosixTime_O/927
{ class_kind, STAMP_core__PosixTime_O, sizeof(core::PosixTime_O), 0, "core::PosixTime_O" },
// second-last-field is-atomic atomic: NIL  name: "int_adapter"
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "boost::posix_time::ptime" :NAME "ptime")
// (instance-field-access iv) -> AST-TOOLING:AS-PROTECTED   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "boost::date_time::counted_time_rep<boost::posix_time::millisec_posix_time_system_config>" :NAME "counted_time_rep" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "boost::posix_time::millisec_posix_time_system_config" :NAME "millisec_posix_time_system_config") :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "boost::date_time::int_adapter<long>" :NAME "int_adapter" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "long") :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "long")
// not-exposing {  fixed_field, ctype_long, sizeof(long), offsetof(SAFE_TYPE_MACRO(core::PosixTime_O),_Time.time_.time_count_.value_), "_Time.time_.time_count_.value_" }, // atomic: NIL public: (NIL NIL NIL NIL) fixable: NIL good-name: T
// Stamp = core::Exposer_O/931
{ class_kind, STAMP_core__Exposer_O, sizeof(core::Exposer_O), 0, "core::Exposer_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Package_O>" :SPECIALIZER "class core::Package_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Package_O>), offsetof(SAFE_TYPE_MACRO(core::Exposer_O),_Package), "_Package" }, // atomic: NIL public: (NIL) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: "basic_string"
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>" :NAME "basic_string" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::char_traits<char>" :NAME "char_traits" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 2 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::allocator<char>" :NAME "allocator" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::Exposer_O),_PackageName._M_string_length), "_PackageName._M_string_length" }, // atomic: NIL public: (NIL NIL) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>" :NAME "basic_string" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::char_traits<char>" :NAME "char_traits" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 2 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::allocator<char>" :NAME "allocator" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::(anonymous)" :NAME "")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::Exposer_O),_PackageName.NO-NAME._M_allocated_capacity), "_PackageName.NO-NAME._M_allocated_capacity" }, // atomic: NIL public: (NIL NIL T) fixable: NIL good-name: T
// Stamp = core::CoreExposer_O/935
{ class_kind, STAMP_core__CoreExposer_O, sizeof(core::CoreExposer_O), 0, "core::CoreExposer_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Package_O>" :SPECIALIZER "class core::Package_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Package_O>), offsetof(SAFE_TYPE_MACRO(core::CoreExposer_O),_Package), "_Package" }, // atomic: NIL public: (NIL) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: "basic_string"
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>" :NAME "basic_string" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::char_traits<char>" :NAME "char_traits" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 2 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::allocator<char>" :NAME "allocator" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::CoreExposer_O),_PackageName._M_string_length), "_PackageName._M_string_length" }, // atomic: NIL public: (NIL NIL) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>" :NAME "basic_string" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::char_traits<char>" :NAME "char_traits" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 2 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::allocator<char>" :NAME "allocator" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::(anonymous)" :NAME "")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::CoreExposer_O),_PackageName.NO-NAME._M_allocated_capacity), "_PackageName.NO-NAME._M_allocated_capacity" }, // atomic: NIL public: (NIL NIL T) fixable: NIL good-name: T
// Stamp = asttooling::AsttoolingExposer_O/939
{ class_kind, STAMP_asttooling__AsttoolingExposer_O, sizeof(asttooling::AsttoolingExposer_O), 0, "asttooling::AsttoolingExposer_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Package_O>" :SPECIALIZER "class core::Package_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Package_O>), offsetof(SAFE_TYPE_MACRO(asttooling::AsttoolingExposer_O),_Package), "_Package" }, // atomic: NIL public: (NIL) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: "basic_string"
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>" :NAME "basic_string" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::char_traits<char>" :NAME "char_traits" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 2 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::allocator<char>" :NAME "allocator" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(asttooling::AsttoolingExposer_O),_PackageName._M_string_length), "_PackageName._M_string_length" }, // atomic: NIL public: (NIL NIL) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>" :NAME "basic_string" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::char_traits<char>" :NAME "char_traits" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 2 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::allocator<char>" :NAME "allocator" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::(anonymous)" :NAME "")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(asttooling::AsttoolingExposer_O),_PackageName.NO-NAME._M_allocated_capacity), "_PackageName.NO-NAME._M_allocated_capacity" }, // atomic: NIL public: (NIL NIL T) fixable: NIL good-name: T
// Stamp = llvmo::StructLayout_O/943
{ class_kind, STAMP_llvmo__StructLayout_O, sizeof(llvmo::StructLayout_O), 0, "llvmo::StructLayout_O" },
// Stamp = core::PosixTimeDuration_O/947
{ class_kind, STAMP_core__PosixTimeDuration_O, sizeof(core::PosixTimeDuration_O), 0, "core::PosixTimeDuration_O" },
// second-last-field is-atomic atomic: NIL  name: "int_adapter"
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "boost::posix_time::time_duration" :NAME "time_duration")
// (instance-field-access iv) -> AST-TOOLING:AS-PROTECTED   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "boost::date_time::int_adapter<long>" :NAME "int_adapter" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "long") :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "long")
// not-exposing {  fixed_field, ctype_long, sizeof(long), offsetof(SAFE_TYPE_MACRO(core::PosixTimeDuration_O),_Duration.ticks_.value_), "_Duration.ticks_.value_" }, // atomic: NIL public: (NIL NIL NIL) fixable: NIL good-name: T
// Stamp = clasp_ffi::ForeignTypeSpec_O/951
{ class_kind, STAMP_clasp_ffi__ForeignTypeSpec_O, sizeof(clasp_ffi::ForeignTypeSpec_O), 0, "clasp_ffi::ForeignTypeSpec_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Symbol_O>" :SPECIALIZER "class core::Symbol_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Symbol_O>), offsetof(SAFE_TYPE_MACRO(clasp_ffi::ForeignTypeSpec_O),m_lisp_symbol), "m_lisp_symbol" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Array_O>" :SPECIALIZER "class core::Array_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Array_O>), offsetof(SAFE_TYPE_MACRO(clasp_ffi::ForeignTypeSpec_O),m_lisp_name), "m_lisp_name" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Integer_O>" :SPECIALIZER "class core::Integer_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Integer_O>), offsetof(SAFE_TYPE_MACRO(clasp_ffi::ForeignTypeSpec_O),m_size), "m_size" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Fixnum_I>" :SPECIALIZER "class core::Fixnum_I")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Fixnum_I>), offsetof(SAFE_TYPE_MACRO(clasp_ffi::ForeignTypeSpec_O),m_alignment), "m_alignment" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Array_O>" :SPECIALIZER "class core::Array_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Array_O>), offsetof(SAFE_TYPE_MACRO(clasp_ffi::ForeignTypeSpec_O),m_cxx_name), "m_cxx_name" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Function_O>" :SPECIALIZER "class core::Function_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Function_O>), offsetof(SAFE_TYPE_MACRO(clasp_ffi::ForeignTypeSpec_O),m_llvm_type_symbol_fn), "m_llvm_type_symbol_fn" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Array_O>" :SPECIALIZER "class core::Array_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Array_O>), offsetof(SAFE_TYPE_MACRO(clasp_ffi::ForeignTypeSpec_O),m_to_object_fn_name), "m_to_object_fn_name" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Array_O>" :SPECIALIZER "class core::Array_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Array_O>), offsetof(SAFE_TYPE_MACRO(clasp_ffi::ForeignTypeSpec_O),m_from_object_fn_name), "m_from_object_fn_name" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<clasp_ffi::ForeignData_O>" :SPECIALIZER "class clasp_ffi::ForeignData_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<clasp_ffi::ForeignData_O>), offsetof(SAFE_TYPE_MACRO(clasp_ffi::ForeignTypeSpec_O),m_to_object_fn_ptr), "m_to_object_fn_ptr" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<clasp_ffi::ForeignData_O>" :SPECIALIZER "class clasp_ffi::ForeignData_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<clasp_ffi::ForeignData_O>), offsetof(SAFE_TYPE_MACRO(clasp_ffi::ForeignTypeSpec_O),m_from_object_fn_ptr), "m_from_object_fn_ptr" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// Stamp = core::Instance_O/953
{ class_kind, STAMP_core__Instance_O, sizeof(core::Instance_O), 0, "core::Instance_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::Instance_O),_Sig), "_Sig" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Instance_O>" :SPECIALIZER "class core::Instance_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(core::Instance_O),_Class), "_Class" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Rack_O>" :SPECIALIZER "class core::Rack_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Rack_O>), offsetof(SAFE_TYPE_MACRO(core::Instance_O),_Rack), "_Rack" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// Stamp = core::DerivableCxxObject_O/956
{ class_kind, STAMP_core__DerivableCxxObject_O, sizeof(core::DerivableCxxObject_O), 0, "core::DerivableCxxObject_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::DerivableCxxObject_O),_Sig), "_Sig" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Instance_O>" :SPECIALIZER "class core::Instance_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(core::DerivableCxxObject_O),_Class), "_Class" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Rack_O>" :SPECIALIZER "class core::Rack_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Rack_O>), offsetof(SAFE_TYPE_MACRO(core::DerivableCxxObject_O),_Rack), "_Rack" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// Stamp = clbind::ClassRep_O/961
{ class_kind, STAMP_clbind__ClassRep_O, sizeof(clbind::ClassRep_O), 0, "clbind::ClassRep_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(clbind::ClassRep_O),_Sig), "_Sig" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Instance_O>" :SPECIALIZER "class core::Instance_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(clbind::ClassRep_O),_Class), "_Class" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Rack_O>" :SPECIALIZER "class core::Rack_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Rack_O>), offsetof(SAFE_TYPE_MACRO(clbind::ClassRep_O),_Rack), "_Rack" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: "GCVector"
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::Vec0<gctools::smart_ptr<core::Cons_O>>" :NAME "Vec0" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Cons_O>" :SPECIALIZER "class core::Cons_O") :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::GCVector<gctools::smart_ptr<core::Cons_O>,gctools::GCContainerAllocator<gctools::GCVector_moveable<gctools::smart_ptr<core::Cons_O>>>>" :NAME "GCVector" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Cons_O>" :SPECIALIZER "class core::Cons_O") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::GCContainerAllocator<gctools::GCVector_moveable<gctools::smart_ptr<core::Cons_O>>>" :NAME "GCContainerAllocator" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::GCVECTOR-MOVEABLE-CTYPE :KEY "gctools::GCVector_moveable<gctools::smart_ptr<core::Cons_O>>" :NAME "GCVector_moveable" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Cons_O>" :SPECIALIZER "class core::Cons_O") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::TAGGED-POINTER-CTYPE :KEY "gctools::tagged_pointer<gctools::GCVector_moveable<gctools::smart_ptr<core::Cons_O>>>" :SPECIALIZER "class gctools::GCVector_moveable<class gctools::smart_ptr<core::Cons_O> >")
 {  fixed_field, TAGGED_POINTER_OFFSET, sizeof(gctools::tagged_pointer<gctools::GCVector_moveable<gctools::smart_ptr<core::Cons_O>>>), offsetof(SAFE_TYPE_MACRO(clbind::ClassRep_O),m_bases._Vector._Contents), "m_bases._Vector._Contents" }, // atomic: NIL public: (T T T) fixable: TAGGED-POINTER-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: "basic_string"
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>" :NAME "basic_string" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::char_traits<char>" :NAME "char_traits" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 2 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::allocator<char>" :NAME "allocator" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(clbind::ClassRep_O),m_name._M_string_length), "m_name._M_string_length" }, // atomic: NIL public: (T NIL) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>" :NAME "basic_string" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::char_traits<char>" :NAME "char_traits" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 2 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::allocator<char>" :NAME "allocator" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::(anonymous)" :NAME "")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(clbind::ClassRep_O),m_name.NO-NAME._M_allocated_capacity), "m_name.NO-NAME._M_allocated_capacity" }, // atomic: NIL public: (T NIL T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "_Bool")
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(clbind::ClassRep_O),m_derivable), "m_derivable" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// Stamp = core::SmallMap_O/967
{ class_kind, STAMP_core__SmallMap_O, sizeof(core::SmallMap_O), 0, "core::SmallMap_O" },
// second-last-field is-atomic atomic: NIL  name: "SmallMap"
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::SmallMap<gctools::smart_ptr<core::T_O>,gctools::smart_ptr<core::T_O>>" :NAME "SmallMap" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O") :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::TAGGED-POINTER-CTYPE :KEY "gctools::tagged_pointer<gctools::GCVector_moveable<std::pair<gctools::smart_ptr<core::T_O>,gctools::smart_ptr<core::T_O>>>>" :SPECIALIZER "class gctools::GCVector_moveable<struct std::pair<class gctools::smart_ptr<core::T_O>, class gctools::smart_ptr<core::T_O> > >")
 {  fixed_field, TAGGED_POINTER_OFFSET, sizeof(gctools::tagged_pointer<gctools::GCVector_moveable<std::pair<gctools::smart_ptr<core::T_O>,gctools::smart_ptr<core::T_O>>>>), offsetof(SAFE_TYPE_MACRO(core::SmallMap_O),map._Contents), "map._Contents" }, // atomic: NIL public: (NIL T) fixable: TAGGED-POINTER-FIX good-name: T
// Stamp = mpip::Mpi_O/971
{ class_kind, STAMP_mpip__Mpi_O, sizeof(mpip::Mpi_O), 0, "mpip::Mpi_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(mpip::Mpi_O),_LastReturnCode), "_LastReturnCode" }, // atomic: NIL public: (NIL) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(mpip::Mpi_O),_Source), "_Source" }, // atomic: NIL public: (NIL) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(mpip::Mpi_O),_Tag), "_Tag" }, // atomic: NIL public: (NIL) fixable: NIL good-name: T
// Stamp = core::ExternalObject_O/975
{ class_kind, STAMP_core__ExternalObject_O, sizeof(core::ExternalObject_O), 0, "core::ExternalObject_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Instance_O>" :SPECIALIZER "class core::Instance_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(core::ExternalObject_O),_Class), "_Class" }, // atomic: NIL public: (NIL) fixable: SMART-PTR-FIX good-name: T
// Stamp = llvmo::Pass_O/979
{ class_kind, STAMP_llvmo__Pass_O, sizeof(llvmo::Pass_O), 0, "llvmo::Pass_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Instance_O>" :SPECIALIZER "class core::Instance_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::Pass_O),_Class), "_Class" }, // atomic: NIL public: (NIL) fixable: SMART-PTR-FIX good-name: T
// Stamp = llvmo::ModulePass_O/983
{ class_kind, STAMP_llvmo__ModulePass_O, sizeof(llvmo::ModulePass_O), 0, "llvmo::ModulePass_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Instance_O>" :SPECIALIZER "class core::Instance_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::ModulePass_O),_Class), "_Class" }, // atomic: NIL public: (NIL) fixable: SMART-PTR-FIX good-name: T
// Stamp = llvmo::ImmutablePass_O/987
{ class_kind, STAMP_llvmo__ImmutablePass_O, sizeof(llvmo::ImmutablePass_O), 0, "llvmo::ImmutablePass_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Instance_O>" :SPECIALIZER "class core::Instance_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::ImmutablePass_O),_Class), "_Class" }, // atomic: NIL public: (NIL) fixable: SMART-PTR-FIX good-name: T
// Stamp = llvmo::TargetLibraryInfoWrapperPass_O/991
{ class_kind, STAMP_llvmo__TargetLibraryInfoWrapperPass_O, sizeof(llvmo::TargetLibraryInfoWrapperPass_O), 0, "llvmo::TargetLibraryInfoWrapperPass_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Instance_O>" :SPECIALIZER "class core::Instance_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::TargetLibraryInfoWrapperPass_O),_Class), "_Class" }, // atomic: NIL public: (NIL) fixable: SMART-PTR-FIX good-name: T
// Stamp = llvmo::FunctionPass_O/995
{ class_kind, STAMP_llvmo__FunctionPass_O, sizeof(llvmo::FunctionPass_O), 0, "llvmo::FunctionPass_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Instance_O>" :SPECIALIZER "class core::Instance_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::FunctionPass_O),_Class), "_Class" }, // atomic: NIL public: (NIL) fixable: SMART-PTR-FIX good-name: T
// Stamp = llvmo::ExecutionEngine_O/999
{ class_kind, STAMP_llvmo__ExecutionEngine_O, sizeof(llvmo::ExecutionEngine_O), 0, "llvmo::ExecutionEngine_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Instance_O>" :SPECIALIZER "class core::Instance_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::ExecutionEngine_O),_Class), "_Class" }, // atomic: NIL public: (NIL) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::HashTableEqual_O>" :SPECIALIZER "class core::HashTableEqual_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::HashTableEqual_O>), offsetof(SAFE_TYPE_MACRO(llvmo::ExecutionEngine_O),_DependentModules), "_DependentModules" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// Stamp = llvmo::MCSubtargetInfo_O/1003
{ class_kind, STAMP_llvmo__MCSubtargetInfo_O, sizeof(llvmo::MCSubtargetInfo_O), 0, "llvmo::MCSubtargetInfo_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Instance_O>" :SPECIALIZER "class core::Instance_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::MCSubtargetInfo_O),_Class), "_Class" }, // atomic: NIL public: (NIL) fixable: SMART-PTR-FIX good-name: T
// Stamp = llvmo::TargetSubtargetInfo_O/1007
{ class_kind, STAMP_llvmo__TargetSubtargetInfo_O, sizeof(llvmo::TargetSubtargetInfo_O), 0, "llvmo::TargetSubtargetInfo_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Instance_O>" :SPECIALIZER "class core::Instance_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::TargetSubtargetInfo_O),_Class), "_Class" }, // atomic: NIL public: (NIL) fixable: SMART-PTR-FIX good-name: T
// Stamp = llvmo::Type_O/1011
{ class_kind, STAMP_llvmo__Type_O, sizeof(llvmo::Type_O), 0, "llvmo::Type_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Instance_O>" :SPECIALIZER "class core::Instance_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::Type_O),_Class), "_Class" }, // atomic: NIL public: (NIL) fixable: SMART-PTR-FIX good-name: T
// Stamp = llvmo::FunctionType_O/1015
{ class_kind, STAMP_llvmo__FunctionType_O, sizeof(llvmo::FunctionType_O), 0, "llvmo::FunctionType_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Instance_O>" :SPECIALIZER "class core::Instance_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::FunctionType_O),_Class), "_Class" }, // atomic: NIL public: (NIL) fixable: SMART-PTR-FIX good-name: T
// Stamp = llvmo::CompositeType_O/1019
{ class_kind, STAMP_llvmo__CompositeType_O, sizeof(llvmo::CompositeType_O), 0, "llvmo::CompositeType_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Instance_O>" :SPECIALIZER "class core::Instance_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::CompositeType_O),_Class), "_Class" }, // atomic: NIL public: (NIL) fixable: SMART-PTR-FIX good-name: T
// Stamp = llvmo::SequentialType_O/1023
{ class_kind, STAMP_llvmo__SequentialType_O, sizeof(llvmo::SequentialType_O), 0, "llvmo::SequentialType_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Instance_O>" :SPECIALIZER "class core::Instance_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::SequentialType_O),_Class), "_Class" }, // atomic: NIL public: (NIL) fixable: SMART-PTR-FIX good-name: T
// Stamp = llvmo::PointerType_O/1027
{ class_kind, STAMP_llvmo__PointerType_O, sizeof(llvmo::PointerType_O), 0, "llvmo::PointerType_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Instance_O>" :SPECIALIZER "class core::Instance_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::PointerType_O),_Class), "_Class" }, // atomic: NIL public: (NIL) fixable: SMART-PTR-FIX good-name: T
// Stamp = llvmo::ArrayType_O/1031
{ class_kind, STAMP_llvmo__ArrayType_O, sizeof(llvmo::ArrayType_O), 0, "llvmo::ArrayType_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Instance_O>" :SPECIALIZER "class core::Instance_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::ArrayType_O),_Class), "_Class" }, // atomic: NIL public: (NIL) fixable: SMART-PTR-FIX good-name: T
// Stamp = llvmo::VectorType_O/1035
{ class_kind, STAMP_llvmo__VectorType_O, sizeof(llvmo::VectorType_O), 0, "llvmo::VectorType_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Instance_O>" :SPECIALIZER "class core::Instance_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::VectorType_O),_Class), "_Class" }, // atomic: NIL public: (NIL) fixable: SMART-PTR-FIX good-name: T
// Stamp = llvmo::StructType_O/1039
{ class_kind, STAMP_llvmo__StructType_O, sizeof(llvmo::StructType_O), 0, "llvmo::StructType_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Instance_O>" :SPECIALIZER "class core::Instance_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::StructType_O),_Class), "_Class" }, // atomic: NIL public: (NIL) fixable: SMART-PTR-FIX good-name: T
// Stamp = llvmo::IntegerType_O/1043
{ class_kind, STAMP_llvmo__IntegerType_O, sizeof(llvmo::IntegerType_O), 0, "llvmo::IntegerType_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Instance_O>" :SPECIALIZER "class core::Instance_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::IntegerType_O),_Class), "_Class" }, // atomic: NIL public: (NIL) fixable: SMART-PTR-FIX good-name: T
// Stamp = llvmo::JITDylib_O/1047
{ class_kind, STAMP_llvmo__JITDylib_O, sizeof(llvmo::JITDylib_O), 0, "llvmo::JITDylib_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Instance_O>" :SPECIALIZER "class core::Instance_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::JITDylib_O),_Class), "_Class" }, // atomic: NIL public: (NIL) fixable: SMART-PTR-FIX good-name: T
// Stamp = llvmo::DIContext_O/1051
{ class_kind, STAMP_llvmo__DIContext_O, sizeof(llvmo::DIContext_O), 0, "llvmo::DIContext_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Instance_O>" :SPECIALIZER "class core::Instance_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::DIContext_O),_Class), "_Class" }, // atomic: NIL public: (NIL) fixable: SMART-PTR-FIX good-name: T
// Stamp = llvmo::TargetPassConfig_O/1055
{ class_kind, STAMP_llvmo__TargetPassConfig_O, sizeof(llvmo::TargetPassConfig_O), 0, "llvmo::TargetPassConfig_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Instance_O>" :SPECIALIZER "class core::Instance_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::TargetPassConfig_O),_Class), "_Class" }, // atomic: NIL public: (NIL) fixable: SMART-PTR-FIX good-name: T
// Stamp = llvmo::IRBuilderBase_O/1059
{ class_kind, STAMP_llvmo__IRBuilderBase_O, sizeof(llvmo::IRBuilderBase_O), 0, "llvmo::IRBuilderBase_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Instance_O>" :SPECIALIZER "class core::Instance_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::IRBuilderBase_O),_Class), "_Class" }, // atomic: NIL public: (NIL) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PROTECTED   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "_Bool")
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(llvmo::IRBuilderBase_O),_CurrentDebugLocationSet), "_CurrentDebugLocationSet" }, // atomic: NIL public: (NIL) fixable: NIL good-name: T
// Stamp = llvmo::IRBuilder_O/1063
{ class_kind, STAMP_llvmo__IRBuilder_O, sizeof(llvmo::IRBuilder_O), 0, "llvmo::IRBuilder_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Instance_O>" :SPECIALIZER "class core::Instance_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::IRBuilder_O),_Class), "_Class" }, // atomic: NIL public: (NIL) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PROTECTED   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "_Bool")
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(llvmo::IRBuilder_O),_CurrentDebugLocationSet), "_CurrentDebugLocationSet" }, // atomic: NIL public: (NIL) fixable: NIL good-name: T
// Stamp = llvmo::APFloat_O/1067
{ class_kind, STAMP_llvmo__APFloat_O, sizeof(llvmo::APFloat_O), 0, "llvmo::APFloat_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Instance_O>" :SPECIALIZER "class core::Instance_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::APFloat_O),_Class), "_Class" }, // atomic: NIL public: (NIL) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "llvm::APFloat" :NAME "APFloat")
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "llvm::APFloat::Storage" :NAME "Storage")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "llvm::detail::IEEEFloat" :NAME "IEEEFloat")
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "llvm::detail::IEEEFloat::Significand" :NAME "Significand")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(llvmo::APFloat_O),_value.U.IEEE.significand.part), "_value.U.IEEE.significand.part" }, // atomic: NIL public: (T NIL T NIL T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "llvm::APFloat" :NAME "APFloat")
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "llvm::APFloat::Storage" :NAME "Storage")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "llvm::detail::IEEEFloat" :NAME "IEEEFloat")
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "short")
// not-exposing {  fixed_field, ctype_short, sizeof(short), offsetof(SAFE_TYPE_MACRO(llvmo::APFloat_O),_value.U.IEEE.exponent), "_value.U.IEEE.exponent" }, // atomic: NIL public: (T NIL T NIL) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "llvm::APFloat" :NAME "APFloat")
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "llvm::APFloat::Storage" :NAME "Storage")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "llvm::detail::IEEEFloat" :NAME "IEEEFloat")
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned int")
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(llvmo::APFloat_O),_value.U.IEEE.sign), "_value.U.IEEE.sign" }, // atomic: NIL public: (T NIL T NIL) fixable: NIL good-name: T
// Stamp = llvmo::APInt_O/1071
{ class_kind, STAMP_llvmo__APInt_O, sizeof(llvmo::APInt_O), 0, "llvmo::APInt_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Instance_O>" :SPECIALIZER "class core::Instance_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::APInt_O),_Class), "_Class" }, // atomic: NIL public: (NIL) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "llvm::APInt" :NAME "APInt")
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "llvm::APInt::(anonymous)" :NAME "")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(llvmo::APInt_O),_value.U.VAL), "_value.U.VAL" }, // atomic: NIL public: (T NIL T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "llvm::APInt" :NAME "APInt")
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned int")
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(llvmo::APInt_O),_value.BitWidth), "_value.BitWidth" }, // atomic: NIL public: (T NIL) fixable: NIL good-name: T
// Stamp = llvmo::DIBuilder_O/1075
{ class_kind, STAMP_llvmo__DIBuilder_O, sizeof(llvmo::DIBuilder_O), 0, "llvmo::DIBuilder_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Instance_O>" :SPECIALIZER "class core::Instance_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::DIBuilder_O),_Class), "_Class" }, // atomic: NIL public: (NIL) fixable: SMART-PTR-FIX good-name: T
// Stamp = llvmo::SectionedAddress_O/1079
{ class_kind, STAMP_llvmo__SectionedAddress_O, sizeof(llvmo::SectionedAddress_O), 0, "llvmo::SectionedAddress_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Instance_O>" :SPECIALIZER "class core::Instance_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::SectionedAddress_O),_Class), "_Class" }, // atomic: NIL public: (NIL) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "llvm::object::SectionedAddress" :NAME "SectionedAddress")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(llvmo::SectionedAddress_O),_value.Address), "_value.Address" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "llvm::object::SectionedAddress" :NAME "SectionedAddress")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(llvmo::SectionedAddress_O),_value.SectionIndex), "_value.SectionIndex" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
// Stamp = llvmo::EngineBuilder_O/1083
{ class_kind, STAMP_llvmo__EngineBuilder_O, sizeof(llvmo::EngineBuilder_O), 0, "llvmo::EngineBuilder_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Instance_O>" :SPECIALIZER "class core::Instance_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::EngineBuilder_O),_Class), "_Class" }, // atomic: NIL public: (NIL) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: "basic_string"
// (instance-field-access iv) -> AST-TOOLING:AS-PROTECTED   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>" :NAME "basic_string" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::char_traits<char>" :NAME "char_traits" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 2 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::allocator<char>" :NAME "allocator" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(llvmo::EngineBuilder_O),_ErrorStr._M_string_length), "_ErrorStr._M_string_length" }, // atomic: NIL public: (NIL NIL) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PROTECTED   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>" :NAME "basic_string" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::char_traits<char>" :NAME "char_traits" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 2 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::allocator<char>" :NAME "allocator" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::(anonymous)" :NAME "")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(llvmo::EngineBuilder_O),_ErrorStr.NO-NAME._M_allocated_capacity), "_ErrorStr.NO-NAME._M_allocated_capacity" }, // atomic: NIL public: (NIL NIL T) fixable: NIL good-name: T
// Stamp = llvmo::PassManagerBase_O/1087
{ class_kind, STAMP_llvmo__PassManagerBase_O, sizeof(llvmo::PassManagerBase_O), 0, "llvmo::PassManagerBase_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Instance_O>" :SPECIALIZER "class core::Instance_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::PassManagerBase_O),_Class), "_Class" }, // atomic: NIL public: (NIL) fixable: SMART-PTR-FIX good-name: T
// Stamp = llvmo::PassManager_O/1091
{ class_kind, STAMP_llvmo__PassManager_O, sizeof(llvmo::PassManager_O), 0, "llvmo::PassManager_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Instance_O>" :SPECIALIZER "class core::Instance_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::PassManager_O),_Class), "_Class" }, // atomic: NIL public: (NIL) fixable: SMART-PTR-FIX good-name: T
// Stamp = llvmo::FunctionPassManager_O/1095
{ class_kind, STAMP_llvmo__FunctionPassManager_O, sizeof(llvmo::FunctionPassManager_O), 0, "llvmo::FunctionPassManager_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Instance_O>" :SPECIALIZER "class core::Instance_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::FunctionPassManager_O),_Class), "_Class" }, // atomic: NIL public: (NIL) fixable: SMART-PTR-FIX good-name: T
// Stamp = llvmo::Metadata_O/1099
{ class_kind, STAMP_llvmo__Metadata_O, sizeof(llvmo::Metadata_O), 0, "llvmo::Metadata_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Instance_O>" :SPECIALIZER "class core::Instance_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::Metadata_O),_Class), "_Class" }, // atomic: NIL public: (NIL) fixable: SMART-PTR-FIX good-name: T
// Stamp = llvmo::MDNode_O/1103
{ class_kind, STAMP_llvmo__MDNode_O, sizeof(llvmo::MDNode_O), 0, "llvmo::MDNode_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Instance_O>" :SPECIALIZER "class core::Instance_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::MDNode_O),_Class), "_Class" }, // atomic: NIL public: (NIL) fixable: SMART-PTR-FIX good-name: T
// Stamp = llvmo::DINode_O/1107
{ class_kind, STAMP_llvmo__DINode_O, sizeof(llvmo::DINode_O), 0, "llvmo::DINode_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Instance_O>" :SPECIALIZER "class core::Instance_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::DINode_O),_Class), "_Class" }, // atomic: NIL public: (NIL) fixable: SMART-PTR-FIX good-name: T
// Stamp = llvmo::DIVariable_O/1111
{ class_kind, STAMP_llvmo__DIVariable_O, sizeof(llvmo::DIVariable_O), 0, "llvmo::DIVariable_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Instance_O>" :SPECIALIZER "class core::Instance_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::DIVariable_O),_Class), "_Class" }, // atomic: NIL public: (NIL) fixable: SMART-PTR-FIX good-name: T
// Stamp = llvmo::DILocalVariable_O/1115
{ class_kind, STAMP_llvmo__DILocalVariable_O, sizeof(llvmo::DILocalVariable_O), 0, "llvmo::DILocalVariable_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Instance_O>" :SPECIALIZER "class core::Instance_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::DILocalVariable_O),_Class), "_Class" }, // atomic: NIL public: (NIL) fixable: SMART-PTR-FIX good-name: T
// Stamp = llvmo::DIScope_O/1119
{ class_kind, STAMP_llvmo__DIScope_O, sizeof(llvmo::DIScope_O), 0, "llvmo::DIScope_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Instance_O>" :SPECIALIZER "class core::Instance_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::DIScope_O),_Class), "_Class" }, // atomic: NIL public: (NIL) fixable: SMART-PTR-FIX good-name: T
// Stamp = llvmo::DIFile_O/1123
{ class_kind, STAMP_llvmo__DIFile_O, sizeof(llvmo::DIFile_O), 0, "llvmo::DIFile_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Instance_O>" :SPECIALIZER "class core::Instance_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::DIFile_O),_Class), "_Class" }, // atomic: NIL public: (NIL) fixable: SMART-PTR-FIX good-name: T
// Stamp = llvmo::DIType_O/1127
{ class_kind, STAMP_llvmo__DIType_O, sizeof(llvmo::DIType_O), 0, "llvmo::DIType_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Instance_O>" :SPECIALIZER "class core::Instance_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::DIType_O),_Class), "_Class" }, // atomic: NIL public: (NIL) fixable: SMART-PTR-FIX good-name: T
// Stamp = llvmo::DICompositeType_O/1131
{ class_kind, STAMP_llvmo__DICompositeType_O, sizeof(llvmo::DICompositeType_O), 0, "llvmo::DICompositeType_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Instance_O>" :SPECIALIZER "class core::Instance_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::DICompositeType_O),_Class), "_Class" }, // atomic: NIL public: (NIL) fixable: SMART-PTR-FIX good-name: T
// Stamp = llvmo::DIDerivedType_O/1135
{ class_kind, STAMP_llvmo__DIDerivedType_O, sizeof(llvmo::DIDerivedType_O), 0, "llvmo::DIDerivedType_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Instance_O>" :SPECIALIZER "class core::Instance_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::DIDerivedType_O),_Class), "_Class" }, // atomic: NIL public: (NIL) fixable: SMART-PTR-FIX good-name: T
// Stamp = llvmo::DIBasicType_O/1139
{ class_kind, STAMP_llvmo__DIBasicType_O, sizeof(llvmo::DIBasicType_O), 0, "llvmo::DIBasicType_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Instance_O>" :SPECIALIZER "class core::Instance_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::DIBasicType_O),_Class), "_Class" }, // atomic: NIL public: (NIL) fixable: SMART-PTR-FIX good-name: T
// Stamp = llvmo::DISubroutineType_O/1143
{ class_kind, STAMP_llvmo__DISubroutineType_O, sizeof(llvmo::DISubroutineType_O), 0, "llvmo::DISubroutineType_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Instance_O>" :SPECIALIZER "class core::Instance_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::DISubroutineType_O),_Class), "_Class" }, // atomic: NIL public: (NIL) fixable: SMART-PTR-FIX good-name: T
// Stamp = llvmo::DILocalScope_O/1147
{ class_kind, STAMP_llvmo__DILocalScope_O, sizeof(llvmo::DILocalScope_O), 0, "llvmo::DILocalScope_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Instance_O>" :SPECIALIZER "class core::Instance_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::DILocalScope_O),_Class), "_Class" }, // atomic: NIL public: (NIL) fixable: SMART-PTR-FIX good-name: T
// Stamp = llvmo::DISubprogram_O/1151
{ class_kind, STAMP_llvmo__DISubprogram_O, sizeof(llvmo::DISubprogram_O), 0, "llvmo::DISubprogram_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Instance_O>" :SPECIALIZER "class core::Instance_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::DISubprogram_O),_Class), "_Class" }, // atomic: NIL public: (NIL) fixable: SMART-PTR-FIX good-name: T
// Stamp = llvmo::DILexicalBlockBase_O/1155
{ class_kind, STAMP_llvmo__DILexicalBlockBase_O, sizeof(llvmo::DILexicalBlockBase_O), 0, "llvmo::DILexicalBlockBase_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Instance_O>" :SPECIALIZER "class core::Instance_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::DILexicalBlockBase_O),_Class), "_Class" }, // atomic: NIL public: (NIL) fixable: SMART-PTR-FIX good-name: T
// Stamp = llvmo::DILexicalBlock_O/1159
{ class_kind, STAMP_llvmo__DILexicalBlock_O, sizeof(llvmo::DILexicalBlock_O), 0, "llvmo::DILexicalBlock_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Instance_O>" :SPECIALIZER "class core::Instance_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::DILexicalBlock_O),_Class), "_Class" }, // atomic: NIL public: (NIL) fixable: SMART-PTR-FIX good-name: T
// Stamp = llvmo::DICompileUnit_O/1163
{ class_kind, STAMP_llvmo__DICompileUnit_O, sizeof(llvmo::DICompileUnit_O), 0, "llvmo::DICompileUnit_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Instance_O>" :SPECIALIZER "class core::Instance_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::DICompileUnit_O),_Class), "_Class" }, // atomic: NIL public: (NIL) fixable: SMART-PTR-FIX good-name: T
// Stamp = llvmo::DIExpression_O/1167
{ class_kind, STAMP_llvmo__DIExpression_O, sizeof(llvmo::DIExpression_O), 0, "llvmo::DIExpression_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Instance_O>" :SPECIALIZER "class core::Instance_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::DIExpression_O),_Class), "_Class" }, // atomic: NIL public: (NIL) fixable: SMART-PTR-FIX good-name: T
// Stamp = llvmo::DILocation_O/1171
{ class_kind, STAMP_llvmo__DILocation_O, sizeof(llvmo::DILocation_O), 0, "llvmo::DILocation_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Instance_O>" :SPECIALIZER "class core::Instance_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::DILocation_O),_Class), "_Class" }, // atomic: NIL public: (NIL) fixable: SMART-PTR-FIX good-name: T
// Stamp = llvmo::ValueAsMetadata_O/1175
{ class_kind, STAMP_llvmo__ValueAsMetadata_O, sizeof(llvmo::ValueAsMetadata_O), 0, "llvmo::ValueAsMetadata_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Instance_O>" :SPECIALIZER "class core::Instance_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::ValueAsMetadata_O),_Class), "_Class" }, // atomic: NIL public: (NIL) fixable: SMART-PTR-FIX good-name: T
// Stamp = llvmo::MDString_O/1179
{ class_kind, STAMP_llvmo__MDString_O, sizeof(llvmo::MDString_O), 0, "llvmo::MDString_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Instance_O>" :SPECIALIZER "class core::Instance_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::MDString_O),_Class), "_Class" }, // atomic: NIL public: (NIL) fixable: SMART-PTR-FIX good-name: T
// Stamp = llvmo::Value_O/1183
{ class_kind, STAMP_llvmo__Value_O, sizeof(llvmo::Value_O), 0, "llvmo::Value_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Instance_O>" :SPECIALIZER "class core::Instance_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::Value_O),_Class), "_Class" }, // atomic: NIL public: (NIL) fixable: SMART-PTR-FIX good-name: T
// Stamp = llvmo::Argument_O/1187
{ class_kind, STAMP_llvmo__Argument_O, sizeof(llvmo::Argument_O), 0, "llvmo::Argument_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Instance_O>" :SPECIALIZER "class core::Instance_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::Argument_O),_Class), "_Class" }, // atomic: NIL public: (NIL) fixable: SMART-PTR-FIX good-name: T
// Stamp = llvmo::BasicBlock_O/1191
{ class_kind, STAMP_llvmo__BasicBlock_O, sizeof(llvmo::BasicBlock_O), 0, "llvmo::BasicBlock_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Instance_O>" :SPECIALIZER "class core::Instance_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::BasicBlock_O),_Class), "_Class" }, // atomic: NIL public: (NIL) fixable: SMART-PTR-FIX good-name: T
// Stamp = llvmo::MetadataAsValue_O/1195
{ class_kind, STAMP_llvmo__MetadataAsValue_O, sizeof(llvmo::MetadataAsValue_O), 0, "llvmo::MetadataAsValue_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Instance_O>" :SPECIALIZER "class core::Instance_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::MetadataAsValue_O),_Class), "_Class" }, // atomic: NIL public: (NIL) fixable: SMART-PTR-FIX good-name: T
// Stamp = llvmo::User_O/1199
{ class_kind, STAMP_llvmo__User_O, sizeof(llvmo::User_O), 0, "llvmo::User_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Instance_O>" :SPECIALIZER "class core::Instance_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::User_O),_Class), "_Class" }, // atomic: NIL public: (NIL) fixable: SMART-PTR-FIX good-name: T
// Stamp = llvmo::Instruction_O/1203
{ class_kind, STAMP_llvmo__Instruction_O, sizeof(llvmo::Instruction_O), 0, "llvmo::Instruction_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Instance_O>" :SPECIALIZER "class core::Instance_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::Instruction_O),_Class), "_Class" }, // atomic: NIL public: (NIL) fixable: SMART-PTR-FIX good-name: T
// Stamp = llvmo::UnaryInstruction_O/1207
{ class_kind, STAMP_llvmo__UnaryInstruction_O, sizeof(llvmo::UnaryInstruction_O), 0, "llvmo::UnaryInstruction_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Instance_O>" :SPECIALIZER "class core::Instance_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::UnaryInstruction_O),_Class), "_Class" }, // atomic: NIL public: (NIL) fixable: SMART-PTR-FIX good-name: T
// Stamp = llvmo::VAArgInst_O/1211
{ class_kind, STAMP_llvmo__VAArgInst_O, sizeof(llvmo::VAArgInst_O), 0, "llvmo::VAArgInst_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Instance_O>" :SPECIALIZER "class core::Instance_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::VAArgInst_O),_Class), "_Class" }, // atomic: NIL public: (NIL) fixable: SMART-PTR-FIX good-name: T
// Stamp = llvmo::LoadInst_O/1215
{ class_kind, STAMP_llvmo__LoadInst_O, sizeof(llvmo::LoadInst_O), 0, "llvmo::LoadInst_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Instance_O>" :SPECIALIZER "class core::Instance_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::LoadInst_O),_Class), "_Class" }, // atomic: NIL public: (NIL) fixable: SMART-PTR-FIX good-name: T
// Stamp = llvmo::AllocaInst_O/1219
{ class_kind, STAMP_llvmo__AllocaInst_O, sizeof(llvmo::AllocaInst_O), 0, "llvmo::AllocaInst_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Instance_O>" :SPECIALIZER "class core::Instance_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::AllocaInst_O),_Class), "_Class" }, // atomic: NIL public: (NIL) fixable: SMART-PTR-FIX good-name: T
// Stamp = llvmo::SwitchInst_O/1223
{ class_kind, STAMP_llvmo__SwitchInst_O, sizeof(llvmo::SwitchInst_O), 0, "llvmo::SwitchInst_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Instance_O>" :SPECIALIZER "class core::Instance_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::SwitchInst_O),_Class), "_Class" }, // atomic: NIL public: (NIL) fixable: SMART-PTR-FIX good-name: T
// Stamp = llvmo::AtomicRMWInst_O/1227
{ class_kind, STAMP_llvmo__AtomicRMWInst_O, sizeof(llvmo::AtomicRMWInst_O), 0, "llvmo::AtomicRMWInst_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Instance_O>" :SPECIALIZER "class core::Instance_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::AtomicRMWInst_O),_Class), "_Class" }, // atomic: NIL public: (NIL) fixable: SMART-PTR-FIX good-name: T
// Stamp = llvmo::LandingPadInst_O/1231
{ class_kind, STAMP_llvmo__LandingPadInst_O, sizeof(llvmo::LandingPadInst_O), 0, "llvmo::LandingPadInst_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Instance_O>" :SPECIALIZER "class core::Instance_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::LandingPadInst_O),_Class), "_Class" }, // atomic: NIL public: (NIL) fixable: SMART-PTR-FIX good-name: T
// Stamp = llvmo::StoreInst_O/1235
{ class_kind, STAMP_llvmo__StoreInst_O, sizeof(llvmo::StoreInst_O), 0, "llvmo::StoreInst_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Instance_O>" :SPECIALIZER "class core::Instance_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::StoreInst_O),_Class), "_Class" }, // atomic: NIL public: (NIL) fixable: SMART-PTR-FIX good-name: T
// Stamp = llvmo::UnreachableInst_O/1239
{ class_kind, STAMP_llvmo__UnreachableInst_O, sizeof(llvmo::UnreachableInst_O), 0, "llvmo::UnreachableInst_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Instance_O>" :SPECIALIZER "class core::Instance_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::UnreachableInst_O),_Class), "_Class" }, // atomic: NIL public: (NIL) fixable: SMART-PTR-FIX good-name: T
// Stamp = llvmo::ReturnInst_O/1243
{ class_kind, STAMP_llvmo__ReturnInst_O, sizeof(llvmo::ReturnInst_O), 0, "llvmo::ReturnInst_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Instance_O>" :SPECIALIZER "class core::Instance_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::ReturnInst_O),_Class), "_Class" }, // atomic: NIL public: (NIL) fixable: SMART-PTR-FIX good-name: T
// Stamp = llvmo::ResumeInst_O/1247
{ class_kind, STAMP_llvmo__ResumeInst_O, sizeof(llvmo::ResumeInst_O), 0, "llvmo::ResumeInst_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Instance_O>" :SPECIALIZER "class core::Instance_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::ResumeInst_O),_Class), "_Class" }, // atomic: NIL public: (NIL) fixable: SMART-PTR-FIX good-name: T
// Stamp = llvmo::AtomicCmpXchgInst_O/1251
{ class_kind, STAMP_llvmo__AtomicCmpXchgInst_O, sizeof(llvmo::AtomicCmpXchgInst_O), 0, "llvmo::AtomicCmpXchgInst_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Instance_O>" :SPECIALIZER "class core::Instance_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::AtomicCmpXchgInst_O),_Class), "_Class" }, // atomic: NIL public: (NIL) fixable: SMART-PTR-FIX good-name: T
// Stamp = llvmo::FenceInst_O/1255
{ class_kind, STAMP_llvmo__FenceInst_O, sizeof(llvmo::FenceInst_O), 0, "llvmo::FenceInst_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Instance_O>" :SPECIALIZER "class core::Instance_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::FenceInst_O),_Class), "_Class" }, // atomic: NIL public: (NIL) fixable: SMART-PTR-FIX good-name: T
// Stamp = llvmo::CallBase_O/1259
{ class_kind, STAMP_llvmo__CallBase_O, sizeof(llvmo::CallBase_O), 0, "llvmo::CallBase_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Instance_O>" :SPECIALIZER "class core::Instance_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::CallBase_O),_Class), "_Class" }, // atomic: NIL public: (NIL) fixable: SMART-PTR-FIX good-name: T
// Stamp = llvmo::CallInst_O/1263
{ class_kind, STAMP_llvmo__CallInst_O, sizeof(llvmo::CallInst_O), 0, "llvmo::CallInst_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Instance_O>" :SPECIALIZER "class core::Instance_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::CallInst_O),_Class), "_Class" }, // atomic: NIL public: (NIL) fixable: SMART-PTR-FIX good-name: T
// Stamp = llvmo::InvokeInst_O/1267
{ class_kind, STAMP_llvmo__InvokeInst_O, sizeof(llvmo::InvokeInst_O), 0, "llvmo::InvokeInst_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Instance_O>" :SPECIALIZER "class core::Instance_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::InvokeInst_O),_Class), "_Class" }, // atomic: NIL public: (NIL) fixable: SMART-PTR-FIX good-name: T
// Stamp = llvmo::PHINode_O/1271
{ class_kind, STAMP_llvmo__PHINode_O, sizeof(llvmo::PHINode_O), 0, "llvmo::PHINode_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Instance_O>" :SPECIALIZER "class core::Instance_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::PHINode_O),_Class), "_Class" }, // atomic: NIL public: (NIL) fixable: SMART-PTR-FIX good-name: T
// Stamp = llvmo::IndirectBrInst_O/1275
{ class_kind, STAMP_llvmo__IndirectBrInst_O, sizeof(llvmo::IndirectBrInst_O), 0, "llvmo::IndirectBrInst_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Instance_O>" :SPECIALIZER "class core::Instance_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::IndirectBrInst_O),_Class), "_Class" }, // atomic: NIL public: (NIL) fixable: SMART-PTR-FIX good-name: T
// Stamp = llvmo::BranchInst_O/1279
{ class_kind, STAMP_llvmo__BranchInst_O, sizeof(llvmo::BranchInst_O), 0, "llvmo::BranchInst_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Instance_O>" :SPECIALIZER "class core::Instance_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::BranchInst_O),_Class), "_Class" }, // atomic: NIL public: (NIL) fixable: SMART-PTR-FIX good-name: T
// Stamp = llvmo::Constant_O/1283
{ class_kind, STAMP_llvmo__Constant_O, sizeof(llvmo::Constant_O), 0, "llvmo::Constant_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Instance_O>" :SPECIALIZER "class core::Instance_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::Constant_O),_Class), "_Class" }, // atomic: NIL public: (NIL) fixable: SMART-PTR-FIX good-name: T
// Stamp = llvmo::GlobalValue_O/1287
{ class_kind, STAMP_llvmo__GlobalValue_O, sizeof(llvmo::GlobalValue_O), 0, "llvmo::GlobalValue_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Instance_O>" :SPECIALIZER "class core::Instance_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::GlobalValue_O),_Class), "_Class" }, // atomic: NIL public: (NIL) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "_Bool")
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(llvmo::GlobalValue_O),_PtrIsOwned), "_PtrIsOwned" }, // atomic: NIL public: (NIL) fixable: NIL good-name: T
// Stamp = llvmo::Function_O/1291
{ class_kind, STAMP_llvmo__Function_O, sizeof(llvmo::Function_O), 0, "llvmo::Function_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Instance_O>" :SPECIALIZER "class core::Instance_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::Function_O),_Class), "_Class" }, // atomic: NIL public: (NIL) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "_Bool")
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(llvmo::Function_O),_PtrIsOwned), "_PtrIsOwned" }, // atomic: NIL public: (NIL) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::LoadTimeValues_O>" :SPECIALIZER "class core::LoadTimeValues_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::LoadTimeValues_O>), offsetof(SAFE_TYPE_MACRO(llvmo::Function_O),_RunTimeValues), "_RunTimeValues" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// Stamp = llvmo::GlobalVariable_O/1295
{ class_kind, STAMP_llvmo__GlobalVariable_O, sizeof(llvmo::GlobalVariable_O), 0, "llvmo::GlobalVariable_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Instance_O>" :SPECIALIZER "class core::Instance_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::GlobalVariable_O),_Class), "_Class" }, // atomic: NIL public: (NIL) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "_Bool")
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(llvmo::GlobalVariable_O),_PtrIsOwned), "_PtrIsOwned" }, // atomic: NIL public: (NIL) fixable: NIL good-name: T
// Stamp = llvmo::BlockAddress_O/1299
{ class_kind, STAMP_llvmo__BlockAddress_O, sizeof(llvmo::BlockAddress_O), 0, "llvmo::BlockAddress_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Instance_O>" :SPECIALIZER "class core::Instance_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::BlockAddress_O),_Class), "_Class" }, // atomic: NIL public: (NIL) fixable: SMART-PTR-FIX good-name: T
// Stamp = llvmo::ConstantDataSequential_O/1303
{ class_kind, STAMP_llvmo__ConstantDataSequential_O, sizeof(llvmo::ConstantDataSequential_O), 0, "llvmo::ConstantDataSequential_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Instance_O>" :SPECIALIZER "class core::Instance_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::ConstantDataSequential_O),_Class), "_Class" }, // atomic: NIL public: (NIL) fixable: SMART-PTR-FIX good-name: T
// Stamp = llvmo::ConstantDataArray_O/1307
{ class_kind, STAMP_llvmo__ConstantDataArray_O, sizeof(llvmo::ConstantDataArray_O), 0, "llvmo::ConstantDataArray_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Instance_O>" :SPECIALIZER "class core::Instance_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::ConstantDataArray_O),_Class), "_Class" }, // atomic: NIL public: (NIL) fixable: SMART-PTR-FIX good-name: T
// Stamp = llvmo::ConstantStruct_O/1311
{ class_kind, STAMP_llvmo__ConstantStruct_O, sizeof(llvmo::ConstantStruct_O), 0, "llvmo::ConstantStruct_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Instance_O>" :SPECIALIZER "class core::Instance_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::ConstantStruct_O),_Class), "_Class" }, // atomic: NIL public: (NIL) fixable: SMART-PTR-FIX good-name: T
// Stamp = llvmo::ConstantInt_O/1315
{ class_kind, STAMP_llvmo__ConstantInt_O, sizeof(llvmo::ConstantInt_O), 0, "llvmo::ConstantInt_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Instance_O>" :SPECIALIZER "class core::Instance_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::ConstantInt_O),_Class), "_Class" }, // atomic: NIL public: (NIL) fixable: SMART-PTR-FIX good-name: T
// Stamp = llvmo::ConstantFP_O/1319
{ class_kind, STAMP_llvmo__ConstantFP_O, sizeof(llvmo::ConstantFP_O), 0, "llvmo::ConstantFP_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Instance_O>" :SPECIALIZER "class core::Instance_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::ConstantFP_O),_Class), "_Class" }, // atomic: NIL public: (NIL) fixable: SMART-PTR-FIX good-name: T
// Stamp = llvmo::ConstantExpr_O/1323
{ class_kind, STAMP_llvmo__ConstantExpr_O, sizeof(llvmo::ConstantExpr_O), 0, "llvmo::ConstantExpr_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Instance_O>" :SPECIALIZER "class core::Instance_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::ConstantExpr_O),_Class), "_Class" }, // atomic: NIL public: (NIL) fixable: SMART-PTR-FIX good-name: T
// Stamp = llvmo::ConstantPointerNull_O/1327
{ class_kind, STAMP_llvmo__ConstantPointerNull_O, sizeof(llvmo::ConstantPointerNull_O), 0, "llvmo::ConstantPointerNull_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Instance_O>" :SPECIALIZER "class core::Instance_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::ConstantPointerNull_O),_Class), "_Class" }, // atomic: NIL public: (NIL) fixable: SMART-PTR-FIX good-name: T
// Stamp = llvmo::UndefValue_O/1331
{ class_kind, STAMP_llvmo__UndefValue_O, sizeof(llvmo::UndefValue_O), 0, "llvmo::UndefValue_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Instance_O>" :SPECIALIZER "class core::Instance_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::UndefValue_O),_Class), "_Class" }, // atomic: NIL public: (NIL) fixable: SMART-PTR-FIX good-name: T
// Stamp = llvmo::ConstantArray_O/1335
{ class_kind, STAMP_llvmo__ConstantArray_O, sizeof(llvmo::ConstantArray_O), 0, "llvmo::ConstantArray_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Instance_O>" :SPECIALIZER "class core::Instance_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::ConstantArray_O),_Class), "_Class" }, // atomic: NIL public: (NIL) fixable: SMART-PTR-FIX good-name: T
// Stamp = llvmo::TargetMachine_O/1339
{ class_kind, STAMP_llvmo__TargetMachine_O, sizeof(llvmo::TargetMachine_O), 0, "llvmo::TargetMachine_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Instance_O>" :SPECIALIZER "class core::Instance_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::TargetMachine_O),_Class), "_Class" }, // atomic: NIL public: (NIL) fixable: SMART-PTR-FIX good-name: T
// Stamp = llvmo::LLVMTargetMachine_O/1343
{ class_kind, STAMP_llvmo__LLVMTargetMachine_O, sizeof(llvmo::LLVMTargetMachine_O), 0, "llvmo::LLVMTargetMachine_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Instance_O>" :SPECIALIZER "class core::Instance_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::LLVMTargetMachine_O),_Class), "_Class" }, // atomic: NIL public: (NIL) fixable: SMART-PTR-FIX good-name: T
// Stamp = llvmo::ThreadSafeContext_O/1347
{ class_kind, STAMP_llvmo__ThreadSafeContext_O, sizeof(llvmo::ThreadSafeContext_O), 0, "llvmo::ThreadSafeContext_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Instance_O>" :SPECIALIZER "class core::Instance_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::ThreadSafeContext_O),_Class), "_Class" }, // atomic: NIL public: (NIL) fixable: SMART-PTR-FIX good-name: T
// Stamp = llvmo::NamedMDNode_O/1351
{ class_kind, STAMP_llvmo__NamedMDNode_O, sizeof(llvmo::NamedMDNode_O), 0, "llvmo::NamedMDNode_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Instance_O>" :SPECIALIZER "class core::Instance_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::NamedMDNode_O),_Class), "_Class" }, // atomic: NIL public: (NIL) fixable: SMART-PTR-FIX good-name: T
// Stamp = llvmo::Triple_O/1355
{ class_kind, STAMP_llvmo__Triple_O, sizeof(llvmo::Triple_O), 0, "llvmo::Triple_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Instance_O>" :SPECIALIZER "class core::Instance_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::Triple_O),_Class), "_Class" }, // atomic: NIL public: (NIL) fixable: SMART-PTR-FIX good-name: T
// Stamp = llvmo::DWARFContext_O/1359
{ class_kind, STAMP_llvmo__DWARFContext_O, sizeof(llvmo::DWARFContext_O), 0, "llvmo::DWARFContext_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Instance_O>" :SPECIALIZER "class core::Instance_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::DWARFContext_O),_Class), "_Class" }, // atomic: NIL public: (NIL) fixable: SMART-PTR-FIX good-name: T
// Stamp = llvmo::TargetOptions_O/1363
{ class_kind, STAMP_llvmo__TargetOptions_O, sizeof(llvmo::TargetOptions_O), 0, "llvmo::TargetOptions_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Instance_O>" :SPECIALIZER "class core::Instance_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::TargetOptions_O),_Class), "_Class" }, // atomic: NIL public: (NIL) fixable: SMART-PTR-FIX good-name: T
// Stamp = llvmo::ObjectFile_O/1367
{ class_kind, STAMP_llvmo__ObjectFile_O, sizeof(llvmo::ObjectFile_O), 0, "llvmo::ObjectFile_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Instance_O>" :SPECIALIZER "class core::Instance_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::ObjectFile_O),_Class), "_Class" }, // atomic: NIL public: (NIL) fixable: SMART-PTR-FIX good-name: T
// Stamp = llvmo::LLVMContext_O/1371
{ class_kind, STAMP_llvmo__LLVMContext_O, sizeof(llvmo::LLVMContext_O), 0, "llvmo::LLVMContext_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Instance_O>" :SPECIALIZER "class core::Instance_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::LLVMContext_O),_Class), "_Class" }, // atomic: NIL public: (NIL) fixable: SMART-PTR-FIX good-name: T
// Stamp = llvmo::PassManagerBuilder_O/1375
{ class_kind, STAMP_llvmo__PassManagerBuilder_O, sizeof(llvmo::PassManagerBuilder_O), 0, "llvmo::PassManagerBuilder_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Instance_O>" :SPECIALIZER "class core::Instance_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::PassManagerBuilder_O),_Class), "_Class" }, // atomic: NIL public: (NIL) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: "basic_string"
// (instance-field-access iv) -> AST-TOOLING:AS-PROTECTED   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>" :NAME "basic_string" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::char_traits<char>" :NAME "char_traits" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 2 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::allocator<char>" :NAME "allocator" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(llvmo::PassManagerBuilder_O),_ErrorStr._M_string_length), "_ErrorStr._M_string_length" }, // atomic: NIL public: (NIL NIL) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PROTECTED   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>" :NAME "basic_string" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::char_traits<char>" :NAME "char_traits" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 2 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::allocator<char>" :NAME "allocator" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::(anonymous)" :NAME "")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(llvmo::PassManagerBuilder_O),_ErrorStr.NO-NAME._M_allocated_capacity), "_ErrorStr.NO-NAME._M_allocated_capacity" }, // atomic: NIL public: (NIL NIL T) fixable: NIL good-name: T
// Stamp = llvmo::Module_O/1379
{ class_kind, STAMP_llvmo__Module_O, sizeof(llvmo::Module_O), 0, "llvmo::Module_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Instance_O>" :SPECIALIZER "class core::Instance_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::Module_O),_Class), "_Class" }, // atomic: NIL public: (NIL) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(llvmo::Module_O),_Id), "_Id" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::HashTableEqual_O>" :SPECIALIZER "class core::HashTableEqual_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::HashTableEqual_O>), offsetof(SAFE_TYPE_MACRO(llvmo::Module_O),_UniqueGlobalVariableStrings), "_UniqueGlobalVariableStrings" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// Stamp = llvmo::Target_O/1383
{ class_kind, STAMP_llvmo__Target_O, sizeof(llvmo::Target_O), 0, "llvmo::Target_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Instance_O>" :SPECIALIZER "class core::Instance_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::Target_O),_Class), "_Class" }, // atomic: NIL public: (NIL) fixable: SMART-PTR-FIX good-name: T
// Stamp = llvmo::Linker_O/1387
{ class_kind, STAMP_llvmo__Linker_O, sizeof(llvmo::Linker_O), 0, "llvmo::Linker_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Instance_O>" :SPECIALIZER "class core::Instance_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::Linker_O),_Class), "_Class" }, // atomic: NIL public: (NIL) fixable: SMART-PTR-FIX good-name: T
// Stamp = core::Rack_O/1391
{ class_kind, STAMP_core__Rack_O, sizeof(core::Rack_O), 0, "core::Rack_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::Rack_O),_ShiftedStamp), "_ShiftedStamp" }, // atomic: NIL public: (T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::Rack_O),_Slots._Data), "_Slots._Data" },
 {  variable_capacity, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::Rack_O),_Slots._Length), offsetof(SAFE_TYPE_MACRO(core::Rack_O),_Slots._Length), NULL },
// one -> #<SMART-PTR-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O") :base #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")>
{    variable_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), 0, "only" },
// Stamp = core::SmallMultimap_O/1395
{ class_kind, STAMP_core__SmallMultimap_O, sizeof(core::SmallMultimap_O), 0, "core::SmallMultimap_O" },
// second-last-field is-atomic atomic: NIL  name: "SmallMultimap"
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::SmallMultimap<gctools::smart_ptr<core::Symbol_O>,gctools::smart_ptr<core::T_O>,core::SymbolComparer>" :NAME "SmallMultimap" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Symbol_O>" :SPECIALIZER "class core::Symbol_O") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 2 :CTYPE #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::SymbolComparer" :NAME "SymbolComparer") :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::TAGGED-POINTER-CTYPE :KEY "gctools::tagged_pointer<gctools::GCVector_moveable<std::pair<gctools::smart_ptr<core::Symbol_O>,gctools::smart_ptr<core::T_O>>>>" :SPECIALIZER "class gctools::GCVector_moveable<struct std::pair<class gctools::smart_ptr<core::Symbol_O>, class gctools::smart_ptr<core::T_O> > >")
 {  fixed_field, TAGGED_POINTER_OFFSET, sizeof(gctools::tagged_pointer<gctools::GCVector_moveable<std::pair<gctools::smart_ptr<core::Symbol_O>,gctools::smart_ptr<core::T_O>>>>), offsetof(SAFE_TYPE_MACRO(core::SmallMultimap_O),map._Contents), "map._Contents" }, // atomic: NIL public: (T T) fixable: TAGGED-POINTER-FIX good-name: T
// Stamp = core::Sigset_O/1399
{ class_kind, STAMP_core__Sigset_O, sizeof(core::Sigset_O), 0, "core::Sigset_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "(anonymous)" :NAME "")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::Sigset_O),_sigset.__count), "_sigset.__count" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "(anonymous)" :NAME "")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "(anonymous struct)::(anonymous)" :NAME "")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned int")
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::Sigset_O),_sigset.__value.__wch), "_sigset.__value.__wch" }, // atomic: NIL public: (T T T) fixable: NIL good-name: T
// Stamp = core::Environment_O/1403
{ class_kind, STAMP_core__Environment_O, sizeof(core::Environment_O), 0, "core::Environment_O" },
// Stamp = core::GlueEnvironment_O/1407
{ class_kind, STAMP_core__GlueEnvironment_O, sizeof(core::GlueEnvironment_O), 0, "core::GlueEnvironment_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::HashTableEq_O>" :SPECIALIZER "class core::HashTableEq_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::HashTableEq_O>), offsetof(SAFE_TYPE_MACRO(core::GlueEnvironment_O),_Map), "_Map" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::List_V>" :SPECIALIZER "class core::List_V")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::List_V>), offsetof(SAFE_TYPE_MACRO(core::GlueEnvironment_O),_Args), "_Args" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// Stamp = core::LexicalEnvironment_O/1411
{ class_kind, STAMP_core__LexicalEnvironment_O, sizeof(core::LexicalEnvironment_O), 0, "core::LexicalEnvironment_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::LexicalEnvironment_O),_ParentEnvironment), "_ParentEnvironment" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::HashTableEq_O>" :SPECIALIZER "class core::HashTableEq_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::HashTableEq_O>), offsetof(SAFE_TYPE_MACRO(core::LexicalEnvironment_O),_Metadata), "_Metadata" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// Stamp = core::RuntimeVisibleEnvironment_O/1415
{ class_kind, STAMP_core__RuntimeVisibleEnvironment_O, sizeof(core::RuntimeVisibleEnvironment_O), 0, "core::RuntimeVisibleEnvironment_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::RuntimeVisibleEnvironment_O),_ParentEnvironment), "_ParentEnvironment" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::HashTableEq_O>" :SPECIALIZER "class core::HashTableEq_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::HashTableEq_O>), offsetof(SAFE_TYPE_MACRO(core::RuntimeVisibleEnvironment_O),_Metadata), "_Metadata" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::RuntimeVisibleEnvironment_O),_RuntimeEnvironment), "_RuntimeEnvironment" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "_Bool")
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::RuntimeVisibleEnvironment_O),_Invisible), "_Invisible" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// Stamp = core::FunctionValueEnvironment_O/1419
{ class_kind, STAMP_core__FunctionValueEnvironment_O, sizeof(core::FunctionValueEnvironment_O), 0, "core::FunctionValueEnvironment_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::FunctionValueEnvironment_O),_ParentEnvironment), "_ParentEnvironment" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::HashTableEq_O>" :SPECIALIZER "class core::HashTableEq_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::HashTableEq_O>), offsetof(SAFE_TYPE_MACRO(core::FunctionValueEnvironment_O),_Metadata), "_Metadata" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::FunctionValueEnvironment_O),_RuntimeEnvironment), "_RuntimeEnvironment" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "_Bool")
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::FunctionValueEnvironment_O),_Invisible), "_Invisible" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::HashTableEqual_O>" :SPECIALIZER "class core::HashTableEqual_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::HashTableEqual_O>), offsetof(SAFE_TYPE_MACRO(core::FunctionValueEnvironment_O),_FunctionIndices), "_FunctionIndices" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::FunctionFrame_O>" :SPECIALIZER "class core::FunctionFrame_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::FunctionFrame_O>), offsetof(SAFE_TYPE_MACRO(core::FunctionValueEnvironment_O),_FunctionFrame), "_FunctionFrame" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// Stamp = core::TagbodyEnvironment_O/1423
{ class_kind, STAMP_core__TagbodyEnvironment_O, sizeof(core::TagbodyEnvironment_O), 0, "core::TagbodyEnvironment_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::TagbodyEnvironment_O),_ParentEnvironment), "_ParentEnvironment" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::HashTableEq_O>" :SPECIALIZER "class core::HashTableEq_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::HashTableEq_O>), offsetof(SAFE_TYPE_MACRO(core::TagbodyEnvironment_O),_Metadata), "_Metadata" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::TagbodyEnvironment_O),_RuntimeEnvironment), "_RuntimeEnvironment" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "_Bool")
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::TagbodyEnvironment_O),_Invisible), "_Invisible" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::HashTableEq_O>" :SPECIALIZER "class core::HashTableEq_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::HashTableEq_O>), offsetof(SAFE_TYPE_MACRO(core::TagbodyEnvironment_O),_Tags), "_Tags" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: "GCVector"
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::Vec0<gctools::smart_ptr<core::List_V>>" :NAME "Vec0" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::List_V>" :SPECIALIZER "class core::List_V") :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::GCVector<gctools::smart_ptr<core::List_V>,gctools::GCContainerAllocator<gctools::GCVector_moveable<gctools::smart_ptr<core::List_V>>>>" :NAME "GCVector" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::List_V>" :SPECIALIZER "class core::List_V") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::GCContainerAllocator<gctools::GCVector_moveable<gctools::smart_ptr<core::List_V>>>" :NAME "GCContainerAllocator" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::GCVECTOR-MOVEABLE-CTYPE :KEY "gctools::GCVector_moveable<gctools::smart_ptr<core::List_V>>" :NAME "GCVector_moveable" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::List_V>" :SPECIALIZER "class core::List_V") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::TAGGED-POINTER-CTYPE :KEY "gctools::tagged_pointer<gctools::GCVector_moveable<gctools::smart_ptr<core::List_V>>>" :SPECIALIZER "class gctools::GCVector_moveable<class gctools::smart_ptr<core::List_V> >")
 {  fixed_field, TAGGED_POINTER_OFFSET, sizeof(gctools::tagged_pointer<gctools::GCVector_moveable<gctools::smart_ptr<core::List_V>>>), offsetof(SAFE_TYPE_MACRO(core::TagbodyEnvironment_O),_TagCode._Vector._Contents), "_TagCode._Vector._Contents" }, // atomic: NIL public: (T T T) fixable: TAGGED-POINTER-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::ActivationFrame_O>" :SPECIALIZER "class core::ActivationFrame_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::ActivationFrame_O>), offsetof(SAFE_TYPE_MACRO(core::TagbodyEnvironment_O),_ActivationFrame), "_ActivationFrame" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::TagbodyEnvironment_O),_LocalBlocks), "_LocalBlocks" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// Stamp = core::BlockEnvironment_O/1427
{ class_kind, STAMP_core__BlockEnvironment_O, sizeof(core::BlockEnvironment_O), 0, "core::BlockEnvironment_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::BlockEnvironment_O),_ParentEnvironment), "_ParentEnvironment" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::HashTableEq_O>" :SPECIALIZER "class core::HashTableEq_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::HashTableEq_O>), offsetof(SAFE_TYPE_MACRO(core::BlockEnvironment_O),_Metadata), "_Metadata" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::BlockEnvironment_O),_RuntimeEnvironment), "_RuntimeEnvironment" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "_Bool")
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::BlockEnvironment_O),_Invisible), "_Invisible" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Symbol_O>" :SPECIALIZER "class core::Symbol_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Symbol_O>), offsetof(SAFE_TYPE_MACRO(core::BlockEnvironment_O),_BlockSymbol), "_BlockSymbol" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::ValueFrame_O>" :SPECIALIZER "class core::ValueFrame_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::ValueFrame_O>), offsetof(SAFE_TYPE_MACRO(core::BlockEnvironment_O),_ActivationFrame), "_ActivationFrame" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::BlockEnvironment_O),_LocalReturnBlock), "_LocalReturnBlock" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::BlockEnvironment_O),_LocalReturnValue), "_LocalReturnValue" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// Stamp = core::ValueEnvironment_O/1431
{ class_kind, STAMP_core__ValueEnvironment_O, sizeof(core::ValueEnvironment_O), 0, "core::ValueEnvironment_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::ValueEnvironment_O),_ParentEnvironment), "_ParentEnvironment" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::HashTableEq_O>" :SPECIALIZER "class core::HashTableEq_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::HashTableEq_O>), offsetof(SAFE_TYPE_MACRO(core::ValueEnvironment_O),_Metadata), "_Metadata" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::ValueEnvironment_O),_RuntimeEnvironment), "_RuntimeEnvironment" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "_Bool")
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::ValueEnvironment_O),_Invisible), "_Invisible" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::List_V>" :SPECIALIZER "class core::List_V")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::List_V>), offsetof(SAFE_TYPE_MACRO(core::ValueEnvironment_O),_SymbolIndex_alist), "_SymbolIndex_alist" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::ValueFrame_O>" :SPECIALIZER "class core::ValueFrame_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::ValueFrame_O>), offsetof(SAFE_TYPE_MACRO(core::ValueEnvironment_O),_ActivationFrame), "_ActivationFrame" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// Stamp = core::CompileTimeEnvironment_O/1435
{ class_kind, STAMP_core__CompileTimeEnvironment_O, sizeof(core::CompileTimeEnvironment_O), 0, "core::CompileTimeEnvironment_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::CompileTimeEnvironment_O),_ParentEnvironment), "_ParentEnvironment" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::HashTableEq_O>" :SPECIALIZER "class core::HashTableEq_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::HashTableEq_O>), offsetof(SAFE_TYPE_MACRO(core::CompileTimeEnvironment_O),_Metadata), "_Metadata" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// Stamp = core::CatchEnvironment_O/1439
{ class_kind, STAMP_core__CatchEnvironment_O, sizeof(core::CatchEnvironment_O), 0, "core::CatchEnvironment_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::CatchEnvironment_O),_ParentEnvironment), "_ParentEnvironment" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::HashTableEq_O>" :SPECIALIZER "class core::HashTableEq_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::HashTableEq_O>), offsetof(SAFE_TYPE_MACRO(core::CatchEnvironment_O),_Metadata), "_Metadata" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// Stamp = core::MacroletEnvironment_O/1443
{ class_kind, STAMP_core__MacroletEnvironment_O, sizeof(core::MacroletEnvironment_O), 0, "core::MacroletEnvironment_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::MacroletEnvironment_O),_ParentEnvironment), "_ParentEnvironment" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::HashTableEq_O>" :SPECIALIZER "class core::HashTableEq_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::HashTableEq_O>), offsetof(SAFE_TYPE_MACRO(core::MacroletEnvironment_O),_Metadata), "_Metadata" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::HashTableEq_O>" :SPECIALIZER "class core::HashTableEq_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::HashTableEq_O>), offsetof(SAFE_TYPE_MACRO(core::MacroletEnvironment_O),_Macros), "_Macros" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// Stamp = core::SymbolMacroletEnvironment_O/1447
{ class_kind, STAMP_core__SymbolMacroletEnvironment_O, sizeof(core::SymbolMacroletEnvironment_O), 0, "core::SymbolMacroletEnvironment_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::SymbolMacroletEnvironment_O),_ParentEnvironment), "_ParentEnvironment" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::HashTableEq_O>" :SPECIALIZER "class core::HashTableEq_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::HashTableEq_O>), offsetof(SAFE_TYPE_MACRO(core::SymbolMacroletEnvironment_O),_Metadata), "_Metadata" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::HashTableEq_O>" :SPECIALIZER "class core::HashTableEq_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::HashTableEq_O>), offsetof(SAFE_TYPE_MACRO(core::SymbolMacroletEnvironment_O),_Macros), "_Macros" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// Stamp = core::FunctionContainerEnvironment_O/1451
{ class_kind, STAMP_core__FunctionContainerEnvironment_O, sizeof(core::FunctionContainerEnvironment_O), 0, "core::FunctionContainerEnvironment_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::FunctionContainerEnvironment_O),_ParentEnvironment), "_ParentEnvironment" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::HashTableEq_O>" :SPECIALIZER "class core::HashTableEq_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::HashTableEq_O>), offsetof(SAFE_TYPE_MACRO(core::FunctionContainerEnvironment_O),_Metadata), "_Metadata" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::FunctionContainerEnvironment_O),_Closure), "_Closure" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::FunctionContainerEnvironment_O),_Function), "_Function" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// Stamp = core::UnwindProtectEnvironment_O/1455
{ class_kind, STAMP_core__UnwindProtectEnvironment_O, sizeof(core::UnwindProtectEnvironment_O), 0, "core::UnwindProtectEnvironment_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::UnwindProtectEnvironment_O),_ParentEnvironment), "_ParentEnvironment" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::HashTableEq_O>" :SPECIALIZER "class core::HashTableEq_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::HashTableEq_O>), offsetof(SAFE_TYPE_MACRO(core::UnwindProtectEnvironment_O),_Metadata), "_Metadata" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::List_V>" :SPECIALIZER "class core::List_V")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::List_V>), offsetof(SAFE_TYPE_MACRO(core::UnwindProtectEnvironment_O),_CleanupForm), "_CleanupForm" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// Stamp = core::ActivationFrame_O/1459
{ class_kind, STAMP_core__ActivationFrame_O, sizeof(core::ActivationFrame_O), 0, "core::ActivationFrame_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::ActivationFrame_O),_Parent), "_Parent" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// Stamp = core::ValueFrame_O/1463
{ class_kind, STAMP_core__ValueFrame_O, sizeof(core::ValueFrame_O), 0, "core::ValueFrame_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::ValueFrame_O),_Parent), "_Parent" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::ValueFrame_O),_Objects._Data), "_Objects._Data" },
 {  variable_capacity, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::ValueFrame_O),_Objects._Length), offsetof(SAFE_TYPE_MACRO(core::ValueFrame_O),_Objects._Length), NULL },
// one -> #<SMART-PTR-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O") :base #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")>
{    variable_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), 0, "only" },
// Stamp = core::FunctionFrame_O/1467
{ class_kind, STAMP_core__FunctionFrame_O, sizeof(core::FunctionFrame_O), 0, "core::FunctionFrame_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::FunctionFrame_O),_Parent), "_Parent" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::FunctionFrame_O),_Objects._Data), "_Objects._Data" },
 {  variable_capacity, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::FunctionFrame_O),_Objects._Length), offsetof(SAFE_TYPE_MACRO(core::FunctionFrame_O),_Objects._Length), NULL },
// one -> #<SMART-PTR-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O") :base #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")>
{    variable_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), 0, "only" },
// Stamp = core::RandomState_O/1471
{ class_kind, STAMP_core__RandomState_O, sizeof(core::RandomState_O), 0, "core::RandomState_O" },
// second-last-field is-atomic atomic: NIL  name: "mersenne_twister_engine"
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "boost::random::mersenne_twister_engine<unsigned int,32,624,397,31,-1727483681,11,-1,7,-1658038656,15,-272236544,18,1812433253>" :NAME "mersenne_twister_engine" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned int") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE NIL :INTEGRAL-VALUE "32") #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 2 :CTYPE NIL :INTEGRAL-VALUE "624") #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 3 :CTYPE NIL :INTEGRAL-VALUE "397") #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 4 :CTYPE NIL :INTEGRAL-VALUE "31") #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 5 :CTYPE NIL :INTEGRAL-VALUE "-1727483681") #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 6 :CTYPE NIL :INTEGRAL-VALUE "11") #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 7 :CTYPE NIL :INTEGRAL-VALUE "-1") #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 8 :CTYPE NIL :INTEGRAL-VALUE "7") #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 9 :CTYPE NIL :INTEGRAL-VALUE "-1658038656") #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 10 :CTYPE NIL :INTEGRAL-VALUE "15") #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 11 :CTYPE NIL :INTEGRAL-VALUE "-272236544") #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 12 :CTYPE NIL :INTEGRAL-VALUE "18") #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 13 :CTYPE NIL :INTEGRAL-VALUE "1812433253")))
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::RandomState_O),_Producer.i), "_Producer.i" }, // atomic: NIL public: (T NIL) fixable: NIL good-name: T
// Stamp = core::AtomicFixnumHolder_O/1475
{ class_kind, STAMP_core__AtomicFixnumHolder_O, sizeof(core::AtomicFixnumHolder_O), 0, "core::AtomicFixnumHolder_O" },
// second-last-field is-atomic atomic: T  name: "atomic"
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::atomic<long>" :NAME "atomic" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "long") :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "long")
// not-exposing {  fixed_field, ctype_long, sizeof(long), offsetof(SAFE_TYPE_MACRO(core::AtomicFixnumHolder_O),_Object), "_Object" }, // atomic: T public: (T NIL) fixable: NIL good-name: T
// Stamp = core::HashTableBase_O/1479
{ class_kind, STAMP_core__HashTableBase_O, sizeof(core::HashTableBase_O), 0, "core::HashTableBase_O" },
// Stamp = core::WeakKeyHashTable_O/1483
{ class_kind, STAMP_core__WeakKeyHashTable_O, sizeof(core::WeakKeyHashTable_O), 0, "core::WeakKeyHashTable_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "gctools::WeakKeyHashTable" :NAME "WeakKeyHashTable")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Number_O>" :SPECIALIZER "class core::Number_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Number_O>), offsetof(SAFE_TYPE_MACRO(core::WeakKeyHashTable_O),_HashTable._RehashSize), "_HashTable._RehashSize" }, // atomic: NIL public: (T T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "gctools::WeakKeyHashTable" :NAME "WeakKeyHashTable")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "double")
// not-exposing {  fixed_field, ctype_double, sizeof(double), offsetof(SAFE_TYPE_MACRO(core::WeakKeyHashTable_O),_HashTable._RehashThreshold), "_HashTable._RehashThreshold" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "gctools::WeakKeyHashTable" :NAME "WeakKeyHashTable")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::WeakKeyHashTable_O),_HashTable._Length), "_HashTable._Length" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "gctools::WeakKeyHashTable" :NAME "WeakKeyHashTable")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::TAGGED-POINTER-CTYPE :KEY "gctools::tagged_pointer<gctools::Buckets<gctools::smart_ptr<core::T_O>,gctools::smart_ptr<core::T_O>,gctools::WeakLinks>>" :SPECIALIZER "struct gctools::Buckets<class gctools::smart_ptr<core::T_O>, class gctools::smart_ptr<core::T_O>, struct gctools::WeakLinks>")
 {  fixed_field, TAGGED_POINTER_OFFSET, sizeof(gctools::tagged_pointer<gctools::Buckets<gctools::smart_ptr<core::T_O>,gctools::smart_ptr<core::T_O>,gctools::WeakLinks>>), offsetof(SAFE_TYPE_MACRO(core::WeakKeyHashTable_O),_HashTable._Keys), "_HashTable._Keys" }, // atomic: NIL public: (T T) fixable: TAGGED-POINTER-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "gctools::WeakKeyHashTable" :NAME "WeakKeyHashTable")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::TAGGED-POINTER-CTYPE :KEY "gctools::tagged_pointer<gctools::Buckets<gctools::smart_ptr<core::T_O>,gctools::smart_ptr<core::T_O>,gctools::StrongLinks>>" :SPECIALIZER "struct gctools::Buckets<class gctools::smart_ptr<core::T_O>, class gctools::smart_ptr<core::T_O>, struct gctools::StrongLinks>")
 {  fixed_field, TAGGED_POINTER_OFFSET, sizeof(gctools::tagged_pointer<gctools::Buckets<gctools::smart_ptr<core::T_O>,gctools::smart_ptr<core::T_O>,gctools::StrongLinks>>), offsetof(SAFE_TYPE_MACRO(core::WeakKeyHashTable_O),_HashTable._Values), "_HashTable._Values" }, // atomic: NIL public: (T T) fixable: TAGGED-POINTER-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "gctools::WeakKeyHashTable" :NAME "WeakKeyHashTable")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mps_ld_s" :NAME "mps_ld_s")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::WeakKeyHashTable_O),_HashTable._LocationDependency._epoch), "_HashTable._LocationDependency._epoch" }, // atomic: NIL public: (T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "gctools::WeakKeyHashTable" :NAME "WeakKeyHashTable")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mps_ld_s" :NAME "mps_ld_s")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::WeakKeyHashTable_O),_HashTable._LocationDependency._rs), "_HashTable._LocationDependency._rs" }, // atomic: NIL public: (T T T) fixable: NIL good-name: T
// Stamp = core::HashTable_O/1487
{ class_kind, STAMP_core__HashTable_O, sizeof(core::HashTable_O), 0, "core::HashTable_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Number_O>" :SPECIALIZER "class core::Number_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Number_O>), offsetof(SAFE_TYPE_MACRO(core::HashTable_O),_RehashSize), "_RehashSize" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "double")
// not-exposing {  fixed_field, ctype_double, sizeof(double), offsetof(SAFE_TYPE_MACRO(core::HashTable_O),_RehashThreshold), "_RehashThreshold" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: "GCVector"
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::Vec0<core::Cons_O>" :NAME "Vec0" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Cons_O" :NAME "Cons_O") :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::GCVector<core::Cons_O,gctools::GCContainerAllocator<gctools::GCVector_moveable<core::Cons_O>>>" :NAME "GCVector" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Cons_O" :NAME "Cons_O") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::GCContainerAllocator<gctools::GCVector_moveable<core::Cons_O>>" :NAME "GCContainerAllocator" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::GCVECTOR-MOVEABLE-CTYPE :KEY "gctools::GCVector_moveable<core::Cons_O>" :NAME "GCVector_moveable" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Cons_O" :NAME "Cons_O") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::TAGGED-POINTER-CTYPE :KEY "gctools::tagged_pointer<gctools::GCVector_moveable<core::Cons_O>>" :SPECIALIZER "class gctools::GCVector_moveable<class core::Cons_O>")
 {  fixed_field, TAGGED_POINTER_OFFSET, sizeof(gctools::tagged_pointer<gctools::GCVector_moveable<core::Cons_O>>), offsetof(SAFE_TYPE_MACRO(core::HashTable_O),_Table._Vector._Contents), "_Table._Vector._Contents" }, // atomic: NIL public: (T T T) fixable: TAGGED-POINTER-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::HashTable_O),_HashTableCount), "_HashTableCount" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<mp::SharedMutex_O>" :SPECIALIZER "class mp::SharedMutex_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<mp::SharedMutex_O>), offsetof(SAFE_TYPE_MACRO(core::HashTable_O),_Mutex), "_Mutex" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mps_ld_s" :NAME "mps_ld_s")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::HashTable_O),_LocationDependency._epoch), "_LocationDependency._epoch" }, // atomic: NIL public: (T T) fixable: NIL good-name: NIL
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mps_ld_s" :NAME "mps_ld_s")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::HashTable_O),_LocationDependency._rs), "_LocationDependency._rs" }, // atomic: NIL public: (T T) fixable: NIL good-name: NIL
// Stamp = core::HashTableEqualp_O/1491
{ class_kind, STAMP_core__HashTableEqualp_O, sizeof(core::HashTableEqualp_O), 0, "core::HashTableEqualp_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Number_O>" :SPECIALIZER "class core::Number_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Number_O>), offsetof(SAFE_TYPE_MACRO(core::HashTableEqualp_O),_RehashSize), "_RehashSize" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "double")
// not-exposing {  fixed_field, ctype_double, sizeof(double), offsetof(SAFE_TYPE_MACRO(core::HashTableEqualp_O),_RehashThreshold), "_RehashThreshold" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: "GCVector"
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::Vec0<core::Cons_O>" :NAME "Vec0" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Cons_O" :NAME "Cons_O") :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::GCVector<core::Cons_O,gctools::GCContainerAllocator<gctools::GCVector_moveable<core::Cons_O>>>" :NAME "GCVector" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Cons_O" :NAME "Cons_O") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::GCContainerAllocator<gctools::GCVector_moveable<core::Cons_O>>" :NAME "GCContainerAllocator" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::GCVECTOR-MOVEABLE-CTYPE :KEY "gctools::GCVector_moveable<core::Cons_O>" :NAME "GCVector_moveable" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Cons_O" :NAME "Cons_O") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::TAGGED-POINTER-CTYPE :KEY "gctools::tagged_pointer<gctools::GCVector_moveable<core::Cons_O>>" :SPECIALIZER "class gctools::GCVector_moveable<class core::Cons_O>")
 {  fixed_field, TAGGED_POINTER_OFFSET, sizeof(gctools::tagged_pointer<gctools::GCVector_moveable<core::Cons_O>>), offsetof(SAFE_TYPE_MACRO(core::HashTableEqualp_O),_Table._Vector._Contents), "_Table._Vector._Contents" }, // atomic: NIL public: (T T T) fixable: TAGGED-POINTER-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::HashTableEqualp_O),_HashTableCount), "_HashTableCount" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<mp::SharedMutex_O>" :SPECIALIZER "class mp::SharedMutex_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<mp::SharedMutex_O>), offsetof(SAFE_TYPE_MACRO(core::HashTableEqualp_O),_Mutex), "_Mutex" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mps_ld_s" :NAME "mps_ld_s")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::HashTableEqualp_O),_LocationDependency._epoch), "_LocationDependency._epoch" }, // atomic: NIL public: (T T) fixable: NIL good-name: NIL
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mps_ld_s" :NAME "mps_ld_s")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::HashTableEqualp_O),_LocationDependency._rs), "_LocationDependency._rs" }, // atomic: NIL public: (T T) fixable: NIL good-name: NIL
// Stamp = core::HashTableEq_O/1495
{ class_kind, STAMP_core__HashTableEq_O, sizeof(core::HashTableEq_O), 0, "core::HashTableEq_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Number_O>" :SPECIALIZER "class core::Number_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Number_O>), offsetof(SAFE_TYPE_MACRO(core::HashTableEq_O),_RehashSize), "_RehashSize" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "double")
// not-exposing {  fixed_field, ctype_double, sizeof(double), offsetof(SAFE_TYPE_MACRO(core::HashTableEq_O),_RehashThreshold), "_RehashThreshold" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: "GCVector"
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::Vec0<core::Cons_O>" :NAME "Vec0" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Cons_O" :NAME "Cons_O") :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::GCVector<core::Cons_O,gctools::GCContainerAllocator<gctools::GCVector_moveable<core::Cons_O>>>" :NAME "GCVector" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Cons_O" :NAME "Cons_O") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::GCContainerAllocator<gctools::GCVector_moveable<core::Cons_O>>" :NAME "GCContainerAllocator" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::GCVECTOR-MOVEABLE-CTYPE :KEY "gctools::GCVector_moveable<core::Cons_O>" :NAME "GCVector_moveable" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Cons_O" :NAME "Cons_O") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::TAGGED-POINTER-CTYPE :KEY "gctools::tagged_pointer<gctools::GCVector_moveable<core::Cons_O>>" :SPECIALIZER "class gctools::GCVector_moveable<class core::Cons_O>")
 {  fixed_field, TAGGED_POINTER_OFFSET, sizeof(gctools::tagged_pointer<gctools::GCVector_moveable<core::Cons_O>>), offsetof(SAFE_TYPE_MACRO(core::HashTableEq_O),_Table._Vector._Contents), "_Table._Vector._Contents" }, // atomic: NIL public: (T T T) fixable: TAGGED-POINTER-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::HashTableEq_O),_HashTableCount), "_HashTableCount" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<mp::SharedMutex_O>" :SPECIALIZER "class mp::SharedMutex_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<mp::SharedMutex_O>), offsetof(SAFE_TYPE_MACRO(core::HashTableEq_O),_Mutex), "_Mutex" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mps_ld_s" :NAME "mps_ld_s")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::HashTableEq_O),_LocationDependency._epoch), "_LocationDependency._epoch" }, // atomic: NIL public: (T T) fixable: NIL good-name: NIL
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mps_ld_s" :NAME "mps_ld_s")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::HashTableEq_O),_LocationDependency._rs), "_LocationDependency._rs" }, // atomic: NIL public: (T T) fixable: NIL good-name: NIL
// Stamp = core::HashTableEql_O/1499
{ class_kind, STAMP_core__HashTableEql_O, sizeof(core::HashTableEql_O), 0, "core::HashTableEql_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Number_O>" :SPECIALIZER "class core::Number_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Number_O>), offsetof(SAFE_TYPE_MACRO(core::HashTableEql_O),_RehashSize), "_RehashSize" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "double")
// not-exposing {  fixed_field, ctype_double, sizeof(double), offsetof(SAFE_TYPE_MACRO(core::HashTableEql_O),_RehashThreshold), "_RehashThreshold" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: "GCVector"
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::Vec0<core::Cons_O>" :NAME "Vec0" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Cons_O" :NAME "Cons_O") :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::GCVector<core::Cons_O,gctools::GCContainerAllocator<gctools::GCVector_moveable<core::Cons_O>>>" :NAME "GCVector" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Cons_O" :NAME "Cons_O") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::GCContainerAllocator<gctools::GCVector_moveable<core::Cons_O>>" :NAME "GCContainerAllocator" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::GCVECTOR-MOVEABLE-CTYPE :KEY "gctools::GCVector_moveable<core::Cons_O>" :NAME "GCVector_moveable" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Cons_O" :NAME "Cons_O") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::TAGGED-POINTER-CTYPE :KEY "gctools::tagged_pointer<gctools::GCVector_moveable<core::Cons_O>>" :SPECIALIZER "class gctools::GCVector_moveable<class core::Cons_O>")
 {  fixed_field, TAGGED_POINTER_OFFSET, sizeof(gctools::tagged_pointer<gctools::GCVector_moveable<core::Cons_O>>), offsetof(SAFE_TYPE_MACRO(core::HashTableEql_O),_Table._Vector._Contents), "_Table._Vector._Contents" }, // atomic: NIL public: (T T T) fixable: TAGGED-POINTER-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::HashTableEql_O),_HashTableCount), "_HashTableCount" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<mp::SharedMutex_O>" :SPECIALIZER "class mp::SharedMutex_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<mp::SharedMutex_O>), offsetof(SAFE_TYPE_MACRO(core::HashTableEql_O),_Mutex), "_Mutex" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mps_ld_s" :NAME "mps_ld_s")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::HashTableEql_O),_LocationDependency._epoch), "_LocationDependency._epoch" }, // atomic: NIL public: (T T) fixable: NIL good-name: NIL
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mps_ld_s" :NAME "mps_ld_s")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::HashTableEql_O),_LocationDependency._rs), "_LocationDependency._rs" }, // atomic: NIL public: (T T) fixable: NIL good-name: NIL
// Stamp = core::HashTableEqual_O/1503
{ class_kind, STAMP_core__HashTableEqual_O, sizeof(core::HashTableEqual_O), 0, "core::HashTableEqual_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Number_O>" :SPECIALIZER "class core::Number_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Number_O>), offsetof(SAFE_TYPE_MACRO(core::HashTableEqual_O),_RehashSize), "_RehashSize" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "double")
// not-exposing {  fixed_field, ctype_double, sizeof(double), offsetof(SAFE_TYPE_MACRO(core::HashTableEqual_O),_RehashThreshold), "_RehashThreshold" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: "GCVector"
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::Vec0<core::Cons_O>" :NAME "Vec0" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Cons_O" :NAME "Cons_O") :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::GCVector<core::Cons_O,gctools::GCContainerAllocator<gctools::GCVector_moveable<core::Cons_O>>>" :NAME "GCVector" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Cons_O" :NAME "Cons_O") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::GCContainerAllocator<gctools::GCVector_moveable<core::Cons_O>>" :NAME "GCContainerAllocator" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::GCVECTOR-MOVEABLE-CTYPE :KEY "gctools::GCVector_moveable<core::Cons_O>" :NAME "GCVector_moveable" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Cons_O" :NAME "Cons_O") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::TAGGED-POINTER-CTYPE :KEY "gctools::tagged_pointer<gctools::GCVector_moveable<core::Cons_O>>" :SPECIALIZER "class gctools::GCVector_moveable<class core::Cons_O>")
 {  fixed_field, TAGGED_POINTER_OFFSET, sizeof(gctools::tagged_pointer<gctools::GCVector_moveable<core::Cons_O>>), offsetof(SAFE_TYPE_MACRO(core::HashTableEqual_O),_Table._Vector._Contents), "_Table._Vector._Contents" }, // atomic: NIL public: (T T T) fixable: TAGGED-POINTER-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::HashTableEqual_O),_HashTableCount), "_HashTableCount" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<mp::SharedMutex_O>" :SPECIALIZER "class mp::SharedMutex_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<mp::SharedMutex_O>), offsetof(SAFE_TYPE_MACRO(core::HashTableEqual_O),_Mutex), "_Mutex" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mps_ld_s" :NAME "mps_ld_s")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::HashTableEqual_O),_LocationDependency._epoch), "_LocationDependency._epoch" }, // atomic: NIL public: (T T) fixable: NIL good-name: NIL
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mps_ld_s" :NAME "mps_ld_s")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::HashTableEqual_O),_LocationDependency._rs), "_LocationDependency._rs" }, // atomic: NIL public: (T T) fixable: NIL good-name: NIL
// Stamp = llvmo::InsertPoint_O/1507
{ class_kind, STAMP_llvmo__InsertPoint_O, sizeof(llvmo::InsertPoint_O), 0, "llvmo::InsertPoint_O" },
// Stamp = core::Scope_O/1511
{ class_kind, STAMP_core__Scope_O, sizeof(core::Scope_O), 0, "core::Scope_O" },
// Stamp = core::FileScope_O/1515
{ class_kind, STAMP_core__FileScope_O, sizeof(core::FileScope_O), 0, "core::FileScope_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Pathname_O>" :SPECIALIZER "class core::Pathname_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Pathname_O>), offsetof(SAFE_TYPE_MACRO(core::FileScope_O),_pathname), "_pathname" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::FileScope_O),_FileHandle), "_FileHandle" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// Stamp = core::Path_O/1519
{ class_kind, STAMP_core__Path_O, sizeof(core::Path_O), 0, "core::Path_O" },
// second-last-field is-atomic atomic: NIL  name: "basic_string"
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "boost::filesystem::path" :NAME "path")
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>" :NAME "basic_string" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::char_traits<char>" :NAME "char_traits" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 2 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::allocator<char>" :NAME "allocator" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::Path_O),_Path.m_pathname._M_string_length), "_Path.m_pathname._M_string_length" }, // atomic: NIL public: (NIL NIL NIL) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "boost::filesystem::path" :NAME "path")
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>" :NAME "basic_string" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::char_traits<char>" :NAME "char_traits" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 2 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::allocator<char>" :NAME "allocator" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::(anonymous)" :NAME "")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::Path_O),_Path.m_pathname.NO-NAME._M_allocated_capacity), "_Path.m_pathname.NO-NAME._M_allocated_capacity" }, // atomic: NIL public: (NIL NIL NIL T) fixable: NIL good-name: T
// Stamp = core::Pathname_O/1523
{ class_kind, STAMP_core__Pathname_O, sizeof(core::Pathname_O), 0, "core::Pathname_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::Pathname_O),_Host), "_Host" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::Pathname_O),_Device), "_Device" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::Pathname_O),_Directory), "_Directory" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::Pathname_O),_Name), "_Name" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::Pathname_O),_Type), "_Type" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::Pathname_O),_Version), "_Version" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// Stamp = core::LogicalPathname_O/1527
{ class_kind, STAMP_core__LogicalPathname_O, sizeof(core::LogicalPathname_O), 0, "core::LogicalPathname_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::LogicalPathname_O),_Host), "_Host" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::LogicalPathname_O),_Device), "_Device" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::LogicalPathname_O),_Directory), "_Directory" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::LogicalPathname_O),_Name), "_Name" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::LogicalPathname_O),_Type), "_Type" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::LogicalPathname_O),_Version), "_Version" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// Stamp = core::Cache_O/1531
{ class_kind, STAMP_core__Cache_O, sizeof(core::Cache_O), 0, "core::Cache_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::Cache_O),_searches), "_searches" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::Cache_O),_misses), "_misses" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::Cache_O),_total_depth), "_total_depth" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: "GCVector"
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::Vec0<gctools::smart_ptr<core::T_O>>" :NAME "Vec0" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O") :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::GCVector<gctools::smart_ptr<core::T_O>,gctools::GCContainerAllocator<gctools::GCVector_moveable<gctools::smart_ptr<core::T_O>>>>" :NAME "GCVector" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::GCContainerAllocator<gctools::GCVector_moveable<gctools::smart_ptr<core::T_O>>>" :NAME "GCContainerAllocator" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::GCVECTOR-MOVEABLE-CTYPE :KEY "gctools::GCVector_moveable<gctools::smart_ptr<core::T_O>>" :NAME "GCVector_moveable" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::TAGGED-POINTER-CTYPE :KEY "gctools::tagged_pointer<gctools::GCVector_moveable<gctools::smart_ptr<core::T_O>>>" :SPECIALIZER "class gctools::GCVector_moveable<class gctools::smart_ptr<core::T_O> >")
 {  fixed_field, TAGGED_POINTER_OFFSET, sizeof(gctools::tagged_pointer<gctools::GCVector_moveable<gctools::smart_ptr<core::T_O>>>), offsetof(SAFE_TYPE_MACRO(core::Cache_O),_keys._Vector._Contents), "_keys._Vector._Contents" }, // atomic: NIL public: (T T T) fixable: TAGGED-POINTER-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: "GCVector"
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::Vec0<core::CacheRecord>" :NAME "Vec0" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::CacheRecord" :NAME "CacheRecord") :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::GCVector<core::CacheRecord,gctools::GCContainerAllocator<gctools::GCVector_moveable<core::CacheRecord>>>" :NAME "GCVector" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::CacheRecord" :NAME "CacheRecord") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::GCContainerAllocator<gctools::GCVector_moveable<core::CacheRecord>>" :NAME "GCContainerAllocator" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::GCVECTOR-MOVEABLE-CTYPE :KEY "gctools::GCVector_moveable<core::CacheRecord>" :NAME "GCVector_moveable" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::CacheRecord" :NAME "CacheRecord") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::TAGGED-POINTER-CTYPE :KEY "gctools::tagged_pointer<gctools::GCVector_moveable<core::CacheRecord>>" :SPECIALIZER "class gctools::GCVector_moveable<class core::CacheRecord>")
 {  fixed_field, TAGGED_POINTER_OFFSET, sizeof(gctools::tagged_pointer<gctools::GCVector_moveable<core::CacheRecord>>), offsetof(SAFE_TYPE_MACRO(core::Cache_O),_table._Vector._Contents), "_table._Vector._Contents" }, // atomic: NIL public: (T T T) fixable: TAGGED-POINTER-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::Cache_O),_generation), "_generation" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SpinLock" :NAME "SpinLock")
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "std::atomic_flag" :NAME "atomic_flag")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "_Bool")
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::Cache_O),_clear_list_spinlock.lck._M_i), "_clear_list_spinlock.lck._M_i" }, // atomic: NIL public: (T NIL T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::Cache_O),_clear_list_safe), "_clear_list_safe" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// Stamp = core::Number_O/1535
{ class_kind, STAMP_core__Number_O, sizeof(core::Number_O), 0, "core::Number_O" },
// Stamp = core::Real_O/1539
{ class_kind, STAMP_core__Real_O, sizeof(core::Real_O), 0, "core::Real_O" },
// Stamp = core::Rational_O/1543
{ class_kind, STAMP_core__Rational_O, sizeof(core::Rational_O), 0, "core::Rational_O" },
// Stamp = core::Ratio_O/1547
{ class_kind, STAMP_core__Ratio_O, sizeof(core::Ratio_O), 0, "core::Ratio_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Integer_O>" :SPECIALIZER "class core::Integer_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Integer_O>), offsetof(SAFE_TYPE_MACRO(core::Ratio_O),_numerator), "_numerator" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Integer_O>" :SPECIALIZER "class core::Integer_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Integer_O>), offsetof(SAFE_TYPE_MACRO(core::Ratio_O),_denominator), "_denominator" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// Stamp = core::Integer_O/1551
{ class_kind, STAMP_core__Integer_O, sizeof(core::Integer_O), 0, "core::Integer_O" },
// Stamp = core::Bignum_O/1555
{ class_kind, STAMP_core__Bignum_O, sizeof(core::Bignum_O), 0, "core::Bignum_O" },
// Stamp = core::Fixnum_dummy_O/1559
{ class_kind, STAMP_core__Fixnum_dummy_O, sizeof(core::Fixnum_dummy_O), 0, "core::Fixnum_dummy_O" },
// Stamp = core::Float_O/1563
{ class_kind, STAMP_core__Float_O, sizeof(core::Float_O), 0, "core::Float_O" },
// Stamp = core::DoubleFloat_O/1567
{ class_kind, STAMP_core__DoubleFloat_O, sizeof(core::DoubleFloat_O), 0, "core::DoubleFloat_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "double")
// not-exposing {  fixed_field, ctype_double, sizeof(double), offsetof(SAFE_TYPE_MACRO(core::DoubleFloat_O),_Value), "_Value" }, // atomic: NIL public: (NIL) fixable: NIL good-name: T
// Stamp = core::SingleFloat_dummy_O/1571
{ class_kind, STAMP_core__SingleFloat_dummy_O, sizeof(core::SingleFloat_dummy_O), 0, "core::SingleFloat_dummy_O" },
// Stamp = core::LongFloat_O/1575
{ class_kind, STAMP_core__LongFloat_O, sizeof(core::LongFloat_O), 0, "core::LongFloat_O" },
// Stamp = core::ShortFloat_O/1579
{ class_kind, STAMP_core__ShortFloat_O, sizeof(core::ShortFloat_O), 0, "core::ShortFloat_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "float")
// not-exposing {  fixed_field, ctype_float, sizeof(float), offsetof(SAFE_TYPE_MACRO(core::ShortFloat_O),_Value), "_Value" }, // atomic: NIL public: (NIL) fixable: NIL good-name: T
// Stamp = core::Complex_O/1583
{ class_kind, STAMP_core__Complex_O, sizeof(core::Complex_O), 0, "core::Complex_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Real_O>" :SPECIALIZER "class core::Real_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Real_O>), offsetof(SAFE_TYPE_MACRO(core::Complex_O),_real), "_real" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Real_O>" :SPECIALIZER "class core::Real_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Real_O>), offsetof(SAFE_TYPE_MACRO(core::Complex_O),_imaginary), "_imaginary" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// Stamp = core::Stream_O/1587
{ class_kind, STAMP_core__Stream_O, sizeof(core::Stream_O), 0, "core::Stream_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::Stream_O),_Closed), "_Closed" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::Stream_O),_Format), "_Format" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::Stream_O),_ByteSize), "_ByteSize" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::Stream_O),_Flags), "_Flags" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::List_V>" :SPECIALIZER "class core::List_V")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::List_V>), offsetof(SAFE_TYPE_MACRO(core::Stream_O),_ByteStack), "_ByteStack" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::Stream_O),_FormatTable), "_FormatTable" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::Stream_O),_EofChar), "_EofChar" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::Stream_O),_LastOp), "_LastOp" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::Stream_O),_LastChar), "_LastChar" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::Stream_O),_ExternalFormat), "_ExternalFormat" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::Stream_O),_OutputColumn), "_OutputColumn" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::StreamCursor" :NAME "StreamCursor")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "_Bool")
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::Stream_O),_InputCursor._CursorIsValid), "_InputCursor._CursorIsValid" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::StreamCursor" :NAME "StreamCursor")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "long long")
// not-exposing {  fixed_field, ctype_long_long, sizeof(long long), offsetof(SAFE_TYPE_MACRO(core::Stream_O),_InputCursor._LineNumber), "_InputCursor._LineNumber" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::StreamCursor" :NAME "StreamCursor")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned int")
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::Stream_O),_InputCursor._Column), "_InputCursor._Column" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::StreamCursor" :NAME "StreamCursor")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "long long")
// not-exposing {  fixed_field, ctype_long_long, sizeof(long long), offsetof(SAFE_TYPE_MACRO(core::Stream_O),_InputCursor._PrevLineNumber), "_InputCursor._PrevLineNumber" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::StreamCursor" :NAME "StreamCursor")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned int")
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::Stream_O),_InputCursor._PrevColumn), "_InputCursor._PrevColumn" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
// Stamp = core::AnsiStream_O/1591
{ class_kind, STAMP_core__AnsiStream_O, sizeof(core::AnsiStream_O), 0, "core::AnsiStream_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::AnsiStream_O),_Closed), "_Closed" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::AnsiStream_O),_Format), "_Format" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::AnsiStream_O),_ByteSize), "_ByteSize" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::AnsiStream_O),_Flags), "_Flags" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::List_V>" :SPECIALIZER "class core::List_V")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::List_V>), offsetof(SAFE_TYPE_MACRO(core::AnsiStream_O),_ByteStack), "_ByteStack" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::AnsiStream_O),_FormatTable), "_FormatTable" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::AnsiStream_O),_EofChar), "_EofChar" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::AnsiStream_O),_LastOp), "_LastOp" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::AnsiStream_O),_LastChar), "_LastChar" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::AnsiStream_O),_ExternalFormat), "_ExternalFormat" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::AnsiStream_O),_OutputColumn), "_OutputColumn" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::StreamCursor" :NAME "StreamCursor")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "_Bool")
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::AnsiStream_O),_InputCursor._CursorIsValid), "_InputCursor._CursorIsValid" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::StreamCursor" :NAME "StreamCursor")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "long long")
// not-exposing {  fixed_field, ctype_long_long, sizeof(long long), offsetof(SAFE_TYPE_MACRO(core::AnsiStream_O),_InputCursor._LineNumber), "_InputCursor._LineNumber" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::StreamCursor" :NAME "StreamCursor")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned int")
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::AnsiStream_O),_InputCursor._Column), "_InputCursor._Column" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::StreamCursor" :NAME "StreamCursor")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "long long")
// not-exposing {  fixed_field, ctype_long_long, sizeof(long long), offsetof(SAFE_TYPE_MACRO(core::AnsiStream_O),_InputCursor._PrevLineNumber), "_InputCursor._PrevLineNumber" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::StreamCursor" :NAME "StreamCursor")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned int")
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::AnsiStream_O),_InputCursor._PrevColumn), "_InputCursor._PrevColumn" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
// Stamp = core::SynonymStream_O/1595
{ class_kind, STAMP_core__SynonymStream_O, sizeof(core::SynonymStream_O), 0, "core::SynonymStream_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::SynonymStream_O),_Closed), "_Closed" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::SynonymStream_O),_Format), "_Format" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::SynonymStream_O),_ByteSize), "_ByteSize" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::SynonymStream_O),_Flags), "_Flags" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::List_V>" :SPECIALIZER "class core::List_V")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::List_V>), offsetof(SAFE_TYPE_MACRO(core::SynonymStream_O),_ByteStack), "_ByteStack" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::SynonymStream_O),_FormatTable), "_FormatTable" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::SynonymStream_O),_EofChar), "_EofChar" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::SynonymStream_O),_LastOp), "_LastOp" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::SynonymStream_O),_LastChar), "_LastChar" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::SynonymStream_O),_ExternalFormat), "_ExternalFormat" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::SynonymStream_O),_OutputColumn), "_OutputColumn" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::StreamCursor" :NAME "StreamCursor")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "_Bool")
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::SynonymStream_O),_InputCursor._CursorIsValid), "_InputCursor._CursorIsValid" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::StreamCursor" :NAME "StreamCursor")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "long long")
// not-exposing {  fixed_field, ctype_long_long, sizeof(long long), offsetof(SAFE_TYPE_MACRO(core::SynonymStream_O),_InputCursor._LineNumber), "_InputCursor._LineNumber" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::StreamCursor" :NAME "StreamCursor")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned int")
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::SynonymStream_O),_InputCursor._Column), "_InputCursor._Column" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::StreamCursor" :NAME "StreamCursor")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "long long")
// not-exposing {  fixed_field, ctype_long_long, sizeof(long long), offsetof(SAFE_TYPE_MACRO(core::SynonymStream_O),_InputCursor._PrevLineNumber), "_InputCursor._PrevLineNumber" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::StreamCursor" :NAME "StreamCursor")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned int")
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::SynonymStream_O),_InputCursor._PrevColumn), "_InputCursor._PrevColumn" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Symbol_O>" :SPECIALIZER "class core::Symbol_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Symbol_O>), offsetof(SAFE_TYPE_MACRO(core::SynonymStream_O),_SynonymSymbol), "_SynonymSymbol" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// Stamp = core::ConcatenatedStream_O/1599
{ class_kind, STAMP_core__ConcatenatedStream_O, sizeof(core::ConcatenatedStream_O), 0, "core::ConcatenatedStream_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::ConcatenatedStream_O),_Closed), "_Closed" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::ConcatenatedStream_O),_Format), "_Format" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::ConcatenatedStream_O),_ByteSize), "_ByteSize" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::ConcatenatedStream_O),_Flags), "_Flags" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::List_V>" :SPECIALIZER "class core::List_V")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::List_V>), offsetof(SAFE_TYPE_MACRO(core::ConcatenatedStream_O),_ByteStack), "_ByteStack" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::ConcatenatedStream_O),_FormatTable), "_FormatTable" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::ConcatenatedStream_O),_EofChar), "_EofChar" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::ConcatenatedStream_O),_LastOp), "_LastOp" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::ConcatenatedStream_O),_LastChar), "_LastChar" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::ConcatenatedStream_O),_ExternalFormat), "_ExternalFormat" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::ConcatenatedStream_O),_OutputColumn), "_OutputColumn" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::StreamCursor" :NAME "StreamCursor")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "_Bool")
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::ConcatenatedStream_O),_InputCursor._CursorIsValid), "_InputCursor._CursorIsValid" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::StreamCursor" :NAME "StreamCursor")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "long long")
// not-exposing {  fixed_field, ctype_long_long, sizeof(long long), offsetof(SAFE_TYPE_MACRO(core::ConcatenatedStream_O),_InputCursor._LineNumber), "_InputCursor._LineNumber" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::StreamCursor" :NAME "StreamCursor")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned int")
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::ConcatenatedStream_O),_InputCursor._Column), "_InputCursor._Column" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::StreamCursor" :NAME "StreamCursor")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "long long")
// not-exposing {  fixed_field, ctype_long_long, sizeof(long long), offsetof(SAFE_TYPE_MACRO(core::ConcatenatedStream_O),_InputCursor._PrevLineNumber), "_InputCursor._PrevLineNumber" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::StreamCursor" :NAME "StreamCursor")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned int")
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::ConcatenatedStream_O),_InputCursor._PrevColumn), "_InputCursor._PrevColumn" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::ConcatenatedStream_O),_List), "_List" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// Stamp = core::FileStream_O/1603
{ class_kind, STAMP_core__FileStream_O, sizeof(core::FileStream_O), 0, "core::FileStream_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::FileStream_O),_Closed), "_Closed" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::FileStream_O),_Format), "_Format" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::FileStream_O),_ByteSize), "_ByteSize" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::FileStream_O),_Flags), "_Flags" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::List_V>" :SPECIALIZER "class core::List_V")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::List_V>), offsetof(SAFE_TYPE_MACRO(core::FileStream_O),_ByteStack), "_ByteStack" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::FileStream_O),_FormatTable), "_FormatTable" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::FileStream_O),_EofChar), "_EofChar" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::FileStream_O),_LastOp), "_LastOp" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::FileStream_O),_LastChar), "_LastChar" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::FileStream_O),_ExternalFormat), "_ExternalFormat" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::FileStream_O),_OutputColumn), "_OutputColumn" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::StreamCursor" :NAME "StreamCursor")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "_Bool")
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::FileStream_O),_InputCursor._CursorIsValid), "_InputCursor._CursorIsValid" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::StreamCursor" :NAME "StreamCursor")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "long long")
// not-exposing {  fixed_field, ctype_long_long, sizeof(long long), offsetof(SAFE_TYPE_MACRO(core::FileStream_O),_InputCursor._LineNumber), "_InputCursor._LineNumber" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::StreamCursor" :NAME "StreamCursor")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned int")
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::FileStream_O),_InputCursor._Column), "_InputCursor._Column" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::StreamCursor" :NAME "StreamCursor")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "long long")
// not-exposing {  fixed_field, ctype_long_long, sizeof(long long), offsetof(SAFE_TYPE_MACRO(core::FileStream_O),_InputCursor._PrevLineNumber), "_InputCursor._PrevLineNumber" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::StreamCursor" :NAME "StreamCursor")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned int")
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::FileStream_O),_InputCursor._PrevColumn), "_InputCursor._PrevColumn" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::FileStream_O),_Filename), "_Filename" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::FileStream_O),_ElementType), "_ElementType" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// Stamp = core::IOFileStream_O/1607
{ class_kind, STAMP_core__IOFileStream_O, sizeof(core::IOFileStream_O), 0, "core::IOFileStream_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::IOFileStream_O),_Closed), "_Closed" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::IOFileStream_O),_Format), "_Format" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::IOFileStream_O),_ByteSize), "_ByteSize" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::IOFileStream_O),_Flags), "_Flags" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::List_V>" :SPECIALIZER "class core::List_V")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::List_V>), offsetof(SAFE_TYPE_MACRO(core::IOFileStream_O),_ByteStack), "_ByteStack" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::IOFileStream_O),_FormatTable), "_FormatTable" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::IOFileStream_O),_EofChar), "_EofChar" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::IOFileStream_O),_LastOp), "_LastOp" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::IOFileStream_O),_LastChar), "_LastChar" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::IOFileStream_O),_ExternalFormat), "_ExternalFormat" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::IOFileStream_O),_OutputColumn), "_OutputColumn" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::StreamCursor" :NAME "StreamCursor")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "_Bool")
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::IOFileStream_O),_InputCursor._CursorIsValid), "_InputCursor._CursorIsValid" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::StreamCursor" :NAME "StreamCursor")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "long long")
// not-exposing {  fixed_field, ctype_long_long, sizeof(long long), offsetof(SAFE_TYPE_MACRO(core::IOFileStream_O),_InputCursor._LineNumber), "_InputCursor._LineNumber" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::StreamCursor" :NAME "StreamCursor")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned int")
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::IOFileStream_O),_InputCursor._Column), "_InputCursor._Column" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::StreamCursor" :NAME "StreamCursor")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "long long")
// not-exposing {  fixed_field, ctype_long_long, sizeof(long long), offsetof(SAFE_TYPE_MACRO(core::IOFileStream_O),_InputCursor._PrevLineNumber), "_InputCursor._PrevLineNumber" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::StreamCursor" :NAME "StreamCursor")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned int")
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::IOFileStream_O),_InputCursor._PrevColumn), "_InputCursor._PrevColumn" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::IOFileStream_O),_Filename), "_Filename" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::IOFileStream_O),_ElementType), "_ElementType" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::IOFileStream_O),_FileDescriptor), "_FileDescriptor" }, // atomic: NIL public: (NIL) fixable: NIL good-name: T
// Stamp = core::IOStreamStream_O/1611
{ class_kind, STAMP_core__IOStreamStream_O, sizeof(core::IOStreamStream_O), 0, "core::IOStreamStream_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::IOStreamStream_O),_Closed), "_Closed" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::IOStreamStream_O),_Format), "_Format" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::IOStreamStream_O),_ByteSize), "_ByteSize" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::IOStreamStream_O),_Flags), "_Flags" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::List_V>" :SPECIALIZER "class core::List_V")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::List_V>), offsetof(SAFE_TYPE_MACRO(core::IOStreamStream_O),_ByteStack), "_ByteStack" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::IOStreamStream_O),_FormatTable), "_FormatTable" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::IOStreamStream_O),_EofChar), "_EofChar" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::IOStreamStream_O),_LastOp), "_LastOp" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::IOStreamStream_O),_LastChar), "_LastChar" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::IOStreamStream_O),_ExternalFormat), "_ExternalFormat" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::IOStreamStream_O),_OutputColumn), "_OutputColumn" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::StreamCursor" :NAME "StreamCursor")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "_Bool")
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::IOStreamStream_O),_InputCursor._CursorIsValid), "_InputCursor._CursorIsValid" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::StreamCursor" :NAME "StreamCursor")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "long long")
// not-exposing {  fixed_field, ctype_long_long, sizeof(long long), offsetof(SAFE_TYPE_MACRO(core::IOStreamStream_O),_InputCursor._LineNumber), "_InputCursor._LineNumber" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::StreamCursor" :NAME "StreamCursor")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned int")
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::IOStreamStream_O),_InputCursor._Column), "_InputCursor._Column" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::StreamCursor" :NAME "StreamCursor")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "long long")
// not-exposing {  fixed_field, ctype_long_long, sizeof(long long), offsetof(SAFE_TYPE_MACRO(core::IOStreamStream_O),_InputCursor._PrevLineNumber), "_InputCursor._PrevLineNumber" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::StreamCursor" :NAME "StreamCursor")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned int")
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::IOStreamStream_O),_InputCursor._PrevColumn), "_InputCursor._PrevColumn" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::IOStreamStream_O),_Filename), "_Filename" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::IOStreamStream_O),_ElementType), "_ElementType" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// Stamp = core::BroadcastStream_O/1615
{ class_kind, STAMP_core__BroadcastStream_O, sizeof(core::BroadcastStream_O), 0, "core::BroadcastStream_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::BroadcastStream_O),_Closed), "_Closed" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::BroadcastStream_O),_Format), "_Format" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::BroadcastStream_O),_ByteSize), "_ByteSize" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::BroadcastStream_O),_Flags), "_Flags" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::List_V>" :SPECIALIZER "class core::List_V")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::List_V>), offsetof(SAFE_TYPE_MACRO(core::BroadcastStream_O),_ByteStack), "_ByteStack" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::BroadcastStream_O),_FormatTable), "_FormatTable" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::BroadcastStream_O),_EofChar), "_EofChar" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::BroadcastStream_O),_LastOp), "_LastOp" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::BroadcastStream_O),_LastChar), "_LastChar" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::BroadcastStream_O),_ExternalFormat), "_ExternalFormat" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::BroadcastStream_O),_OutputColumn), "_OutputColumn" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::StreamCursor" :NAME "StreamCursor")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "_Bool")
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::BroadcastStream_O),_InputCursor._CursorIsValid), "_InputCursor._CursorIsValid" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::StreamCursor" :NAME "StreamCursor")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "long long")
// not-exposing {  fixed_field, ctype_long_long, sizeof(long long), offsetof(SAFE_TYPE_MACRO(core::BroadcastStream_O),_InputCursor._LineNumber), "_InputCursor._LineNumber" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::StreamCursor" :NAME "StreamCursor")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned int")
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::BroadcastStream_O),_InputCursor._Column), "_InputCursor._Column" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::StreamCursor" :NAME "StreamCursor")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "long long")
// not-exposing {  fixed_field, ctype_long_long, sizeof(long long), offsetof(SAFE_TYPE_MACRO(core::BroadcastStream_O),_InputCursor._PrevLineNumber), "_InputCursor._PrevLineNumber" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::StreamCursor" :NAME "StreamCursor")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned int")
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::BroadcastStream_O),_InputCursor._PrevColumn), "_InputCursor._PrevColumn" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::BroadcastStream_O),_Streams), "_Streams" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// Stamp = core::StringStream_O/1619
{ class_kind, STAMP_core__StringStream_O, sizeof(core::StringStream_O), 0, "core::StringStream_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::StringStream_O),_Closed), "_Closed" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::StringStream_O),_Format), "_Format" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::StringStream_O),_ByteSize), "_ByteSize" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::StringStream_O),_Flags), "_Flags" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::List_V>" :SPECIALIZER "class core::List_V")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::List_V>), offsetof(SAFE_TYPE_MACRO(core::StringStream_O),_ByteStack), "_ByteStack" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::StringStream_O),_FormatTable), "_FormatTable" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::StringStream_O),_EofChar), "_EofChar" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::StringStream_O),_LastOp), "_LastOp" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::StringStream_O),_LastChar), "_LastChar" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::StringStream_O),_ExternalFormat), "_ExternalFormat" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::StringStream_O),_OutputColumn), "_OutputColumn" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::StreamCursor" :NAME "StreamCursor")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "_Bool")
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::StringStream_O),_InputCursor._CursorIsValid), "_InputCursor._CursorIsValid" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::StreamCursor" :NAME "StreamCursor")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "long long")
// not-exposing {  fixed_field, ctype_long_long, sizeof(long long), offsetof(SAFE_TYPE_MACRO(core::StringStream_O),_InputCursor._LineNumber), "_InputCursor._LineNumber" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::StreamCursor" :NAME "StreamCursor")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned int")
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::StringStream_O),_InputCursor._Column), "_InputCursor._Column" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::StreamCursor" :NAME "StreamCursor")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "long long")
// not-exposing {  fixed_field, ctype_long_long, sizeof(long long), offsetof(SAFE_TYPE_MACRO(core::StringStream_O),_InputCursor._PrevLineNumber), "_InputCursor._PrevLineNumber" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::StreamCursor" :NAME "StreamCursor")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned int")
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::StringStream_O),_InputCursor._PrevColumn), "_InputCursor._PrevColumn" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
// Stamp = core::StringOutputStream_O/1623
{ class_kind, STAMP_core__StringOutputStream_O, sizeof(core::StringOutputStream_O), 0, "core::StringOutputStream_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::StringOutputStream_O),_Closed), "_Closed" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::StringOutputStream_O),_Format), "_Format" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::StringOutputStream_O),_ByteSize), "_ByteSize" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::StringOutputStream_O),_Flags), "_Flags" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::List_V>" :SPECIALIZER "class core::List_V")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::List_V>), offsetof(SAFE_TYPE_MACRO(core::StringOutputStream_O),_ByteStack), "_ByteStack" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::StringOutputStream_O),_FormatTable), "_FormatTable" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::StringOutputStream_O),_EofChar), "_EofChar" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::StringOutputStream_O),_LastOp), "_LastOp" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::StringOutputStream_O),_LastChar), "_LastChar" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::StringOutputStream_O),_ExternalFormat), "_ExternalFormat" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::StringOutputStream_O),_OutputColumn), "_OutputColumn" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::StreamCursor" :NAME "StreamCursor")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "_Bool")
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::StringOutputStream_O),_InputCursor._CursorIsValid), "_InputCursor._CursorIsValid" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::StreamCursor" :NAME "StreamCursor")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "long long")
// not-exposing {  fixed_field, ctype_long_long, sizeof(long long), offsetof(SAFE_TYPE_MACRO(core::StringOutputStream_O),_InputCursor._LineNumber), "_InputCursor._LineNumber" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::StreamCursor" :NAME "StreamCursor")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned int")
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::StringOutputStream_O),_InputCursor._Column), "_InputCursor._Column" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::StreamCursor" :NAME "StreamCursor")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "long long")
// not-exposing {  fixed_field, ctype_long_long, sizeof(long long), offsetof(SAFE_TYPE_MACRO(core::StringOutputStream_O),_InputCursor._PrevLineNumber), "_InputCursor._PrevLineNumber" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::StreamCursor" :NAME "StreamCursor")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned int")
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::StringOutputStream_O),_InputCursor._PrevColumn), "_InputCursor._PrevColumn" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Array_O>" :SPECIALIZER "class core::Array_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Array_O>), offsetof(SAFE_TYPE_MACRO(core::StringOutputStream_O),_Contents), "_Contents" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// Stamp = core::StringInputStream_O/1627
{ class_kind, STAMP_core__StringInputStream_O, sizeof(core::StringInputStream_O), 0, "core::StringInputStream_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::StringInputStream_O),_Closed), "_Closed" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::StringInputStream_O),_Format), "_Format" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::StringInputStream_O),_ByteSize), "_ByteSize" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::StringInputStream_O),_Flags), "_Flags" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::List_V>" :SPECIALIZER "class core::List_V")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::List_V>), offsetof(SAFE_TYPE_MACRO(core::StringInputStream_O),_ByteStack), "_ByteStack" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::StringInputStream_O),_FormatTable), "_FormatTable" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::StringInputStream_O),_EofChar), "_EofChar" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::StringInputStream_O),_LastOp), "_LastOp" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::StringInputStream_O),_LastChar), "_LastChar" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::StringInputStream_O),_ExternalFormat), "_ExternalFormat" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::StringInputStream_O),_OutputColumn), "_OutputColumn" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::StreamCursor" :NAME "StreamCursor")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "_Bool")
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::StringInputStream_O),_InputCursor._CursorIsValid), "_InputCursor._CursorIsValid" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::StreamCursor" :NAME "StreamCursor")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "long long")
// not-exposing {  fixed_field, ctype_long_long, sizeof(long long), offsetof(SAFE_TYPE_MACRO(core::StringInputStream_O),_InputCursor._LineNumber), "_InputCursor._LineNumber" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::StreamCursor" :NAME "StreamCursor")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned int")
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::StringInputStream_O),_InputCursor._Column), "_InputCursor._Column" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::StreamCursor" :NAME "StreamCursor")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "long long")
// not-exposing {  fixed_field, ctype_long_long, sizeof(long long), offsetof(SAFE_TYPE_MACRO(core::StringInputStream_O),_InputCursor._PrevLineNumber), "_InputCursor._PrevLineNumber" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::StreamCursor" :NAME "StreamCursor")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned int")
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::StringInputStream_O),_InputCursor._PrevColumn), "_InputCursor._PrevColumn" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Array_O>" :SPECIALIZER "class core::Array_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Array_O>), offsetof(SAFE_TYPE_MACRO(core::StringInputStream_O),_Contents), "_Contents" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "long")
// not-exposing {  fixed_field, ctype_long, sizeof(long), offsetof(SAFE_TYPE_MACRO(core::StringInputStream_O),_InputPosition), "_InputPosition" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "long")
// not-exposing {  fixed_field, ctype_long, sizeof(long), offsetof(SAFE_TYPE_MACRO(core::StringInputStream_O),_InputLimit), "_InputLimit" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// Stamp = core::EchoStream_O/1631
{ class_kind, STAMP_core__EchoStream_O, sizeof(core::EchoStream_O), 0, "core::EchoStream_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::EchoStream_O),_Closed), "_Closed" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::EchoStream_O),_Format), "_Format" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::EchoStream_O),_ByteSize), "_ByteSize" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::EchoStream_O),_Flags), "_Flags" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::List_V>" :SPECIALIZER "class core::List_V")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::List_V>), offsetof(SAFE_TYPE_MACRO(core::EchoStream_O),_ByteStack), "_ByteStack" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::EchoStream_O),_FormatTable), "_FormatTable" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::EchoStream_O),_EofChar), "_EofChar" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::EchoStream_O),_LastOp), "_LastOp" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::EchoStream_O),_LastChar), "_LastChar" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::EchoStream_O),_ExternalFormat), "_ExternalFormat" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::EchoStream_O),_OutputColumn), "_OutputColumn" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::StreamCursor" :NAME "StreamCursor")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "_Bool")
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::EchoStream_O),_InputCursor._CursorIsValid), "_InputCursor._CursorIsValid" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::StreamCursor" :NAME "StreamCursor")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "long long")
// not-exposing {  fixed_field, ctype_long_long, sizeof(long long), offsetof(SAFE_TYPE_MACRO(core::EchoStream_O),_InputCursor._LineNumber), "_InputCursor._LineNumber" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::StreamCursor" :NAME "StreamCursor")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned int")
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::EchoStream_O),_InputCursor._Column), "_InputCursor._Column" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::StreamCursor" :NAME "StreamCursor")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "long long")
// not-exposing {  fixed_field, ctype_long_long, sizeof(long long), offsetof(SAFE_TYPE_MACRO(core::EchoStream_O),_InputCursor._PrevLineNumber), "_InputCursor._PrevLineNumber" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::StreamCursor" :NAME "StreamCursor")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned int")
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::EchoStream_O),_InputCursor._PrevColumn), "_InputCursor._PrevColumn" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::EchoStream_O),_In), "_In" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::EchoStream_O),_Out), "_Out" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// Stamp = core::TwoWayStream_O/1635
{ class_kind, STAMP_core__TwoWayStream_O, sizeof(core::TwoWayStream_O), 0, "core::TwoWayStream_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::TwoWayStream_O),_Closed), "_Closed" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::TwoWayStream_O),_Format), "_Format" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::TwoWayStream_O),_ByteSize), "_ByteSize" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::TwoWayStream_O),_Flags), "_Flags" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::List_V>" :SPECIALIZER "class core::List_V")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::List_V>), offsetof(SAFE_TYPE_MACRO(core::TwoWayStream_O),_ByteStack), "_ByteStack" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::TwoWayStream_O),_FormatTable), "_FormatTable" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::TwoWayStream_O),_EofChar), "_EofChar" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::TwoWayStream_O),_LastOp), "_LastOp" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::TwoWayStream_O),_LastChar), "_LastChar" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::TwoWayStream_O),_ExternalFormat), "_ExternalFormat" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::TwoWayStream_O),_OutputColumn), "_OutputColumn" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::StreamCursor" :NAME "StreamCursor")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "_Bool")
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::TwoWayStream_O),_InputCursor._CursorIsValid), "_InputCursor._CursorIsValid" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::StreamCursor" :NAME "StreamCursor")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "long long")
// not-exposing {  fixed_field, ctype_long_long, sizeof(long long), offsetof(SAFE_TYPE_MACRO(core::TwoWayStream_O),_InputCursor._LineNumber), "_InputCursor._LineNumber" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::StreamCursor" :NAME "StreamCursor")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned int")
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::TwoWayStream_O),_InputCursor._Column), "_InputCursor._Column" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::StreamCursor" :NAME "StreamCursor")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "long long")
// not-exposing {  fixed_field, ctype_long_long, sizeof(long long), offsetof(SAFE_TYPE_MACRO(core::TwoWayStream_O),_InputCursor._PrevLineNumber), "_InputCursor._PrevLineNumber" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::StreamCursor" :NAME "StreamCursor")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned int")
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::TwoWayStream_O),_InputCursor._PrevColumn), "_InputCursor._PrevColumn" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::TwoWayStream_O),_In), "_In" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::TwoWayStream_O),_Out), "_Out" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// Stamp = core::Package_O/1639
{ class_kind, STAMP_core__Package_O, sizeof(core::Package_O), 0, "core::Package_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::HashTableEqual_O>" :SPECIALIZER "class core::HashTableEqual_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::HashTableEqual_O>), offsetof(SAFE_TYPE_MACRO(core::Package_O),_InternalSymbols), "_InternalSymbols" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::HashTableEqual_O>" :SPECIALIZER "class core::HashTableEqual_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::HashTableEqual_O>), offsetof(SAFE_TYPE_MACRO(core::Package_O),_ExternalSymbols), "_ExternalSymbols" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::HashTableEq_O>" :SPECIALIZER "class core::HashTableEq_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::HashTableEq_O>), offsetof(SAFE_TYPE_MACRO(core::Package_O),_Shadowing), "_Shadowing" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::SimpleString_O>" :SPECIALIZER "class core::SimpleString_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::SimpleString_O>), offsetof(SAFE_TYPE_MACRO(core::Package_O),_Name), "_Name" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: "GCVector"
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::Vec0<gctools::smart_ptr<core::Package_O>>" :NAME "Vec0" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Package_O>" :SPECIALIZER "class core::Package_O") :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::GCVector<gctools::smart_ptr<core::Package_O>,gctools::GCContainerAllocator<gctools::GCVector_moveable<gctools::smart_ptr<core::Package_O>>>>" :NAME "GCVector" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Package_O>" :SPECIALIZER "class core::Package_O") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::GCContainerAllocator<gctools::GCVector_moveable<gctools::smart_ptr<core::Package_O>>>" :NAME "GCContainerAllocator" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::GCVECTOR-MOVEABLE-CTYPE :KEY "gctools::GCVector_moveable<gctools::smart_ptr<core::Package_O>>" :NAME "GCVector_moveable" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Package_O>" :SPECIALIZER "class core::Package_O") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::TAGGED-POINTER-CTYPE :KEY "gctools::tagged_pointer<gctools::GCVector_moveable<gctools::smart_ptr<core::Package_O>>>" :SPECIALIZER "class gctools::GCVector_moveable<class gctools::smart_ptr<class core::Package_O> >")
 {  fixed_field, TAGGED_POINTER_OFFSET, sizeof(gctools::tagged_pointer<gctools::GCVector_moveable<gctools::smart_ptr<core::Package_O>>>), offsetof(SAFE_TYPE_MACRO(core::Package_O),_UsingPackages._Vector._Contents), "_UsingPackages._Vector._Contents" }, // atomic: NIL public: (T T T) fixable: TAGGED-POINTER-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: "GCVector"
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::Vec0<gctools::smart_ptr<core::Package_O>>" :NAME "Vec0" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Package_O>" :SPECIALIZER "class core::Package_O") :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::GCVector<gctools::smart_ptr<core::Package_O>,gctools::GCContainerAllocator<gctools::GCVector_moveable<gctools::smart_ptr<core::Package_O>>>>" :NAME "GCVector" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Package_O>" :SPECIALIZER "class core::Package_O") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::GCContainerAllocator<gctools::GCVector_moveable<gctools::smart_ptr<core::Package_O>>>" :NAME "GCContainerAllocator" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::GCVECTOR-MOVEABLE-CTYPE :KEY "gctools::GCVector_moveable<gctools::smart_ptr<core::Package_O>>" :NAME "GCVector_moveable" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Package_O>" :SPECIALIZER "class core::Package_O") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::TAGGED-POINTER-CTYPE :KEY "gctools::tagged_pointer<gctools::GCVector_moveable<gctools::smart_ptr<core::Package_O>>>" :SPECIALIZER "class gctools::GCVector_moveable<class gctools::smart_ptr<class core::Package_O> >")
 {  fixed_field, TAGGED_POINTER_OFFSET, sizeof(gctools::tagged_pointer<gctools::GCVector_moveable<gctools::smart_ptr<core::Package_O>>>), offsetof(SAFE_TYPE_MACRO(core::Package_O),_PackagesUsedBy._Vector._Contents), "_PackagesUsedBy._Vector._Contents" }, // atomic: NIL public: (T T T) fixable: TAGGED-POINTER-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: "__atomic_base"
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::atomic<_Bool>" :NAME "atomic" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "_Bool") :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::__atomic_base<_Bool>" :NAME "__atomic_base" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "_Bool") :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "_Bool")
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::Package_O),_KeywordPackage._M_base._M_i), "_KeywordPackage._M_base._M_i" }, // atomic: NIL public: (T NIL NIL) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: "__atomic_base"
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::atomic<_Bool>" :NAME "atomic" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "_Bool") :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::__atomic_base<_Bool>" :NAME "__atomic_base" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "_Bool") :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "_Bool")
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::Package_O),_AmpPackage._M_base._M_i), "_AmpPackage._M_base._M_i" }, // atomic: NIL public: (T NIL NIL) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: "__atomic_base"
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::atomic<_Bool>" :NAME "atomic" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "_Bool") :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::__atomic_base<_Bool>" :NAME "__atomic_base" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "_Bool") :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "_Bool")
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::Package_O),_ActsLikeKeywordPackage._M_base._M_i), "_ActsLikeKeywordPackage._M_base._M_i" }, // atomic: NIL public: (T NIL NIL) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::List_V>" :SPECIALIZER "class core::List_V")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::List_V>), offsetof(SAFE_TYPE_MACRO(core::Package_O),_Nicknames), "_Nicknames" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::List_V>" :SPECIALIZER "class core::List_V")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::List_V>), offsetof(SAFE_TYPE_MACRO(core::Package_O),_LocalNicknames), "_LocalNicknames" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::Package_O),_Documentation), "_Documentation" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::Package_O),_Lock._r._NameWord), "_Lock._r._NameWord" }, // atomic: NIL public: (T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "(anonymous)" :NAME "")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::Package_O),_Lock._r._Mutex.__count), "_Lock._r._Mutex.__count" }, // atomic: NIL public: (T T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "(anonymous)" :NAME "")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "(anonymous struct)::(anonymous)" :NAME "")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned int")
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::Package_O),_Lock._r._Mutex.__value.__wch), "_Lock._r._Mutex.__value.__wch" }, // atomic: NIL public: (T T T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "long")
// not-exposing {  fixed_field, ctype_long, sizeof(long), offsetof(SAFE_TYPE_MACRO(core::Package_O),_Lock._r._Counter), "_Lock._r._Counter" }, // atomic: NIL public: (T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "_Bool")
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::Package_O),_Lock._r._Recursive), "_Lock._r._Recursive" }, // atomic: NIL public: (T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::Package_O),_Lock._g._NameWord), "_Lock._g._NameWord" }, // atomic: NIL public: (T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "(anonymous)" :NAME "")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::Package_O),_Lock._g._Mutex.__count), "_Lock._g._Mutex.__count" }, // atomic: NIL public: (T T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "(anonymous)" :NAME "")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "(anonymous struct)::(anonymous)" :NAME "")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned int")
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::Package_O),_Lock._g._Mutex.__value.__wch), "_Lock._g._Mutex.__value.__wch" }, // atomic: NIL public: (T T T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "long")
// not-exposing {  fixed_field, ctype_long, sizeof(long), offsetof(SAFE_TYPE_MACRO(core::Package_O),_Lock._g._Counter), "_Lock._g._Counter" }, // atomic: NIL public: (T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "_Bool")
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::Package_O),_Lock._g._Recursive), "_Lock._g._Recursive" }, // atomic: NIL public: (T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::Package_O),_Lock._b), "_Lock._b" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "_Bool")
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::Package_O),systemLockedP), "systemLockedP" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "_Bool")
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::Package_O),userLockedP), "userLockedP" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "_Bool")
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::Package_O),zombieP), "zombieP" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// Stamp = core::FileStatus_O/1643
{ class_kind, STAMP_core__FileStatus_O, sizeof(core::FileStatus_O), 0, "core::FileStatus_O" },
// Stamp = core::InvocationHistoryFrameIterator_O/1647
{ class_kind, STAMP_core__InvocationHistoryFrameIterator_O, sizeof(core::InvocationHistoryFrameIterator_O), 0, "core::InvocationHistoryFrameIterator_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::InvocationHistoryFrameIterator_O),_Index), "_Index" }, // atomic: NIL public: (NIL) fixable: NIL good-name: T
// Stamp = core::SourcePosInfo_O/1651
{ class_kind, STAMP_core__SourcePosInfo_O, sizeof(core::SourcePosInfo_O), 0, "core::SourcePosInfo_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned int")
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::SourcePosInfo_O),_FileId), "_FileId" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SourcePosInfo_O),_Filepos), "_Filepos" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned int")
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::SourcePosInfo_O),_Lineno), "_Lineno" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned int")
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::SourcePosInfo_O),_Column), "_Column" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::SourcePosInfo_O),_FunctionScope), "_FunctionScope" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::SourcePosInfo_O),_InlinedAt), "_InlinedAt" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// Stamp = core::IntArray_O/1655
{ class_kind, STAMP_core__IntArray_O, sizeof(core::IntArray_O), 0, "core::IntArray_O" },
// Stamp = core::DirectoryEntry_O/1659
{ class_kind, STAMP_core__DirectoryEntry_O, sizeof(core::DirectoryEntry_O), 0, "core::DirectoryEntry_O" },
// Stamp = core::LightUserData_O/1663
{ class_kind, STAMP_core__LightUserData_O, sizeof(core::LightUserData_O), 0, "core::LightUserData_O" },
// Stamp = core::UserData_O/1667
{ class_kind, STAMP_core__UserData_O, sizeof(core::UserData_O), 0, "core::UserData_O" },
// Stamp = core::Record_O/1671
{ class_kind, STAMP_core__Record_O, sizeof(core::Record_O), 0, "core::Record_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::List_V>" :SPECIALIZER "class core::List_V")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::List_V>), offsetof(SAFE_TYPE_MACRO(core::Record_O),_alist), "_alist" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::Record_O),_replacement_table), "_replacement_table" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::Record_O),_Seen), "_Seen" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// Stamp = clbind::ClassRegistry_O/1675
{ class_kind, STAMP_clbind__ClassRegistry_O, sizeof(clbind::ClassRegistry_O), 0, "clbind::ClassRegistry_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::HashTableEql_O>" :SPECIALIZER "class core::HashTableEql_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::HashTableEql_O>), offsetof(SAFE_TYPE_MACRO(clbind::ClassRegistry_O),m_classes), "m_classes" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// Stamp = core::Cons_O/1679
{ class_kind, STAMP_core__Cons_O, sizeof(core::Cons_O), 0, "core::Cons_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::Cons_O),_Car), "_Car" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::Cons_O),_Cdr), "_Cdr" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// Stamp = core::Lisp_O/1683
{ class_kind, STAMP_core__Lisp_O, sizeof(core::Lisp_O), 0, "core::Lisp_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._TerminalIO), "_Roots._TerminalIO" }, // atomic: NIL public: (T T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::List_V>" :SPECIALIZER "class core::List_V")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::List_V>), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._ActiveThreads), "_Roots._ActiveThreads" }, // atomic: NIL public: (T T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._ActiveThreadsMutex._r._NameWord), "_Roots._ActiveThreadsMutex._r._NameWord" }, // atomic: NIL public: (T T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "(anonymous)" :NAME "")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._ActiveThreadsMutex._r._Mutex.__count), "_Roots._ActiveThreadsMutex._r._Mutex.__count" }, // atomic: NIL public: (T T T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "(anonymous)" :NAME "")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "(anonymous struct)::(anonymous)" :NAME "")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned int")
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._ActiveThreadsMutex._r._Mutex.__value.__wch), "_Roots._ActiveThreadsMutex._r._Mutex.__value.__wch" }, // atomic: NIL public: (T T T T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "long")
// not-exposing {  fixed_field, ctype_long, sizeof(long), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._ActiveThreadsMutex._r._Counter), "_Roots._ActiveThreadsMutex._r._Counter" }, // atomic: NIL public: (T T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "_Bool")
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._ActiveThreadsMutex._r._Recursive), "_Roots._ActiveThreadsMutex._r._Recursive" }, // atomic: NIL public: (T T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._ActiveThreadsMutex._g._NameWord), "_Roots._ActiveThreadsMutex._g._NameWord" }, // atomic: NIL public: (T T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "(anonymous)" :NAME "")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._ActiveThreadsMutex._g._Mutex.__count), "_Roots._ActiveThreadsMutex._g._Mutex.__count" }, // atomic: NIL public: (T T T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "(anonymous)" :NAME "")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "(anonymous struct)::(anonymous)" :NAME "")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned int")
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._ActiveThreadsMutex._g._Mutex.__value.__wch), "_Roots._ActiveThreadsMutex._g._Mutex.__value.__wch" }, // atomic: NIL public: (T T T T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "long")
// not-exposing {  fixed_field, ctype_long, sizeof(long), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._ActiveThreadsMutex._g._Counter), "_Roots._ActiveThreadsMutex._g._Counter" }, // atomic: NIL public: (T T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "_Bool")
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._ActiveThreadsMutex._g._Recursive), "_Roots._ActiveThreadsMutex._g._Recursive" }, // atomic: NIL public: (T T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._ActiveThreadsMutex._b), "_Roots._ActiveThreadsMutex._b" }, // atomic: NIL public: (T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::List_V>" :SPECIALIZER "class core::List_V")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::List_V>), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._DefaultSpecialBindings), "_Roots._DefaultSpecialBindings" }, // atomic: NIL public: (T T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._DefaultSpecialBindingsMutex._r._NameWord), "_Roots._DefaultSpecialBindingsMutex._r._NameWord" }, // atomic: NIL public: (T T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "(anonymous)" :NAME "")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._DefaultSpecialBindingsMutex._r._Mutex.__count), "_Roots._DefaultSpecialBindingsMutex._r._Mutex.__count" }, // atomic: NIL public: (T T T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "(anonymous)" :NAME "")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "(anonymous struct)::(anonymous)" :NAME "")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned int")
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._DefaultSpecialBindingsMutex._r._Mutex.__value.__wch), "_Roots._DefaultSpecialBindingsMutex._r._Mutex.__value.__wch" }, // atomic: NIL public: (T T T T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "long")
// not-exposing {  fixed_field, ctype_long, sizeof(long), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._DefaultSpecialBindingsMutex._r._Counter), "_Roots._DefaultSpecialBindingsMutex._r._Counter" }, // atomic: NIL public: (T T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "_Bool")
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._DefaultSpecialBindingsMutex._r._Recursive), "_Roots._DefaultSpecialBindingsMutex._r._Recursive" }, // atomic: NIL public: (T T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._DefaultSpecialBindingsMutex._g._NameWord), "_Roots._DefaultSpecialBindingsMutex._g._NameWord" }, // atomic: NIL public: (T T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "(anonymous)" :NAME "")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._DefaultSpecialBindingsMutex._g._Mutex.__count), "_Roots._DefaultSpecialBindingsMutex._g._Mutex.__count" }, // atomic: NIL public: (T T T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "(anonymous)" :NAME "")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "(anonymous struct)::(anonymous)" :NAME "")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned int")
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._DefaultSpecialBindingsMutex._g._Mutex.__value.__wch), "_Roots._DefaultSpecialBindingsMutex._g._Mutex.__value.__wch" }, // atomic: NIL public: (T T T T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "long")
// not-exposing {  fixed_field, ctype_long, sizeof(long), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._DefaultSpecialBindingsMutex._g._Counter), "_Roots._DefaultSpecialBindingsMutex._g._Counter" }, // atomic: NIL public: (T T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "_Bool")
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._DefaultSpecialBindingsMutex._g._Recursive), "_Roots._DefaultSpecialBindingsMutex._g._Recursive" }, // atomic: NIL public: (T T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._DefaultSpecialBindingsMutex._b), "_Roots._DefaultSpecialBindingsMutex._b" }, // atomic: NIL public: (T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._SyspropMutex._r._NameWord), "_Roots._SyspropMutex._r._NameWord" }, // atomic: NIL public: (T T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "(anonymous)" :NAME "")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._SyspropMutex._r._Mutex.__count), "_Roots._SyspropMutex._r._Mutex.__count" }, // atomic: NIL public: (T T T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "(anonymous)" :NAME "")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "(anonymous struct)::(anonymous)" :NAME "")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned int")
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._SyspropMutex._r._Mutex.__value.__wch), "_Roots._SyspropMutex._r._Mutex.__value.__wch" }, // atomic: NIL public: (T T T T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "long")
// not-exposing {  fixed_field, ctype_long, sizeof(long), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._SyspropMutex._r._Counter), "_Roots._SyspropMutex._r._Counter" }, // atomic: NIL public: (T T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "_Bool")
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._SyspropMutex._r._Recursive), "_Roots._SyspropMutex._r._Recursive" }, // atomic: NIL public: (T T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._SyspropMutex._g._NameWord), "_Roots._SyspropMutex._g._NameWord" }, // atomic: NIL public: (T T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "(anonymous)" :NAME "")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._SyspropMutex._g._Mutex.__count), "_Roots._SyspropMutex._g._Mutex.__count" }, // atomic: NIL public: (T T T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "(anonymous)" :NAME "")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "(anonymous struct)::(anonymous)" :NAME "")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned int")
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._SyspropMutex._g._Mutex.__value.__wch), "_Roots._SyspropMutex._g._Mutex.__value.__wch" }, // atomic: NIL public: (T T T T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "long")
// not-exposing {  fixed_field, ctype_long, sizeof(long), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._SyspropMutex._g._Counter), "_Roots._SyspropMutex._g._Counter" }, // atomic: NIL public: (T T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "_Bool")
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._SyspropMutex._g._Recursive), "_Roots._SyspropMutex._g._Recursive" }, // atomic: NIL public: (T T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._SyspropMutex._b), "_Roots._SyspropMutex._b" }, // atomic: NIL public: (T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._FinalizersMutex._r._NameWord), "_Roots._FinalizersMutex._r._NameWord" }, // atomic: NIL public: (T T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "(anonymous)" :NAME "")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._FinalizersMutex._r._Mutex.__count), "_Roots._FinalizersMutex._r._Mutex.__count" }, // atomic: NIL public: (T T T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "(anonymous)" :NAME "")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "(anonymous struct)::(anonymous)" :NAME "")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned int")
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._FinalizersMutex._r._Mutex.__value.__wch), "_Roots._FinalizersMutex._r._Mutex.__value.__wch" }, // atomic: NIL public: (T T T T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "long")
// not-exposing {  fixed_field, ctype_long, sizeof(long), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._FinalizersMutex._r._Counter), "_Roots._FinalizersMutex._r._Counter" }, // atomic: NIL public: (T T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "_Bool")
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._FinalizersMutex._r._Recursive), "_Roots._FinalizersMutex._r._Recursive" }, // atomic: NIL public: (T T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._FinalizersMutex._g._NameWord), "_Roots._FinalizersMutex._g._NameWord" }, // atomic: NIL public: (T T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "(anonymous)" :NAME "")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._FinalizersMutex._g._Mutex.__count), "_Roots._FinalizersMutex._g._Mutex.__count" }, // atomic: NIL public: (T T T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "(anonymous)" :NAME "")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "(anonymous struct)::(anonymous)" :NAME "")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned int")
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._FinalizersMutex._g._Mutex.__value.__wch), "_Roots._FinalizersMutex._g._Mutex.__value.__wch" }, // atomic: NIL public: (T T T T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "long")
// not-exposing {  fixed_field, ctype_long, sizeof(long), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._FinalizersMutex._g._Counter), "_Roots._FinalizersMutex._g._Counter" }, // atomic: NIL public: (T T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "_Bool")
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._FinalizersMutex._g._Recursive), "_Roots._FinalizersMutex._g._Recursive" }, // atomic: NIL public: (T T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._FinalizersMutex._b), "_Roots._FinalizersMutex._b" }, // atomic: NIL public: (T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::WeakKeyHashTable_O>" :SPECIALIZER "class core::WeakKeyHashTable_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::WeakKeyHashTable_O>), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._Finalizers), "_Roots._Finalizers" }, // atomic: NIL public: (T T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::HashTable_O>" :SPECIALIZER "class core::HashTable_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::HashTable_O>), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._Sysprop), "_Roots._Sysprop" }, // atomic: NIL public: (T T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._ClassTableMutex._r._NameWord), "_Roots._ClassTableMutex._r._NameWord" }, // atomic: NIL public: (T T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "(anonymous)" :NAME "")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._ClassTableMutex._r._Mutex.__count), "_Roots._ClassTableMutex._r._Mutex.__count" }, // atomic: NIL public: (T T T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "(anonymous)" :NAME "")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "(anonymous struct)::(anonymous)" :NAME "")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned int")
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._ClassTableMutex._r._Mutex.__value.__wch), "_Roots._ClassTableMutex._r._Mutex.__value.__wch" }, // atomic: NIL public: (T T T T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "long")
// not-exposing {  fixed_field, ctype_long, sizeof(long), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._ClassTableMutex._r._Counter), "_Roots._ClassTableMutex._r._Counter" }, // atomic: NIL public: (T T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "_Bool")
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._ClassTableMutex._r._Recursive), "_Roots._ClassTableMutex._r._Recursive" }, // atomic: NIL public: (T T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._ClassTableMutex._g._NameWord), "_Roots._ClassTableMutex._g._NameWord" }, // atomic: NIL public: (T T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "(anonymous)" :NAME "")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._ClassTableMutex._g._Mutex.__count), "_Roots._ClassTableMutex._g._Mutex.__count" }, // atomic: NIL public: (T T T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "(anonymous)" :NAME "")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "(anonymous struct)::(anonymous)" :NAME "")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned int")
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._ClassTableMutex._g._Mutex.__value.__wch), "_Roots._ClassTableMutex._g._Mutex.__value.__wch" }, // atomic: NIL public: (T T T T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "long")
// not-exposing {  fixed_field, ctype_long, sizeof(long), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._ClassTableMutex._g._Counter), "_Roots._ClassTableMutex._g._Counter" }, // atomic: NIL public: (T T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "_Bool")
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._ClassTableMutex._g._Recursive), "_Roots._ClassTableMutex._g._Recursive" }, // atomic: NIL public: (T T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._ClassTableMutex._b), "_Roots._ClassTableMutex._b" }, // atomic: NIL public: (T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::HashTable_O>" :SPECIALIZER "class core::HashTable_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::HashTable_O>), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._ClassTable), "_Roots._ClassTable" }, // atomic: NIL public: (T T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Integer_O>" :SPECIALIZER "class core::Integer_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Integer_O>), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._IntegerOverflowAdjust), "_Roots._IntegerOverflowAdjust" }, // atomic: NIL public: (T T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: "_Rb_tree_impl"
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::CharacterInfo" :NAME "CharacterInfo")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::map<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,int,std::less<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>,std::allocator<std::pair<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,int>>>" :NAME "map" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>" :NAME "basic_string" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::char_traits<char>" :NAME "char_traits" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 2 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::allocator<char>" :NAME "allocator" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 2 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::less<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>" :NAME "less" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>" :NAME "basic_string" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::char_traits<char>" :NAME "char_traits" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 2 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::allocator<char>" :NAME "allocator" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 3 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::allocator<std::pair<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,int>>" :NAME "allocator" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::pair<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,int>" :NAME "pair" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>" :NAME "basic_string" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::char_traits<char>" :NAME "char_traits" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 2 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::allocator<char>" :NAME "allocator" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::_Rb_tree<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::pair<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,int>,std::_Select1st<std::pair<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,int>>,std::less<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>,std::allocator<std::pair<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,int>>>" :NAME "_Rb_tree" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>" :NAME "basic_string" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::char_traits<char>" :NAME "char_traits" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 2 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::allocator<char>" :NAME "allocator" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::pair<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,int>" :NAME "pair" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>" :NAME "basic_string" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::char_traits<char>" :NAME "char_traits" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 2 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::allocator<char>" :NAME "allocator" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 2 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::_Select1st<std::pair<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,int>>" :NAME "_Select1st" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::pair<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,int>" :NAME "pair" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>" :NAME "basic_string" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::char_traits<char>" :NAME "char_traits" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 2 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::allocator<char>" :NAME "allocator" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 3 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::less<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>" :NAME "less" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>" :NAME "basic_string" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::char_traits<char>" :NAME "char_traits" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 2 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::allocator<char>" :NAME "allocator" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 4 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::allocator<std::pair<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,int>>" :NAME "allocator" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::pair<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,int>" :NAME "pair" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>" :NAME "basic_string" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::char_traits<char>" :NAME "char_traits" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 2 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::allocator<char>" :NAME "allocator" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PROTECTED   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, int>, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, int> >, std::less<std::__cxx11::basic_string<char> >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, int> > >::_Rb_tree_impl<std::less<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>,1>" :NAME "_Rb_tree_impl" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::less<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>" :NAME "less" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>" :NAME "basic_string" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::char_traits<char>" :NAME "char_traits" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 2 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::allocator<char>" :NAME "allocator" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE NIL :INTEGRAL-VALUE "1")))
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots.charInfo.gNamesToCharacterIndex._M_t._M_impl._M_node_count), "_Roots.charInfo.gNamesToCharacterIndex._M_t._M_impl._M_node_count" }, // atomic: NIL public: (T T T NIL NIL T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: "GCVector"
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::CharacterInfo" :NAME "CharacterInfo")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::Vec0<gctools::smart_ptr<core::T_O>>" :NAME "Vec0" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O") :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::GCVector<gctools::smart_ptr<core::T_O>,gctools::GCContainerAllocator<gctools::GCVector_moveable<gctools::smart_ptr<core::T_O>>>>" :NAME "GCVector" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::GCContainerAllocator<gctools::GCVector_moveable<gctools::smart_ptr<core::T_O>>>" :NAME "GCContainerAllocator" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::GCVECTOR-MOVEABLE-CTYPE :KEY "gctools::GCVector_moveable<gctools::smart_ptr<core::T_O>>" :NAME "GCVector_moveable" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::TAGGED-POINTER-CTYPE :KEY "gctools::tagged_pointer<gctools::GCVector_moveable<gctools::smart_ptr<core::T_O>>>" :SPECIALIZER "class gctools::GCVector_moveable<class gctools::smart_ptr<core::T_O> >")
 {  fixed_field, TAGGED_POINTER_OFFSET, sizeof(gctools::tagged_pointer<gctools::GCVector_moveable<gctools::smart_ptr<core::T_O>>>), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots.charInfo.gIndexedCharacters._Vector._Contents), "_Roots.charInfo.gIndexedCharacters._Vector._Contents" }, // atomic: NIL public: (T T T T T) fixable: TAGGED-POINTER-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: "GCVector"
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::CharacterInfo" :NAME "CharacterInfo")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::Vec0<gctools::smart_ptr<core::T_O>>" :NAME "Vec0" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O") :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::GCVector<gctools::smart_ptr<core::T_O>,gctools::GCContainerAllocator<gctools::GCVector_moveable<gctools::smart_ptr<core::T_O>>>>" :NAME "GCVector" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::GCContainerAllocator<gctools::GCVector_moveable<gctools::smart_ptr<core::T_O>>>" :NAME "GCContainerAllocator" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::GCVECTOR-MOVEABLE-CTYPE :KEY "gctools::GCVector_moveable<gctools::smart_ptr<core::T_O>>" :NAME "GCVector_moveable" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::TAGGED-POINTER-CTYPE :KEY "gctools::tagged_pointer<gctools::GCVector_moveable<gctools::smart_ptr<core::T_O>>>" :SPECIALIZER "class gctools::GCVector_moveable<class gctools::smart_ptr<core::T_O> >")
 {  fixed_field, TAGGED_POINTER_OFFSET, sizeof(gctools::tagged_pointer<gctools::GCVector_moveable<gctools::smart_ptr<core::T_O>>>), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots.charInfo.gCharacterNames._Vector._Contents), "_Roots.charInfo.gCharacterNames._Vector._Contents" }, // atomic: NIL public: (T T T T T) fixable: TAGGED-POINTER-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: "GCVector"
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::Vec0<gctools::smart_ptr<core::Symbol_O>>" :NAME "Vec0" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Symbol_O>" :SPECIALIZER "class core::Symbol_O") :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::GCVector<gctools::smart_ptr<core::Symbol_O>,gctools::GCContainerAllocator<gctools::GCVector_moveable<gctools::smart_ptr<core::Symbol_O>>>>" :NAME "GCVector" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Symbol_O>" :SPECIALIZER "class core::Symbol_O") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::GCContainerAllocator<gctools::GCVector_moveable<gctools::smart_ptr<core::Symbol_O>>>" :NAME "GCContainerAllocator" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::GCVECTOR-MOVEABLE-CTYPE :KEY "gctools::GCVector_moveable<gctools::smart_ptr<core::Symbol_O>>" :NAME "GCVector_moveable" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Symbol_O>" :SPECIALIZER "class core::Symbol_O") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::TAGGED-POINTER-CTYPE :KEY "gctools::tagged_pointer<gctools::GCVector_moveable<gctools::smart_ptr<core::Symbol_O>>>" :SPECIALIZER "class gctools::GCVector_moveable<class gctools::smart_ptr<core::Symbol_O> >")
 {  fixed_field, TAGGED_POINTER_OFFSET, sizeof(gctools::tagged_pointer<gctools::GCVector_moveable<gctools::smart_ptr<core::Symbol_O>>>), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._ClassSymbolsHolderUnshiftedNowhere._Vector._Contents), "_Roots._ClassSymbolsHolderUnshiftedNowhere._Vector._Contents" }, // atomic: NIL public: (T T T T) fixable: TAGGED-POINTER-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: "GCVector"
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::Vec0<gctools::smart_ptr<core::Instance_O>>" :NAME "Vec0" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Instance_O>" :SPECIALIZER "class core::Instance_O") :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::GCVector<gctools::smart_ptr<core::Instance_O>,gctools::GCContainerAllocator<gctools::GCVector_moveable<gctools::smart_ptr<core::Instance_O>>>>" :NAME "GCVector" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Instance_O>" :SPECIALIZER "class core::Instance_O") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::GCContainerAllocator<gctools::GCVector_moveable<gctools::smart_ptr<core::Instance_O>>>" :NAME "GCContainerAllocator" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::GCVECTOR-MOVEABLE-CTYPE :KEY "gctools::GCVector_moveable<gctools::smart_ptr<core::Instance_O>>" :NAME "GCVector_moveable" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Instance_O>" :SPECIALIZER "class core::Instance_O") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::TAGGED-POINTER-CTYPE :KEY "gctools::tagged_pointer<gctools::GCVector_moveable<gctools::smart_ptr<core::Instance_O>>>" :SPECIALIZER "class gctools::GCVector_moveable<class gctools::smart_ptr<class core::Instance_O> >")
 {  fixed_field, TAGGED_POINTER_OFFSET, sizeof(gctools::tagged_pointer<gctools::GCVector_moveable<gctools::smart_ptr<core::Instance_O>>>), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots.staticClassesUnshiftedNowhere._Vector._Contents), "_Roots.staticClassesUnshiftedNowhere._Vector._Contents" }, // atomic: NIL public: (T T T T) fixable: TAGGED-POINTER-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: "GCVector"
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::Vec0<gctools::smart_ptr<core::Symbol_O>>" :NAME "Vec0" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Symbol_O>" :SPECIALIZER "class core::Symbol_O") :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::GCVector<gctools::smart_ptr<core::Symbol_O>,gctools::GCContainerAllocator<gctools::GCVector_moveable<gctools::smart_ptr<core::Symbol_O>>>>" :NAME "GCVector" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Symbol_O>" :SPECIALIZER "class core::Symbol_O") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::GCContainerAllocator<gctools::GCVector_moveable<gctools::smart_ptr<core::Symbol_O>>>" :NAME "GCContainerAllocator" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::GCVECTOR-MOVEABLE-CTYPE :KEY "gctools::GCVector_moveable<gctools::smart_ptr<core::Symbol_O>>" :NAME "GCVector_moveable" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Symbol_O>" :SPECIALIZER "class core::Symbol_O") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::TAGGED-POINTER-CTYPE :KEY "gctools::tagged_pointer<gctools::GCVector_moveable<gctools::smart_ptr<core::Symbol_O>>>" :SPECIALIZER "class gctools::GCVector_moveable<class gctools::smart_ptr<core::Symbol_O> >")
 {  fixed_field, TAGGED_POINTER_OFFSET, sizeof(gctools::tagged_pointer<gctools::GCVector_moveable<gctools::smart_ptr<core::Symbol_O>>>), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots.staticClassSymbolsUnshiftedNowhere._Vector._Contents), "_Roots.staticClassSymbolsUnshiftedNowhere._Vector._Contents" }, // atomic: NIL public: (T T T T) fixable: TAGGED-POINTER-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: "GCVector"
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::Vec0<gctools::smart_ptr<core::Creator_O>>" :NAME "Vec0" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Creator_O>" :SPECIALIZER "class core::Creator_O") :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::GCVector<gctools::smart_ptr<core::Creator_O>,gctools::GCContainerAllocator<gctools::GCVector_moveable<gctools::smart_ptr<core::Creator_O>>>>" :NAME "GCVector" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Creator_O>" :SPECIALIZER "class core::Creator_O") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::GCContainerAllocator<gctools::GCVector_moveable<gctools::smart_ptr<core::Creator_O>>>" :NAME "GCContainerAllocator" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::GCVECTOR-MOVEABLE-CTYPE :KEY "gctools::GCVector_moveable<gctools::smart_ptr<core::Creator_O>>" :NAME "GCVector_moveable" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Creator_O>" :SPECIALIZER "class core::Creator_O") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::TAGGED-POINTER-CTYPE :KEY "gctools::tagged_pointer<gctools::GCVector_moveable<gctools::smart_ptr<core::Creator_O>>>" :SPECIALIZER "class gctools::GCVector_moveable<class gctools::smart_ptr<class core::Creator_O> >")
 {  fixed_field, TAGGED_POINTER_OFFSET, sizeof(gctools::tagged_pointer<gctools::GCVector_moveable<gctools::smart_ptr<core::Creator_O>>>), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots.staticInstanceCreatorsUnshiftedNowhere._Vector._Contents), "_Roots.staticInstanceCreatorsUnshiftedNowhere._Vector._Contents" }, // atomic: NIL public: (T T T T) fixable: TAGGED-POINTER-FIX good-name: T
// second-last-field is-atomic atomic: T  name: "atomic"
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::atomic<gctools::smart_ptr<core::T_O>>" :NAME "atomic" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O") :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._JITDylibs), "_Roots._JITDylibs" }, // atomic: T public: (T T NIL) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: "GCVector"
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::Vec0<gctools::smart_ptr<core::FileScope_O>>" :NAME "Vec0" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::FileScope_O>" :SPECIALIZER "class core::FileScope_O") :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::GCVector<gctools::smart_ptr<core::FileScope_O>,gctools::GCContainerAllocator<gctools::GCVector_moveable<gctools::smart_ptr<core::FileScope_O>>>>" :NAME "GCVector" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::FileScope_O>" :SPECIALIZER "class core::FileScope_O") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::GCContainerAllocator<gctools::GCVector_moveable<gctools::smart_ptr<core::FileScope_O>>>" :NAME "GCContainerAllocator" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::GCVECTOR-MOVEABLE-CTYPE :KEY "gctools::GCVector_moveable<gctools::smart_ptr<core::FileScope_O>>" :NAME "GCVector_moveable" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::FileScope_O>" :SPECIALIZER "class core::FileScope_O") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::TAGGED-POINTER-CTYPE :KEY "gctools::tagged_pointer<gctools::GCVector_moveable<gctools::smart_ptr<core::FileScope_O>>>" :SPECIALIZER "class gctools::GCVector_moveable<class gctools::smart_ptr<class core::FileScope_O> >")
 {  fixed_field, TAGGED_POINTER_OFFSET, sizeof(gctools::tagged_pointer<gctools::GCVector_moveable<gctools::smart_ptr<core::FileScope_O>>>), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._SourceFiles._Vector._Contents), "_Roots._SourceFiles._Vector._Contents" }, // atomic: NIL public: (T T T T) fixable: TAGGED-POINTER-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: "_Rb_tree_impl"
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::map<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,int,std::less<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>,std::allocator<std::pair<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,int>>>" :NAME "map" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>" :NAME "basic_string" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::char_traits<char>" :NAME "char_traits" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 2 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::allocator<char>" :NAME "allocator" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 2 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::less<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>" :NAME "less" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>" :NAME "basic_string" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::char_traits<char>" :NAME "char_traits" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 2 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::allocator<char>" :NAME "allocator" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 3 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::allocator<std::pair<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,int>>" :NAME "allocator" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::pair<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,int>" :NAME "pair" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>" :NAME "basic_string" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::char_traits<char>" :NAME "char_traits" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 2 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::allocator<char>" :NAME "allocator" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::_Rb_tree<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::pair<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,int>,std::_Select1st<std::pair<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,int>>,std::less<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>,std::allocator<std::pair<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,int>>>" :NAME "_Rb_tree" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>" :NAME "basic_string" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::char_traits<char>" :NAME "char_traits" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 2 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::allocator<char>" :NAME "allocator" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::pair<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,int>" :NAME "pair" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>" :NAME "basic_string" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::char_traits<char>" :NAME "char_traits" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 2 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::allocator<char>" :NAME "allocator" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 2 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::_Select1st<std::pair<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,int>>" :NAME "_Select1st" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::pair<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,int>" :NAME "pair" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>" :NAME "basic_string" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::char_traits<char>" :NAME "char_traits" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 2 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::allocator<char>" :NAME "allocator" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 3 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::less<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>" :NAME "less" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>" :NAME "basic_string" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::char_traits<char>" :NAME "char_traits" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 2 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::allocator<char>" :NAME "allocator" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 4 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::allocator<std::pair<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,int>>" :NAME "allocator" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::pair<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,int>" :NAME "pair" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>" :NAME "basic_string" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::char_traits<char>" :NAME "char_traits" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 2 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::allocator<char>" :NAME "allocator" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PROTECTED   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, int>, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, int> >, std::less<std::__cxx11::basic_string<char> >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, int> > >::_Rb_tree_impl<std::less<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>,1>" :NAME "_Rb_tree_impl" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::less<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>" :NAME "less" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>" :NAME "basic_string" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::char_traits<char>" :NAME "char_traits" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 2 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::allocator<char>" :NAME "allocator" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE NIL :INTEGRAL-VALUE "1")))
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._SourceFileIndices._M_t._M_impl._M_node_count), "_Roots._SourceFileIndices._M_t._M_impl._M_node_count" }, // atomic: NIL public: (T T NIL NIL T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._SourceFilesMutex._r._NameWord), "_Roots._SourceFilesMutex._r._NameWord" }, // atomic: NIL public: (T T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "(anonymous)" :NAME "")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._SourceFilesMutex._r._Mutex.__count), "_Roots._SourceFilesMutex._r._Mutex.__count" }, // atomic: NIL public: (T T T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "(anonymous)" :NAME "")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "(anonymous struct)::(anonymous)" :NAME "")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned int")
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._SourceFilesMutex._r._Mutex.__value.__wch), "_Roots._SourceFilesMutex._r._Mutex.__value.__wch" }, // atomic: NIL public: (T T T T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "long")
// not-exposing {  fixed_field, ctype_long, sizeof(long), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._SourceFilesMutex._r._Counter), "_Roots._SourceFilesMutex._r._Counter" }, // atomic: NIL public: (T T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "_Bool")
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._SourceFilesMutex._r._Recursive), "_Roots._SourceFilesMutex._r._Recursive" }, // atomic: NIL public: (T T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._SourceFilesMutex._g._NameWord), "_Roots._SourceFilesMutex._g._NameWord" }, // atomic: NIL public: (T T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "(anonymous)" :NAME "")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._SourceFilesMutex._g._Mutex.__count), "_Roots._SourceFilesMutex._g._Mutex.__count" }, // atomic: NIL public: (T T T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "(anonymous)" :NAME "")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "(anonymous struct)::(anonymous)" :NAME "")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned int")
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._SourceFilesMutex._g._Mutex.__value.__wch), "_Roots._SourceFilesMutex._g._Mutex.__value.__wch" }, // atomic: NIL public: (T T T T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "long")
// not-exposing {  fixed_field, ctype_long, sizeof(long), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._SourceFilesMutex._g._Counter), "_Roots._SourceFilesMutex._g._Counter" }, // atomic: NIL public: (T T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "_Bool")
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._SourceFilesMutex._g._Recursive), "_Roots._SourceFilesMutex._g._Recursive" }, // atomic: NIL public: (T T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._SourceFilesMutex._b), "_Roots._SourceFilesMutex._b" }, // atomic: NIL public: (T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: "GCVector"
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::Vec0<core::SymbolClassHolderPair>" :NAME "Vec0" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::SymbolClassHolderPair" :NAME "SymbolClassHolderPair") :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::GCVector<core::SymbolClassHolderPair,gctools::GCContainerAllocator<gctools::GCVector_moveable<core::SymbolClassHolderPair>>>" :NAME "GCVector" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::SymbolClassHolderPair" :NAME "SymbolClassHolderPair") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::GCContainerAllocator<gctools::GCVector_moveable<core::SymbolClassHolderPair>>" :NAME "GCContainerAllocator" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::GCVECTOR-MOVEABLE-CTYPE :KEY "gctools::GCVector_moveable<core::SymbolClassHolderPair>" :NAME "GCVector_moveable" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::SymbolClassHolderPair" :NAME "SymbolClassHolderPair") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::TAGGED-POINTER-CTYPE :KEY "gctools::tagged_pointer<gctools::GCVector_moveable<core::SymbolClassHolderPair>>" :SPECIALIZER "class gctools::GCVector_moveable<class core::SymbolClassHolderPair>")
 {  fixed_field, TAGGED_POINTER_OFFSET, sizeof(gctools::tagged_pointer<gctools::GCVector_moveable<core::SymbolClassHolderPair>>), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots.bootClassTable._Vector._Contents), "_Roots.bootClassTable._Vector._Contents" }, // atomic: NIL public: (T T T T) fixable: TAGGED-POINTER-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::List_V>" :SPECIALIZER "class core::List_V")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::List_V>), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._CommandLineArguments), "_Roots._CommandLineArguments" }, // atomic: NIL public: (T T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: "GCVector"
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::Vec0<gctools::smart_ptr<core::Package_O>>" :NAME "Vec0" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Package_O>" :SPECIALIZER "class core::Package_O") :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::GCVector<gctools::smart_ptr<core::Package_O>,gctools::GCContainerAllocator<gctools::GCVector_moveable<gctools::smart_ptr<core::Package_O>>>>" :NAME "GCVector" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Package_O>" :SPECIALIZER "class core::Package_O") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::GCContainerAllocator<gctools::GCVector_moveable<gctools::smart_ptr<core::Package_O>>>" :NAME "GCContainerAllocator" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::GCVECTOR-MOVEABLE-CTYPE :KEY "gctools::GCVector_moveable<gctools::smart_ptr<core::Package_O>>" :NAME "GCVector_moveable" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Package_O>" :SPECIALIZER "class core::Package_O") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::TAGGED-POINTER-CTYPE :KEY "gctools::tagged_pointer<gctools::GCVector_moveable<gctools::smart_ptr<core::Package_O>>>" :SPECIALIZER "class gctools::GCVector_moveable<class gctools::smart_ptr<class core::Package_O> >")
 {  fixed_field, TAGGED_POINTER_OFFSET, sizeof(gctools::tagged_pointer<gctools::GCVector_moveable<gctools::smart_ptr<core::Package_O>>>), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._Packages._Vector._Contents), "_Roots._Packages._Vector._Contents" }, // atomic: NIL public: (T T T T) fixable: TAGGED-POINTER-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: "_Rb_tree_impl"
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::map<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,int,std::less<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>,std::allocator<std::pair<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,int>>>" :NAME "map" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>" :NAME "basic_string" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::char_traits<char>" :NAME "char_traits" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 2 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::allocator<char>" :NAME "allocator" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 2 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::less<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>" :NAME "less" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>" :NAME "basic_string" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::char_traits<char>" :NAME "char_traits" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 2 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::allocator<char>" :NAME "allocator" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 3 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::allocator<std::pair<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,int>>" :NAME "allocator" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::pair<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,int>" :NAME "pair" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>" :NAME "basic_string" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::char_traits<char>" :NAME "char_traits" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 2 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::allocator<char>" :NAME "allocator" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::_Rb_tree<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::pair<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,int>,std::_Select1st<std::pair<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,int>>,std::less<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>,std::allocator<std::pair<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,int>>>" :NAME "_Rb_tree" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>" :NAME "basic_string" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::char_traits<char>" :NAME "char_traits" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 2 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::allocator<char>" :NAME "allocator" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::pair<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,int>" :NAME "pair" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>" :NAME "basic_string" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::char_traits<char>" :NAME "char_traits" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 2 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::allocator<char>" :NAME "allocator" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 2 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::_Select1st<std::pair<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,int>>" :NAME "_Select1st" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::pair<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,int>" :NAME "pair" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>" :NAME "basic_string" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::char_traits<char>" :NAME "char_traits" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 2 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::allocator<char>" :NAME "allocator" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 3 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::less<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>" :NAME "less" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>" :NAME "basic_string" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::char_traits<char>" :NAME "char_traits" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 2 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::allocator<char>" :NAME "allocator" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 4 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::allocator<std::pair<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,int>>" :NAME "allocator" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::pair<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,int>" :NAME "pair" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>" :NAME "basic_string" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::char_traits<char>" :NAME "char_traits" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 2 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::allocator<char>" :NAME "allocator" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PROTECTED   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, int>, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, int> >, std::less<std::__cxx11::basic_string<char> >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, int> > >::_Rb_tree_impl<std::less<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>,1>" :NAME "_Rb_tree_impl" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::less<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>" :NAME "less" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>" :NAME "basic_string" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::char_traits<char>" :NAME "char_traits" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 2 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::allocator<char>" :NAME "allocator" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE NIL :INTEGRAL-VALUE "1")))
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._PackageNameIndexMap._M_t._M_impl._M_node_count), "_Roots._PackageNameIndexMap._M_t._M_impl._M_node_count" }, // atomic: NIL public: (T T NIL NIL T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._PackagesMutex._r._NameWord), "_Roots._PackagesMutex._r._NameWord" }, // atomic: NIL public: (T T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "(anonymous)" :NAME "")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._PackagesMutex._r._Mutex.__count), "_Roots._PackagesMutex._r._Mutex.__count" }, // atomic: NIL public: (T T T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "(anonymous)" :NAME "")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "(anonymous struct)::(anonymous)" :NAME "")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned int")
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._PackagesMutex._r._Mutex.__value.__wch), "_Roots._PackagesMutex._r._Mutex.__value.__wch" }, // atomic: NIL public: (T T T T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "long")
// not-exposing {  fixed_field, ctype_long, sizeof(long), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._PackagesMutex._r._Counter), "_Roots._PackagesMutex._r._Counter" }, // atomic: NIL public: (T T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "_Bool")
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._PackagesMutex._r._Recursive), "_Roots._PackagesMutex._r._Recursive" }, // atomic: NIL public: (T T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._PackagesMutex._g._NameWord), "_Roots._PackagesMutex._g._NameWord" }, // atomic: NIL public: (T T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "(anonymous)" :NAME "")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._PackagesMutex._g._Mutex.__count), "_Roots._PackagesMutex._g._Mutex.__count" }, // atomic: NIL public: (T T T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "(anonymous)" :NAME "")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "(anonymous struct)::(anonymous)" :NAME "")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned int")
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._PackagesMutex._g._Mutex.__value.__wch), "_Roots._PackagesMutex._g._Mutex.__value.__wch" }, // atomic: NIL public: (T T T T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "long")
// not-exposing {  fixed_field, ctype_long, sizeof(long), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._PackagesMutex._g._Counter), "_Roots._PackagesMutex._g._Counter" }, // atomic: NIL public: (T T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "_Bool")
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._PackagesMutex._g._Recursive), "_Roots._PackagesMutex._g._Recursive" }, // atomic: NIL public: (T T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._PackagesMutex._b), "_Roots._PackagesMutex._b" }, // atomic: NIL public: (T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "_Bool")
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._MpiEnabled), "_Roots._MpiEnabled" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._MpiRank), "_Roots._MpiRank" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._MpiSize), "_Roots._MpiSize" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<mpip::Mpi_O>" :SPECIALIZER "class mpip::Mpi_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<mpip::Mpi_O>), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._MpiWorld), "_Roots._MpiWorld" }, // atomic: NIL public: (T T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: "GCVector"
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::Vec0<gctools::smart_ptr<clbind::ClassRep_O>>" :NAME "Vec0" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<clbind::ClassRep_O>" :SPECIALIZER "class clbind::ClassRep_O") :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::GCVector<gctools::smart_ptr<clbind::ClassRep_O>,gctools::GCContainerAllocator<gctools::GCVector_moveable<gctools::smart_ptr<clbind::ClassRep_O>>>>" :NAME "GCVector" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<clbind::ClassRep_O>" :SPECIALIZER "class clbind::ClassRep_O") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::GCContainerAllocator<gctools::GCVector_moveable<gctools::smart_ptr<clbind::ClassRep_O>>>" :NAME "GCContainerAllocator" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::GCVECTOR-MOVEABLE-CTYPE :KEY "gctools::GCVector_moveable<gctools::smart_ptr<clbind::ClassRep_O>>" :NAME "GCVector_moveable" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<clbind::ClassRep_O>" :SPECIALIZER "class clbind::ClassRep_O") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::TAGGED-POINTER-CTYPE :KEY "gctools::tagged_pointer<gctools::GCVector_moveable<gctools::smart_ptr<clbind::ClassRep_O>>>" :SPECIALIZER "class gctools::GCVector_moveable<class gctools::smart_ptr<class clbind::ClassRep_O> >")
 {  fixed_field, TAGGED_POINTER_OFFSET, sizeof(gctools::tagged_pointer<gctools::GCVector_moveable<gctools::smart_ptr<clbind::ClassRep_O>>>), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._ClassMap._Vector._Contents), "_Roots._ClassMap._Vector._Contents" }, // atomic: NIL public: (T T T T) fixable: TAGGED-POINTER-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Instance_O>" :SPECIALIZER "class core::Instance_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._TheClass), "_Roots._TheClass" }, // atomic: NIL public: (T T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Instance_O>" :SPECIALIZER "class core::Instance_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._TheBuiltInClass), "_Roots._TheBuiltInClass" }, // atomic: NIL public: (T T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Instance_O>" :SPECIALIZER "class core::Instance_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._TheStandardClass), "_Roots._TheStandardClass" }, // atomic: NIL public: (T T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Instance_O>" :SPECIALIZER "class core::Instance_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._TheStructureClass), "_Roots._TheStructureClass" }, // atomic: NIL public: (T T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Instance_O>" :SPECIALIZER "class core::Instance_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._TheDerivableCxxClass), "_Roots._TheDerivableCxxClass" }, // atomic: NIL public: (T T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Instance_O>" :SPECIALIZER "class core::Instance_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._TheClbindCxxClass), "_Roots._TheClbindCxxClass" }, // atomic: NIL public: (T T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Package_O>" :SPECIALIZER "class core::Package_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Package_O>), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._CorePackage), "_Roots._CorePackage" }, // atomic: NIL public: (T T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Package_O>" :SPECIALIZER "class core::Package_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Package_O>), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._KeywordPackage), "_Roots._KeywordPackage" }, // atomic: NIL public: (T T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Package_O>" :SPECIALIZER "class core::Package_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Package_O>), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._CommonLispPackage), "_Roots._CommonLispPackage" }, // atomic: NIL public: (T T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::HashTableEq_O>" :SPECIALIZER "class core::HashTableEq_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::HashTableEq_O>), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._SpecialForms), "_Roots._SpecialForms" }, // atomic: NIL public: (T T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::HashTableEqual_O>" :SPECIALIZER "class core::HashTableEqual_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::HashTableEqual_O>), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._SingleDispatchGenericFunctionHashTableEqual), "_Roots._SingleDispatchGenericFunctionHashTableEqual" }, // atomic: NIL public: (T T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._SingleDispatchGenericFunctionHashTableEqualMutex._r._NameWord), "_Roots._SingleDispatchGenericFunctionHashTableEqualMutex._r._NameWord" }, // atomic: NIL public: (T T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "(anonymous)" :NAME "")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._SingleDispatchGenericFunctionHashTableEqualMutex._r._Mutex.__count), "_Roots._SingleDispatchGenericFunctionHashTableEqualMutex._r._Mutex.__count" }, // atomic: NIL public: (T T T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "(anonymous)" :NAME "")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "(anonymous struct)::(anonymous)" :NAME "")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned int")
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._SingleDispatchGenericFunctionHashTableEqualMutex._r._Mutex.__value.__wch), "_Roots._SingleDispatchGenericFunctionHashTableEqualMutex._r._Mutex.__value.__wch" }, // atomic: NIL public: (T T T T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "long")
// not-exposing {  fixed_field, ctype_long, sizeof(long), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._SingleDispatchGenericFunctionHashTableEqualMutex._r._Counter), "_Roots._SingleDispatchGenericFunctionHashTableEqualMutex._r._Counter" }, // atomic: NIL public: (T T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "_Bool")
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._SingleDispatchGenericFunctionHashTableEqualMutex._r._Recursive), "_Roots._SingleDispatchGenericFunctionHashTableEqualMutex._r._Recursive" }, // atomic: NIL public: (T T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._SingleDispatchGenericFunctionHashTableEqualMutex._g._NameWord), "_Roots._SingleDispatchGenericFunctionHashTableEqualMutex._g._NameWord" }, // atomic: NIL public: (T T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "(anonymous)" :NAME "")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._SingleDispatchGenericFunctionHashTableEqualMutex._g._Mutex.__count), "_Roots._SingleDispatchGenericFunctionHashTableEqualMutex._g._Mutex.__count" }, // atomic: NIL public: (T T T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "(anonymous)" :NAME "")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "(anonymous struct)::(anonymous)" :NAME "")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned int")
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._SingleDispatchGenericFunctionHashTableEqualMutex._g._Mutex.__value.__wch), "_Roots._SingleDispatchGenericFunctionHashTableEqualMutex._g._Mutex.__value.__wch" }, // atomic: NIL public: (T T T T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "long")
// not-exposing {  fixed_field, ctype_long, sizeof(long), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._SingleDispatchGenericFunctionHashTableEqualMutex._g._Counter), "_Roots._SingleDispatchGenericFunctionHashTableEqualMutex._g._Counter" }, // atomic: NIL public: (T T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "_Bool")
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._SingleDispatchGenericFunctionHashTableEqualMutex._g._Recursive), "_Roots._SingleDispatchGenericFunctionHashTableEqualMutex._g._Recursive" }, // atomic: NIL public: (T T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._SingleDispatchGenericFunctionHashTableEqualMutex._b), "_Roots._SingleDispatchGenericFunctionHashTableEqualMutex._b" }, // atomic: NIL public: (T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._MonitorMutex._r._NameWord), "_Roots._MonitorMutex._r._NameWord" }, // atomic: NIL public: (T T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "(anonymous)" :NAME "")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._MonitorMutex._r._Mutex.__count), "_Roots._MonitorMutex._r._Mutex.__count" }, // atomic: NIL public: (T T T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "(anonymous)" :NAME "")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "(anonymous struct)::(anonymous)" :NAME "")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned int")
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._MonitorMutex._r._Mutex.__value.__wch), "_Roots._MonitorMutex._r._Mutex.__value.__wch" }, // atomic: NIL public: (T T T T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "long")
// not-exposing {  fixed_field, ctype_long, sizeof(long), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._MonitorMutex._r._Counter), "_Roots._MonitorMutex._r._Counter" }, // atomic: NIL public: (T T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "_Bool")
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._MonitorMutex._r._Recursive), "_Roots._MonitorMutex._r._Recursive" }, // atomic: NIL public: (T T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._MonitorMutex._g._NameWord), "_Roots._MonitorMutex._g._NameWord" }, // atomic: NIL public: (T T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "(anonymous)" :NAME "")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._MonitorMutex._g._Mutex.__count), "_Roots._MonitorMutex._g._Mutex.__count" }, // atomic: NIL public: (T T T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "(anonymous)" :NAME "")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "(anonymous struct)::(anonymous)" :NAME "")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned int")
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._MonitorMutex._g._Mutex.__value.__wch), "_Roots._MonitorMutex._g._Mutex.__value.__wch" }, // atomic: NIL public: (T T T T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "long")
// not-exposing {  fixed_field, ctype_long, sizeof(long), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._MonitorMutex._g._Counter), "_Roots._MonitorMutex._g._Counter" }, // atomic: NIL public: (T T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "_Bool")
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._MonitorMutex._g._Recursive), "_Roots._MonitorMutex._g._Recursive" }, // atomic: NIL public: (T T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._MonitorMutex._b), "_Roots._MonitorMutex._b" }, // atomic: NIL public: (T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: "basic_ofstream"
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::basic_ofstream<char,std::char_traits<char>>" :NAME "basic_ofstream" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::char_traits<char>" :NAME "char_traits" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PROTECTED   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "long")
// not-exposing {  fixed_field, ctype_long, sizeof(long), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._MonitorStream._M_precision), "_Roots._MonitorStream._M_precision" }, // atomic: NIL public: (T T NIL) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: "basic_ofstream"
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::basic_ofstream<char,std::char_traits<char>>" :NAME "basic_ofstream" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::char_traits<char>" :NAME "char_traits" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PROTECTED   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "long")
// not-exposing {  fixed_field, ctype_long, sizeof(long), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._MonitorStream._M_width), "_Roots._MonitorStream._M_width" }, // atomic: NIL public: (T T NIL) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::basic_ofstream<char,std::char_traits<char>>" :NAME "basic_ofstream" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::char_traits<char>" :NAME "char_traits" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PROTECTED   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "std::ios_base::_Words" :NAME "_Words")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "long")
// not-exposing {  fixed_field, ctype_long, sizeof(long), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._MonitorStream._M_word_zero._M_iword), "_Roots._MonitorStream._M_word_zero._M_iword" }, // atomic: NIL public: (T T NIL T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: "basic_ofstream"
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::basic_ofstream<char,std::char_traits<char>>" :NAME "basic_ofstream" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::char_traits<char>" :NAME "char_traits" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PROTECTED   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._MonitorStream._M_word_size), "_Roots._MonitorStream._M_word_size" }, // atomic: NIL public: (T T NIL) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: "basic_ofstream"
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::basic_ofstream<char,std::char_traits<char>>" :NAME "basic_ofstream" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::char_traits<char>" :NAME "char_traits" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PROTECTED   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char")
// not-exposing {  fixed_field, ctype_char, sizeof(char), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._MonitorStream._M_fill), "_Roots._MonitorStream._M_fill" }, // atomic: NIL public: (T T NIL) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: "basic_ofstream"
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::basic_ofstream<char,std::char_traits<char>>" :NAME "basic_ofstream" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::char_traits<char>" :NAME "char_traits" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PROTECTED   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "_Bool")
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._MonitorStream._M_fill_init), "_Roots._MonitorStream._M_fill_init" }, // atomic: NIL public: (T T NIL) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: "basic_ofstream"
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::basic_ofstream<char,std::char_traits<char>>" :NAME "basic_ofstream" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::char_traits<char>" :NAME "char_traits" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PROTECTED   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "long")
// not-exposing {  fixed_field, ctype_long, sizeof(long), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._MonitorStream._M_precision), "_Roots._MonitorStream._M_precision" }, // atomic: NIL public: (T T NIL) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: "basic_ofstream"
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::basic_ofstream<char,std::char_traits<char>>" :NAME "basic_ofstream" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::char_traits<char>" :NAME "char_traits" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PROTECTED   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "long")
// not-exposing {  fixed_field, ctype_long, sizeof(long), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._MonitorStream._M_width), "_Roots._MonitorStream._M_width" }, // atomic: NIL public: (T T NIL) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::basic_ofstream<char,std::char_traits<char>>" :NAME "basic_ofstream" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::char_traits<char>" :NAME "char_traits" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PROTECTED   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "std::ios_base::_Words" :NAME "_Words")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "long")
// not-exposing {  fixed_field, ctype_long, sizeof(long), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._MonitorStream._M_word_zero._M_iword), "_Roots._MonitorStream._M_word_zero._M_iword" }, // atomic: NIL public: (T T NIL T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: "basic_ofstream"
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::basic_ofstream<char,std::char_traits<char>>" :NAME "basic_ofstream" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::char_traits<char>" :NAME "char_traits" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PROTECTED   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._MonitorStream._M_word_size), "_Roots._MonitorStream._M_word_size" }, // atomic: NIL public: (T T NIL) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: "basic_ofstream"
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::basic_ofstream<char,std::char_traits<char>>" :NAME "basic_ofstream" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::char_traits<char>" :NAME "char_traits" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PROTECTED   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char")
// not-exposing {  fixed_field, ctype_char, sizeof(char), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._MonitorStream._M_fill), "_Roots._MonitorStream._M_fill" }, // atomic: NIL public: (T T NIL) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: "basic_ofstream"
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::basic_ofstream<char,std::char_traits<char>>" :NAME "basic_ofstream" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::char_traits<char>" :NAME "char_traits" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PROTECTED   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "_Bool")
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._MonitorStream._M_fill_init), "_Roots._MonitorStream._M_fill_init" }, // atomic: NIL public: (T T NIL) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: "basic_ofstream"
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::basic_ofstream<char,std::char_traits<char>>" :NAME "basic_ofstream" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::char_traits<char>" :NAME "char_traits" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PROTECTED   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "long")
// not-exposing {  fixed_field, ctype_long, sizeof(long), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._MonitorStream._M_precision), "_Roots._MonitorStream._M_precision" }, // atomic: NIL public: (T T NIL) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: "basic_ofstream"
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::basic_ofstream<char,std::char_traits<char>>" :NAME "basic_ofstream" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::char_traits<char>" :NAME "char_traits" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PROTECTED   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "long")
// not-exposing {  fixed_field, ctype_long, sizeof(long), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._MonitorStream._M_width), "_Roots._MonitorStream._M_width" }, // atomic: NIL public: (T T NIL) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::basic_ofstream<char,std::char_traits<char>>" :NAME "basic_ofstream" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::char_traits<char>" :NAME "char_traits" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PROTECTED   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "std::ios_base::_Words" :NAME "_Words")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "long")
// not-exposing {  fixed_field, ctype_long, sizeof(long), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._MonitorStream._M_word_zero._M_iword), "_Roots._MonitorStream._M_word_zero._M_iword" }, // atomic: NIL public: (T T NIL T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: "basic_ofstream"
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::basic_ofstream<char,std::char_traits<char>>" :NAME "basic_ofstream" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::char_traits<char>" :NAME "char_traits" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PROTECTED   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._MonitorStream._M_word_size), "_Roots._MonitorStream._M_word_size" }, // atomic: NIL public: (T T NIL) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: "basic_ofstream"
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::basic_ofstream<char,std::char_traits<char>>" :NAME "basic_ofstream" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::char_traits<char>" :NAME "char_traits" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PROTECTED   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char")
// not-exposing {  fixed_field, ctype_char, sizeof(char), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._MonitorStream._M_fill), "_Roots._MonitorStream._M_fill" }, // atomic: NIL public: (T T NIL) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: "basic_ofstream"
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::basic_ofstream<char,std::char_traits<char>>" :NAME "basic_ofstream" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::char_traits<char>" :NAME "char_traits" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PROTECTED   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "_Bool")
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._MonitorStream._M_fill_init), "_Roots._MonitorStream._M_fill_init" }, // atomic: NIL public: (T T NIL) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::basic_ofstream<char,std::char_traits<char>>" :NAME "basic_ofstream" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::char_traits<char>" :NAME "char_traits" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::basic_filebuf<char,std::char_traits<char>>" :NAME "basic_filebuf" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::char_traits<char>" :NAME "char_traits" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PROTECTED   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "(anonymous)" :NAME "")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._MonitorStream._M_filebuf._M_lock.__count), "_Roots._MonitorStream._M_filebuf._M_lock.__count" }, // atomic: NIL public: (T T NIL NIL T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::basic_ofstream<char,std::char_traits<char>>" :NAME "basic_ofstream" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::char_traits<char>" :NAME "char_traits" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::basic_filebuf<char,std::char_traits<char>>" :NAME "basic_filebuf" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::char_traits<char>" :NAME "char_traits" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PROTECTED   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "(anonymous)" :NAME "")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "(anonymous struct)::(anonymous)" :NAME "")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned int")
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._MonitorStream._M_filebuf._M_lock.__value.__wch), "_Roots._MonitorStream._M_filebuf._M_lock.__value.__wch" }, // atomic: NIL public: (T T NIL NIL T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: "__basic_file"
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::basic_ofstream<char,std::char_traits<char>>" :NAME "basic_ofstream" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::char_traits<char>" :NAME "char_traits" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::basic_filebuf<char,std::char_traits<char>>" :NAME "basic_filebuf" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::char_traits<char>" :NAME "char_traits" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PROTECTED   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::__basic_file<char>" :NAME "__basic_file" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "_Bool")
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._MonitorStream._M_filebuf._M_file._M_cfile_created), "_Roots._MonitorStream._M_filebuf._M_file._M_cfile_created" }, // atomic: NIL public: (T T NIL NIL NIL) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::basic_ofstream<char,std::char_traits<char>>" :NAME "basic_ofstream" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::char_traits<char>" :NAME "char_traits" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::basic_filebuf<char,std::char_traits<char>>" :NAME "basic_filebuf" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::char_traits<char>" :NAME "char_traits" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PROTECTED   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "(anonymous)" :NAME "")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._MonitorStream._M_filebuf._M_state_beg.__count), "_Roots._MonitorStream._M_filebuf._M_state_beg.__count" }, // atomic: NIL public: (T T NIL NIL T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::basic_ofstream<char,std::char_traits<char>>" :NAME "basic_ofstream" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::char_traits<char>" :NAME "char_traits" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::basic_filebuf<char,std::char_traits<char>>" :NAME "basic_filebuf" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::char_traits<char>" :NAME "char_traits" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PROTECTED   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "(anonymous)" :NAME "")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "(anonymous struct)::(anonymous)" :NAME "")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned int")
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._MonitorStream._M_filebuf._M_state_beg.__value.__wch), "_Roots._MonitorStream._M_filebuf._M_state_beg.__value.__wch" }, // atomic: NIL public: (T T NIL NIL T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::basic_ofstream<char,std::char_traits<char>>" :NAME "basic_ofstream" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::char_traits<char>" :NAME "char_traits" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::basic_filebuf<char,std::char_traits<char>>" :NAME "basic_filebuf" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::char_traits<char>" :NAME "char_traits" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PROTECTED   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "(anonymous)" :NAME "")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._MonitorStream._M_filebuf._M_state_cur.__count), "_Roots._MonitorStream._M_filebuf._M_state_cur.__count" }, // atomic: NIL public: (T T NIL NIL T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::basic_ofstream<char,std::char_traits<char>>" :NAME "basic_ofstream" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::char_traits<char>" :NAME "char_traits" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::basic_filebuf<char,std::char_traits<char>>" :NAME "basic_filebuf" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::char_traits<char>" :NAME "char_traits" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PROTECTED   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "(anonymous)" :NAME "")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "(anonymous struct)::(anonymous)" :NAME "")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned int")
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._MonitorStream._M_filebuf._M_state_cur.__value.__wch), "_Roots._MonitorStream._M_filebuf._M_state_cur.__value.__wch" }, // atomic: NIL public: (T T NIL NIL T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::basic_ofstream<char,std::char_traits<char>>" :NAME "basic_ofstream" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::char_traits<char>" :NAME "char_traits" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::basic_filebuf<char,std::char_traits<char>>" :NAME "basic_filebuf" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::char_traits<char>" :NAME "char_traits" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PROTECTED   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "(anonymous)" :NAME "")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._MonitorStream._M_filebuf._M_state_last.__count), "_Roots._MonitorStream._M_filebuf._M_state_last.__count" }, // atomic: NIL public: (T T NIL NIL T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::basic_ofstream<char,std::char_traits<char>>" :NAME "basic_ofstream" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::char_traits<char>" :NAME "char_traits" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::basic_filebuf<char,std::char_traits<char>>" :NAME "basic_filebuf" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::char_traits<char>" :NAME "char_traits" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PROTECTED   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "(anonymous)" :NAME "")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "(anonymous struct)::(anonymous)" :NAME "")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned int")
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._MonitorStream._M_filebuf._M_state_last.__value.__wch), "_Roots._MonitorStream._M_filebuf._M_state_last.__value.__wch" }, // atomic: NIL public: (T T NIL NIL T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: "basic_filebuf"
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::basic_ofstream<char,std::char_traits<char>>" :NAME "basic_ofstream" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::char_traits<char>" :NAME "char_traits" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::basic_filebuf<char,std::char_traits<char>>" :NAME "basic_filebuf" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::char_traits<char>" :NAME "char_traits" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PROTECTED   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._MonitorStream._M_filebuf._M_buf_size), "_Roots._MonitorStream._M_filebuf._M_buf_size" }, // atomic: NIL public: (T T NIL NIL) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: "basic_filebuf"
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::basic_ofstream<char,std::char_traits<char>>" :NAME "basic_ofstream" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::char_traits<char>" :NAME "char_traits" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::basic_filebuf<char,std::char_traits<char>>" :NAME "basic_filebuf" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::char_traits<char>" :NAME "char_traits" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PROTECTED   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "_Bool")
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._MonitorStream._M_filebuf._M_buf_allocated), "_Roots._MonitorStream._M_filebuf._M_buf_allocated" }, // atomic: NIL public: (T T NIL NIL) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: "basic_filebuf"
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::basic_ofstream<char,std::char_traits<char>>" :NAME "basic_ofstream" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::char_traits<char>" :NAME "char_traits" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::basic_filebuf<char,std::char_traits<char>>" :NAME "basic_filebuf" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::char_traits<char>" :NAME "char_traits" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PROTECTED   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "_Bool")
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._MonitorStream._M_filebuf._M_reading), "_Roots._MonitorStream._M_filebuf._M_reading" }, // atomic: NIL public: (T T NIL NIL) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: "basic_filebuf"
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::basic_ofstream<char,std::char_traits<char>>" :NAME "basic_ofstream" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::char_traits<char>" :NAME "char_traits" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::basic_filebuf<char,std::char_traits<char>>" :NAME "basic_filebuf" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::char_traits<char>" :NAME "char_traits" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PROTECTED   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "_Bool")
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._MonitorStream._M_filebuf._M_writing), "_Roots._MonitorStream._M_filebuf._M_writing" }, // atomic: NIL public: (T T NIL NIL) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: "basic_filebuf"
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::basic_ofstream<char,std::char_traits<char>>" :NAME "basic_ofstream" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::char_traits<char>" :NAME "char_traits" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::basic_filebuf<char,std::char_traits<char>>" :NAME "basic_filebuf" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::char_traits<char>" :NAME "char_traits" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PROTECTED   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char")
// not-exposing {  fixed_field, ctype_char, sizeof(char), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._MonitorStream._M_filebuf._M_pback), "_Roots._MonitorStream._M_filebuf._M_pback" }, // atomic: NIL public: (T T NIL NIL) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: "basic_filebuf"
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::basic_ofstream<char,std::char_traits<char>>" :NAME "basic_ofstream" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::char_traits<char>" :NAME "char_traits" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::basic_filebuf<char,std::char_traits<char>>" :NAME "basic_filebuf" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::char_traits<char>" :NAME "char_traits" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PROTECTED   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "_Bool")
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._MonitorStream._M_filebuf._M_pback_init), "_Roots._MonitorStream._M_filebuf._M_pback_init" }, // atomic: NIL public: (T T NIL NIL) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: "basic_filebuf"
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::basic_ofstream<char,std::char_traits<char>>" :NAME "basic_ofstream" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::char_traits<char>" :NAME "char_traits" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::basic_filebuf<char,std::char_traits<char>>" :NAME "basic_filebuf" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::char_traits<char>" :NAME "char_traits" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PROTECTED   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "long")
// not-exposing {  fixed_field, ctype_long, sizeof(long), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._MonitorStream._M_filebuf._M_ext_buf_size), "_Roots._MonitorStream._M_filebuf._M_ext_buf_size" }, // atomic: NIL public: (T T NIL NIL) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._TrueObject), "_Roots._TrueObject" }, // atomic: NIL public: (T T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::DoubleFloat_O>" :SPECIALIZER "class core::DoubleFloat_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::DoubleFloat_O>), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._RehashSize), "_Roots._RehashSize" }, // atomic: NIL public: (T T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::DoubleFloat_O>" :SPECIALIZER "class core::DoubleFloat_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::DoubleFloat_O>), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._RehashThreshold), "_Roots._RehashThreshold" }, // atomic: NIL public: (T T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._NullStream), "_Roots._NullStream" }, // atomic: NIL public: (T T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::List_V>" :SPECIALIZER "class core::List_V")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::List_V>), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._ThePathnameTranslations), "_Roots._ThePathnameTranslations" }, // atomic: NIL public: (T T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._ThePathnameTranslationsMutex._r._NameWord), "_Roots._ThePathnameTranslationsMutex._r._NameWord" }, // atomic: NIL public: (T T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "(anonymous)" :NAME "")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._ThePathnameTranslationsMutex._r._Mutex.__count), "_Roots._ThePathnameTranslationsMutex._r._Mutex.__count" }, // atomic: NIL public: (T T T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "(anonymous)" :NAME "")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "(anonymous struct)::(anonymous)" :NAME "")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned int")
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._ThePathnameTranslationsMutex._r._Mutex.__value.__wch), "_Roots._ThePathnameTranslationsMutex._r._Mutex.__value.__wch" }, // atomic: NIL public: (T T T T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "long")
// not-exposing {  fixed_field, ctype_long, sizeof(long), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._ThePathnameTranslationsMutex._r._Counter), "_Roots._ThePathnameTranslationsMutex._r._Counter" }, // atomic: NIL public: (T T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "_Bool")
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._ThePathnameTranslationsMutex._r._Recursive), "_Roots._ThePathnameTranslationsMutex._r._Recursive" }, // atomic: NIL public: (T T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._ThePathnameTranslationsMutex._g._NameWord), "_Roots._ThePathnameTranslationsMutex._g._NameWord" }, // atomic: NIL public: (T T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "(anonymous)" :NAME "")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._ThePathnameTranslationsMutex._g._Mutex.__count), "_Roots._ThePathnameTranslationsMutex._g._Mutex.__count" }, // atomic: NIL public: (T T T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "(anonymous)" :NAME "")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "(anonymous struct)::(anonymous)" :NAME "")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned int")
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._ThePathnameTranslationsMutex._g._Mutex.__value.__wch), "_Roots._ThePathnameTranslationsMutex._g._Mutex.__value.__wch" }, // atomic: NIL public: (T T T T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "long")
// not-exposing {  fixed_field, ctype_long, sizeof(long), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._ThePathnameTranslationsMutex._g._Counter), "_Roots._ThePathnameTranslationsMutex._g._Counter" }, // atomic: NIL public: (T T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "_Bool")
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._ThePathnameTranslationsMutex._g._Recursive), "_Roots._ThePathnameTranslationsMutex._g._Recursive" }, // atomic: NIL public: (T T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._ThePathnameTranslationsMutex._b), "_Roots._ThePathnameTranslationsMutex._b" }, // atomic: NIL public: (T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Complex_O>" :SPECIALIZER "class core::Complex_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Complex_O>), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._ImaginaryUnit), "_Roots._ImaginaryUnit" }, // atomic: NIL public: (T T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Complex_O>" :SPECIALIZER "class core::Complex_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Complex_O>), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._ImaginaryUnitNegative), "_Roots._ImaginaryUnitNegative" }, // atomic: NIL public: (T T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Ratio_O>" :SPECIALIZER "class core::Ratio_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Ratio_O>), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._PlusHalf), "_Roots._PlusHalf" }, // atomic: NIL public: (T T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Ratio_O>" :SPECIALIZER "class core::Ratio_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Ratio_O>), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._MinusHalf), "_Roots._MinusHalf" }, // atomic: NIL public: (T T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::SingleFloat_I>" :SPECIALIZER "class core::SingleFloat_I")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::SingleFloat_I>), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._SingleFloatMinusZero), "_Roots._SingleFloatMinusZero" }, // atomic: NIL public: (T T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::SingleFloat_I>" :SPECIALIZER "class core::SingleFloat_I")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::SingleFloat_I>), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._SingleFloatPlusZero), "_Roots._SingleFloatPlusZero" }, // atomic: NIL public: (T T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::DoubleFloat_O>" :SPECIALIZER "class core::DoubleFloat_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::DoubleFloat_O>), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._DoubleFloatMinusZero), "_Roots._DoubleFloatMinusZero" }, // atomic: NIL public: (T T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::DoubleFloat_O>" :SPECIALIZER "class core::DoubleFloat_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::DoubleFloat_O>), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._DoubleFloatPlusZero), "_Roots._DoubleFloatPlusZero" }, // atomic: NIL public: (T T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::SingleFloat_I>" :SPECIALIZER "class core::SingleFloat_I")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::SingleFloat_I>), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._SingleFloatOne), "_Roots._SingleFloatOne" }, // atomic: NIL public: (T T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::DoubleFloat_O>" :SPECIALIZER "class core::DoubleFloat_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::DoubleFloat_O>), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._DoubleFloatOne), "_Roots._DoubleFloatOne" }, // atomic: NIL public: (T T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "_Bool")
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._Booted), "_Roots._Booted" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._UnixSignalHandlersMutex._r._NameWord), "_Roots._UnixSignalHandlersMutex._r._NameWord" }, // atomic: NIL public: (T T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "(anonymous)" :NAME "")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._UnixSignalHandlersMutex._r._Mutex.__count), "_Roots._UnixSignalHandlersMutex._r._Mutex.__count" }, // atomic: NIL public: (T T T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "(anonymous)" :NAME "")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "(anonymous struct)::(anonymous)" :NAME "")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned int")
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._UnixSignalHandlersMutex._r._Mutex.__value.__wch), "_Roots._UnixSignalHandlersMutex._r._Mutex.__value.__wch" }, // atomic: NIL public: (T T T T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "long")
// not-exposing {  fixed_field, ctype_long, sizeof(long), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._UnixSignalHandlersMutex._r._Counter), "_Roots._UnixSignalHandlersMutex._r._Counter" }, // atomic: NIL public: (T T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "_Bool")
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._UnixSignalHandlersMutex._r._Recursive), "_Roots._UnixSignalHandlersMutex._r._Recursive" }, // atomic: NIL public: (T T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._UnixSignalHandlersMutex._g._NameWord), "_Roots._UnixSignalHandlersMutex._g._NameWord" }, // atomic: NIL public: (T T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "(anonymous)" :NAME "")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._UnixSignalHandlersMutex._g._Mutex.__count), "_Roots._UnixSignalHandlersMutex._g._Mutex.__count" }, // atomic: NIL public: (T T T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "(anonymous)" :NAME "")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "(anonymous struct)::(anonymous)" :NAME "")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned int")
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._UnixSignalHandlersMutex._g._Mutex.__value.__wch), "_Roots._UnixSignalHandlersMutex._g._Mutex.__value.__wch" }, // atomic: NIL public: (T T T T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "long")
// not-exposing {  fixed_field, ctype_long, sizeof(long), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._UnixSignalHandlersMutex._g._Counter), "_Roots._UnixSignalHandlersMutex._g._Counter" }, // atomic: NIL public: (T T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::Mutex" :NAME "Mutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "_Bool")
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._UnixSignalHandlersMutex._g._Recursive), "_Roots._UnixSignalHandlersMutex._g._Recursive" }, // atomic: NIL public: (T T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "mp::SharedMutex" :NAME "SharedMutex")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._UnixSignalHandlersMutex._b), "_Roots._UnixSignalHandlersMutex._b" }, // atomic: NIL public: (T T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Lisp_O::GCRoots" :NAME "GCRoots")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::List_V>" :SPECIALIZER "class core::List_V")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::List_V>), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._UnixSignalHandlers), "_Roots._UnixSignalHandlers" }, // atomic: NIL public: (T T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "_Bool")
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_TrapIntern), "_TrapIntern" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: "basic_string"
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>" :NAME "basic_string" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::char_traits<char>" :NAME "char_traits" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 2 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::allocator<char>" :NAME "allocator" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_TrapInternPackage._M_string_length), "_TrapInternPackage._M_string_length" }, // atomic: NIL public: (T NIL) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>" :NAME "basic_string" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::char_traits<char>" :NAME "char_traits" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 2 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::allocator<char>" :NAME "allocator" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::(anonymous)" :NAME "")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_TrapInternPackage.NO-NAME._M_allocated_capacity), "_TrapInternPackage.NO-NAME._M_allocated_capacity" }, // atomic: NIL public: (T NIL T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: "basic_string"
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>" :NAME "basic_string" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::char_traits<char>" :NAME "char_traits" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 2 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::allocator<char>" :NAME "allocator" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_TrapInternName._M_string_length), "_TrapInternName._M_string_length" }, // atomic: NIL public: (T NIL) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>" :NAME "basic_string" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::char_traits<char>" :NAME "char_traits" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 2 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::allocator<char>" :NAME "allocator" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::(anonymous)" :NAME "")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_TrapInternName.NO-NAME._M_allocated_capacity), "_TrapInternName.NO-NAME._M_allocated_capacity" }, // atomic: NIL public: (T NIL T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned int")
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_StackWarnSize), "_StackWarnSize" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned int")
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_StackSampleCount), "_StackSampleCount" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned int")
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_StackSampleSize), "_StackSampleSize" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned int")
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_StackSampleMax), "_StackSampleMax" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "_Bool")
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_PrintSymbolsProperly), "_PrintSymbolsProperly" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Argc), "_Argc" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned int")
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_ReplCounter), "_ReplCounter" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::IntegerOrdering" :NAME "IntegerOrdering")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "_Bool")
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_IntegerOrdering._BigEndian), "_IntegerOrdering._BigEndian" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::IntegerOrdering" :NAME "IntegerOrdering")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "_Bool")
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_IntegerOrdering._MostSignificantWordFirst), "_IntegerOrdering._MostSignificantWordFirst" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::IntegerOrdering" :NAME "IntegerOrdering")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_IntegerOrdering._mpz_import_word_order), "_IntegerOrdering._mpz_import_word_order" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::IntegerOrdering" :NAME "IntegerOrdering")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_IntegerOrdering._mpz_import_size), "_IntegerOrdering._mpz_import_size" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::IntegerOrdering" :NAME "IntegerOrdering")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_IntegerOrdering._mpz_import_endian), "_IntegerOrdering._mpz_import_endian" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned int")
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_SingleStepLevel), "_SingleStepLevel" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_TraceLevel), "_TraceLevel" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_DebuggerLevel), "_DebuggerLevel" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "_Bool")
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_LockGlobalInitialization), "_LockGlobalInitialization" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "_Bool")
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Interactive), "_Interactive" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: "basic_string"
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>" :NAME "basic_string" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::char_traits<char>" :NAME "char_traits" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 2 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::allocator<char>" :NAME "allocator" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_FunctionName._M_string_length), "_FunctionName._M_string_length" }, // atomic: NIL public: (T NIL) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>" :NAME "basic_string" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::char_traits<char>" :NAME "char_traits" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 2 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::allocator<char>" :NAME "allocator" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::(anonymous)" :NAME "")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_FunctionName.NO-NAME._M_allocated_capacity), "_FunctionName.NO-NAME._M_allocated_capacity" }, // atomic: NIL public: (T NIL T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: "basic_string"
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>" :NAME "basic_string" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::char_traits<char>" :NAME "char_traits" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 2 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::allocator<char>" :NAME "allocator" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_RCFileName._M_string_length), "_RCFileName._M_string_length" }, // atomic: NIL public: (T NIL) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>" :NAME "basic_string" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::char_traits<char>" :NAME "char_traits" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 2 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::allocator<char>" :NAME "allocator" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::(anonymous)" :NAME "")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_RCFileName.NO-NAME._M_allocated_capacity), "_RCFileName.NO-NAME._M_allocated_capacity" }, // atomic: NIL public: (T NIL T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "_Bool")
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_IgnoreInitImage), "_IgnoreInitImage" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "_Bool")
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_IgnoreInitLsp), "_IgnoreInitLsp" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned int")
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_EnvironmentId), "_EnvironmentId" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_RequireLevel), "_RequireLevel" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "_Bool")
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_CoreBuiltInClassesInitialized), "_CoreBuiltInClassesInitialized" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "_Bool")
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_BuiltInClassesInitialized), "_BuiltInClassesInitialized" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "_Bool")
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_PackagesInitialized), "_PackagesInitialized" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "_Bool")
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_EnvironmentInitialized), "_EnvironmentInitialized" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "_Bool")
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_NilsCreated), "_NilsCreated" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: "basic_string"
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>" :NAME "basic_string" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::char_traits<char>" :NAME "char_traits" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 2 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::allocator<char>" :NAME "allocator" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_LastCompileErrorMessage._M_string_length), "_LastCompileErrorMessage._M_string_length" }, // atomic: NIL public: (T NIL) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>" :NAME "basic_string" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::char_traits<char>" :NAME "char_traits" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 2 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::allocator<char>" :NAME "allocator" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::(anonymous)" :NAME "")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_LastCompileErrorMessage.NO-NAME._M_allocated_capacity), "_LastCompileErrorMessage.NO-NAME._M_allocated_capacity" }, // atomic: NIL public: (T NIL T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "_Bool")
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_BootClassTableIsValid), "_BootClassTableIsValid" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_PathMax), "_PathMax" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned int")
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_LineNumber), "_LineNumber" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// Stamp = clang::RecursiveASTVisitor<asttooling::AstVisitor_O>/1687
// Stamp = asttooling::AstVisitor_O/1691
{ class_kind, STAMP_asttooling__AstVisitor_O, sizeof(asttooling::AstVisitor_O), 0, "asttooling::AstVisitor_O" },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(asttooling::AstVisitor_O),_Target), "_Target" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// Stamp = clang::tooling::ToolAction/1695
// Stamp = clang::tooling::FrontendActionFactory/1699
// Stamp = clang::ast_matchers::MatchFinder::MatchCallback/1703
// Stamp = gctools::GCContainer/1707
// Stamp = gctools::GCArray_moveable<unsigned int>/1711
{ container_kind, STAMP_gctools__GCArray_moveable_unsigned_int_, sizeof(gctools::GCArray_moveable<unsigned int>), 0, "gctools::GCArray_moveable<unsigned int>" },
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(gctools::GCArray_moveable<unsigned int>),_Data), "_Data" },
 {  variable_capacity, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(gctools::GCArray_moveable<unsigned int>),_Length), offsetof(SAFE_TYPE_MACRO(gctools::GCArray_moveable<unsigned int>),_Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned int") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned int")>
{    variable_field, ctype_unsigned_int, sizeof(unsigned int), 0, "only" },
// Stamp = gctools::GCVector_moveable<core::CacheRecord>/1715
{ container_kind, STAMP_gctools__GCVector_moveable_core__CacheRecord_, sizeof(gctools::GCVector_moveable<core::CacheRecord>), 0, "gctools::GCVector_moveable<core::CacheRecord>" },
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<core::CacheRecord>),_Data), "_Data" },
 {  variable_capacity, sizeof(core::CacheRecord), offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<core::CacheRecord>),_End), offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<core::CacheRecord>),_Capacity), NULL },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
    {    variable_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::CacheRecord),_key), "_key" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
    {    variable_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::CacheRecord),_value), "_value" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposed-yet     {    variable_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::CacheRecord),_generation), "_generation" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// Stamp = gctools::GCVector_moveable<gctools::smart_ptr<core::Cons_O>>/1719
{ container_kind, STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__Cons_O__, sizeof(gctools::GCVector_moveable<gctools::smart_ptr<core::Cons_O>>), 0, "gctools::GCVector_moveable<gctools::smart_ptr<core::Cons_O>>" },
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<gctools::smart_ptr<core::Cons_O>>),_Data), "_Data" },
 {  variable_capacity, sizeof(gctools::smart_ptr<core::Cons_O>), offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<gctools::smart_ptr<core::Cons_O>>),_End), offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<gctools::smart_ptr<core::Cons_O>>),_Capacity), NULL },
// one -> #<SMART-PTR-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Cons_O>" :SPECIALIZER "class core::Cons_O") :base #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Cons_O>" :SPECIALIZER "class core::Cons_O")>
{    variable_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Cons_O>), 0, "only" },
// Stamp = gctools::GCVector_moveable<double>/1723
{ container_kind, STAMP_gctools__GCVector_moveable_double_, sizeof(gctools::GCVector_moveable<double>), 0, "gctools::GCVector_moveable<double>" },
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<double>),_Data), "_Data" },
 {  variable_capacity, sizeof(double), offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<double>),_End), offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<double>),_Capacity), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "double") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "double")>
{    variable_field, ctype_double, sizeof(double), 0, "only" },
// Stamp = gctools::GCArray_moveable<short>/1727
{ container_kind, STAMP_gctools__GCArray_moveable_short_, sizeof(gctools::GCArray_moveable<short>), 0, "gctools::GCArray_moveable<short>" },
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(gctools::GCArray_moveable<short>),_Data), "_Data" },
 {  variable_capacity, sizeof(short), offsetof(SAFE_TYPE_MACRO(gctools::GCArray_moveable<short>),_Length), offsetof(SAFE_TYPE_MACRO(gctools::GCArray_moveable<short>),_Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "short") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "short")>
{    variable_field, ctype_short, sizeof(short), 0, "only" },
// Stamp = gctools::GCVector_moveable<gctools::smart_ptr<clbind::ClassRep_O>>/1731
{ container_kind, STAMP_gctools__GCVector_moveable_gctools__smart_ptr_clbind__ClassRep_O__, sizeof(gctools::GCVector_moveable<gctools::smart_ptr<clbind::ClassRep_O>>), 0, "gctools::GCVector_moveable<gctools::smart_ptr<clbind::ClassRep_O>>" },
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<gctools::smart_ptr<clbind::ClassRep_O>>),_Data), "_Data" },
 {  variable_capacity, sizeof(gctools::smart_ptr<clbind::ClassRep_O>), offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<gctools::smart_ptr<clbind::ClassRep_O>>),_End), offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<gctools::smart_ptr<clbind::ClassRep_O>>),_Capacity), NULL },
// one -> #<SMART-PTR-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<clbind::ClassRep_O>" :SPECIALIZER "class clbind::ClassRep_O") :base #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<clbind::ClassRep_O>" :SPECIALIZER "class clbind::ClassRep_O")>
{    variable_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<clbind::ClassRep_O>), 0, "only" },
// Stamp = gctools::GCBitUnitArray_moveable<4,0>/1735
{ bitunit_container_kind, STAMP_gctools__GCBitUnitArray_moveable_4_0_, sizeof(gctools::GCBitUnitArray_moveable<4,0>), 4, "gctools::GCBitUnitArray_moveable<4,0>" },
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(gctools::GCBitUnitArray_moveable<4,0>),_Data), "_Data" },
 {  variable_capacity, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(gctools::GCBitUnitArray_moveable<4,0>),_Length), offsetof(SAFE_TYPE_MACRO(gctools::GCBitUnitArray_moveable<4,0>),_Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")>
{    variable_field, ctype_unsigned_long, sizeof(unsigned long), 0, "only" },
// Stamp = gctools::GCVector_moveable<core::Cons_O>/1739
{ container_kind, STAMP_gctools__GCVector_moveable_core__Cons_O_, sizeof(gctools::GCVector_moveable<core::Cons_O>), 0, "gctools::GCVector_moveable<core::Cons_O>" },
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<core::Cons_O>),_Data), "_Data" },
 {  variable_capacity, sizeof(core::Cons_O), offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<core::Cons_O>),_End), offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<core::Cons_O>),_Capacity), NULL },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
    {    variable_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::Cons_O),_Car), "_Car" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
    {    variable_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::Cons_O),_Cdr), "_Cdr" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// Stamp = gctools::GCVector_moveable<core::SymbolClassHolderPair>/1743
{ container_kind, STAMP_gctools__GCVector_moveable_core__SymbolClassHolderPair_, sizeof(gctools::GCVector_moveable<core::SymbolClassHolderPair>), 0, "gctools::GCVector_moveable<core::SymbolClassHolderPair>" },
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<core::SymbolClassHolderPair>),_Data), "_Data" },
 {  variable_capacity, sizeof(core::SymbolClassHolderPair), offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<core::SymbolClassHolderPair>),_End), offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<core::SymbolClassHolderPair>),_Capacity), NULL },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Symbol_O>" :SPECIALIZER "class core::Symbol_O")
    {    variable_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Symbol_O>), offsetof(SAFE_TYPE_MACRO(core::SymbolClassHolderPair),symbol), "symbol" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::ClassHolder_O>" :SPECIALIZER "class core::ClassHolder_O")
    {    variable_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::ClassHolder_O>), offsetof(SAFE_TYPE_MACRO(core::SymbolClassHolderPair),theClassHolder), "theClassHolder" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// Stamp = gctools::GCArray_moveable<signed char>/1747
{ container_kind, STAMP_gctools__GCArray_moveable_signed_char_, sizeof(gctools::GCArray_moveable<signed char>), 0, "gctools::GCArray_moveable<signed char>" },
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(gctools::GCArray_moveable<signed char>),_Data), "_Data" },
 {  variable_capacity, sizeof(signed char), offsetof(SAFE_TYPE_MACRO(gctools::GCArray_moveable<signed char>),_Length), offsetof(SAFE_TYPE_MACRO(gctools::GCArray_moveable<signed char>),_Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "signed char") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "signed char")>
{    variable_field, ctype_signed_char, sizeof(signed char), 0, "only" },
// Stamp = gctools::GCVector_moveable<gctools::smart_ptr<core::List_V>>/1751
{ container_kind, STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__List_V__, sizeof(gctools::GCVector_moveable<gctools::smart_ptr<core::List_V>>), 0, "gctools::GCVector_moveable<gctools::smart_ptr<core::List_V>>" },
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<gctools::smart_ptr<core::List_V>>),_Data), "_Data" },
 {  variable_capacity, sizeof(gctools::smart_ptr<core::List_V>), offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<gctools::smart_ptr<core::List_V>>),_End), offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<gctools::smart_ptr<core::List_V>>),_Capacity), NULL },
// one -> #<SMART-PTR-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::List_V>" :SPECIALIZER "class core::List_V") :base #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::List_V>" :SPECIALIZER "class core::List_V")>
{    variable_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::List_V>), 0, "only" },
// Stamp = gctools::GCVector_moveable<std::pair<gctools::smart_ptr<core::T_O>,gctools::smart_ptr<core::T_O>>>/1755
{ container_kind, STAMP_gctools__GCVector_moveable_std__pair_gctools__smart_ptr_core__T_O__gctools__smart_ptr_core__T_O___, sizeof(gctools::GCVector_moveable<std::pair<gctools::smart_ptr<core::T_O>,gctools::smart_ptr<core::T_O>>>), 0, "gctools::GCVector_moveable<std::pair<gctools::smart_ptr<core::T_O>,gctools::smart_ptr<core::T_O>>>" },
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<std::pair<gctools::smart_ptr<core::T_O>,gctools::smart_ptr<core::T_O>>>),_Data), "_Data" },
 {  variable_capacity, sizeof(std::pair<gctools::smart_ptr<core::T_O>,gctools::smart_ptr<core::T_O>>), offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<std::pair<gctools::smart_ptr<core::T_O>,gctools::smart_ptr<core::T_O>>>),_End), offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<std::pair<gctools::smart_ptr<core::T_O>,gctools::smart_ptr<core::T_O>>>),_Capacity), NULL },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
    {    variable_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(std::pair<gctools::smart_ptr<core::T_O>,gctools::smart_ptr<core::T_O>>),first), "first" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
    {    variable_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(std::pair<gctools::smart_ptr<core::T_O>,gctools::smart_ptr<core::T_O>>),second), "second" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// Stamp = gctools::GCArray_moveable<unsigned char>/1759
{ container_kind, STAMP_gctools__GCArray_moveable_unsigned_char_, sizeof(gctools::GCArray_moveable<unsigned char>), 0, "gctools::GCArray_moveable<unsigned char>" },
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(gctools::GCArray_moveable<unsigned char>),_Data), "_Data" },
 {  variable_capacity, sizeof(unsigned char), offsetof(SAFE_TYPE_MACRO(gctools::GCArray_moveable<unsigned char>),_Length), offsetof(SAFE_TYPE_MACRO(gctools::GCArray_moveable<unsigned char>),_Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned char") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned char")>
{    variable_field, ctype_unsigned_char, sizeof(unsigned char), 0, "only" },
// Stamp = gctools::GCVector_moveable<gctools::smart_ptr<core::Symbol_O>>/1763
{ container_kind, STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__Symbol_O__, sizeof(gctools::GCVector_moveable<gctools::smart_ptr<core::Symbol_O>>), 0, "gctools::GCVector_moveable<gctools::smart_ptr<core::Symbol_O>>" },
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<gctools::smart_ptr<core::Symbol_O>>),_Data), "_Data" },
 {  variable_capacity, sizeof(gctools::smart_ptr<core::Symbol_O>), offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<gctools::smart_ptr<core::Symbol_O>>),_End), offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<gctools::smart_ptr<core::Symbol_O>>),_Capacity), NULL },
// one -> #<SMART-PTR-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Symbol_O>" :SPECIALIZER "class core::Symbol_O") :base #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Symbol_O>" :SPECIALIZER "class core::Symbol_O")>
{    variable_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Symbol_O>), 0, "only" },
// Stamp = gctools::GCVector_moveable<gctools::smart_ptr<core::T_O>>/1767
{ container_kind, STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__T_O__, sizeof(gctools::GCVector_moveable<gctools::smart_ptr<core::T_O>>), 0, "gctools::GCVector_moveable<gctools::smart_ptr<core::T_O>>" },
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<gctools::smart_ptr<core::T_O>>),_Data), "_Data" },
 {  variable_capacity, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<gctools::smart_ptr<core::T_O>>),_End), offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<gctools::smart_ptr<core::T_O>>),_Capacity), NULL },
// one -> #<SMART-PTR-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O") :base #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")>
{    variable_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), 0, "only" },
// Stamp = gctools::GCVector_moveable<gctools::smart_ptr<core::SingleDispatchMethod_O>>/1771
{ container_kind, STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__SingleDispatchMethod_O__, sizeof(gctools::GCVector_moveable<gctools::smart_ptr<core::SingleDispatchMethod_O>>), 0, "gctools::GCVector_moveable<gctools::smart_ptr<core::SingleDispatchMethod_O>>" },
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<gctools::smart_ptr<core::SingleDispatchMethod_O>>),_Data), "_Data" },
 {  variable_capacity, sizeof(gctools::smart_ptr<core::SingleDispatchMethod_O>), offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<gctools::smart_ptr<core::SingleDispatchMethod_O>>),_End), offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<gctools::smart_ptr<core::SingleDispatchMethod_O>>),_Capacity), NULL },
// one -> #<SMART-PTR-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::SingleDispatchMethod_O>" :SPECIALIZER "class core::SingleDispatchMethod_O") :base #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::SingleDispatchMethod_O>" :SPECIALIZER "class core::SingleDispatchMethod_O")>
{    variable_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::SingleDispatchMethod_O>), 0, "only" },
// Stamp = gctools::GCArray_moveable<double>/1775
{ container_kind, STAMP_gctools__GCArray_moveable_double_, sizeof(gctools::GCArray_moveable<double>), 0, "gctools::GCArray_moveable<double>" },
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(gctools::GCArray_moveable<double>),_Data), "_Data" },
 {  variable_capacity, sizeof(double), offsetof(SAFE_TYPE_MACRO(gctools::GCArray_moveable<double>),_Length), offsetof(SAFE_TYPE_MACRO(gctools::GCArray_moveable<double>),_Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "double") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "double")>
{    variable_field, ctype_double, sizeof(double), 0, "only" },
// Stamp = gctools::GCVector_moveable<core::OptionalArgument>/1779
{ container_kind, STAMP_gctools__GCVector_moveable_core__OptionalArgument_, sizeof(gctools::GCVector_moveable<core::OptionalArgument>), 0, "gctools::GCVector_moveable<core::OptionalArgument>" },
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<core::OptionalArgument>),_Data), "_Data" },
 {  variable_capacity, sizeof(core::OptionalArgument), offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<core::OptionalArgument>),_End), offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<core::OptionalArgument>),_Capacity), NULL },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
    {    variable_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::OptionalArgument),_ArgTarget), "_ArgTarget" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposed-yet     {    variable_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::OptionalArgument),_ArgTargetFrameIndex), "_ArgTargetFrameIndex" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
    {    variable_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::OptionalArgument),_Default), "_Default" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Argument" :NAME "Argument")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
    {    variable_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::OptionalArgument),_Sensor._ArgTarget), "_Sensor._ArgTarget" }, // atomic: NIL public: (T T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Argument" :NAME "Argument")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposed-yet     {    variable_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::OptionalArgument),_Sensor._ArgTargetFrameIndex), "_Sensor._ArgTargetFrameIndex" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
// Stamp = gctools::GCVector_moveable<core::KeywordArgument>/1783
{ container_kind, STAMP_gctools__GCVector_moveable_core__KeywordArgument_, sizeof(gctools::GCVector_moveable<core::KeywordArgument>), 0, "gctools::GCVector_moveable<core::KeywordArgument>" },
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<core::KeywordArgument>),_Data), "_Data" },
 {  variable_capacity, sizeof(core::KeywordArgument), offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<core::KeywordArgument>),_End), offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<core::KeywordArgument>),_Capacity), NULL },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
    {    variable_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::KeywordArgument),_ArgTarget), "_ArgTarget" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposed-yet     {    variable_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::KeywordArgument),_ArgTargetFrameIndex), "_ArgTargetFrameIndex" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
    {    variable_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::KeywordArgument),_Default), "_Default" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
    {    variable_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::KeywordArgument),_Keyword), "_Keyword" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Argument" :NAME "Argument")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
    {    variable_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::KeywordArgument),_Sensor._ArgTarget), "_Sensor._ArgTarget" }, // atomic: NIL public: (T T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::Argument" :NAME "Argument")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposed-yet     {    variable_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::KeywordArgument),_Sensor._ArgTargetFrameIndex), "_Sensor._ArgTargetFrameIndex" }, // atomic: NIL public: (T T) fixable: NIL good-name: T
// Stamp = gctools::GCVector_moveable<core::RequiredArgument>/1787
{ container_kind, STAMP_gctools__GCVector_moveable_core__RequiredArgument_, sizeof(gctools::GCVector_moveable<core::RequiredArgument>), 0, "gctools::GCVector_moveable<core::RequiredArgument>" },
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<core::RequiredArgument>),_Data), "_Data" },
 {  variable_capacity, sizeof(core::RequiredArgument), offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<core::RequiredArgument>),_End), offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<core::RequiredArgument>),_Capacity), NULL },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
    {    variable_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::RequiredArgument),_ArgTarget), "_ArgTarget" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposed-yet     {    variable_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::RequiredArgument),_ArgTargetFrameIndex), "_ArgTargetFrameIndex" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// Stamp = gctools::GCVector_moveable<gctools::smart_ptr<core::FileScope_O>>/1791
{ container_kind, STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__FileScope_O__, sizeof(gctools::GCVector_moveable<gctools::smart_ptr<core::FileScope_O>>), 0, "gctools::GCVector_moveable<gctools::smart_ptr<core::FileScope_O>>" },
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<gctools::smart_ptr<core::FileScope_O>>),_Data), "_Data" },
 {  variable_capacity, sizeof(gctools::smart_ptr<core::FileScope_O>), offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<gctools::smart_ptr<core::FileScope_O>>),_End), offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<gctools::smart_ptr<core::FileScope_O>>),_Capacity), NULL },
// one -> #<SMART-PTR-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::FileScope_O>" :SPECIALIZER "class core::FileScope_O") :base #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::FileScope_O>" :SPECIALIZER "class core::FileScope_O")>
{    variable_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::FileScope_O>), 0, "only" },
// Stamp = gctools::GCBitUnitArray_moveable<4,1>/1795
{ bitunit_container_kind, STAMP_gctools__GCBitUnitArray_moveable_4_1_, sizeof(gctools::GCBitUnitArray_moveable<4,1>), 4, "gctools::GCBitUnitArray_moveable<4,1>" },
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(gctools::GCBitUnitArray_moveable<4,1>),_Data), "_Data" },
 {  variable_capacity, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(gctools::GCBitUnitArray_moveable<4,1>),_Length), offsetof(SAFE_TYPE_MACRO(gctools::GCBitUnitArray_moveable<4,1>),_Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")>
{    variable_field, ctype_unsigned_long, sizeof(unsigned long), 0, "only" },
// Stamp = gctools::GCVector_moveable<core::SymbolStorage>/1799
{ container_kind, STAMP_gctools__GCVector_moveable_core__SymbolStorage_, sizeof(gctools::GCVector_moveable<core::SymbolStorage>), 0, "gctools::GCVector_moveable<core::SymbolStorage>" },
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<core::SymbolStorage>),_Data), "_Data" },
 {  variable_capacity, sizeof(core::SymbolStorage), offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<core::SymbolStorage>),_End), offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<core::SymbolStorage>),_Capacity), NULL },
// second-last-field is-atomic atomic: NIL  name: "basic_string"
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>" :NAME "basic_string" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::char_traits<char>" :NAME "char_traits" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 2 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::allocator<char>" :NAME "allocator" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposed-yet     {    variable_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SymbolStorage),_PackageName._M_string_length), "_PackageName._M_string_length" }, // atomic: NIL public: (T NIL) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>" :NAME "basic_string" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::char_traits<char>" :NAME "char_traits" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 2 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::allocator<char>" :NAME "allocator" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::(anonymous)" :NAME "")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposed-yet     {    variable_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SymbolStorage),_PackageName.NO-NAME._M_allocated_capacity), "_PackageName.NO-NAME._M_allocated_capacity" }, // atomic: NIL public: (T NIL T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: "basic_string"
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>" :NAME "basic_string" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::char_traits<char>" :NAME "char_traits" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 2 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::allocator<char>" :NAME "allocator" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposed-yet     {    variable_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SymbolStorage),_SymbolName._M_string_length), "_SymbolName._M_string_length" }, // atomic: NIL public: (T NIL) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>" :NAME "basic_string" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 1 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::char_traits<char>" :NAME "char_traits" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL) #S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 2 :CTYPE #S(CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "std::allocator<char>" :NAME "allocator" :ARGUMENTS (#S(CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT :INDEX 0 :CTYPE #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "char") :INTEGRAL-VALUE NIL))) :INTEGRAL-VALUE NIL)))
// (instance-field-access iv) -> AST-TOOLING:AS-PRIVATE   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::(anonymous)" :NAME "")
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")
// not-exposed-yet     {    variable_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SymbolStorage),_SymbolName.NO-NAME._M_allocated_capacity), "_SymbolName.NO-NAME._M_allocated_capacity" }, // atomic: NIL public: (T NIL T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Symbol_O>" :SPECIALIZER "class core::Symbol_O")
    {    variable_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Symbol_O>), offsetof(SAFE_TYPE_MACRO(core::SymbolStorage),_Symbol), "_Symbol" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "_Bool")
// not-exposed-yet     {    variable_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::SymbolStorage),_Export), "_Export" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "_Bool")
// not-exposed-yet     {    variable_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::SymbolStorage),_Shadow), "_Shadow" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// Stamp = gctools::GCVector_moveable<gctools::smart_ptr<core::Instance_O>>/1803
{ container_kind, STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__Instance_O__, sizeof(gctools::GCVector_moveable<gctools::smart_ptr<core::Instance_O>>), 0, "gctools::GCVector_moveable<gctools::smart_ptr<core::Instance_O>>" },
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<gctools::smart_ptr<core::Instance_O>>),_Data), "_Data" },
 {  variable_capacity, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<gctools::smart_ptr<core::Instance_O>>),_End), offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<gctools::smart_ptr<core::Instance_O>>),_Capacity), NULL },
// one -> #<SMART-PTR-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Instance_O>" :SPECIALIZER "class core::Instance_O") :base #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Instance_O>" :SPECIALIZER "class core::Instance_O")>
{    variable_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), 0, "only" },
// Stamp = gctools::GCArray_moveable<unsigned long>/1807
{ container_kind, STAMP_gctools__GCArray_moveable_unsigned_long_, sizeof(gctools::GCArray_moveable<unsigned long>), 0, "gctools::GCArray_moveable<unsigned long>" },
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(gctools::GCArray_moveable<unsigned long>),_Data), "_Data" },
 {  variable_capacity, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(gctools::GCArray_moveable<unsigned long>),_Length), offsetof(SAFE_TYPE_MACRO(gctools::GCArray_moveable<unsigned long>),_Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")>
{    variable_field, ctype_unsigned_long, sizeof(unsigned long), 0, "only" },
// Stamp = gctools::GCVector_moveable<std::pair<gctools::smart_ptr<core::Symbol_O>,gctools::smart_ptr<core::T_O>>>/1811
{ container_kind, STAMP_gctools__GCVector_moveable_std__pair_gctools__smart_ptr_core__Symbol_O__gctools__smart_ptr_core__T_O___, sizeof(gctools::GCVector_moveable<std::pair<gctools::smart_ptr<core::Symbol_O>,gctools::smart_ptr<core::T_O>>>), 0, "gctools::GCVector_moveable<std::pair<gctools::smart_ptr<core::Symbol_O>,gctools::smart_ptr<core::T_O>>>" },
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<std::pair<gctools::smart_ptr<core::Symbol_O>,gctools::smart_ptr<core::T_O>>>),_Data), "_Data" },
 {  variable_capacity, sizeof(std::pair<gctools::smart_ptr<core::Symbol_O>,gctools::smart_ptr<core::T_O>>), offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<std::pair<gctools::smart_ptr<core::Symbol_O>,gctools::smart_ptr<core::T_O>>>),_End), offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<std::pair<gctools::smart_ptr<core::Symbol_O>,gctools::smart_ptr<core::T_O>>>),_Capacity), NULL },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Symbol_O>" :SPECIALIZER "class core::Symbol_O")
    {    variable_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Symbol_O>), offsetof(SAFE_TYPE_MACRO(std::pair<gctools::smart_ptr<core::Symbol_O>,gctools::smart_ptr<core::T_O>>),first), "first" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
    {    variable_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(std::pair<gctools::smart_ptr<core::Symbol_O>,gctools::smart_ptr<core::T_O>>),second), "second" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// Stamp = gctools::GCBitUnitArray_moveable<2,0>/1815
{ bitunit_container_kind, STAMP_gctools__GCBitUnitArray_moveable_2_0_, sizeof(gctools::GCBitUnitArray_moveable<2,0>), 2, "gctools::GCBitUnitArray_moveable<2,0>" },
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(gctools::GCBitUnitArray_moveable<2,0>),_Data), "_Data" },
 {  variable_capacity, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(gctools::GCBitUnitArray_moveable<2,0>),_Length), offsetof(SAFE_TYPE_MACRO(gctools::GCBitUnitArray_moveable<2,0>),_Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")>
{    variable_field, ctype_unsigned_long, sizeof(unsigned long), 0, "only" },
// Stamp = gctools::GCArray_moveable<int>/1819
{ container_kind, STAMP_gctools__GCArray_moveable_int_, sizeof(gctools::GCArray_moveable<int>), 0, "gctools::GCArray_moveable<int>" },
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(gctools::GCArray_moveable<int>),_Data), "_Data" },
 {  variable_capacity, sizeof(int), offsetof(SAFE_TYPE_MACRO(gctools::GCArray_moveable<int>),_Length), offsetof(SAFE_TYPE_MACRO(gctools::GCArray_moveable<int>),_Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")>
{    variable_field, ctype_int, sizeof(int), 0, "only" },
// Stamp = gctools::GCBitUnitArray_moveable<1,0>/1823
{ bitunit_container_kind, STAMP_gctools__GCBitUnitArray_moveable_1_0_, sizeof(gctools::GCBitUnitArray_moveable<1,0>), 1, "gctools::GCBitUnitArray_moveable<1,0>" },
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(gctools::GCBitUnitArray_moveable<1,0>),_Data), "_Data" },
 {  variable_capacity, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(gctools::GCBitUnitArray_moveable<1,0>),_Length), offsetof(SAFE_TYPE_MACRO(gctools::GCBitUnitArray_moveable<1,0>),_Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")>
{    variable_field, ctype_unsigned_long, sizeof(unsigned long), 0, "only" },
// Stamp = gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>>/1827
{ container_kind, STAMP_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__, sizeof(gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>>), 0, "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>>" },
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>>),_Data), "_Data" },
 {  variable_capacity, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>>),_Length), offsetof(SAFE_TYPE_MACRO(gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>>),_Length), NULL },
// one -> #<SMART-PTR-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O") :base #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")>
{    variable_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), 0, "only" },
// Stamp = gctools::GCVector_moveable<core::AuxArgument>/1831
{ container_kind, STAMP_gctools__GCVector_moveable_core__AuxArgument_, sizeof(gctools::GCVector_moveable<core::AuxArgument>), 0, "gctools::GCVector_moveable<core::AuxArgument>" },
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<core::AuxArgument>),_Data), "_Data" },
 {  variable_capacity, sizeof(core::AuxArgument), offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<core::AuxArgument>),_End), offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<core::AuxArgument>),_Capacity), NULL },
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
    {    variable_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::AuxArgument),_ArgTarget), "_ArgTarget" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")
// not-exposed-yet     {    variable_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::AuxArgument),_ArgTargetFrameIndex), "_ArgTargetFrameIndex" }, // atomic: NIL public: (T) fixable: NIL good-name: T
// second-last-field is-atomic atomic: NIL  name: NIL
// (instance-field-access iv) -> AST-TOOLING:AS-PUBLIC   (instance-field-ctype iv) -> #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")
    {    variable_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::AuxArgument),_Expression), "_Expression" }, // atomic: NIL public: (T) fixable: SMART-PTR-FIX good-name: T
// Stamp = gctools::GCBitUnitArray_moveable<2,1>/1835
{ bitunit_container_kind, STAMP_gctools__GCBitUnitArray_moveable_2_1_, sizeof(gctools::GCBitUnitArray_moveable<2,1>), 2, "gctools::GCBitUnitArray_moveable<2,1>" },
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(gctools::GCBitUnitArray_moveable<2,1>),_Data), "_Data" },
 {  variable_capacity, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(gctools::GCBitUnitArray_moveable<2,1>),_Length), offsetof(SAFE_TYPE_MACRO(gctools::GCBitUnitArray_moveable<2,1>),_Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")>
{    variable_field, ctype_unsigned_long, sizeof(unsigned long), 0, "only" },
// Stamp = gctools::GCArray_moveable<long>/1839
{ container_kind, STAMP_gctools__GCArray_moveable_long_, sizeof(gctools::GCArray_moveable<long>), 0, "gctools::GCArray_moveable<long>" },
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(gctools::GCArray_moveable<long>),_Data), "_Data" },
 {  variable_capacity, sizeof(long), offsetof(SAFE_TYPE_MACRO(gctools::GCArray_moveable<long>),_Length), offsetof(SAFE_TYPE_MACRO(gctools::GCArray_moveable<long>),_Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "long") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "long")>
{    variable_field, ctype_long, sizeof(long), 0, "only" },
// Stamp = gctools::GCVector_moveable<int>/1843
{ container_kind, STAMP_gctools__GCVector_moveable_int_, sizeof(gctools::GCVector_moveable<int>), 0, "gctools::GCVector_moveable<int>" },
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<int>),_Data), "_Data" },
 {  variable_capacity, sizeof(int), offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<int>),_End), offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<int>),_Capacity), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")>
{    variable_field, ctype_int, sizeof(int), 0, "only" },
// Stamp = gctools::GCVector_moveable<gctools::smart_ptr<core::Package_O>>/1847
{ container_kind, STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__Package_O__, sizeof(gctools::GCVector_moveable<gctools::smart_ptr<core::Package_O>>), 0, "gctools::GCVector_moveable<gctools::smart_ptr<core::Package_O>>" },
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<gctools::smart_ptr<core::Package_O>>),_Data), "_Data" },
 {  variable_capacity, sizeof(gctools::smart_ptr<core::Package_O>), offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<gctools::smart_ptr<core::Package_O>>),_End), offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<gctools::smart_ptr<core::Package_O>>),_Capacity), NULL },
// one -> #<SMART-PTR-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Package_O>" :SPECIALIZER "class core::Package_O") :base #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Package_O>" :SPECIALIZER "class core::Package_O")>
{    variable_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Package_O>), 0, "only" },
// Stamp = gctools::GCArray_moveable<float>/1851
{ container_kind, STAMP_gctools__GCArray_moveable_float_, sizeof(gctools::GCArray_moveable<float>), 0, "gctools::GCArray_moveable<float>" },
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(gctools::GCArray_moveable<float>),_Data), "_Data" },
 {  variable_capacity, sizeof(float), offsetof(SAFE_TYPE_MACRO(gctools::GCArray_moveable<float>),_Length), offsetof(SAFE_TYPE_MACRO(gctools::GCArray_moveable<float>),_Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "float") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "float")>
{    variable_field, ctype_float, sizeof(float), 0, "only" },
// Stamp = gctools::GCVector_moveable<gctools::smart_ptr<core::Creator_O>>/1855
{ container_kind, STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__Creator_O__, sizeof(gctools::GCVector_moveable<gctools::smart_ptr<core::Creator_O>>), 0, "gctools::GCVector_moveable<gctools::smart_ptr<core::Creator_O>>" },
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<gctools::smart_ptr<core::Creator_O>>),_Data), "_Data" },
 {  variable_capacity, sizeof(gctools::smart_ptr<core::Creator_O>), offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<gctools::smart_ptr<core::Creator_O>>),_End), offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<gctools::smart_ptr<core::Creator_O>>),_Capacity), NULL },
// one -> #<SMART-PTR-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Creator_O>" :SPECIALIZER "class core::Creator_O") :base #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Creator_O>" :SPECIALIZER "class core::Creator_O")>
{    variable_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Creator_O>), 0, "only" },
// Stamp = gctools::GCVector_moveable<core::T_O *>/1859
{ container_kind, STAMP_gctools__GCVector_moveable_core__T_O___, sizeof(gctools::GCVector_moveable<core::T_O *>), 0, "gctools::GCVector_moveable<core::T_O *>" },
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<core::T_O *>),_Data), "_Data" },
 {  variable_capacity, sizeof(core::T_O*), offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<core::T_O *>),_End), offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<core::T_O *>),_Capacity), NULL },
// one -> #<POINTER-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::POINTER-CTYPE :KEY NIL :POINTEE #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::T_O" :NAME "T_O")) :base #S(CLASP-ANALYZER::POINTER-CTYPE :KEY NIL :POINTEE #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::T_O" :NAME "T_O"))>
{    variable_field, POINTER_OFFSET, sizeof(core::T_O*), 0, "only" },
// Stamp = gctools::GCArray_moveable<unsigned short>/1863
{ container_kind, STAMP_gctools__GCArray_moveable_unsigned_short_, sizeof(gctools::GCArray_moveable<unsigned short>), 0, "gctools::GCArray_moveable<unsigned short>" },
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(gctools::GCArray_moveable<unsigned short>),_Data), "_Data" },
 {  variable_capacity, sizeof(unsigned short), offsetof(SAFE_TYPE_MACRO(gctools::GCArray_moveable<unsigned short>),_Length), offsetof(SAFE_TYPE_MACRO(gctools::GCArray_moveable<unsigned short>),_Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned short") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned short")>
{    variable_field, ctype_unsigned_short, sizeof(unsigned short), 0, "only" },
// Stamp = gctools::GCVector_moveable<float>/1867
{ container_kind, STAMP_gctools__GCVector_moveable_float_, sizeof(gctools::GCVector_moveable<float>), 0, "gctools::GCVector_moveable<float>" },
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<float>),_Data), "_Data" },
 {  variable_capacity, sizeof(float), offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<float>),_End), offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<float>),_Capacity), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "float") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "float")>
{    variable_field, ctype_float, sizeof(float), 0, "only" },
// Stamp = clang::FrontendAction/1871
// Stamp = clang::ASTFrontendAction/1875
// Stamp = clang::SyntaxOnlyAction/1879

#endif // defined(GC_OBJ_SCAN_HELPERS)
#if defined(GC_OBJ_SCAN_TABLE)
static void* OBJ_SCAN_table[] = { 
  /* 0 */ NULL,
   NULL
};
#endif // defined(GC_OBJ_SCAN_TABLE)
#if defined(GC_OBJ_FINALIZE)
obj_finalize_STAMP_core__T_O:
{
     // stamp value 7
    core::T_O* obj_gc_safe = reinterpret_cast<core::T_O*>(client);
    obj_gc_safe->~T_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__VaList_dummy_O:
{
     // stamp value 11
    core::VaList_dummy_O* obj_gc_safe = reinterpret_cast<core::VaList_dummy_O*>(client);
    obj_gc_safe->~VaList_dummy_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__Unused_dummy_O:
{
     // stamp value 15
    core::Unused_dummy_O* obj_gc_safe = reinterpret_cast<core::Unused_dummy_O*>(client);
    obj_gc_safe->~Unused_dummy_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__General_O:
{
     // stamp value 19
    core::General_O* obj_gc_safe = reinterpret_cast<core::General_O*>(client);
    obj_gc_safe->~General_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__MultiStringBuffer_O:
{
     // stamp value 23
    core::MultiStringBuffer_O* obj_gc_safe = reinterpret_cast<core::MultiStringBuffer_O*>(client);
    obj_gc_safe->~MultiStringBuffer_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__ClassHolder_O:
{
     // stamp value 27
    core::ClassHolder_O* obj_gc_safe = reinterpret_cast<core::ClassHolder_O*>(client);
    obj_gc_safe->~ClassHolder_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__WrappedPointer_O:
{
     // stamp value 30
    core::WrappedPointer_O* obj_gc_safe = reinterpret_cast<core::WrappedPointer_O*>(client);
    obj_gc_safe->~WrappedPointer_O();
}
obj_finalize_STAMP_core__FdSet_O:
{
     // stamp value 35
    core::FdSet_O* obj_gc_safe = reinterpret_cast<core::FdSet_O*>(client);
    obj_gc_safe->~FdSet_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__SymbolToEnumConverter_O:
{
     // stamp value 39
    core::SymbolToEnumConverter_O* obj_gc_safe = reinterpret_cast<core::SymbolToEnumConverter_O*>(client);
    obj_gc_safe->~SymbolToEnumConverter_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__Attribute_O:
{
     // stamp value 43
    llvmo::Attribute_O* obj_gc_safe = reinterpret_cast<llvmo::Attribute_O*>(client);
    obj_gc_safe->~Attribute_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__LambdaListHandler_O:
{
     // stamp value 47
    core::LambdaListHandler_O* obj_gc_safe = reinterpret_cast<core::LambdaListHandler_O*>(client);
    obj_gc_safe->~LambdaListHandler_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__AttributeSet_O:
{
     // stamp value 51
    llvmo::AttributeSet_O* obj_gc_safe = reinterpret_cast<llvmo::AttributeSet_O*>(client);
    obj_gc_safe->~AttributeSet_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__AtomicT_Holder_O:
{
     // stamp value 55
    core::AtomicT_Holder_O* obj_gc_safe = reinterpret_cast<core::AtomicT_Holder_O*>(client);
    obj_gc_safe->~AtomicT_Holder_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__Function_O:
{
     // stamp value 59
    core::Function_O* obj_gc_safe = reinterpret_cast<core::Function_O*>(client);
    obj_gc_safe->~Function_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__FuncallableInstance_O:
{
     // stamp value 61
    core::FuncallableInstance_O* obj_gc_safe = reinterpret_cast<core::FuncallableInstance_O*>(client);
    obj_gc_safe->~FuncallableInstance_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__Creator_O:
{
     // stamp value 67
    core::Creator_O* obj_gc_safe = reinterpret_cast<core::Creator_O*>(client);
    obj_gc_safe->~Creator_O();
}
obj_finalize_STAMP_core__ClassRepCreator_O:
{
     // stamp value 71
    core::ClassRepCreator_O* obj_gc_safe = reinterpret_cast<core::ClassRepCreator_O*>(client);
    obj_gc_safe->~ClassRepCreator_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__DerivableCxxClassCreator_O:
{
     // stamp value 75
    core::DerivableCxxClassCreator_O* obj_gc_safe = reinterpret_cast<core::DerivableCxxClassCreator_O*>(client);
    obj_gc_safe->~DerivableCxxClassCreator_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__FuncallableInstanceCreator_O:
{
     // stamp value 79
    core::FuncallableInstanceCreator_O* obj_gc_safe = reinterpret_cast<core::FuncallableInstanceCreator_O*>(client);
    obj_gc_safe->~FuncallableInstanceCreator_O();
    goto finalize_done;
}
obj_finalize_STAMP_clbind__ConstructorCreator_O:
{
     // stamp value 83
    clbind::ConstructorCreator_O* obj_gc_safe = reinterpret_cast<clbind::ConstructorCreator_O*>(client);
    obj_gc_safe->~ConstructorCreator_O();
}
obj_finalize_STAMP_clbind__DummyCreator_O:
{
     // stamp value 87
    clbind::DummyCreator_O* obj_gc_safe = reinterpret_cast<clbind::DummyCreator_O*>(client);
    obj_gc_safe->~DummyCreator_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__InstanceCreator_O:
{
     // stamp value 91
    core::InstanceCreator_O* obj_gc_safe = reinterpret_cast<core::InstanceCreator_O*>(client);
    obj_gc_safe->~InstanceCreator_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__StandardClassCreator_O:
{
     // stamp value 95
    core::StandardClassCreator_O* obj_gc_safe = reinterpret_cast<core::StandardClassCreator_O*>(client);
    obj_gc_safe->~StandardClassCreator_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__SpecialForm_O:
{
     // stamp value 99
    core::SpecialForm_O* obj_gc_safe = reinterpret_cast<core::SpecialForm_O*>(client);
    obj_gc_safe->~SpecialForm_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__Closure_O:
{
     // stamp value 103
    core::Closure_O* obj_gc_safe = reinterpret_cast<core::Closure_O*>(client);
    obj_gc_safe->~Closure_O();
}
obj_finalize_STAMP_core__ClosureWithSlots_O:
{
     // stamp value 107
    core::ClosureWithSlots_O* obj_gc_safe = reinterpret_cast<core::ClosureWithSlots_O*>(client);
    obj_gc_safe->~ClosureWithSlots_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__SingleDispatchCxxEffectiveMethodFunction_O:
{
     // stamp value 111
    core::SingleDispatchCxxEffectiveMethodFunction_O* obj_gc_safe = reinterpret_cast<core::SingleDispatchCxxEffectiveMethodFunction_O*>(client);
    obj_gc_safe->~SingleDispatchCxxEffectiveMethodFunction_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__SingleDispatchMethodFunction_O:
{
     // stamp value 115
    core::SingleDispatchMethodFunction_O* obj_gc_safe = reinterpret_cast<core::SingleDispatchMethodFunction_O*>(client);
    obj_gc_safe->~SingleDispatchMethodFunction_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__CxxMethodFunction_O:
{
     // stamp value 119
    core::CxxMethodFunction_O* obj_gc_safe = reinterpret_cast<core::CxxMethodFunction_O*>(client);
    obj_gc_safe->~CxxMethodFunction_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__BuiltinClosure_O:
{
     // stamp value 123
    core::BuiltinClosure_O* obj_gc_safe = reinterpret_cast<core::BuiltinClosure_O*>(client);
    obj_gc_safe->~BuiltinClosure_O();
}
obj_finalize_STAMP_core__TranslationFunctor_O:
{
     // stamp value 127
    core::TranslationFunctor_O* obj_gc_safe = reinterpret_cast<core::TranslationFunctor_O*>(client);
    obj_gc_safe->~TranslationFunctor_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__SingleDispatchGenericFunctionClosure_O:
{
     // stamp value 131
    core::SingleDispatchGenericFunctionClosure_O* obj_gc_safe = reinterpret_cast<core::SingleDispatchGenericFunctionClosure_O*>(client);
    obj_gc_safe->~SingleDispatchGenericFunctionClosure_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__SingleDispatchEffectiveMethodFunction_O:
{
     // stamp value 135
    core::SingleDispatchEffectiveMethodFunction_O* obj_gc_safe = reinterpret_cast<core::SingleDispatchEffectiveMethodFunction_O*>(client);
    obj_gc_safe->~SingleDispatchEffectiveMethodFunction_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__WeakPointer_O:
{
     // stamp value 139
    core::WeakPointer_O* obj_gc_safe = reinterpret_cast<core::WeakPointer_O*>(client);
    obj_gc_safe->~WeakPointer_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__DebugLoc_O:
{
     // stamp value 143
    llvmo::DebugLoc_O* obj_gc_safe = reinterpret_cast<llvmo::DebugLoc_O*>(client);
    obj_gc_safe->~DebugLoc_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__Pointer_O:
{
     // stamp value 147
    core::Pointer_O* obj_gc_safe = reinterpret_cast<core::Pointer_O*>(client);
    obj_gc_safe->~Pointer_O();
    goto finalize_done;
}
obj_finalize_STAMP_clasp_ffi__ForeignData_O:
{
     // stamp value 151
    clasp_ffi::ForeignData_O* obj_gc_safe = reinterpret_cast<clasp_ffi::ForeignData_O*>(client);
    obj_gc_safe->~ForeignData_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__CxxObject_O:
{
     // stamp value 155
    core::CxxObject_O* obj_gc_safe = reinterpret_cast<core::CxxObject_O*>(client);
    obj_gc_safe->~CxxObject_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__NativeVector_float_O:
{
     // stamp value 159
    core::NativeVector_float_O* obj_gc_safe = reinterpret_cast<core::NativeVector_float_O*>(client);
    obj_gc_safe->~NativeVector_float_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__MDBuilder_O:
{
     // stamp value 163
    llvmo::MDBuilder_O* obj_gc_safe = reinterpret_cast<llvmo::MDBuilder_O*>(client);
    obj_gc_safe->~MDBuilder_O();
    goto finalize_done;
}
obj_finalize_STAMP_mp__ConditionVariable_O:
{
     // stamp value 167
    mp::ConditionVariable_O* obj_gc_safe = reinterpret_cast<mp::ConditionVariable_O*>(client);
    obj_gc_safe->~ConditionVariable_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__NativeVector_double_O:
{
     // stamp value 171
    core::NativeVector_double_O* obj_gc_safe = reinterpret_cast<core::NativeVector_double_O*>(client);
    obj_gc_safe->~NativeVector_double_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__NativeVector_int_O:
{
     // stamp value 175
    core::NativeVector_int_O* obj_gc_safe = reinterpret_cast<core::NativeVector_int_O*>(client);
    obj_gc_safe->~NativeVector_int_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__FunctionCallee_O:
{
     // stamp value 179
    llvmo::FunctionCallee_O* obj_gc_safe = reinterpret_cast<llvmo::FunctionCallee_O*>(client);
    obj_gc_safe->~FunctionCallee_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__Serializer_O:
{
     // stamp value 183
    core::Serializer_O* obj_gc_safe = reinterpret_cast<core::Serializer_O*>(client);
    obj_gc_safe->~Serializer_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__DINodeArray_O:
{
     // stamp value 187
    llvmo::DINodeArray_O* obj_gc_safe = reinterpret_cast<llvmo::DINodeArray_O*>(client);
    obj_gc_safe->~DINodeArray_O();
    goto finalize_done;
}
obj_finalize_STAMP_mp__Mutex_O:
{
     // stamp value 191
    mp::Mutex_O* obj_gc_safe = reinterpret_cast<mp::Mutex_O*>(client);
    obj_gc_safe->~Mutex_O();
    goto finalize_done;
}
obj_finalize_STAMP_mp__RecursiveMutex_O:
{
     // stamp value 195
    mp::RecursiveMutex_O* obj_gc_safe = reinterpret_cast<mp::RecursiveMutex_O*>(client);
    obj_gc_safe->~RecursiveMutex_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__DITypeRefArray_O:
{
     // stamp value 199
    llvmo::DITypeRefArray_O* obj_gc_safe = reinterpret_cast<llvmo::DITypeRefArray_O*>(client);
    obj_gc_safe->~DITypeRefArray_O();
    goto finalize_done;
}
obj_finalize_STAMP_mp__SharedMutex_O:
{
     // stamp value 203
    mp::SharedMutex_O* obj_gc_safe = reinterpret_cast<mp::SharedMutex_O*>(client);
    obj_gc_safe->~SharedMutex_O();
    goto finalize_done;
}
obj_finalize_STAMP_mp__Process_O:
{
     // stamp value 207
    mp::Process_O* obj_gc_safe = reinterpret_cast<mp::Process_O*>(client);
    obj_gc_safe->~Process_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__SingleDispatchMethod_O:
{
     // stamp value 211
    core::SingleDispatchMethod_O* obj_gc_safe = reinterpret_cast<core::SingleDispatchMethod_O*>(client);
    obj_gc_safe->~SingleDispatchMethod_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__Iterator_O:
{
     // stamp value 215
    core::Iterator_O* obj_gc_safe = reinterpret_cast<core::Iterator_O*>(client);
    obj_gc_safe->~Iterator_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__DirectoryIterator_O:
{
     // stamp value 219
    core::DirectoryIterator_O* obj_gc_safe = reinterpret_cast<core::DirectoryIterator_O*>(client);
    obj_gc_safe->~DirectoryIterator_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__RecursiveDirectoryIterator_O:
{
     // stamp value 223
    core::RecursiveDirectoryIterator_O* obj_gc_safe = reinterpret_cast<core::RecursiveDirectoryIterator_O*>(client);
    obj_gc_safe->~RecursiveDirectoryIterator_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__Array_O:
{
     // stamp value 227
    core::Array_O* obj_gc_safe = reinterpret_cast<core::Array_O*>(client);
    obj_gc_safe->~Array_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__MDArray_O:
{
     // stamp value 231
    core::MDArray_O* obj_gc_safe = reinterpret_cast<core::MDArray_O*>(client);
    obj_gc_safe->~MDArray_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__template_Array_core__MDArray_int16_t_O_core__SimpleMDArray_int16_t_O_core__SimpleVector_int16_t_O_core__MDArray_O_:
{
     // do nothing stamp value 235
    THROW_HARD_ERROR(BF("Should never finalize object core::template_Array<core::MDArray_int16_t_O,core::SimpleMDArray_int16_t_O,core::SimpleVector_int16_t_O,core::MDArray_O>"));
}
obj_finalize_STAMP_core__MDArray_int16_t_O:
{
     // stamp value 239
    core::MDArray_int16_t_O* obj_gc_safe = reinterpret_cast<core::MDArray_int16_t_O*>(client);
    obj_gc_safe->~MDArray_int16_t_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__template_Array_core__MDArray_int8_t_O_core__SimpleMDArray_int8_t_O_core__SimpleVector_int8_t_O_core__MDArray_O_:
{
     // do nothing stamp value 243
    THROW_HARD_ERROR(BF("Should never finalize object core::template_Array<core::MDArray_int8_t_O,core::SimpleMDArray_int8_t_O,core::SimpleVector_int8_t_O,core::MDArray_O>"));
}
obj_finalize_STAMP_core__MDArray_int8_t_O:
{
     // stamp value 247
    core::MDArray_int8_t_O* obj_gc_safe = reinterpret_cast<core::MDArray_int8_t_O*>(client);
    obj_gc_safe->~MDArray_int8_t_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__template_Array_core__MDArray_int32_t_O_core__SimpleMDArray_int32_t_O_core__SimpleVector_int32_t_O_core__MDArray_O_:
{
     // do nothing stamp value 251
    THROW_HARD_ERROR(BF("Should never finalize object core::template_Array<core::MDArray_int32_t_O,core::SimpleMDArray_int32_t_O,core::SimpleVector_int32_t_O,core::MDArray_O>"));
}
obj_finalize_STAMP_core__MDArray_int32_t_O:
{
     // stamp value 255
    core::MDArray_int32_t_O* obj_gc_safe = reinterpret_cast<core::MDArray_int32_t_O*>(client);
    obj_gc_safe->~MDArray_int32_t_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__template_Array_core__MDArray_byte4_t_O_core__SimpleMDArray_byte4_t_O_core__SimpleVector_byte4_t_O_core__MDArray_O_:
{
     // do nothing stamp value 259
    THROW_HARD_ERROR(BF("Should never finalize object core::template_Array<core::MDArray_byte4_t_O,core::SimpleMDArray_byte4_t_O,core::SimpleVector_byte4_t_O,core::MDArray_O>"));
}
obj_finalize_STAMP_core__MDArray_byte4_t_O:
{
     // stamp value 263
    core::MDArray_byte4_t_O* obj_gc_safe = reinterpret_cast<core::MDArray_byte4_t_O*>(client);
    obj_gc_safe->~MDArray_byte4_t_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__template_Array_core__MDArray_float_O_core__SimpleMDArray_float_O_core__SimpleVector_float_O_core__MDArray_O_:
{
     // do nothing stamp value 267
    THROW_HARD_ERROR(BF("Should never finalize object core::template_Array<core::MDArray_float_O,core::SimpleMDArray_float_O,core::SimpleVector_float_O,core::MDArray_O>"));
}
obj_finalize_STAMP_core__MDArray_float_O:
{
     // stamp value 271
    core::MDArray_float_O* obj_gc_safe = reinterpret_cast<core::MDArray_float_O*>(client);
    obj_gc_safe->~MDArray_float_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__template_Array_core__MDArray_size_t_O_core__SimpleMDArray_size_t_O_core__SimpleVector_size_t_O_core__MDArray_O_:
{
     // do nothing stamp value 275
    THROW_HARD_ERROR(BF("Should never finalize object core::template_Array<core::MDArray_size_t_O,core::SimpleMDArray_size_t_O,core::SimpleVector_size_t_O,core::MDArray_O>"));
}
obj_finalize_STAMP_core__MDArray_size_t_O:
{
     // stamp value 279
    core::MDArray_size_t_O* obj_gc_safe = reinterpret_cast<core::MDArray_size_t_O*>(client);
    obj_gc_safe->~MDArray_size_t_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__template_Array_core__MDArray_byte8_t_O_core__SimpleMDArray_byte8_t_O_core__SimpleVector_byte8_t_O_core__MDArray_O_:
{
     // do nothing stamp value 283
    THROW_HARD_ERROR(BF("Should never finalize object core::template_Array<core::MDArray_byte8_t_O,core::SimpleMDArray_byte8_t_O,core::SimpleVector_byte8_t_O,core::MDArray_O>"));
}
obj_finalize_STAMP_core__MDArray_byte8_t_O:
{
     // stamp value 287
    core::MDArray_byte8_t_O* obj_gc_safe = reinterpret_cast<core::MDArray_byte8_t_O*>(client);
    obj_gc_safe->~MDArray_byte8_t_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__template_Array_core__MDArray_int64_t_O_core__SimpleMDArray_int64_t_O_core__SimpleVector_int64_t_O_core__MDArray_O_:
{
     // do nothing stamp value 291
    THROW_HARD_ERROR(BF("Should never finalize object core::template_Array<core::MDArray_int64_t_O,core::SimpleMDArray_int64_t_O,core::SimpleVector_int64_t_O,core::MDArray_O>"));
}
obj_finalize_STAMP_core__MDArray_int64_t_O:
{
     // stamp value 295
    core::MDArray_int64_t_O* obj_gc_safe = reinterpret_cast<core::MDArray_int64_t_O*>(client);
    obj_gc_safe->~MDArray_int64_t_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__template_Array_core__MDArray_byte32_t_O_core__SimpleMDArray_byte32_t_O_core__SimpleVector_byte32_t_O_core__MDArray_O_:
{
     // do nothing stamp value 299
    THROW_HARD_ERROR(BF("Should never finalize object core::template_Array<core::MDArray_byte32_t_O,core::SimpleMDArray_byte32_t_O,core::SimpleVector_byte32_t_O,core::MDArray_O>"));
}
obj_finalize_STAMP_core__MDArray_byte32_t_O:
{
     // stamp value 303
    core::MDArray_byte32_t_O* obj_gc_safe = reinterpret_cast<core::MDArray_byte32_t_O*>(client);
    obj_gc_safe->~MDArray_byte32_t_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__template_Array_core__MDArray_byte2_t_O_core__SimpleMDArray_byte2_t_O_core__SimpleVector_byte2_t_O_core__MDArray_O_:
{
     // do nothing stamp value 307
    THROW_HARD_ERROR(BF("Should never finalize object core::template_Array<core::MDArray_byte2_t_O,core::SimpleMDArray_byte2_t_O,core::SimpleVector_byte2_t_O,core::MDArray_O>"));
}
obj_finalize_STAMP_core__MDArray_byte2_t_O:
{
     // stamp value 311
    core::MDArray_byte2_t_O* obj_gc_safe = reinterpret_cast<core::MDArray_byte2_t_O*>(client);
    obj_gc_safe->~MDArray_byte2_t_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__template_Array_core__MDArray_int2_t_O_core__SimpleMDArray_int2_t_O_core__SimpleVector_int2_t_O_core__MDArray_O_:
{
     // do nothing stamp value 315
    THROW_HARD_ERROR(BF("Should never finalize object core::template_Array<core::MDArray_int2_t_O,core::SimpleMDArray_int2_t_O,core::SimpleVector_int2_t_O,core::MDArray_O>"));
}
obj_finalize_STAMP_core__MDArray_int2_t_O:
{
     // stamp value 319
    core::MDArray_int2_t_O* obj_gc_safe = reinterpret_cast<core::MDArray_int2_t_O*>(client);
    obj_gc_safe->~MDArray_int2_t_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__template_Array_core__MDArray_fixnum_O_core__SimpleMDArray_fixnum_O_core__SimpleVector_fixnum_O_core__MDArray_O_:
{
     // do nothing stamp value 323
    THROW_HARD_ERROR(BF("Should never finalize object core::template_Array<core::MDArray_fixnum_O,core::SimpleMDArray_fixnum_O,core::SimpleVector_fixnum_O,core::MDArray_O>"));
}
obj_finalize_STAMP_core__MDArray_fixnum_O:
{
     // stamp value 327
    core::MDArray_fixnum_O* obj_gc_safe = reinterpret_cast<core::MDArray_fixnum_O*>(client);
    obj_gc_safe->~MDArray_fixnum_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__template_Array_core__MDArrayBaseChar_O_core__SimpleMDArrayBaseChar_O_core__SimpleBaseString_O_core__MDArray_O_:
{
     // do nothing stamp value 331
    THROW_HARD_ERROR(BF("Should never finalize object core::template_Array<core::MDArrayBaseChar_O,core::SimpleMDArrayBaseChar_O,core::SimpleBaseString_O,core::MDArray_O>"));
}
obj_finalize_STAMP_core__MDArrayBaseChar_O:
{
     // stamp value 335
    core::MDArrayBaseChar_O* obj_gc_safe = reinterpret_cast<core::MDArrayBaseChar_O*>(client);
    obj_gc_safe->~MDArrayBaseChar_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__template_Array_core__MDArray_byte64_t_O_core__SimpleMDArray_byte64_t_O_core__SimpleVector_byte64_t_O_core__MDArray_O_:
{
     // do nothing stamp value 339
    THROW_HARD_ERROR(BF("Should never finalize object core::template_Array<core::MDArray_byte64_t_O,core::SimpleMDArray_byte64_t_O,core::SimpleVector_byte64_t_O,core::MDArray_O>"));
}
obj_finalize_STAMP_core__MDArray_byte64_t_O:
{
     // stamp value 343
    core::MDArray_byte64_t_O* obj_gc_safe = reinterpret_cast<core::MDArray_byte64_t_O*>(client);
    obj_gc_safe->~MDArray_byte64_t_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__template_Array_core__MDArrayCharacter_O_core__SimpleMDArrayCharacter_O_core__SimpleCharacterString_O_core__MDArray_O_:
{
     // do nothing stamp value 347
    THROW_HARD_ERROR(BF("Should never finalize object core::template_Array<core::MDArrayCharacter_O,core::SimpleMDArrayCharacter_O,core::SimpleCharacterString_O,core::MDArray_O>"));
}
obj_finalize_STAMP_core__MDArrayCharacter_O:
{
     // stamp value 351
    core::MDArrayCharacter_O* obj_gc_safe = reinterpret_cast<core::MDArrayCharacter_O*>(client);
    obj_gc_safe->~MDArrayCharacter_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__template_Array_core__MDArrayT_O_core__SimpleMDArrayT_O_core__SimpleVector_O_core__MDArray_O_:
{
     // do nothing stamp value 355
    THROW_HARD_ERROR(BF("Should never finalize object core::template_Array<core::MDArrayT_O,core::SimpleMDArrayT_O,core::SimpleVector_O,core::MDArray_O>"));
}
obj_finalize_STAMP_core__MDArrayT_O:
{
     // stamp value 359
    core::MDArrayT_O* obj_gc_safe = reinterpret_cast<core::MDArrayT_O*>(client);
    obj_gc_safe->~MDArrayT_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__template_Array_core__MDArrayBit_O_core__SimpleMDArrayBit_O_core__SimpleBitVector_O_core__MDArray_O_:
{
     // do nothing stamp value 363
    THROW_HARD_ERROR(BF("Should never finalize object core::template_Array<core::MDArrayBit_O,core::SimpleMDArrayBit_O,core::SimpleBitVector_O,core::MDArray_O>"));
}
obj_finalize_STAMP_core__MDArrayBit_O:
{
     // stamp value 367
    core::MDArrayBit_O* obj_gc_safe = reinterpret_cast<core::MDArrayBit_O*>(client);
    obj_gc_safe->~MDArrayBit_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__template_Array_core__MDArray_byte16_t_O_core__SimpleMDArray_byte16_t_O_core__SimpleVector_byte16_t_O_core__MDArray_O_:
{
     // do nothing stamp value 371
    THROW_HARD_ERROR(BF("Should never finalize object core::template_Array<core::MDArray_byte16_t_O,core::SimpleMDArray_byte16_t_O,core::SimpleVector_byte16_t_O,core::MDArray_O>"));
}
obj_finalize_STAMP_core__MDArray_byte16_t_O:
{
     // stamp value 375
    core::MDArray_byte16_t_O* obj_gc_safe = reinterpret_cast<core::MDArray_byte16_t_O*>(client);
    obj_gc_safe->~MDArray_byte16_t_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__SimpleMDArray_O:
{
     // stamp value 379
    core::SimpleMDArray_O* obj_gc_safe = reinterpret_cast<core::SimpleMDArray_O*>(client);
    obj_gc_safe->~SimpleMDArray_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__template_SimpleArray_core__SimpleMDArray_int8_t_O_core__SimpleVector_int8_t_O_core__SimpleMDArray_O_:
{
     // do nothing stamp value 383
    THROW_HARD_ERROR(BF("Should never finalize object core::template_SimpleArray<core::SimpleMDArray_int8_t_O,core::SimpleVector_int8_t_O,core::SimpleMDArray_O>"));
}
obj_finalize_STAMP_core__SimpleMDArray_int8_t_O:
{
     // stamp value 387
    core::SimpleMDArray_int8_t_O* obj_gc_safe = reinterpret_cast<core::SimpleMDArray_int8_t_O*>(client);
    obj_gc_safe->~SimpleMDArray_int8_t_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__template_SimpleArray_core__SimpleMDArray_double_O_core__SimpleVector_double_O_core__SimpleMDArray_O_:
{
     // do nothing stamp value 391
    THROW_HARD_ERROR(BF("Should never finalize object core::template_SimpleArray<core::SimpleMDArray_double_O,core::SimpleVector_double_O,core::SimpleMDArray_O>"));
}
obj_finalize_STAMP_core__SimpleMDArray_double_O:
{
     // stamp value 395
    core::SimpleMDArray_double_O* obj_gc_safe = reinterpret_cast<core::SimpleMDArray_double_O*>(client);
    obj_gc_safe->~SimpleMDArray_double_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__template_SimpleArray_core__SimpleMDArray_byte32_t_O_core__SimpleVector_byte32_t_O_core__SimpleMDArray_O_:
{
     // do nothing stamp value 399
    THROW_HARD_ERROR(BF("Should never finalize object core::template_SimpleArray<core::SimpleMDArray_byte32_t_O,core::SimpleVector_byte32_t_O,core::SimpleMDArray_O>"));
}
obj_finalize_STAMP_core__SimpleMDArray_byte32_t_O:
{
     // stamp value 403
    core::SimpleMDArray_byte32_t_O* obj_gc_safe = reinterpret_cast<core::SimpleMDArray_byte32_t_O*>(client);
    obj_gc_safe->~SimpleMDArray_byte32_t_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__template_SimpleArray_core__SimpleMDArrayT_O_core__SimpleVector_O_core__SimpleMDArray_O_:
{
     // do nothing stamp value 407
    THROW_HARD_ERROR(BF("Should never finalize object core::template_SimpleArray<core::SimpleMDArrayT_O,core::SimpleVector_O,core::SimpleMDArray_O>"));
}
obj_finalize_STAMP_core__SimpleMDArrayT_O:
{
     // stamp value 411
    core::SimpleMDArrayT_O* obj_gc_safe = reinterpret_cast<core::SimpleMDArrayT_O*>(client);
    obj_gc_safe->~SimpleMDArrayT_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__template_SimpleArray_core__SimpleMDArray_int2_t_O_core__SimpleVector_int2_t_O_core__SimpleMDArray_O_:
{
     // do nothing stamp value 415
    THROW_HARD_ERROR(BF("Should never finalize object core::template_SimpleArray<core::SimpleMDArray_int2_t_O,core::SimpleVector_int2_t_O,core::SimpleMDArray_O>"));
}
obj_finalize_STAMP_core__SimpleMDArray_int2_t_O:
{
     // stamp value 419
    core::SimpleMDArray_int2_t_O* obj_gc_safe = reinterpret_cast<core::SimpleMDArray_int2_t_O*>(client);
    obj_gc_safe->~SimpleMDArray_int2_t_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__template_SimpleArray_core__SimpleMDArray_byte4_t_O_core__SimpleVector_byte4_t_O_core__SimpleMDArray_O_:
{
     // do nothing stamp value 423
    THROW_HARD_ERROR(BF("Should never finalize object core::template_SimpleArray<core::SimpleMDArray_byte4_t_O,core::SimpleVector_byte4_t_O,core::SimpleMDArray_O>"));
}
obj_finalize_STAMP_core__SimpleMDArray_byte4_t_O:
{
     // stamp value 427
    core::SimpleMDArray_byte4_t_O* obj_gc_safe = reinterpret_cast<core::SimpleMDArray_byte4_t_O*>(client);
    obj_gc_safe->~SimpleMDArray_byte4_t_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__template_SimpleArray_core__SimpleMDArray_int32_t_O_core__SimpleVector_int32_t_O_core__SimpleMDArray_O_:
{
     // do nothing stamp value 431
    THROW_HARD_ERROR(BF("Should never finalize object core::template_SimpleArray<core::SimpleMDArray_int32_t_O,core::SimpleVector_int32_t_O,core::SimpleMDArray_O>"));
}
obj_finalize_STAMP_core__SimpleMDArray_int32_t_O:
{
     // stamp value 435
    core::SimpleMDArray_int32_t_O* obj_gc_safe = reinterpret_cast<core::SimpleMDArray_int32_t_O*>(client);
    obj_gc_safe->~SimpleMDArray_int32_t_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__template_SimpleArray_core__SimpleMDArray_float_O_core__SimpleVector_float_O_core__SimpleMDArray_O_:
{
     // do nothing stamp value 439
    THROW_HARD_ERROR(BF("Should never finalize object core::template_SimpleArray<core::SimpleMDArray_float_O,core::SimpleVector_float_O,core::SimpleMDArray_O>"));
}
obj_finalize_STAMP_core__SimpleMDArray_float_O:
{
     // stamp value 443
    core::SimpleMDArray_float_O* obj_gc_safe = reinterpret_cast<core::SimpleMDArray_float_O*>(client);
    obj_gc_safe->~SimpleMDArray_float_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__template_SimpleArray_core__SimpleMDArray_int16_t_O_core__SimpleVector_int16_t_O_core__SimpleMDArray_O_:
{
     // do nothing stamp value 447
    THROW_HARD_ERROR(BF("Should never finalize object core::template_SimpleArray<core::SimpleMDArray_int16_t_O,core::SimpleVector_int16_t_O,core::SimpleMDArray_O>"));
}
obj_finalize_STAMP_core__SimpleMDArray_int16_t_O:
{
     // stamp value 451
    core::SimpleMDArray_int16_t_O* obj_gc_safe = reinterpret_cast<core::SimpleMDArray_int16_t_O*>(client);
    obj_gc_safe->~SimpleMDArray_int16_t_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__template_SimpleArray_core__SimpleMDArray_size_t_O_core__SimpleVector_size_t_O_core__SimpleMDArray_O_:
{
     // do nothing stamp value 455
    THROW_HARD_ERROR(BF("Should never finalize object core::template_SimpleArray<core::SimpleMDArray_size_t_O,core::SimpleVector_size_t_O,core::SimpleMDArray_O>"));
}
obj_finalize_STAMP_core__SimpleMDArray_size_t_O:
{
     // stamp value 459
    core::SimpleMDArray_size_t_O* obj_gc_safe = reinterpret_cast<core::SimpleMDArray_size_t_O*>(client);
    obj_gc_safe->~SimpleMDArray_size_t_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__template_SimpleArray_core__SimpleMDArray_int4_t_O_core__SimpleVector_int4_t_O_core__SimpleMDArray_O_:
{
     // do nothing stamp value 463
    THROW_HARD_ERROR(BF("Should never finalize object core::template_SimpleArray<core::SimpleMDArray_int4_t_O,core::SimpleVector_int4_t_O,core::SimpleMDArray_O>"));
}
obj_finalize_STAMP_core__SimpleMDArray_int4_t_O:
{
     // stamp value 467
    core::SimpleMDArray_int4_t_O* obj_gc_safe = reinterpret_cast<core::SimpleMDArray_int4_t_O*>(client);
    obj_gc_safe->~SimpleMDArray_int4_t_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__template_SimpleArray_core__SimpleMDArrayCharacter_O_core__SimpleCharacterString_O_core__SimpleMDArray_O_:
{
     // do nothing stamp value 471
    THROW_HARD_ERROR(BF("Should never finalize object core::template_SimpleArray<core::SimpleMDArrayCharacter_O,core::SimpleCharacterString_O,core::SimpleMDArray_O>"));
}
obj_finalize_STAMP_core__SimpleMDArrayCharacter_O:
{
     // stamp value 475
    core::SimpleMDArrayCharacter_O* obj_gc_safe = reinterpret_cast<core::SimpleMDArrayCharacter_O*>(client);
    obj_gc_safe->~SimpleMDArrayCharacter_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__template_SimpleArray_core__SimpleMDArray_byte2_t_O_core__SimpleVector_byte2_t_O_core__SimpleMDArray_O_:
{
     // do nothing stamp value 479
    THROW_HARD_ERROR(BF("Should never finalize object core::template_SimpleArray<core::SimpleMDArray_byte2_t_O,core::SimpleVector_byte2_t_O,core::SimpleMDArray_O>"));
}
obj_finalize_STAMP_core__SimpleMDArray_byte2_t_O:
{
     // stamp value 483
    core::SimpleMDArray_byte2_t_O* obj_gc_safe = reinterpret_cast<core::SimpleMDArray_byte2_t_O*>(client);
    obj_gc_safe->~SimpleMDArray_byte2_t_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__template_SimpleArray_core__SimpleMDArray_fixnum_O_core__SimpleVector_fixnum_O_core__SimpleMDArray_O_:
{
     // do nothing stamp value 487
    THROW_HARD_ERROR(BF("Should never finalize object core::template_SimpleArray<core::SimpleMDArray_fixnum_O,core::SimpleVector_fixnum_O,core::SimpleMDArray_O>"));
}
obj_finalize_STAMP_core__SimpleMDArray_fixnum_O:
{
     // stamp value 491
    core::SimpleMDArray_fixnum_O* obj_gc_safe = reinterpret_cast<core::SimpleMDArray_fixnum_O*>(client);
    obj_gc_safe->~SimpleMDArray_fixnum_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__template_SimpleArray_core__SimpleMDArray_byte16_t_O_core__SimpleVector_byte16_t_O_core__SimpleMDArray_O_:
{
     // do nothing stamp value 495
    THROW_HARD_ERROR(BF("Should never finalize object core::template_SimpleArray<core::SimpleMDArray_byte16_t_O,core::SimpleVector_byte16_t_O,core::SimpleMDArray_O>"));
}
obj_finalize_STAMP_core__SimpleMDArray_byte16_t_O:
{
     // stamp value 499
    core::SimpleMDArray_byte16_t_O* obj_gc_safe = reinterpret_cast<core::SimpleMDArray_byte16_t_O*>(client);
    obj_gc_safe->~SimpleMDArray_byte16_t_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__template_SimpleArray_core__SimpleMDArrayBaseChar_O_core__SimpleBaseString_O_core__SimpleMDArray_O_:
{
     // do nothing stamp value 503
    THROW_HARD_ERROR(BF("Should never finalize object core::template_SimpleArray<core::SimpleMDArrayBaseChar_O,core::SimpleBaseString_O,core::SimpleMDArray_O>"));
}
obj_finalize_STAMP_core__SimpleMDArrayBaseChar_O:
{
     // stamp value 507
    core::SimpleMDArrayBaseChar_O* obj_gc_safe = reinterpret_cast<core::SimpleMDArrayBaseChar_O*>(client);
    obj_gc_safe->~SimpleMDArrayBaseChar_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__template_SimpleArray_core__SimpleMDArray_byte64_t_O_core__SimpleVector_byte64_t_O_core__SimpleMDArray_O_:
{
     // do nothing stamp value 511
    THROW_HARD_ERROR(BF("Should never finalize object core::template_SimpleArray<core::SimpleMDArray_byte64_t_O,core::SimpleVector_byte64_t_O,core::SimpleMDArray_O>"));
}
obj_finalize_STAMP_core__SimpleMDArray_byte64_t_O:
{
     // stamp value 515
    core::SimpleMDArray_byte64_t_O* obj_gc_safe = reinterpret_cast<core::SimpleMDArray_byte64_t_O*>(client);
    obj_gc_safe->~SimpleMDArray_byte64_t_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__template_SimpleArray_core__SimpleMDArrayBit_O_core__SimpleBitVector_O_core__SimpleMDArray_O_:
{
     // do nothing stamp value 519
    THROW_HARD_ERROR(BF("Should never finalize object core::template_SimpleArray<core::SimpleMDArrayBit_O,core::SimpleBitVector_O,core::SimpleMDArray_O>"));
}
obj_finalize_STAMP_core__SimpleMDArrayBit_O:
{
     // stamp value 523
    core::SimpleMDArrayBit_O* obj_gc_safe = reinterpret_cast<core::SimpleMDArrayBit_O*>(client);
    obj_gc_safe->~SimpleMDArrayBit_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__template_SimpleArray_core__SimpleMDArray_byte8_t_O_core__SimpleVector_byte8_t_O_core__SimpleMDArray_O_:
{
     // do nothing stamp value 527
    THROW_HARD_ERROR(BF("Should never finalize object core::template_SimpleArray<core::SimpleMDArray_byte8_t_O,core::SimpleVector_byte8_t_O,core::SimpleMDArray_O>"));
}
obj_finalize_STAMP_core__SimpleMDArray_byte8_t_O:
{
     // stamp value 531
    core::SimpleMDArray_byte8_t_O* obj_gc_safe = reinterpret_cast<core::SimpleMDArray_byte8_t_O*>(client);
    obj_gc_safe->~SimpleMDArray_byte8_t_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__template_SimpleArray_core__SimpleMDArray_int64_t_O_core__SimpleVector_int64_t_O_core__SimpleMDArray_O_:
{
     // do nothing stamp value 535
    THROW_HARD_ERROR(BF("Should never finalize object core::template_SimpleArray<core::SimpleMDArray_int64_t_O,core::SimpleVector_int64_t_O,core::SimpleMDArray_O>"));
}
obj_finalize_STAMP_core__SimpleMDArray_int64_t_O:
{
     // stamp value 539
    core::SimpleMDArray_int64_t_O* obj_gc_safe = reinterpret_cast<core::SimpleMDArray_int64_t_O*>(client);
    obj_gc_safe->~SimpleMDArray_int64_t_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__template_Array_core__MDArray_int4_t_O_core__SimpleMDArray_int4_t_O_core__SimpleVector_int4_t_O_core__MDArray_O_:
{
     // do nothing stamp value 543
    THROW_HARD_ERROR(BF("Should never finalize object core::template_Array<core::MDArray_int4_t_O,core::SimpleMDArray_int4_t_O,core::SimpleVector_int4_t_O,core::MDArray_O>"));
}
obj_finalize_STAMP_core__MDArray_int4_t_O:
{
     // stamp value 547
    core::MDArray_int4_t_O* obj_gc_safe = reinterpret_cast<core::MDArray_int4_t_O*>(client);
    obj_gc_safe->~MDArray_int4_t_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__template_Array_core__MDArray_double_O_core__SimpleMDArray_double_O_core__SimpleVector_double_O_core__MDArray_O_:
{
     // do nothing stamp value 551
    THROW_HARD_ERROR(BF("Should never finalize object core::template_Array<core::MDArray_double_O,core::SimpleMDArray_double_O,core::SimpleVector_double_O,core::MDArray_O>"));
}
obj_finalize_STAMP_core__MDArray_double_O:
{
     // stamp value 555
    core::MDArray_double_O* obj_gc_safe = reinterpret_cast<core::MDArray_double_O*>(client);
    obj_gc_safe->~MDArray_double_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__ComplexVector_O:
{
     // stamp value 559
    core::ComplexVector_O* obj_gc_safe = reinterpret_cast<core::ComplexVector_O*>(client);
    obj_gc_safe->~ComplexVector_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__template_Vector_core__ComplexVector_double_O_core__SimpleVector_double_O_core__ComplexVector_O_:
{
     // do nothing stamp value 563
    THROW_HARD_ERROR(BF("Should never finalize object core::template_Vector<core::ComplexVector_double_O,core::SimpleVector_double_O,core::ComplexVector_O>"));
}
obj_finalize_STAMP_core__ComplexVector_double_O:
{
     // stamp value 567
    core::ComplexVector_double_O* obj_gc_safe = reinterpret_cast<core::ComplexVector_double_O*>(client);
    obj_gc_safe->~ComplexVector_double_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__template_Vector_core__ComplexVector_int8_t_O_core__SimpleVector_int8_t_O_core__ComplexVector_O_:
{
     // do nothing stamp value 571
    THROW_HARD_ERROR(BF("Should never finalize object core::template_Vector<core::ComplexVector_int8_t_O,core::SimpleVector_int8_t_O,core::ComplexVector_O>"));
}
obj_finalize_STAMP_core__ComplexVector_int8_t_O:
{
     // stamp value 575
    core::ComplexVector_int8_t_O* obj_gc_safe = reinterpret_cast<core::ComplexVector_int8_t_O*>(client);
    obj_gc_safe->~ComplexVector_int8_t_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__template_Vector_core__ComplexVector_byte64_t_O_core__SimpleVector_byte64_t_O_core__ComplexVector_O_:
{
     // do nothing stamp value 579
    THROW_HARD_ERROR(BF("Should never finalize object core::template_Vector<core::ComplexVector_byte64_t_O,core::SimpleVector_byte64_t_O,core::ComplexVector_O>"));
}
obj_finalize_STAMP_core__ComplexVector_byte64_t_O:
{
     // stamp value 583
    core::ComplexVector_byte64_t_O* obj_gc_safe = reinterpret_cast<core::ComplexVector_byte64_t_O*>(client);
    obj_gc_safe->~ComplexVector_byte64_t_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__template_Vector_core__ComplexVector_T_O_core__SimpleVector_O_core__ComplexVector_O_:
{
     // do nothing stamp value 587
    THROW_HARD_ERROR(BF("Should never finalize object core::template_Vector<core::ComplexVector_T_O,core::SimpleVector_O,core::ComplexVector_O>"));
}
obj_finalize_STAMP_core__ComplexVector_T_O:
{
     // stamp value 591
    core::ComplexVector_T_O* obj_gc_safe = reinterpret_cast<core::ComplexVector_T_O*>(client);
    obj_gc_safe->~ComplexVector_T_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__template_Vector_core__ComplexVector_int2_t_O_core__SimpleVector_int2_t_O_core__ComplexVector_O_:
{
     // do nothing stamp value 595
    THROW_HARD_ERROR(BF("Should never finalize object core::template_Vector<core::ComplexVector_int2_t_O,core::SimpleVector_int2_t_O,core::ComplexVector_O>"));
}
obj_finalize_STAMP_core__ComplexVector_int2_t_O:
{
     // stamp value 599
    core::ComplexVector_int2_t_O* obj_gc_safe = reinterpret_cast<core::ComplexVector_int2_t_O*>(client);
    obj_gc_safe->~ComplexVector_int2_t_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__template_Vector_core__ComplexVector_int32_t_O_core__SimpleVector_int32_t_O_core__ComplexVector_O_:
{
     // do nothing stamp value 603
    THROW_HARD_ERROR(BF("Should never finalize object core::template_Vector<core::ComplexVector_int32_t_O,core::SimpleVector_int32_t_O,core::ComplexVector_O>"));
}
obj_finalize_STAMP_core__ComplexVector_int32_t_O:
{
     // stamp value 607
    core::ComplexVector_int32_t_O* obj_gc_safe = reinterpret_cast<core::ComplexVector_int32_t_O*>(client);
    obj_gc_safe->~ComplexVector_int32_t_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__template_Vector_core__ComplexVector_byte16_t_O_core__SimpleVector_byte16_t_O_core__ComplexVector_O_:
{
     // do nothing stamp value 611
    THROW_HARD_ERROR(BF("Should never finalize object core::template_Vector<core::ComplexVector_byte16_t_O,core::SimpleVector_byte16_t_O,core::ComplexVector_O>"));
}
obj_finalize_STAMP_core__ComplexVector_byte16_t_O:
{
     // stamp value 615
    core::ComplexVector_byte16_t_O* obj_gc_safe = reinterpret_cast<core::ComplexVector_byte16_t_O*>(client);
    obj_gc_safe->~ComplexVector_byte16_t_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__template_Vector_core__ComplexVector_float_O_core__SimpleVector_float_O_core__ComplexVector_O_:
{
     // do nothing stamp value 619
    THROW_HARD_ERROR(BF("Should never finalize object core::template_Vector<core::ComplexVector_float_O,core::SimpleVector_float_O,core::ComplexVector_O>"));
}
obj_finalize_STAMP_core__ComplexVector_float_O:
{
     // stamp value 623
    core::ComplexVector_float_O* obj_gc_safe = reinterpret_cast<core::ComplexVector_float_O*>(client);
    obj_gc_safe->~ComplexVector_float_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__template_Vector_core__ComplexVector_int16_t_O_core__SimpleVector_int16_t_O_core__ComplexVector_O_:
{
     // do nothing stamp value 627
    THROW_HARD_ERROR(BF("Should never finalize object core::template_Vector<core::ComplexVector_int16_t_O,core::SimpleVector_int16_t_O,core::ComplexVector_O>"));
}
obj_finalize_STAMP_core__ComplexVector_int16_t_O:
{
     // stamp value 631
    core::ComplexVector_int16_t_O* obj_gc_safe = reinterpret_cast<core::ComplexVector_int16_t_O*>(client);
    obj_gc_safe->~ComplexVector_int16_t_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__template_Vector_core__ComplexVector_int4_t_O_core__SimpleVector_int4_t_O_core__ComplexVector_O_:
{
     // do nothing stamp value 635
    THROW_HARD_ERROR(BF("Should never finalize object core::template_Vector<core::ComplexVector_int4_t_O,core::SimpleVector_int4_t_O,core::ComplexVector_O>"));
}
obj_finalize_STAMP_core__ComplexVector_int4_t_O:
{
     // stamp value 639
    core::ComplexVector_int4_t_O* obj_gc_safe = reinterpret_cast<core::ComplexVector_int4_t_O*>(client);
    obj_gc_safe->~ComplexVector_int4_t_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__template_Vector_core__ComplexVector_size_t_O_core__SimpleVector_size_t_O_core__ComplexVector_O_:
{
     // do nothing stamp value 643
    THROW_HARD_ERROR(BF("Should never finalize object core::template_Vector<core::ComplexVector_size_t_O,core::SimpleVector_size_t_O,core::ComplexVector_O>"));
}
obj_finalize_STAMP_core__ComplexVector_size_t_O:
{
     // stamp value 647
    core::ComplexVector_size_t_O* obj_gc_safe = reinterpret_cast<core::ComplexVector_size_t_O*>(client);
    obj_gc_safe->~ComplexVector_size_t_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__template_Vector_core__ComplexVector_byte2_t_O_core__SimpleVector_byte2_t_O_core__ComplexVector_O_:
{
     // do nothing stamp value 651
    THROW_HARD_ERROR(BF("Should never finalize object core::template_Vector<core::ComplexVector_byte2_t_O,core::SimpleVector_byte2_t_O,core::ComplexVector_O>"));
}
obj_finalize_STAMP_core__ComplexVector_byte2_t_O:
{
     // stamp value 655
    core::ComplexVector_byte2_t_O* obj_gc_safe = reinterpret_cast<core::ComplexVector_byte2_t_O*>(client);
    obj_gc_safe->~ComplexVector_byte2_t_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__template_Vector_core__ComplexVector_byte8_t_O_core__SimpleVector_byte8_t_O_core__ComplexVector_O_:
{
     // do nothing stamp value 659
    THROW_HARD_ERROR(BF("Should never finalize object core::template_Vector<core::ComplexVector_byte8_t_O,core::SimpleVector_byte8_t_O,core::ComplexVector_O>"));
}
obj_finalize_STAMP_core__ComplexVector_byte8_t_O:
{
     // stamp value 663
    core::ComplexVector_byte8_t_O* obj_gc_safe = reinterpret_cast<core::ComplexVector_byte8_t_O*>(client);
    obj_gc_safe->~ComplexVector_byte8_t_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__template_Vector_core__ComplexVector_byte32_t_O_core__SimpleVector_byte32_t_O_core__ComplexVector_O_:
{
     // do nothing stamp value 667
    THROW_HARD_ERROR(BF("Should never finalize object core::template_Vector<core::ComplexVector_byte32_t_O,core::SimpleVector_byte32_t_O,core::ComplexVector_O>"));
}
obj_finalize_STAMP_core__ComplexVector_byte32_t_O:
{
     // stamp value 671
    core::ComplexVector_byte32_t_O* obj_gc_safe = reinterpret_cast<core::ComplexVector_byte32_t_O*>(client);
    obj_gc_safe->~ComplexVector_byte32_t_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__template_Vector_core__BitVectorNs_O_core__SimpleBitVector_O_core__ComplexVector_O_:
{
     // do nothing stamp value 675
    THROW_HARD_ERROR(BF("Should never finalize object core::template_Vector<core::BitVectorNs_O,core::SimpleBitVector_O,core::ComplexVector_O>"));
}
obj_finalize_STAMP_core__BitVectorNs_O:
{
     // stamp value 679
    core::BitVectorNs_O* obj_gc_safe = reinterpret_cast<core::BitVectorNs_O*>(client);
    obj_gc_safe->~BitVectorNs_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__StrNs_O:
{
     // stamp value 683
    core::StrNs_O* obj_gc_safe = reinterpret_cast<core::StrNs_O*>(client);
    obj_gc_safe->~StrNs_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__template_Vector_core__Str8Ns_O_core__SimpleBaseString_O_core__StrNs_O_:
{
     // do nothing stamp value 687
    THROW_HARD_ERROR(BF("Should never finalize object core::template_Vector<core::Str8Ns_O,core::SimpleBaseString_O,core::StrNs_O>"));
}
obj_finalize_STAMP_core__Str8Ns_O:
{
     // stamp value 691
    core::Str8Ns_O* obj_gc_safe = reinterpret_cast<core::Str8Ns_O*>(client);
    obj_gc_safe->~Str8Ns_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__template_Vector_core__StrWNs_O_core__SimpleCharacterString_O_core__StrNs_O_:
{
     // do nothing stamp value 695
    THROW_HARD_ERROR(BF("Should never finalize object core::template_Vector<core::StrWNs_O,core::SimpleCharacterString_O,core::StrNs_O>"));
}
obj_finalize_STAMP_core__StrWNs_O:
{
     // stamp value 699
    core::StrWNs_O* obj_gc_safe = reinterpret_cast<core::StrWNs_O*>(client);
    obj_gc_safe->~StrWNs_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__template_Vector_core__ComplexVector_byte4_t_O_core__SimpleVector_byte4_t_O_core__ComplexVector_O_:
{
     // do nothing stamp value 703
    THROW_HARD_ERROR(BF("Should never finalize object core::template_Vector<core::ComplexVector_byte4_t_O,core::SimpleVector_byte4_t_O,core::ComplexVector_O>"));
}
obj_finalize_STAMP_core__ComplexVector_byte4_t_O:
{
     // stamp value 707
    core::ComplexVector_byte4_t_O* obj_gc_safe = reinterpret_cast<core::ComplexVector_byte4_t_O*>(client);
    obj_gc_safe->~ComplexVector_byte4_t_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__template_Vector_core__ComplexVector_fixnum_O_core__SimpleVector_fixnum_O_core__ComplexVector_O_:
{
     // do nothing stamp value 711
    THROW_HARD_ERROR(BF("Should never finalize object core::template_Vector<core::ComplexVector_fixnum_O,core::SimpleVector_fixnum_O,core::ComplexVector_O>"));
}
obj_finalize_STAMP_core__ComplexVector_fixnum_O:
{
     // stamp value 715
    core::ComplexVector_fixnum_O* obj_gc_safe = reinterpret_cast<core::ComplexVector_fixnum_O*>(client);
    obj_gc_safe->~ComplexVector_fixnum_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__template_Vector_core__ComplexVector_int64_t_O_core__SimpleVector_int64_t_O_core__ComplexVector_O_:
{
     // do nothing stamp value 719
    THROW_HARD_ERROR(BF("Should never finalize object core::template_Vector<core::ComplexVector_int64_t_O,core::SimpleVector_int64_t_O,core::ComplexVector_O>"));
}
obj_finalize_STAMP_core__ComplexVector_int64_t_O:
{
     // stamp value 723
    core::ComplexVector_int64_t_O* obj_gc_safe = reinterpret_cast<core::ComplexVector_int64_t_O*>(client);
    obj_gc_safe->~ComplexVector_int64_t_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__AbstractSimpleVector_O:
{
     // stamp value 727
    core::AbstractSimpleVector_O* obj_gc_safe = reinterpret_cast<core::AbstractSimpleVector_O*>(client);
    obj_gc_safe->~AbstractSimpleVector_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__SimpleString_O:
{
     // stamp value 731
    core::SimpleString_O* obj_gc_safe = reinterpret_cast<core::SimpleString_O*>(client);
    obj_gc_safe->~SimpleString_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__template_SimpleVector_core__SimpleCharacterString_O_int_core__SimpleString_O_:
{
     // do nothing stamp value 735
    THROW_HARD_ERROR(BF("Should never finalize object core::template_SimpleVector<core::SimpleCharacterString_O,int,core::SimpleString_O>"));
}
obj_finalize_STAMP_core__SimpleCharacterString_O:
{
     // stamp value 739
    core::SimpleCharacterString_O* obj_gc_safe = reinterpret_cast<core::SimpleCharacterString_O*>(client);
    obj_gc_safe->~SimpleCharacterString_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__template_SimpleVector_core__SimpleBaseString_O_unsigned_char_core__SimpleString_O_:
{
     // do nothing stamp value 743
    THROW_HARD_ERROR(BF("Should never finalize object core::template_SimpleVector<core::SimpleBaseString_O,unsigned char,core::SimpleString_O>"));
}
obj_finalize_STAMP_core__SimpleBaseString_O:
{
     // stamp value 747
    core::SimpleBaseString_O* obj_gc_safe = reinterpret_cast<core::SimpleBaseString_O*>(client);
    obj_gc_safe->~SimpleBaseString_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__template_SimpleVector_core__SimpleVector_int16_t_O_short_core__AbstractSimpleVector_O_:
{
     // do nothing stamp value 751
    THROW_HARD_ERROR(BF("Should never finalize object core::template_SimpleVector<core::SimpleVector_int16_t_O,short,core::AbstractSimpleVector_O>"));
}
obj_finalize_STAMP_core__SimpleVector_int16_t_O:
{
     // stamp value 755
    core::SimpleVector_int16_t_O* obj_gc_safe = reinterpret_cast<core::SimpleVector_int16_t_O*>(client);
    obj_gc_safe->~SimpleVector_int16_t_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__template_SimpleVector_core__SimpleVector_byte16_t_O_unsigned_short_core__AbstractSimpleVector_O_:
{
     // do nothing stamp value 759
    THROW_HARD_ERROR(BF("Should never finalize object core::template_SimpleVector<core::SimpleVector_byte16_t_O,unsigned short,core::AbstractSimpleVector_O>"));
}
obj_finalize_STAMP_core__SimpleVector_byte16_t_O:
{
     // stamp value 763
    core::SimpleVector_byte16_t_O* obj_gc_safe = reinterpret_cast<core::SimpleVector_byte16_t_O*>(client);
    obj_gc_safe->~SimpleVector_byte16_t_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__template_SimpleBitUnitVector_core__SimpleBitVector_O_1_0_:
{
     // do nothing stamp value 767
    THROW_HARD_ERROR(BF("Should never finalize object core::template_SimpleBitUnitVector<core::SimpleBitVector_O,1,0>"));
}
obj_finalize_STAMP_core__SimpleBitVector_O:
{
     // stamp value 771
    core::SimpleBitVector_O* obj_gc_safe = reinterpret_cast<core::SimpleBitVector_O*>(client);
    obj_gc_safe->~SimpleBitVector_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__template_SimpleBitUnitVector_core__SimpleVector_int4_t_O_4_1_:
{
     // do nothing stamp value 775
    THROW_HARD_ERROR(BF("Should never finalize object core::template_SimpleBitUnitVector<core::SimpleVector_int4_t_O,4,1>"));
}
obj_finalize_STAMP_core__SimpleVector_int4_t_O:
{
     // stamp value 779
    core::SimpleVector_int4_t_O* obj_gc_safe = reinterpret_cast<core::SimpleVector_int4_t_O*>(client);
    obj_gc_safe->~SimpleVector_int4_t_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__template_SimpleVector_core__SimpleVector_byte32_t_O_unsigned_int_core__AbstractSimpleVector_O_:
{
     // do nothing stamp value 783
    THROW_HARD_ERROR(BF("Should never finalize object core::template_SimpleVector<core::SimpleVector_byte32_t_O,unsigned int,core::AbstractSimpleVector_O>"));
}
obj_finalize_STAMP_core__SimpleVector_byte32_t_O:
{
     // stamp value 787
    core::SimpleVector_byte32_t_O* obj_gc_safe = reinterpret_cast<core::SimpleVector_byte32_t_O*>(client);
    obj_gc_safe->~SimpleVector_byte32_t_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__template_SimpleVector_core__SimpleVector_size_t_O_unsigned_long_core__AbstractSimpleVector_O_:
{
     // do nothing stamp value 791
    THROW_HARD_ERROR(BF("Should never finalize object core::template_SimpleVector<core::SimpleVector_size_t_O,unsigned long,core::AbstractSimpleVector_O>"));
}
obj_finalize_STAMP_core__SimpleVector_size_t_O:
{
     // stamp value 795
    core::SimpleVector_size_t_O* obj_gc_safe = reinterpret_cast<core::SimpleVector_size_t_O*>(client);
    obj_gc_safe->~SimpleVector_size_t_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__template_SimpleVector_core__SimpleVector_double_O_double_core__AbstractSimpleVector_O_:
{
     // do nothing stamp value 799
    THROW_HARD_ERROR(BF("Should never finalize object core::template_SimpleVector<core::SimpleVector_double_O,double,core::AbstractSimpleVector_O>"));
}
obj_finalize_STAMP_core__SimpleVector_double_O:
{
     // stamp value 803
    core::SimpleVector_double_O* obj_gc_safe = reinterpret_cast<core::SimpleVector_double_O*>(client);
    obj_gc_safe->~SimpleVector_double_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__template_SimpleVector_core__SimpleVector_byte64_t_O_unsigned_long_core__AbstractSimpleVector_O_:
{
     // do nothing stamp value 807
    THROW_HARD_ERROR(BF("Should never finalize object core::template_SimpleVector<core::SimpleVector_byte64_t_O,unsigned long,core::AbstractSimpleVector_O>"));
}
obj_finalize_STAMP_core__SimpleVector_byte64_t_O:
{
     // stamp value 811
    core::SimpleVector_byte64_t_O* obj_gc_safe = reinterpret_cast<core::SimpleVector_byte64_t_O*>(client);
    obj_gc_safe->~SimpleVector_byte64_t_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__template_SimpleBitUnitVector_core__SimpleVector_int2_t_O_2_1_:
{
     // do nothing stamp value 815
    THROW_HARD_ERROR(BF("Should never finalize object core::template_SimpleBitUnitVector<core::SimpleVector_int2_t_O,2,1>"));
}
obj_finalize_STAMP_core__SimpleVector_int2_t_O:
{
     // stamp value 819
    core::SimpleVector_int2_t_O* obj_gc_safe = reinterpret_cast<core::SimpleVector_int2_t_O*>(client);
    obj_gc_safe->~SimpleVector_int2_t_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__template_SimpleVector_core__SimpleVector_int64_t_O_long_core__AbstractSimpleVector_O_:
{
     // do nothing stamp value 823
    THROW_HARD_ERROR(BF("Should never finalize object core::template_SimpleVector<core::SimpleVector_int64_t_O,long,core::AbstractSimpleVector_O>"));
}
obj_finalize_STAMP_core__SimpleVector_int64_t_O:
{
     // stamp value 827
    core::SimpleVector_int64_t_O* obj_gc_safe = reinterpret_cast<core::SimpleVector_int64_t_O*>(client);
    obj_gc_safe->~SimpleVector_int64_t_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__template_SimpleVector_core__SimpleVector_fixnum_O_long_core__AbstractSimpleVector_O_:
{
     // do nothing stamp value 831
    THROW_HARD_ERROR(BF("Should never finalize object core::template_SimpleVector<core::SimpleVector_fixnum_O,long,core::AbstractSimpleVector_O>"));
}
obj_finalize_STAMP_core__SimpleVector_fixnum_O:
{
     // stamp value 835
    core::SimpleVector_fixnum_O* obj_gc_safe = reinterpret_cast<core::SimpleVector_fixnum_O*>(client);
    obj_gc_safe->~SimpleVector_fixnum_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__template_SimpleVector_core__SimpleVector_int8_t_O_signed_char_core__AbstractSimpleVector_O_:
{
     // do nothing stamp value 839
    THROW_HARD_ERROR(BF("Should never finalize object core::template_SimpleVector<core::SimpleVector_int8_t_O,signed char,core::AbstractSimpleVector_O>"));
}
obj_finalize_STAMP_core__SimpleVector_int8_t_O:
{
     // stamp value 843
    core::SimpleVector_int8_t_O* obj_gc_safe = reinterpret_cast<core::SimpleVector_int8_t_O*>(client);
    obj_gc_safe->~SimpleVector_int8_t_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__template_SimpleVector_core__SimpleVector_float_O_float_core__AbstractSimpleVector_O_:
{
     // do nothing stamp value 847
    THROW_HARD_ERROR(BF("Should never finalize object core::template_SimpleVector<core::SimpleVector_float_O,float,core::AbstractSimpleVector_O>"));
}
obj_finalize_STAMP_core__SimpleVector_float_O:
{
     // stamp value 851
    core::SimpleVector_float_O* obj_gc_safe = reinterpret_cast<core::SimpleVector_float_O*>(client);
    obj_gc_safe->~SimpleVector_float_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__template_SimpleVector_core__SimpleVector_O_gctools__smart_ptr_core__T_O__core__AbstractSimpleVector_O_:
{
     // do nothing stamp value 855
    THROW_HARD_ERROR(BF("Should never finalize object core::template_SimpleVector<core::SimpleVector_O,gctools::smart_ptr<core::T_O>,core::AbstractSimpleVector_O>"));
}
obj_finalize_STAMP_core__SimpleVector_O:
{
     // stamp value 859
    core::SimpleVector_O* obj_gc_safe = reinterpret_cast<core::SimpleVector_O*>(client);
    obj_gc_safe->~SimpleVector_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__template_SimpleVector_core__SimpleVector_byte8_t_O_unsigned_char_core__AbstractSimpleVector_O_:
{
     // do nothing stamp value 863
    THROW_HARD_ERROR(BF("Should never finalize object core::template_SimpleVector<core::SimpleVector_byte8_t_O,unsigned char,core::AbstractSimpleVector_O>"));
}
obj_finalize_STAMP_core__SimpleVector_byte8_t_O:
{
     // stamp value 867
    core::SimpleVector_byte8_t_O* obj_gc_safe = reinterpret_cast<core::SimpleVector_byte8_t_O*>(client);
    obj_gc_safe->~SimpleVector_byte8_t_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__template_SimpleBitUnitVector_core__SimpleVector_byte2_t_O_2_0_:
{
     // do nothing stamp value 871
    THROW_HARD_ERROR(BF("Should never finalize object core::template_SimpleBitUnitVector<core::SimpleVector_byte2_t_O,2,0>"));
}
obj_finalize_STAMP_core__SimpleVector_byte2_t_O:
{
     // stamp value 875
    core::SimpleVector_byte2_t_O* obj_gc_safe = reinterpret_cast<core::SimpleVector_byte2_t_O*>(client);
    obj_gc_safe->~SimpleVector_byte2_t_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__template_SimpleVector_core__SimpleVector_int32_t_O_int_core__AbstractSimpleVector_O_:
{
     // do nothing stamp value 879
    THROW_HARD_ERROR(BF("Should never finalize object core::template_SimpleVector<core::SimpleVector_int32_t_O,int,core::AbstractSimpleVector_O>"));
}
obj_finalize_STAMP_core__SimpleVector_int32_t_O:
{
     // stamp value 883
    core::SimpleVector_int32_t_O* obj_gc_safe = reinterpret_cast<core::SimpleVector_int32_t_O*>(client);
    obj_gc_safe->~SimpleVector_int32_t_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__template_SimpleBitUnitVector_core__SimpleVector_byte4_t_O_4_0_:
{
     // do nothing stamp value 887
    THROW_HARD_ERROR(BF("Should never finalize object core::template_SimpleBitUnitVector<core::SimpleVector_byte4_t_O,4,0>"));
}
obj_finalize_STAMP_core__SimpleVector_byte4_t_O:
{
     // stamp value 891
    core::SimpleVector_byte4_t_O* obj_gc_safe = reinterpret_cast<core::SimpleVector_byte4_t_O*>(client);
    obj_gc_safe->~SimpleVector_byte4_t_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__Symbol_O:
{
     // stamp value 895
    core::Symbol_O* obj_gc_safe = reinterpret_cast<core::Symbol_O*>(client);
    obj_gc_safe->~Symbol_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__Null_O:
{
     // stamp value 899
    core::Null_O* obj_gc_safe = reinterpret_cast<core::Null_O*>(client);
    obj_gc_safe->~Null_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__Character_dummy_O:
{
     // stamp value 903
    core::Character_dummy_O* obj_gc_safe = reinterpret_cast<core::Character_dummy_O*>(client);
    obj_gc_safe->~Character_dummy_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__DataLayout_O:
{
     // stamp value 907
    llvmo::DataLayout_O* obj_gc_safe = reinterpret_cast<llvmo::DataLayout_O*>(client);
    obj_gc_safe->~DataLayout_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__LoadTimeValues_O:
{
     // stamp value 911
    core::LoadTimeValues_O* obj_gc_safe = reinterpret_cast<core::LoadTimeValues_O*>(client);
    obj_gc_safe->~LoadTimeValues_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__SharpEqualWrapper_O:
{
     // stamp value 915
    core::SharpEqualWrapper_O* obj_gc_safe = reinterpret_cast<core::SharpEqualWrapper_O*>(client);
    obj_gc_safe->~SharpEqualWrapper_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__ClaspJIT_O:
{
     // stamp value 919
    llvmo::ClaspJIT_O* obj_gc_safe = reinterpret_cast<llvmo::ClaspJIT_O*>(client);
    obj_gc_safe->~ClaspJIT_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__Readtable_O:
{
     // stamp value 923
    core::Readtable_O* obj_gc_safe = reinterpret_cast<core::Readtable_O*>(client);
    obj_gc_safe->~Readtable_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__PosixTime_O:
{
     // stamp value 927
    core::PosixTime_O* obj_gc_safe = reinterpret_cast<core::PosixTime_O*>(client);
    obj_gc_safe->~PosixTime_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__Exposer_O:
{
     // stamp value 931
    core::Exposer_O* obj_gc_safe = reinterpret_cast<core::Exposer_O*>(client);
    obj_gc_safe->~Exposer_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__CoreExposer_O:
{
     // stamp value 935
    core::CoreExposer_O* obj_gc_safe = reinterpret_cast<core::CoreExposer_O*>(client);
    obj_gc_safe->~CoreExposer_O();
    goto finalize_done;
}
obj_finalize_STAMP_asttooling__AsttoolingExposer_O:
{
     // stamp value 939
    asttooling::AsttoolingExposer_O* obj_gc_safe = reinterpret_cast<asttooling::AsttoolingExposer_O*>(client);
    obj_gc_safe->~AsttoolingExposer_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__StructLayout_O:
{
     // stamp value 943
    llvmo::StructLayout_O* obj_gc_safe = reinterpret_cast<llvmo::StructLayout_O*>(client);
    obj_gc_safe->~StructLayout_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__PosixTimeDuration_O:
{
     // stamp value 947
    core::PosixTimeDuration_O* obj_gc_safe = reinterpret_cast<core::PosixTimeDuration_O*>(client);
    obj_gc_safe->~PosixTimeDuration_O();
    goto finalize_done;
}
obj_finalize_STAMP_clasp_ffi__ForeignTypeSpec_O:
{
     // stamp value 951
    clasp_ffi::ForeignTypeSpec_O* obj_gc_safe = reinterpret_cast<clasp_ffi::ForeignTypeSpec_O*>(client);
    obj_gc_safe->~ForeignTypeSpec_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__Instance_O:
{
     // stamp value 953
    core::Instance_O* obj_gc_safe = reinterpret_cast<core::Instance_O*>(client);
    obj_gc_safe->~Instance_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__DerivableCxxObject_O:
{
     // stamp value 956
    core::DerivableCxxObject_O* obj_gc_safe = reinterpret_cast<core::DerivableCxxObject_O*>(client);
    obj_gc_safe->~DerivableCxxObject_O();
    goto finalize_done;
}
obj_finalize_STAMP_clbind__ClassRep_O:
{
     // stamp value 961
    clbind::ClassRep_O* obj_gc_safe = reinterpret_cast<clbind::ClassRep_O*>(client);
    obj_gc_safe->~ClassRep_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__SmallMap_O:
{
     // stamp value 967
    core::SmallMap_O* obj_gc_safe = reinterpret_cast<core::SmallMap_O*>(client);
    obj_gc_safe->~SmallMap_O();
    goto finalize_done;
}
obj_finalize_STAMP_mpip__Mpi_O:
{
     // stamp value 971
    mpip::Mpi_O* obj_gc_safe = reinterpret_cast<mpip::Mpi_O*>(client);
    obj_gc_safe->~Mpi_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__ExternalObject_O:
{
     // stamp value 975
    core::ExternalObject_O* obj_gc_safe = reinterpret_cast<core::ExternalObject_O*>(client);
    obj_gc_safe->~ExternalObject_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__Pass_O:
{
     // stamp value 979
    llvmo::Pass_O* obj_gc_safe = reinterpret_cast<llvmo::Pass_O*>(client);
    obj_gc_safe->~Pass_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__ModulePass_O:
{
     // stamp value 983
    llvmo::ModulePass_O* obj_gc_safe = reinterpret_cast<llvmo::ModulePass_O*>(client);
    obj_gc_safe->~ModulePass_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__ImmutablePass_O:
{
     // stamp value 987
    llvmo::ImmutablePass_O* obj_gc_safe = reinterpret_cast<llvmo::ImmutablePass_O*>(client);
    obj_gc_safe->~ImmutablePass_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__TargetLibraryInfoWrapperPass_O:
{
     // stamp value 991
    llvmo::TargetLibraryInfoWrapperPass_O* obj_gc_safe = reinterpret_cast<llvmo::TargetLibraryInfoWrapperPass_O*>(client);
    obj_gc_safe->~TargetLibraryInfoWrapperPass_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__FunctionPass_O:
{
     // stamp value 995
    llvmo::FunctionPass_O* obj_gc_safe = reinterpret_cast<llvmo::FunctionPass_O*>(client);
    obj_gc_safe->~FunctionPass_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__ExecutionEngine_O:
{
     // stamp value 999
    llvmo::ExecutionEngine_O* obj_gc_safe = reinterpret_cast<llvmo::ExecutionEngine_O*>(client);
    obj_gc_safe->~ExecutionEngine_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__MCSubtargetInfo_O:
{
     // stamp value 1003
    llvmo::MCSubtargetInfo_O* obj_gc_safe = reinterpret_cast<llvmo::MCSubtargetInfo_O*>(client);
    obj_gc_safe->~MCSubtargetInfo_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__TargetSubtargetInfo_O:
{
     // stamp value 1007
    llvmo::TargetSubtargetInfo_O* obj_gc_safe = reinterpret_cast<llvmo::TargetSubtargetInfo_O*>(client);
    obj_gc_safe->~TargetSubtargetInfo_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__Type_O:
{
     // stamp value 1011
    llvmo::Type_O* obj_gc_safe = reinterpret_cast<llvmo::Type_O*>(client);
    obj_gc_safe->~Type_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__FunctionType_O:
{
     // stamp value 1015
    llvmo::FunctionType_O* obj_gc_safe = reinterpret_cast<llvmo::FunctionType_O*>(client);
    obj_gc_safe->~FunctionType_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__CompositeType_O:
{
     // stamp value 1019
    llvmo::CompositeType_O* obj_gc_safe = reinterpret_cast<llvmo::CompositeType_O*>(client);
    obj_gc_safe->~CompositeType_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__SequentialType_O:
{
     // stamp value 1023
    llvmo::SequentialType_O* obj_gc_safe = reinterpret_cast<llvmo::SequentialType_O*>(client);
    obj_gc_safe->~SequentialType_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__PointerType_O:
{
     // stamp value 1027
    llvmo::PointerType_O* obj_gc_safe = reinterpret_cast<llvmo::PointerType_O*>(client);
    obj_gc_safe->~PointerType_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__ArrayType_O:
{
     // stamp value 1031
    llvmo::ArrayType_O* obj_gc_safe = reinterpret_cast<llvmo::ArrayType_O*>(client);
    obj_gc_safe->~ArrayType_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__VectorType_O:
{
     // stamp value 1035
    llvmo::VectorType_O* obj_gc_safe = reinterpret_cast<llvmo::VectorType_O*>(client);
    obj_gc_safe->~VectorType_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__StructType_O:
{
     // stamp value 1039
    llvmo::StructType_O* obj_gc_safe = reinterpret_cast<llvmo::StructType_O*>(client);
    obj_gc_safe->~StructType_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__IntegerType_O:
{
     // stamp value 1043
    llvmo::IntegerType_O* obj_gc_safe = reinterpret_cast<llvmo::IntegerType_O*>(client);
    obj_gc_safe->~IntegerType_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__JITDylib_O:
{
     // stamp value 1047
    llvmo::JITDylib_O* obj_gc_safe = reinterpret_cast<llvmo::JITDylib_O*>(client);
    obj_gc_safe->~JITDylib_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__DIContext_O:
{
     // stamp value 1051
    llvmo::DIContext_O* obj_gc_safe = reinterpret_cast<llvmo::DIContext_O*>(client);
    obj_gc_safe->~DIContext_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__TargetPassConfig_O:
{
     // stamp value 1055
    llvmo::TargetPassConfig_O* obj_gc_safe = reinterpret_cast<llvmo::TargetPassConfig_O*>(client);
    obj_gc_safe->~TargetPassConfig_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__IRBuilderBase_O:
{
     // stamp value 1059
    llvmo::IRBuilderBase_O* obj_gc_safe = reinterpret_cast<llvmo::IRBuilderBase_O*>(client);
    obj_gc_safe->~IRBuilderBase_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__IRBuilder_O:
{
     // stamp value 1063
    llvmo::IRBuilder_O* obj_gc_safe = reinterpret_cast<llvmo::IRBuilder_O*>(client);
    obj_gc_safe->~IRBuilder_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__APFloat_O:
{
     // stamp value 1067
    llvmo::APFloat_O* obj_gc_safe = reinterpret_cast<llvmo::APFloat_O*>(client);
    obj_gc_safe->~APFloat_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__APInt_O:
{
     // stamp value 1071
    llvmo::APInt_O* obj_gc_safe = reinterpret_cast<llvmo::APInt_O*>(client);
    obj_gc_safe->~APInt_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__DIBuilder_O:
{
     // stamp value 1075
    llvmo::DIBuilder_O* obj_gc_safe = reinterpret_cast<llvmo::DIBuilder_O*>(client);
    obj_gc_safe->~DIBuilder_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__SectionedAddress_O:
{
     // stamp value 1079
    llvmo::SectionedAddress_O* obj_gc_safe = reinterpret_cast<llvmo::SectionedAddress_O*>(client);
    obj_gc_safe->~SectionedAddress_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__EngineBuilder_O:
{
     // stamp value 1083
    llvmo::EngineBuilder_O* obj_gc_safe = reinterpret_cast<llvmo::EngineBuilder_O*>(client);
    obj_gc_safe->~EngineBuilder_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__PassManagerBase_O:
{
     // stamp value 1087
    llvmo::PassManagerBase_O* obj_gc_safe = reinterpret_cast<llvmo::PassManagerBase_O*>(client);
    obj_gc_safe->~PassManagerBase_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__PassManager_O:
{
     // stamp value 1091
    llvmo::PassManager_O* obj_gc_safe = reinterpret_cast<llvmo::PassManager_O*>(client);
    obj_gc_safe->~PassManager_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__FunctionPassManager_O:
{
     // stamp value 1095
    llvmo::FunctionPassManager_O* obj_gc_safe = reinterpret_cast<llvmo::FunctionPassManager_O*>(client);
    obj_gc_safe->~FunctionPassManager_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__Metadata_O:
{
     // stamp value 1099
    llvmo::Metadata_O* obj_gc_safe = reinterpret_cast<llvmo::Metadata_O*>(client);
    obj_gc_safe->~Metadata_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__MDNode_O:
{
     // stamp value 1103
    llvmo::MDNode_O* obj_gc_safe = reinterpret_cast<llvmo::MDNode_O*>(client);
    obj_gc_safe->~MDNode_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__DINode_O:
{
     // stamp value 1107
    llvmo::DINode_O* obj_gc_safe = reinterpret_cast<llvmo::DINode_O*>(client);
    obj_gc_safe->~DINode_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__DIVariable_O:
{
     // stamp value 1111
    llvmo::DIVariable_O* obj_gc_safe = reinterpret_cast<llvmo::DIVariable_O*>(client);
    obj_gc_safe->~DIVariable_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__DILocalVariable_O:
{
     // stamp value 1115
    llvmo::DILocalVariable_O* obj_gc_safe = reinterpret_cast<llvmo::DILocalVariable_O*>(client);
    obj_gc_safe->~DILocalVariable_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__DIScope_O:
{
     // stamp value 1119
    llvmo::DIScope_O* obj_gc_safe = reinterpret_cast<llvmo::DIScope_O*>(client);
    obj_gc_safe->~DIScope_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__DIFile_O:
{
     // stamp value 1123
    llvmo::DIFile_O* obj_gc_safe = reinterpret_cast<llvmo::DIFile_O*>(client);
    obj_gc_safe->~DIFile_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__DIType_O:
{
     // stamp value 1127
    llvmo::DIType_O* obj_gc_safe = reinterpret_cast<llvmo::DIType_O*>(client);
    obj_gc_safe->~DIType_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__DICompositeType_O:
{
     // stamp value 1131
    llvmo::DICompositeType_O* obj_gc_safe = reinterpret_cast<llvmo::DICompositeType_O*>(client);
    obj_gc_safe->~DICompositeType_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__DIDerivedType_O:
{
     // stamp value 1135
    llvmo::DIDerivedType_O* obj_gc_safe = reinterpret_cast<llvmo::DIDerivedType_O*>(client);
    obj_gc_safe->~DIDerivedType_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__DIBasicType_O:
{
     // stamp value 1139
    llvmo::DIBasicType_O* obj_gc_safe = reinterpret_cast<llvmo::DIBasicType_O*>(client);
    obj_gc_safe->~DIBasicType_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__DISubroutineType_O:
{
     // stamp value 1143
    llvmo::DISubroutineType_O* obj_gc_safe = reinterpret_cast<llvmo::DISubroutineType_O*>(client);
    obj_gc_safe->~DISubroutineType_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__DILocalScope_O:
{
     // stamp value 1147
    llvmo::DILocalScope_O* obj_gc_safe = reinterpret_cast<llvmo::DILocalScope_O*>(client);
    obj_gc_safe->~DILocalScope_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__DISubprogram_O:
{
     // stamp value 1151
    llvmo::DISubprogram_O* obj_gc_safe = reinterpret_cast<llvmo::DISubprogram_O*>(client);
    obj_gc_safe->~DISubprogram_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__DILexicalBlockBase_O:
{
     // stamp value 1155
    llvmo::DILexicalBlockBase_O* obj_gc_safe = reinterpret_cast<llvmo::DILexicalBlockBase_O*>(client);
    obj_gc_safe->~DILexicalBlockBase_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__DILexicalBlock_O:
{
     // stamp value 1159
    llvmo::DILexicalBlock_O* obj_gc_safe = reinterpret_cast<llvmo::DILexicalBlock_O*>(client);
    obj_gc_safe->~DILexicalBlock_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__DICompileUnit_O:
{
     // stamp value 1163
    llvmo::DICompileUnit_O* obj_gc_safe = reinterpret_cast<llvmo::DICompileUnit_O*>(client);
    obj_gc_safe->~DICompileUnit_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__DIExpression_O:
{
     // stamp value 1167
    llvmo::DIExpression_O* obj_gc_safe = reinterpret_cast<llvmo::DIExpression_O*>(client);
    obj_gc_safe->~DIExpression_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__DILocation_O:
{
     // stamp value 1171
    llvmo::DILocation_O* obj_gc_safe = reinterpret_cast<llvmo::DILocation_O*>(client);
    obj_gc_safe->~DILocation_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__ValueAsMetadata_O:
{
     // stamp value 1175
    llvmo::ValueAsMetadata_O* obj_gc_safe = reinterpret_cast<llvmo::ValueAsMetadata_O*>(client);
    obj_gc_safe->~ValueAsMetadata_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__MDString_O:
{
     // stamp value 1179
    llvmo::MDString_O* obj_gc_safe = reinterpret_cast<llvmo::MDString_O*>(client);
    obj_gc_safe->~MDString_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__Value_O:
{
     // stamp value 1183
    llvmo::Value_O* obj_gc_safe = reinterpret_cast<llvmo::Value_O*>(client);
    obj_gc_safe->~Value_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__Argument_O:
{
     // stamp value 1187
    llvmo::Argument_O* obj_gc_safe = reinterpret_cast<llvmo::Argument_O*>(client);
    obj_gc_safe->~Argument_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__BasicBlock_O:
{
     // stamp value 1191
    llvmo::BasicBlock_O* obj_gc_safe = reinterpret_cast<llvmo::BasicBlock_O*>(client);
    obj_gc_safe->~BasicBlock_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__MetadataAsValue_O:
{
     // stamp value 1195
    llvmo::MetadataAsValue_O* obj_gc_safe = reinterpret_cast<llvmo::MetadataAsValue_O*>(client);
    obj_gc_safe->~MetadataAsValue_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__User_O:
{
     // stamp value 1199
    llvmo::User_O* obj_gc_safe = reinterpret_cast<llvmo::User_O*>(client);
    obj_gc_safe->~User_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__Instruction_O:
{
     // stamp value 1203
    llvmo::Instruction_O* obj_gc_safe = reinterpret_cast<llvmo::Instruction_O*>(client);
    obj_gc_safe->~Instruction_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__UnaryInstruction_O:
{
     // stamp value 1207
    llvmo::UnaryInstruction_O* obj_gc_safe = reinterpret_cast<llvmo::UnaryInstruction_O*>(client);
    obj_gc_safe->~UnaryInstruction_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__VAArgInst_O:
{
     // stamp value 1211
    llvmo::VAArgInst_O* obj_gc_safe = reinterpret_cast<llvmo::VAArgInst_O*>(client);
    obj_gc_safe->~VAArgInst_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__LoadInst_O:
{
     // stamp value 1215
    llvmo::LoadInst_O* obj_gc_safe = reinterpret_cast<llvmo::LoadInst_O*>(client);
    obj_gc_safe->~LoadInst_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__AllocaInst_O:
{
     // stamp value 1219
    llvmo::AllocaInst_O* obj_gc_safe = reinterpret_cast<llvmo::AllocaInst_O*>(client);
    obj_gc_safe->~AllocaInst_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__SwitchInst_O:
{
     // stamp value 1223
    llvmo::SwitchInst_O* obj_gc_safe = reinterpret_cast<llvmo::SwitchInst_O*>(client);
    obj_gc_safe->~SwitchInst_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__AtomicRMWInst_O:
{
     // stamp value 1227
    llvmo::AtomicRMWInst_O* obj_gc_safe = reinterpret_cast<llvmo::AtomicRMWInst_O*>(client);
    obj_gc_safe->~AtomicRMWInst_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__LandingPadInst_O:
{
     // stamp value 1231
    llvmo::LandingPadInst_O* obj_gc_safe = reinterpret_cast<llvmo::LandingPadInst_O*>(client);
    obj_gc_safe->~LandingPadInst_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__StoreInst_O:
{
     // stamp value 1235
    llvmo::StoreInst_O* obj_gc_safe = reinterpret_cast<llvmo::StoreInst_O*>(client);
    obj_gc_safe->~StoreInst_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__UnreachableInst_O:
{
     // stamp value 1239
    llvmo::UnreachableInst_O* obj_gc_safe = reinterpret_cast<llvmo::UnreachableInst_O*>(client);
    obj_gc_safe->~UnreachableInst_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__ReturnInst_O:
{
     // stamp value 1243
    llvmo::ReturnInst_O* obj_gc_safe = reinterpret_cast<llvmo::ReturnInst_O*>(client);
    obj_gc_safe->~ReturnInst_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__ResumeInst_O:
{
     // stamp value 1247
    llvmo::ResumeInst_O* obj_gc_safe = reinterpret_cast<llvmo::ResumeInst_O*>(client);
    obj_gc_safe->~ResumeInst_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__AtomicCmpXchgInst_O:
{
     // stamp value 1251
    llvmo::AtomicCmpXchgInst_O* obj_gc_safe = reinterpret_cast<llvmo::AtomicCmpXchgInst_O*>(client);
    obj_gc_safe->~AtomicCmpXchgInst_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__FenceInst_O:
{
     // stamp value 1255
    llvmo::FenceInst_O* obj_gc_safe = reinterpret_cast<llvmo::FenceInst_O*>(client);
    obj_gc_safe->~FenceInst_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__CallBase_O:
{
     // stamp value 1259
    llvmo::CallBase_O* obj_gc_safe = reinterpret_cast<llvmo::CallBase_O*>(client);
    obj_gc_safe->~CallBase_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__CallInst_O:
{
     // stamp value 1263
    llvmo::CallInst_O* obj_gc_safe = reinterpret_cast<llvmo::CallInst_O*>(client);
    obj_gc_safe->~CallInst_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__InvokeInst_O:
{
     // stamp value 1267
    llvmo::InvokeInst_O* obj_gc_safe = reinterpret_cast<llvmo::InvokeInst_O*>(client);
    obj_gc_safe->~InvokeInst_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__PHINode_O:
{
     // stamp value 1271
    llvmo::PHINode_O* obj_gc_safe = reinterpret_cast<llvmo::PHINode_O*>(client);
    obj_gc_safe->~PHINode_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__IndirectBrInst_O:
{
     // stamp value 1275
    llvmo::IndirectBrInst_O* obj_gc_safe = reinterpret_cast<llvmo::IndirectBrInst_O*>(client);
    obj_gc_safe->~IndirectBrInst_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__BranchInst_O:
{
     // stamp value 1279
    llvmo::BranchInst_O* obj_gc_safe = reinterpret_cast<llvmo::BranchInst_O*>(client);
    obj_gc_safe->~BranchInst_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__Constant_O:
{
     // stamp value 1283
    llvmo::Constant_O* obj_gc_safe = reinterpret_cast<llvmo::Constant_O*>(client);
    obj_gc_safe->~Constant_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__GlobalValue_O:
{
     // stamp value 1287
    llvmo::GlobalValue_O* obj_gc_safe = reinterpret_cast<llvmo::GlobalValue_O*>(client);
    obj_gc_safe->~GlobalValue_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__Function_O:
{
     // stamp value 1291
    llvmo::Function_O* obj_gc_safe = reinterpret_cast<llvmo::Function_O*>(client);
    obj_gc_safe->~Function_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__GlobalVariable_O:
{
     // stamp value 1295
    llvmo::GlobalVariable_O* obj_gc_safe = reinterpret_cast<llvmo::GlobalVariable_O*>(client);
    obj_gc_safe->~GlobalVariable_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__BlockAddress_O:
{
     // stamp value 1299
    llvmo::BlockAddress_O* obj_gc_safe = reinterpret_cast<llvmo::BlockAddress_O*>(client);
    obj_gc_safe->~BlockAddress_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__ConstantDataSequential_O:
{
     // stamp value 1303
    llvmo::ConstantDataSequential_O* obj_gc_safe = reinterpret_cast<llvmo::ConstantDataSequential_O*>(client);
    obj_gc_safe->~ConstantDataSequential_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__ConstantDataArray_O:
{
     // stamp value 1307
    llvmo::ConstantDataArray_O* obj_gc_safe = reinterpret_cast<llvmo::ConstantDataArray_O*>(client);
    obj_gc_safe->~ConstantDataArray_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__ConstantStruct_O:
{
     // stamp value 1311
    llvmo::ConstantStruct_O* obj_gc_safe = reinterpret_cast<llvmo::ConstantStruct_O*>(client);
    obj_gc_safe->~ConstantStruct_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__ConstantInt_O:
{
     // stamp value 1315
    llvmo::ConstantInt_O* obj_gc_safe = reinterpret_cast<llvmo::ConstantInt_O*>(client);
    obj_gc_safe->~ConstantInt_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__ConstantFP_O:
{
     // stamp value 1319
    llvmo::ConstantFP_O* obj_gc_safe = reinterpret_cast<llvmo::ConstantFP_O*>(client);
    obj_gc_safe->~ConstantFP_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__ConstantExpr_O:
{
     // stamp value 1323
    llvmo::ConstantExpr_O* obj_gc_safe = reinterpret_cast<llvmo::ConstantExpr_O*>(client);
    obj_gc_safe->~ConstantExpr_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__ConstantPointerNull_O:
{
     // stamp value 1327
    llvmo::ConstantPointerNull_O* obj_gc_safe = reinterpret_cast<llvmo::ConstantPointerNull_O*>(client);
    obj_gc_safe->~ConstantPointerNull_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__UndefValue_O:
{
     // stamp value 1331
    llvmo::UndefValue_O* obj_gc_safe = reinterpret_cast<llvmo::UndefValue_O*>(client);
    obj_gc_safe->~UndefValue_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__ConstantArray_O:
{
     // stamp value 1335
    llvmo::ConstantArray_O* obj_gc_safe = reinterpret_cast<llvmo::ConstantArray_O*>(client);
    obj_gc_safe->~ConstantArray_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__TargetMachine_O:
{
     // stamp value 1339
    llvmo::TargetMachine_O* obj_gc_safe = reinterpret_cast<llvmo::TargetMachine_O*>(client);
    obj_gc_safe->~TargetMachine_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__LLVMTargetMachine_O:
{
     // stamp value 1343
    llvmo::LLVMTargetMachine_O* obj_gc_safe = reinterpret_cast<llvmo::LLVMTargetMachine_O*>(client);
    obj_gc_safe->~LLVMTargetMachine_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__ThreadSafeContext_O:
{
     // stamp value 1347
    llvmo::ThreadSafeContext_O* obj_gc_safe = reinterpret_cast<llvmo::ThreadSafeContext_O*>(client);
    obj_gc_safe->~ThreadSafeContext_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__NamedMDNode_O:
{
     // stamp value 1351
    llvmo::NamedMDNode_O* obj_gc_safe = reinterpret_cast<llvmo::NamedMDNode_O*>(client);
    obj_gc_safe->~NamedMDNode_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__Triple_O:
{
     // stamp value 1355
    llvmo::Triple_O* obj_gc_safe = reinterpret_cast<llvmo::Triple_O*>(client);
    obj_gc_safe->~Triple_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__DWARFContext_O:
{
     // stamp value 1359
    llvmo::DWARFContext_O* obj_gc_safe = reinterpret_cast<llvmo::DWARFContext_O*>(client);
    obj_gc_safe->~DWARFContext_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__TargetOptions_O:
{
     // stamp value 1363
    llvmo::TargetOptions_O* obj_gc_safe = reinterpret_cast<llvmo::TargetOptions_O*>(client);
    obj_gc_safe->~TargetOptions_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__ObjectFile_O:
{
     // stamp value 1367
    llvmo::ObjectFile_O* obj_gc_safe = reinterpret_cast<llvmo::ObjectFile_O*>(client);
    obj_gc_safe->~ObjectFile_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__LLVMContext_O:
{
     // stamp value 1371
    llvmo::LLVMContext_O* obj_gc_safe = reinterpret_cast<llvmo::LLVMContext_O*>(client);
    obj_gc_safe->~LLVMContext_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__PassManagerBuilder_O:
{
     // stamp value 1375
    llvmo::PassManagerBuilder_O* obj_gc_safe = reinterpret_cast<llvmo::PassManagerBuilder_O*>(client);
    obj_gc_safe->~PassManagerBuilder_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__Module_O:
{
     // stamp value 1379
    llvmo::Module_O* obj_gc_safe = reinterpret_cast<llvmo::Module_O*>(client);
    obj_gc_safe->~Module_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__Target_O:
{
     // stamp value 1383
    llvmo::Target_O* obj_gc_safe = reinterpret_cast<llvmo::Target_O*>(client);
    obj_gc_safe->~Target_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__Linker_O:
{
     // stamp value 1387
    llvmo::Linker_O* obj_gc_safe = reinterpret_cast<llvmo::Linker_O*>(client);
    obj_gc_safe->~Linker_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__Rack_O:
{
     // stamp value 1391
    core::Rack_O* obj_gc_safe = reinterpret_cast<core::Rack_O*>(client);
    obj_gc_safe->~Rack_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__SmallMultimap_O:
{
     // stamp value 1395
    core::SmallMultimap_O* obj_gc_safe = reinterpret_cast<core::SmallMultimap_O*>(client);
    obj_gc_safe->~SmallMultimap_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__Sigset_O:
{
     // stamp value 1399
    core::Sigset_O* obj_gc_safe = reinterpret_cast<core::Sigset_O*>(client);
    obj_gc_safe->~Sigset_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__Environment_O:
{
     // stamp value 1403
    core::Environment_O* obj_gc_safe = reinterpret_cast<core::Environment_O*>(client);
    obj_gc_safe->~Environment_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__GlueEnvironment_O:
{
     // stamp value 1407
    core::GlueEnvironment_O* obj_gc_safe = reinterpret_cast<core::GlueEnvironment_O*>(client);
    obj_gc_safe->~GlueEnvironment_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__LexicalEnvironment_O:
{
     // stamp value 1411
    core::LexicalEnvironment_O* obj_gc_safe = reinterpret_cast<core::LexicalEnvironment_O*>(client);
    obj_gc_safe->~LexicalEnvironment_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__RuntimeVisibleEnvironment_O:
{
     // stamp value 1415
    core::RuntimeVisibleEnvironment_O* obj_gc_safe = reinterpret_cast<core::RuntimeVisibleEnvironment_O*>(client);
    obj_gc_safe->~RuntimeVisibleEnvironment_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__FunctionValueEnvironment_O:
{
     // stamp value 1419
    core::FunctionValueEnvironment_O* obj_gc_safe = reinterpret_cast<core::FunctionValueEnvironment_O*>(client);
    obj_gc_safe->~FunctionValueEnvironment_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__TagbodyEnvironment_O:
{
     // stamp value 1423
    core::TagbodyEnvironment_O* obj_gc_safe = reinterpret_cast<core::TagbodyEnvironment_O*>(client);
    obj_gc_safe->~TagbodyEnvironment_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__BlockEnvironment_O:
{
     // stamp value 1427
    core::BlockEnvironment_O* obj_gc_safe = reinterpret_cast<core::BlockEnvironment_O*>(client);
    obj_gc_safe->~BlockEnvironment_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__ValueEnvironment_O:
{
     // stamp value 1431
    core::ValueEnvironment_O* obj_gc_safe = reinterpret_cast<core::ValueEnvironment_O*>(client);
    obj_gc_safe->~ValueEnvironment_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__CompileTimeEnvironment_O:
{
     // stamp value 1435
    core::CompileTimeEnvironment_O* obj_gc_safe = reinterpret_cast<core::CompileTimeEnvironment_O*>(client);
    obj_gc_safe->~CompileTimeEnvironment_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__CatchEnvironment_O:
{
     // stamp value 1439
    core::CatchEnvironment_O* obj_gc_safe = reinterpret_cast<core::CatchEnvironment_O*>(client);
    obj_gc_safe->~CatchEnvironment_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__MacroletEnvironment_O:
{
     // stamp value 1443
    core::MacroletEnvironment_O* obj_gc_safe = reinterpret_cast<core::MacroletEnvironment_O*>(client);
    obj_gc_safe->~MacroletEnvironment_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__SymbolMacroletEnvironment_O:
{
     // stamp value 1447
    core::SymbolMacroletEnvironment_O* obj_gc_safe = reinterpret_cast<core::SymbolMacroletEnvironment_O*>(client);
    obj_gc_safe->~SymbolMacroletEnvironment_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__FunctionContainerEnvironment_O:
{
     // stamp value 1451
    core::FunctionContainerEnvironment_O* obj_gc_safe = reinterpret_cast<core::FunctionContainerEnvironment_O*>(client);
    obj_gc_safe->~FunctionContainerEnvironment_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__UnwindProtectEnvironment_O:
{
     // stamp value 1455
    core::UnwindProtectEnvironment_O* obj_gc_safe = reinterpret_cast<core::UnwindProtectEnvironment_O*>(client);
    obj_gc_safe->~UnwindProtectEnvironment_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__ActivationFrame_O:
{
     // stamp value 1459
    core::ActivationFrame_O* obj_gc_safe = reinterpret_cast<core::ActivationFrame_O*>(client);
    obj_gc_safe->~ActivationFrame_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__ValueFrame_O:
{
     // stamp value 1463
    core::ValueFrame_O* obj_gc_safe = reinterpret_cast<core::ValueFrame_O*>(client);
    obj_gc_safe->~ValueFrame_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__FunctionFrame_O:
{
     // stamp value 1467
    core::FunctionFrame_O* obj_gc_safe = reinterpret_cast<core::FunctionFrame_O*>(client);
    obj_gc_safe->~FunctionFrame_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__RandomState_O:
{
     // stamp value 1471
    core::RandomState_O* obj_gc_safe = reinterpret_cast<core::RandomState_O*>(client);
    obj_gc_safe->~RandomState_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__AtomicFixnumHolder_O:
{
     // stamp value 1475
    core::AtomicFixnumHolder_O* obj_gc_safe = reinterpret_cast<core::AtomicFixnumHolder_O*>(client);
    obj_gc_safe->~AtomicFixnumHolder_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__HashTableBase_O:
{
     // stamp value 1479
    core::HashTableBase_O* obj_gc_safe = reinterpret_cast<core::HashTableBase_O*>(client);
    obj_gc_safe->~HashTableBase_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__WeakKeyHashTable_O:
{
     // stamp value 1483
    core::WeakKeyHashTable_O* obj_gc_safe = reinterpret_cast<core::WeakKeyHashTable_O*>(client);
    obj_gc_safe->~WeakKeyHashTable_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__HashTable_O:
{
     // stamp value 1487
    core::HashTable_O* obj_gc_safe = reinterpret_cast<core::HashTable_O*>(client);
    obj_gc_safe->~HashTable_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__HashTableEqualp_O:
{
     // stamp value 1491
    core::HashTableEqualp_O* obj_gc_safe = reinterpret_cast<core::HashTableEqualp_O*>(client);
    obj_gc_safe->~HashTableEqualp_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__HashTableEq_O:
{
     // stamp value 1495
    core::HashTableEq_O* obj_gc_safe = reinterpret_cast<core::HashTableEq_O*>(client);
    obj_gc_safe->~HashTableEq_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__HashTableEql_O:
{
     // stamp value 1499
    core::HashTableEql_O* obj_gc_safe = reinterpret_cast<core::HashTableEql_O*>(client);
    obj_gc_safe->~HashTableEql_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__HashTableEqual_O:
{
     // stamp value 1503
    core::HashTableEqual_O* obj_gc_safe = reinterpret_cast<core::HashTableEqual_O*>(client);
    obj_gc_safe->~HashTableEqual_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__InsertPoint_O:
{
     // stamp value 1507
    llvmo::InsertPoint_O* obj_gc_safe = reinterpret_cast<llvmo::InsertPoint_O*>(client);
    obj_gc_safe->~InsertPoint_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__Scope_O:
{
     // stamp value 1511
    core::Scope_O* obj_gc_safe = reinterpret_cast<core::Scope_O*>(client);
    obj_gc_safe->~Scope_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__FileScope_O:
{
     // stamp value 1515
    core::FileScope_O* obj_gc_safe = reinterpret_cast<core::FileScope_O*>(client);
    obj_gc_safe->~FileScope_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__Path_O:
{
     // stamp value 1519
    core::Path_O* obj_gc_safe = reinterpret_cast<core::Path_O*>(client);
    obj_gc_safe->~Path_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__Pathname_O:
{
     // stamp value 1523
    core::Pathname_O* obj_gc_safe = reinterpret_cast<core::Pathname_O*>(client);
    obj_gc_safe->~Pathname_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__LogicalPathname_O:
{
     // stamp value 1527
    core::LogicalPathname_O* obj_gc_safe = reinterpret_cast<core::LogicalPathname_O*>(client);
    obj_gc_safe->~LogicalPathname_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__Cache_O:
{
     // stamp value 1531
    core::Cache_O* obj_gc_safe = reinterpret_cast<core::Cache_O*>(client);
    obj_gc_safe->~Cache_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__Number_O:
{
     // stamp value 1535
    core::Number_O* obj_gc_safe = reinterpret_cast<core::Number_O*>(client);
    obj_gc_safe->~Number_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__Real_O:
{
     // stamp value 1539
    core::Real_O* obj_gc_safe = reinterpret_cast<core::Real_O*>(client);
    obj_gc_safe->~Real_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__Rational_O:
{
     // stamp value 1543
    core::Rational_O* obj_gc_safe = reinterpret_cast<core::Rational_O*>(client);
    obj_gc_safe->~Rational_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__Ratio_O:
{
     // stamp value 1547
    core::Ratio_O* obj_gc_safe = reinterpret_cast<core::Ratio_O*>(client);
    obj_gc_safe->~Ratio_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__Integer_O:
{
     // stamp value 1551
    core::Integer_O* obj_gc_safe = reinterpret_cast<core::Integer_O*>(client);
    obj_gc_safe->~Integer_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__Bignum_O:
{
     // stamp value 1555
    core::Bignum_O* obj_gc_safe = reinterpret_cast<core::Bignum_O*>(client);
    obj_gc_safe->~Bignum_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__Fixnum_dummy_O:
{
     // stamp value 1559
    core::Fixnum_dummy_O* obj_gc_safe = reinterpret_cast<core::Fixnum_dummy_O*>(client);
    obj_gc_safe->~Fixnum_dummy_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__Float_O:
{
     // stamp value 1563
    core::Float_O* obj_gc_safe = reinterpret_cast<core::Float_O*>(client);
    obj_gc_safe->~Float_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__DoubleFloat_O:
{
     // stamp value 1567
    core::DoubleFloat_O* obj_gc_safe = reinterpret_cast<core::DoubleFloat_O*>(client);
    obj_gc_safe->~DoubleFloat_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__SingleFloat_dummy_O:
{
     // stamp value 1571
    core::SingleFloat_dummy_O* obj_gc_safe = reinterpret_cast<core::SingleFloat_dummy_O*>(client);
    obj_gc_safe->~SingleFloat_dummy_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__LongFloat_O:
{
     // stamp value 1575
    core::LongFloat_O* obj_gc_safe = reinterpret_cast<core::LongFloat_O*>(client);
    obj_gc_safe->~LongFloat_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__ShortFloat_O:
{
     // stamp value 1579
    core::ShortFloat_O* obj_gc_safe = reinterpret_cast<core::ShortFloat_O*>(client);
    obj_gc_safe->~ShortFloat_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__Complex_O:
{
     // stamp value 1583
    core::Complex_O* obj_gc_safe = reinterpret_cast<core::Complex_O*>(client);
    obj_gc_safe->~Complex_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__Stream_O:
{
     // stamp value 1587
    core::Stream_O* obj_gc_safe = reinterpret_cast<core::Stream_O*>(client);
    obj_gc_safe->~Stream_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__AnsiStream_O:
{
     // stamp value 1591
    core::AnsiStream_O* obj_gc_safe = reinterpret_cast<core::AnsiStream_O*>(client);
    obj_gc_safe->~AnsiStream_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__SynonymStream_O:
{
     // stamp value 1595
    core::SynonymStream_O* obj_gc_safe = reinterpret_cast<core::SynonymStream_O*>(client);
    obj_gc_safe->~SynonymStream_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__ConcatenatedStream_O:
{
     // stamp value 1599
    core::ConcatenatedStream_O* obj_gc_safe = reinterpret_cast<core::ConcatenatedStream_O*>(client);
    obj_gc_safe->~ConcatenatedStream_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__FileStream_O:
{
     // stamp value 1603
    core::FileStream_O* obj_gc_safe = reinterpret_cast<core::FileStream_O*>(client);
    obj_gc_safe->~FileStream_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__IOFileStream_O:
{
     // stamp value 1607
    core::IOFileStream_O* obj_gc_safe = reinterpret_cast<core::IOFileStream_O*>(client);
    obj_gc_safe->~IOFileStream_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__IOStreamStream_O:
{
     // stamp value 1611
    core::IOStreamStream_O* obj_gc_safe = reinterpret_cast<core::IOStreamStream_O*>(client);
    obj_gc_safe->~IOStreamStream_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__BroadcastStream_O:
{
     // stamp value 1615
    core::BroadcastStream_O* obj_gc_safe = reinterpret_cast<core::BroadcastStream_O*>(client);
    obj_gc_safe->~BroadcastStream_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__StringStream_O:
{
     // stamp value 1619
    core::StringStream_O* obj_gc_safe = reinterpret_cast<core::StringStream_O*>(client);
    obj_gc_safe->~StringStream_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__StringOutputStream_O:
{
     // stamp value 1623
    core::StringOutputStream_O* obj_gc_safe = reinterpret_cast<core::StringOutputStream_O*>(client);
    obj_gc_safe->~StringOutputStream_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__StringInputStream_O:
{
     // stamp value 1627
    core::StringInputStream_O* obj_gc_safe = reinterpret_cast<core::StringInputStream_O*>(client);
    obj_gc_safe->~StringInputStream_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__EchoStream_O:
{
     // stamp value 1631
    core::EchoStream_O* obj_gc_safe = reinterpret_cast<core::EchoStream_O*>(client);
    obj_gc_safe->~EchoStream_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__TwoWayStream_O:
{
     // stamp value 1635
    core::TwoWayStream_O* obj_gc_safe = reinterpret_cast<core::TwoWayStream_O*>(client);
    obj_gc_safe->~TwoWayStream_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__Package_O:
{
     // stamp value 1639
    core::Package_O* obj_gc_safe = reinterpret_cast<core::Package_O*>(client);
    obj_gc_safe->~Package_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__FileStatus_O:
{
     // stamp value 1643
    core::FileStatus_O* obj_gc_safe = reinterpret_cast<core::FileStatus_O*>(client);
    obj_gc_safe->~FileStatus_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__InvocationHistoryFrameIterator_O:
{
     // stamp value 1647
    core::InvocationHistoryFrameIterator_O* obj_gc_safe = reinterpret_cast<core::InvocationHistoryFrameIterator_O*>(client);
    obj_gc_safe->~InvocationHistoryFrameIterator_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__SourcePosInfo_O:
{
     // stamp value 1651
    core::SourcePosInfo_O* obj_gc_safe = reinterpret_cast<core::SourcePosInfo_O*>(client);
    obj_gc_safe->~SourcePosInfo_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__IntArray_O:
{
     // stamp value 1655
    core::IntArray_O* obj_gc_safe = reinterpret_cast<core::IntArray_O*>(client);
    obj_gc_safe->~IntArray_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__DirectoryEntry_O:
{
     // stamp value 1659
    core::DirectoryEntry_O* obj_gc_safe = reinterpret_cast<core::DirectoryEntry_O*>(client);
    obj_gc_safe->~DirectoryEntry_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__LightUserData_O:
{
     // stamp value 1663
    core::LightUserData_O* obj_gc_safe = reinterpret_cast<core::LightUserData_O*>(client);
    obj_gc_safe->~LightUserData_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__UserData_O:
{
     // stamp value 1667
    core::UserData_O* obj_gc_safe = reinterpret_cast<core::UserData_O*>(client);
    obj_gc_safe->~UserData_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__Record_O:
{
     // stamp value 1671
    core::Record_O* obj_gc_safe = reinterpret_cast<core::Record_O*>(client);
    obj_gc_safe->~Record_O();
    goto finalize_done;
}
obj_finalize_STAMP_clbind__ClassRegistry_O:
{
     // stamp value 1675
    clbind::ClassRegistry_O* obj_gc_safe = reinterpret_cast<clbind::ClassRegistry_O*>(client);
    obj_gc_safe->~ClassRegistry_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__Cons_O:
{
     // stamp value 1679
    core::Cons_O* obj_gc_safe = reinterpret_cast<core::Cons_O*>(client);
    obj_gc_safe->~Cons_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__Lisp_O:
{
     // stamp value 1683
    core::Lisp_O* obj_gc_safe = reinterpret_cast<core::Lisp_O*>(client);
    obj_gc_safe->~Lisp_O();
    goto finalize_done;
}
obj_finalize_STAMP_clang__RecursiveASTVisitor_asttooling__AstVisitor_O_:
{
     // do nothing stamp value 1687
    THROW_HARD_ERROR(BF("Should never finalize object clang::RecursiveASTVisitor<asttooling::AstVisitor_O>"));
}
obj_finalize_STAMP_asttooling__AstVisitor_O:
{
     // stamp value 1691
    asttooling::AstVisitor_O* obj_gc_safe = reinterpret_cast<asttooling::AstVisitor_O*>(client);
    obj_gc_safe->~AstVisitor_O();
    goto finalize_done;
}
obj_finalize_STAMP_clang__tooling__ToolAction:
{
     // do nothing stamp value 1695
    THROW_HARD_ERROR(BF("Should never finalize object clang::tooling::ToolAction"));
}
obj_finalize_STAMP_clang__tooling__FrontendActionFactory:
{
     // do nothing stamp value 1699
    THROW_HARD_ERROR(BF("Should never finalize object clang::tooling::FrontendActionFactory"));
}
obj_finalize_STAMP_clang__ast_matchers__MatchFinder__MatchCallback:
{
     // do nothing stamp value 1703
    THROW_HARD_ERROR(BF("Should never finalize object clang::ast_matchers::MatchFinder::MatchCallback"));
}
obj_finalize_STAMP_gctools__GCContainer:
{
     // do nothing stamp value 1707
    THROW_HARD_ERROR(BF("Should never finalize object gctools::GCContainer"));
}
obj_finalize_STAMP_gctools__GCArray_moveable_unsigned_int_:
{
     // stamp value 1711
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCArray_moveable<unsigned int>"));}
obj_finalize_STAMP_gctools__GCVector_moveable_core__CacheRecord_:
{
     // stamp value 1715
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCVector_moveable<core::CacheRecord>"));}
obj_finalize_STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__Cons_O__:
{
     // stamp value 1719
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCVector_moveable<gctools::smart_ptr<core::Cons_O>>"));}
obj_finalize_STAMP_gctools__GCVector_moveable_double_:
{
     // stamp value 1723
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCVector_moveable<double>"));}
obj_finalize_STAMP_gctools__GCArray_moveable_short_:
{
     // stamp value 1727
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCArray_moveable<short>"));}
obj_finalize_STAMP_gctools__GCVector_moveable_gctools__smart_ptr_clbind__ClassRep_O__:
{
     // stamp value 1731
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCVector_moveable<gctools::smart_ptr<clbind::ClassRep_O>>"));}
obj_finalize_STAMP_gctools__GCBitUnitArray_moveable_4_0_:
{
     // stamp value 1735
    THROW_HARD_ERROR(BF("Should never finalize gctools::GCBitUnitArray_moveable<4,0>"));
}
obj_finalize_STAMP_gctools__GCVector_moveable_core__Cons_O_:
{
     // stamp value 1739
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCVector_moveable<core::Cons_O>"));}
obj_finalize_STAMP_gctools__GCVector_moveable_core__SymbolClassHolderPair_:
{
     // stamp value 1743
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCVector_moveable<core::SymbolClassHolderPair>"));}
obj_finalize_STAMP_gctools__GCArray_moveable_signed_char_:
{
     // stamp value 1747
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCArray_moveable<signed char>"));}
obj_finalize_STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__List_V__:
{
     // stamp value 1751
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCVector_moveable<gctools::smart_ptr<core::List_V>>"));}
obj_finalize_STAMP_gctools__GCVector_moveable_std__pair_gctools__smart_ptr_core__T_O__gctools__smart_ptr_core__T_O___:
{
     // stamp value 1755
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCVector_moveable<std::pair<gctools::smart_ptr<core::T_O>,gctools::smart_ptr<core::T_O>>>"));}
obj_finalize_STAMP_gctools__GCArray_moveable_unsigned_char_:
{
     // stamp value 1759
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCArray_moveable<unsigned char>"));}
obj_finalize_STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__Symbol_O__:
{
     // stamp value 1763
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCVector_moveable<gctools::smart_ptr<core::Symbol_O>>"));}
obj_finalize_STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__T_O__:
{
     // stamp value 1767
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCVector_moveable<gctools::smart_ptr<core::T_O>>"));}
obj_finalize_STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__SingleDispatchMethod_O__:
{
     // stamp value 1771
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCVector_moveable<gctools::smart_ptr<core::SingleDispatchMethod_O>>"));}
obj_finalize_STAMP_gctools__GCArray_moveable_double_:
{
     // stamp value 1775
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCArray_moveable<double>"));}
obj_finalize_STAMP_gctools__GCVector_moveable_core__OptionalArgument_:
{
     // stamp value 1779
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCVector_moveable<core::OptionalArgument>"));}
obj_finalize_STAMP_gctools__GCVector_moveable_core__KeywordArgument_:
{
     // stamp value 1783
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCVector_moveable<core::KeywordArgument>"));}
obj_finalize_STAMP_gctools__GCVector_moveable_core__RequiredArgument_:
{
     // stamp value 1787
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCVector_moveable<core::RequiredArgument>"));}
obj_finalize_STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__FileScope_O__:
{
     // stamp value 1791
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCVector_moveable<gctools::smart_ptr<core::FileScope_O>>"));}
obj_finalize_STAMP_gctools__GCBitUnitArray_moveable_4_1_:
{
     // stamp value 1795
    THROW_HARD_ERROR(BF("Should never finalize gctools::GCBitUnitArray_moveable<4,1>"));
}
obj_finalize_STAMP_gctools__GCVector_moveable_core__SymbolStorage_:
{
     // stamp value 1799
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCVector_moveable<core::SymbolStorage>"));}
obj_finalize_STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__Instance_O__:
{
     // stamp value 1803
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCVector_moveable<gctools::smart_ptr<core::Instance_O>>"));}
obj_finalize_STAMP_gctools__GCArray_moveable_unsigned_long_:
{
     // stamp value 1807
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCArray_moveable<unsigned long>"));}
obj_finalize_STAMP_gctools__GCVector_moveable_std__pair_gctools__smart_ptr_core__Symbol_O__gctools__smart_ptr_core__T_O___:
{
     // stamp value 1811
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCVector_moveable<std::pair<gctools::smart_ptr<core::Symbol_O>,gctools::smart_ptr<core::T_O>>>"));}
obj_finalize_STAMP_gctools__GCBitUnitArray_moveable_2_0_:
{
     // stamp value 1815
    THROW_HARD_ERROR(BF("Should never finalize gctools::GCBitUnitArray_moveable<2,0>"));
}
obj_finalize_STAMP_gctools__GCArray_moveable_int_:
{
     // stamp value 1819
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCArray_moveable<int>"));}
obj_finalize_STAMP_gctools__GCBitUnitArray_moveable_1_0_:
{
     // stamp value 1823
    THROW_HARD_ERROR(BF("Should never finalize gctools::GCBitUnitArray_moveable<1,0>"));
}
obj_finalize_STAMP_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__:
{
     // stamp value 1827
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>>"));}
obj_finalize_STAMP_gctools__GCVector_moveable_core__AuxArgument_:
{
     // stamp value 1831
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCVector_moveable<core::AuxArgument>"));}
obj_finalize_STAMP_gctools__GCBitUnitArray_moveable_2_1_:
{
     // stamp value 1835
    THROW_HARD_ERROR(BF("Should never finalize gctools::GCBitUnitArray_moveable<2,1>"));
}
obj_finalize_STAMP_gctools__GCArray_moveable_long_:
{
     // stamp value 1839
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCArray_moveable<long>"));}
obj_finalize_STAMP_gctools__GCVector_moveable_int_:
{
     // stamp value 1843
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCVector_moveable<int>"));}
obj_finalize_STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__Package_O__:
{
     // stamp value 1847
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCVector_moveable<gctools::smart_ptr<core::Package_O>>"));}
obj_finalize_STAMP_gctools__GCArray_moveable_float_:
{
     // stamp value 1851
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCArray_moveable<float>"));}
obj_finalize_STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__Creator_O__:
{
     // stamp value 1855
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCVector_moveable<gctools::smart_ptr<core::Creator_O>>"));}
obj_finalize_STAMP_gctools__GCVector_moveable_core__T_O___:
{
     // stamp value 1859
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCVector_moveable<core::T_O *>"));}
obj_finalize_STAMP_gctools__GCArray_moveable_unsigned_short_:
{
     // stamp value 1863
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCArray_moveable<unsigned short>"));}
obj_finalize_STAMP_gctools__GCVector_moveable_float_:
{
     // stamp value 1867
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCVector_moveable<float>"));}
obj_finalize_STAMP_clang__FrontendAction:
{
     // do nothing stamp value 1871
    THROW_HARD_ERROR(BF("Should never finalize object clang::FrontendAction"));
}
obj_finalize_STAMP_clang__ASTFrontendAction:
{
     // do nothing stamp value 1875
    THROW_HARD_ERROR(BF("Should never finalize object clang::ASTFrontendAction"));
}
obj_finalize_STAMP_clang__SyntaxOnlyAction:
{
     // do nothing stamp value 1879
    THROW_HARD_ERROR(BF("Should never finalize object clang::SyntaxOnlyAction"));
}
#endif // defined(GC_OBJ_FINALIZE)
#if defined(GC_OBJ_FINALIZE_HELPERS)

#endif // defined(GC_OBJ_FINALIZE_HELPERS)
#if defined(GC_OBJ_FINALIZE_TABLE)
static void* OBJ_FINALIZE_table[] = { 
  /* 0 */ NULL,
  /* 7 */ &&obj_finalize_STAMP_core__T_O,
  /* 11 */ &&obj_finalize_STAMP_core__VaList_dummy_O,
  /* 15 */ &&obj_finalize_STAMP_core__Unused_dummy_O,
  /* 19 */ &&obj_finalize_STAMP_core__General_O,
  /* 23 */ &&obj_finalize_STAMP_core__MultiStringBuffer_O,
  /* 27 */ &&obj_finalize_STAMP_core__ClassHolder_O,
  /* 30 */ &&obj_finalize_STAMP_core__WrappedPointer_O,
  /* 35 */ &&obj_finalize_STAMP_core__FdSet_O,
  /* 39 */ &&obj_finalize_STAMP_core__SymbolToEnumConverter_O,
  /* 43 */ &&obj_finalize_STAMP_llvmo__Attribute_O,
  /* 47 */ &&obj_finalize_STAMP_core__LambdaListHandler_O,
  /* 51 */ &&obj_finalize_STAMP_llvmo__AttributeSet_O,
  /* 55 */ &&obj_finalize_STAMP_core__AtomicT_Holder_O,
  /* 59 */ &&obj_finalize_STAMP_core__Function_O,
  /* 61 */ &&obj_finalize_STAMP_core__FuncallableInstance_O,
  /* 67 */ &&obj_finalize_STAMP_core__Creator_O,
  /* 71 */ &&obj_finalize_STAMP_core__ClassRepCreator_O,
  /* 75 */ &&obj_finalize_STAMP_core__DerivableCxxClassCreator_O,
  /* 79 */ &&obj_finalize_STAMP_core__FuncallableInstanceCreator_O,
  /* 83 */ &&obj_finalize_STAMP_clbind__ConstructorCreator_O,
  /* 87 */ &&obj_finalize_STAMP_clbind__DummyCreator_O,
  /* 91 */ &&obj_finalize_STAMP_core__InstanceCreator_O,
  /* 95 */ &&obj_finalize_STAMP_core__StandardClassCreator_O,
  /* 99 */ &&obj_finalize_STAMP_core__SpecialForm_O,
  /* 103 */ &&obj_finalize_STAMP_core__Closure_O,
  /* 107 */ &&obj_finalize_STAMP_core__ClosureWithSlots_O,
  /* 111 */ &&obj_finalize_STAMP_core__SingleDispatchCxxEffectiveMethodFunction_O,
  /* 115 */ &&obj_finalize_STAMP_core__SingleDispatchMethodFunction_O,
  /* 119 */ &&obj_finalize_STAMP_core__CxxMethodFunction_O,
  /* 123 */ &&obj_finalize_STAMP_core__BuiltinClosure_O,
  /* 127 */ &&obj_finalize_STAMP_core__TranslationFunctor_O,
  /* 131 */ &&obj_finalize_STAMP_core__SingleDispatchGenericFunctionClosure_O,
  /* 135 */ &&obj_finalize_STAMP_core__SingleDispatchEffectiveMethodFunction_O,
  /* 139 */ &&obj_finalize_STAMP_core__WeakPointer_O,
  /* 143 */ &&obj_finalize_STAMP_llvmo__DebugLoc_O,
  /* 147 */ &&obj_finalize_STAMP_core__Pointer_O,
  /* 151 */ &&obj_finalize_STAMP_clasp_ffi__ForeignData_O,
  /* 155 */ &&obj_finalize_STAMP_core__CxxObject_O,
  /* 159 */ &&obj_finalize_STAMP_core__NativeVector_float_O,
  /* 163 */ &&obj_finalize_STAMP_llvmo__MDBuilder_O,
  /* 167 */ &&obj_finalize_STAMP_mp__ConditionVariable_O,
  /* 171 */ &&obj_finalize_STAMP_core__NativeVector_double_O,
  /* 175 */ &&obj_finalize_STAMP_core__NativeVector_int_O,
  /* 179 */ &&obj_finalize_STAMP_llvmo__FunctionCallee_O,
  /* 183 */ &&obj_finalize_STAMP_core__Serializer_O,
  /* 187 */ &&obj_finalize_STAMP_llvmo__DINodeArray_O,
  /* 191 */ &&obj_finalize_STAMP_mp__Mutex_O,
  /* 195 */ &&obj_finalize_STAMP_mp__RecursiveMutex_O,
  /* 199 */ &&obj_finalize_STAMP_llvmo__DITypeRefArray_O,
  /* 203 */ &&obj_finalize_STAMP_mp__SharedMutex_O,
  /* 207 */ &&obj_finalize_STAMP_mp__Process_O,
  /* 211 */ &&obj_finalize_STAMP_core__SingleDispatchMethod_O,
  /* 215 */ &&obj_finalize_STAMP_core__Iterator_O,
  /* 219 */ &&obj_finalize_STAMP_core__DirectoryIterator_O,
  /* 223 */ &&obj_finalize_STAMP_core__RecursiveDirectoryIterator_O,
  /* 227 */ &&obj_finalize_STAMP_core__Array_O,
  /* 231 */ &&obj_finalize_STAMP_core__MDArray_O,
  /* 235 */ &&obj_finalize_STAMP_core__template_Array_core__MDArray_int16_t_O_core__SimpleMDArray_int16_t_O_core__SimpleVector_int16_t_O_core__MDArray_O_,
  /* 239 */ &&obj_finalize_STAMP_core__MDArray_int16_t_O,
  /* 243 */ &&obj_finalize_STAMP_core__template_Array_core__MDArray_int8_t_O_core__SimpleMDArray_int8_t_O_core__SimpleVector_int8_t_O_core__MDArray_O_,
  /* 247 */ &&obj_finalize_STAMP_core__MDArray_int8_t_O,
  /* 251 */ &&obj_finalize_STAMP_core__template_Array_core__MDArray_int32_t_O_core__SimpleMDArray_int32_t_O_core__SimpleVector_int32_t_O_core__MDArray_O_,
  /* 255 */ &&obj_finalize_STAMP_core__MDArray_int32_t_O,
  /* 259 */ &&obj_finalize_STAMP_core__template_Array_core__MDArray_byte4_t_O_core__SimpleMDArray_byte4_t_O_core__SimpleVector_byte4_t_O_core__MDArray_O_,
  /* 263 */ &&obj_finalize_STAMP_core__MDArray_byte4_t_O,
  /* 267 */ &&obj_finalize_STAMP_core__template_Array_core__MDArray_float_O_core__SimpleMDArray_float_O_core__SimpleVector_float_O_core__MDArray_O_,
  /* 271 */ &&obj_finalize_STAMP_core__MDArray_float_O,
  /* 275 */ &&obj_finalize_STAMP_core__template_Array_core__MDArray_size_t_O_core__SimpleMDArray_size_t_O_core__SimpleVector_size_t_O_core__MDArray_O_,
  /* 279 */ &&obj_finalize_STAMP_core__MDArray_size_t_O,
  /* 283 */ &&obj_finalize_STAMP_core__template_Array_core__MDArray_byte8_t_O_core__SimpleMDArray_byte8_t_O_core__SimpleVector_byte8_t_O_core__MDArray_O_,
  /* 287 */ &&obj_finalize_STAMP_core__MDArray_byte8_t_O,
  /* 291 */ &&obj_finalize_STAMP_core__template_Array_core__MDArray_int64_t_O_core__SimpleMDArray_int64_t_O_core__SimpleVector_int64_t_O_core__MDArray_O_,
  /* 295 */ &&obj_finalize_STAMP_core__MDArray_int64_t_O,
  /* 299 */ &&obj_finalize_STAMP_core__template_Array_core__MDArray_byte32_t_O_core__SimpleMDArray_byte32_t_O_core__SimpleVector_byte32_t_O_core__MDArray_O_,
  /* 303 */ &&obj_finalize_STAMP_core__MDArray_byte32_t_O,
  /* 307 */ &&obj_finalize_STAMP_core__template_Array_core__MDArray_byte2_t_O_core__SimpleMDArray_byte2_t_O_core__SimpleVector_byte2_t_O_core__MDArray_O_,
  /* 311 */ &&obj_finalize_STAMP_core__MDArray_byte2_t_O,
  /* 315 */ &&obj_finalize_STAMP_core__template_Array_core__MDArray_int2_t_O_core__SimpleMDArray_int2_t_O_core__SimpleVector_int2_t_O_core__MDArray_O_,
  /* 319 */ &&obj_finalize_STAMP_core__MDArray_int2_t_O,
  /* 323 */ &&obj_finalize_STAMP_core__template_Array_core__MDArray_fixnum_O_core__SimpleMDArray_fixnum_O_core__SimpleVector_fixnum_O_core__MDArray_O_,
  /* 327 */ &&obj_finalize_STAMP_core__MDArray_fixnum_O,
  /* 331 */ &&obj_finalize_STAMP_core__template_Array_core__MDArrayBaseChar_O_core__SimpleMDArrayBaseChar_O_core__SimpleBaseString_O_core__MDArray_O_,
  /* 335 */ &&obj_finalize_STAMP_core__MDArrayBaseChar_O,
  /* 339 */ &&obj_finalize_STAMP_core__template_Array_core__MDArray_byte64_t_O_core__SimpleMDArray_byte64_t_O_core__SimpleVector_byte64_t_O_core__MDArray_O_,
  /* 343 */ &&obj_finalize_STAMP_core__MDArray_byte64_t_O,
  /* 347 */ &&obj_finalize_STAMP_core__template_Array_core__MDArrayCharacter_O_core__SimpleMDArrayCharacter_O_core__SimpleCharacterString_O_core__MDArray_O_,
  /* 351 */ &&obj_finalize_STAMP_core__MDArrayCharacter_O,
  /* 355 */ &&obj_finalize_STAMP_core__template_Array_core__MDArrayT_O_core__SimpleMDArrayT_O_core__SimpleVector_O_core__MDArray_O_,
  /* 359 */ &&obj_finalize_STAMP_core__MDArrayT_O,
  /* 363 */ &&obj_finalize_STAMP_core__template_Array_core__MDArrayBit_O_core__SimpleMDArrayBit_O_core__SimpleBitVector_O_core__MDArray_O_,
  /* 367 */ &&obj_finalize_STAMP_core__MDArrayBit_O,
  /* 371 */ &&obj_finalize_STAMP_core__template_Array_core__MDArray_byte16_t_O_core__SimpleMDArray_byte16_t_O_core__SimpleVector_byte16_t_O_core__MDArray_O_,
  /* 375 */ &&obj_finalize_STAMP_core__MDArray_byte16_t_O,
  /* 379 */ &&obj_finalize_STAMP_core__SimpleMDArray_O,
  /* 383 */ &&obj_finalize_STAMP_core__template_SimpleArray_core__SimpleMDArray_int8_t_O_core__SimpleVector_int8_t_O_core__SimpleMDArray_O_,
  /* 387 */ &&obj_finalize_STAMP_core__SimpleMDArray_int8_t_O,
  /* 391 */ &&obj_finalize_STAMP_core__template_SimpleArray_core__SimpleMDArray_double_O_core__SimpleVector_double_O_core__SimpleMDArray_O_,
  /* 395 */ &&obj_finalize_STAMP_core__SimpleMDArray_double_O,
  /* 399 */ &&obj_finalize_STAMP_core__template_SimpleArray_core__SimpleMDArray_byte32_t_O_core__SimpleVector_byte32_t_O_core__SimpleMDArray_O_,
  /* 403 */ &&obj_finalize_STAMP_core__SimpleMDArray_byte32_t_O,
  /* 407 */ &&obj_finalize_STAMP_core__template_SimpleArray_core__SimpleMDArrayT_O_core__SimpleVector_O_core__SimpleMDArray_O_,
  /* 411 */ &&obj_finalize_STAMP_core__SimpleMDArrayT_O,
  /* 415 */ &&obj_finalize_STAMP_core__template_SimpleArray_core__SimpleMDArray_int2_t_O_core__SimpleVector_int2_t_O_core__SimpleMDArray_O_,
  /* 419 */ &&obj_finalize_STAMP_core__SimpleMDArray_int2_t_O,
  /* 423 */ &&obj_finalize_STAMP_core__template_SimpleArray_core__SimpleMDArray_byte4_t_O_core__SimpleVector_byte4_t_O_core__SimpleMDArray_O_,
  /* 427 */ &&obj_finalize_STAMP_core__SimpleMDArray_byte4_t_O,
  /* 431 */ &&obj_finalize_STAMP_core__template_SimpleArray_core__SimpleMDArray_int32_t_O_core__SimpleVector_int32_t_O_core__SimpleMDArray_O_,
  /* 435 */ &&obj_finalize_STAMP_core__SimpleMDArray_int32_t_O,
  /* 439 */ &&obj_finalize_STAMP_core__template_SimpleArray_core__SimpleMDArray_float_O_core__SimpleVector_float_O_core__SimpleMDArray_O_,
  /* 443 */ &&obj_finalize_STAMP_core__SimpleMDArray_float_O,
  /* 447 */ &&obj_finalize_STAMP_core__template_SimpleArray_core__SimpleMDArray_int16_t_O_core__SimpleVector_int16_t_O_core__SimpleMDArray_O_,
  /* 451 */ &&obj_finalize_STAMP_core__SimpleMDArray_int16_t_O,
  /* 455 */ &&obj_finalize_STAMP_core__template_SimpleArray_core__SimpleMDArray_size_t_O_core__SimpleVector_size_t_O_core__SimpleMDArray_O_,
  /* 459 */ &&obj_finalize_STAMP_core__SimpleMDArray_size_t_O,
  /* 463 */ &&obj_finalize_STAMP_core__template_SimpleArray_core__SimpleMDArray_int4_t_O_core__SimpleVector_int4_t_O_core__SimpleMDArray_O_,
  /* 467 */ &&obj_finalize_STAMP_core__SimpleMDArray_int4_t_O,
  /* 471 */ &&obj_finalize_STAMP_core__template_SimpleArray_core__SimpleMDArrayCharacter_O_core__SimpleCharacterString_O_core__SimpleMDArray_O_,
  /* 475 */ &&obj_finalize_STAMP_core__SimpleMDArrayCharacter_O,
  /* 479 */ &&obj_finalize_STAMP_core__template_SimpleArray_core__SimpleMDArray_byte2_t_O_core__SimpleVector_byte2_t_O_core__SimpleMDArray_O_,
  /* 483 */ &&obj_finalize_STAMP_core__SimpleMDArray_byte2_t_O,
  /* 487 */ &&obj_finalize_STAMP_core__template_SimpleArray_core__SimpleMDArray_fixnum_O_core__SimpleVector_fixnum_O_core__SimpleMDArray_O_,
  /* 491 */ &&obj_finalize_STAMP_core__SimpleMDArray_fixnum_O,
  /* 495 */ &&obj_finalize_STAMP_core__template_SimpleArray_core__SimpleMDArray_byte16_t_O_core__SimpleVector_byte16_t_O_core__SimpleMDArray_O_,
  /* 499 */ &&obj_finalize_STAMP_core__SimpleMDArray_byte16_t_O,
  /* 503 */ &&obj_finalize_STAMP_core__template_SimpleArray_core__SimpleMDArrayBaseChar_O_core__SimpleBaseString_O_core__SimpleMDArray_O_,
  /* 507 */ &&obj_finalize_STAMP_core__SimpleMDArrayBaseChar_O,
  /* 511 */ &&obj_finalize_STAMP_core__template_SimpleArray_core__SimpleMDArray_byte64_t_O_core__SimpleVector_byte64_t_O_core__SimpleMDArray_O_,
  /* 515 */ &&obj_finalize_STAMP_core__SimpleMDArray_byte64_t_O,
  /* 519 */ &&obj_finalize_STAMP_core__template_SimpleArray_core__SimpleMDArrayBit_O_core__SimpleBitVector_O_core__SimpleMDArray_O_,
  /* 523 */ &&obj_finalize_STAMP_core__SimpleMDArrayBit_O,
  /* 527 */ &&obj_finalize_STAMP_core__template_SimpleArray_core__SimpleMDArray_byte8_t_O_core__SimpleVector_byte8_t_O_core__SimpleMDArray_O_,
  /* 531 */ &&obj_finalize_STAMP_core__SimpleMDArray_byte8_t_O,
  /* 535 */ &&obj_finalize_STAMP_core__template_SimpleArray_core__SimpleMDArray_int64_t_O_core__SimpleVector_int64_t_O_core__SimpleMDArray_O_,
  /* 539 */ &&obj_finalize_STAMP_core__SimpleMDArray_int64_t_O,
  /* 543 */ &&obj_finalize_STAMP_core__template_Array_core__MDArray_int4_t_O_core__SimpleMDArray_int4_t_O_core__SimpleVector_int4_t_O_core__MDArray_O_,
  /* 547 */ &&obj_finalize_STAMP_core__MDArray_int4_t_O,
  /* 551 */ &&obj_finalize_STAMP_core__template_Array_core__MDArray_double_O_core__SimpleMDArray_double_O_core__SimpleVector_double_O_core__MDArray_O_,
  /* 555 */ &&obj_finalize_STAMP_core__MDArray_double_O,
  /* 559 */ &&obj_finalize_STAMP_core__ComplexVector_O,
  /* 563 */ &&obj_finalize_STAMP_core__template_Vector_core__ComplexVector_double_O_core__SimpleVector_double_O_core__ComplexVector_O_,
  /* 567 */ &&obj_finalize_STAMP_core__ComplexVector_double_O,
  /* 571 */ &&obj_finalize_STAMP_core__template_Vector_core__ComplexVector_int8_t_O_core__SimpleVector_int8_t_O_core__ComplexVector_O_,
  /* 575 */ &&obj_finalize_STAMP_core__ComplexVector_int8_t_O,
  /* 579 */ &&obj_finalize_STAMP_core__template_Vector_core__ComplexVector_byte64_t_O_core__SimpleVector_byte64_t_O_core__ComplexVector_O_,
  /* 583 */ &&obj_finalize_STAMP_core__ComplexVector_byte64_t_O,
  /* 587 */ &&obj_finalize_STAMP_core__template_Vector_core__ComplexVector_T_O_core__SimpleVector_O_core__ComplexVector_O_,
  /* 591 */ &&obj_finalize_STAMP_core__ComplexVector_T_O,
  /* 595 */ &&obj_finalize_STAMP_core__template_Vector_core__ComplexVector_int2_t_O_core__SimpleVector_int2_t_O_core__ComplexVector_O_,
  /* 599 */ &&obj_finalize_STAMP_core__ComplexVector_int2_t_O,
  /* 603 */ &&obj_finalize_STAMP_core__template_Vector_core__ComplexVector_int32_t_O_core__SimpleVector_int32_t_O_core__ComplexVector_O_,
  /* 607 */ &&obj_finalize_STAMP_core__ComplexVector_int32_t_O,
  /* 611 */ &&obj_finalize_STAMP_core__template_Vector_core__ComplexVector_byte16_t_O_core__SimpleVector_byte16_t_O_core__ComplexVector_O_,
  /* 615 */ &&obj_finalize_STAMP_core__ComplexVector_byte16_t_O,
  /* 619 */ &&obj_finalize_STAMP_core__template_Vector_core__ComplexVector_float_O_core__SimpleVector_float_O_core__ComplexVector_O_,
  /* 623 */ &&obj_finalize_STAMP_core__ComplexVector_float_O,
  /* 627 */ &&obj_finalize_STAMP_core__template_Vector_core__ComplexVector_int16_t_O_core__SimpleVector_int16_t_O_core__ComplexVector_O_,
  /* 631 */ &&obj_finalize_STAMP_core__ComplexVector_int16_t_O,
  /* 635 */ &&obj_finalize_STAMP_core__template_Vector_core__ComplexVector_int4_t_O_core__SimpleVector_int4_t_O_core__ComplexVector_O_,
  /* 639 */ &&obj_finalize_STAMP_core__ComplexVector_int4_t_O,
  /* 643 */ &&obj_finalize_STAMP_core__template_Vector_core__ComplexVector_size_t_O_core__SimpleVector_size_t_O_core__ComplexVector_O_,
  /* 647 */ &&obj_finalize_STAMP_core__ComplexVector_size_t_O,
  /* 651 */ &&obj_finalize_STAMP_core__template_Vector_core__ComplexVector_byte2_t_O_core__SimpleVector_byte2_t_O_core__ComplexVector_O_,
  /* 655 */ &&obj_finalize_STAMP_core__ComplexVector_byte2_t_O,
  /* 659 */ &&obj_finalize_STAMP_core__template_Vector_core__ComplexVector_byte8_t_O_core__SimpleVector_byte8_t_O_core__ComplexVector_O_,
  /* 663 */ &&obj_finalize_STAMP_core__ComplexVector_byte8_t_O,
  /* 667 */ &&obj_finalize_STAMP_core__template_Vector_core__ComplexVector_byte32_t_O_core__SimpleVector_byte32_t_O_core__ComplexVector_O_,
  /* 671 */ &&obj_finalize_STAMP_core__ComplexVector_byte32_t_O,
  /* 675 */ &&obj_finalize_STAMP_core__template_Vector_core__BitVectorNs_O_core__SimpleBitVector_O_core__ComplexVector_O_,
  /* 679 */ &&obj_finalize_STAMP_core__BitVectorNs_O,
  /* 683 */ &&obj_finalize_STAMP_core__StrNs_O,
  /* 687 */ &&obj_finalize_STAMP_core__template_Vector_core__Str8Ns_O_core__SimpleBaseString_O_core__StrNs_O_,
  /* 691 */ &&obj_finalize_STAMP_core__Str8Ns_O,
  /* 695 */ &&obj_finalize_STAMP_core__template_Vector_core__StrWNs_O_core__SimpleCharacterString_O_core__StrNs_O_,
  /* 699 */ &&obj_finalize_STAMP_core__StrWNs_O,
  /* 703 */ &&obj_finalize_STAMP_core__template_Vector_core__ComplexVector_byte4_t_O_core__SimpleVector_byte4_t_O_core__ComplexVector_O_,
  /* 707 */ &&obj_finalize_STAMP_core__ComplexVector_byte4_t_O,
  /* 711 */ &&obj_finalize_STAMP_core__template_Vector_core__ComplexVector_fixnum_O_core__SimpleVector_fixnum_O_core__ComplexVector_O_,
  /* 715 */ &&obj_finalize_STAMP_core__ComplexVector_fixnum_O,
  /* 719 */ &&obj_finalize_STAMP_core__template_Vector_core__ComplexVector_int64_t_O_core__SimpleVector_int64_t_O_core__ComplexVector_O_,
  /* 723 */ &&obj_finalize_STAMP_core__ComplexVector_int64_t_O,
  /* 727 */ &&obj_finalize_STAMP_core__AbstractSimpleVector_O,
  /* 731 */ &&obj_finalize_STAMP_core__SimpleString_O,
  /* 735 */ &&obj_finalize_STAMP_core__template_SimpleVector_core__SimpleCharacterString_O_int_core__SimpleString_O_,
  /* 739 */ &&obj_finalize_STAMP_core__SimpleCharacterString_O,
  /* 743 */ &&obj_finalize_STAMP_core__template_SimpleVector_core__SimpleBaseString_O_unsigned_char_core__SimpleString_O_,
  /* 747 */ &&obj_finalize_STAMP_core__SimpleBaseString_O,
  /* 751 */ &&obj_finalize_STAMP_core__template_SimpleVector_core__SimpleVector_int16_t_O_short_core__AbstractSimpleVector_O_,
  /* 755 */ &&obj_finalize_STAMP_core__SimpleVector_int16_t_O,
  /* 759 */ &&obj_finalize_STAMP_core__template_SimpleVector_core__SimpleVector_byte16_t_O_unsigned_short_core__AbstractSimpleVector_O_,
  /* 763 */ &&obj_finalize_STAMP_core__SimpleVector_byte16_t_O,
  /* 767 */ &&obj_finalize_STAMP_core__template_SimpleBitUnitVector_core__SimpleBitVector_O_1_0_,
  /* 771 */ &&obj_finalize_STAMP_core__SimpleBitVector_O,
  /* 775 */ &&obj_finalize_STAMP_core__template_SimpleBitUnitVector_core__SimpleVector_int4_t_O_4_1_,
  /* 779 */ &&obj_finalize_STAMP_core__SimpleVector_int4_t_O,
  /* 783 */ &&obj_finalize_STAMP_core__template_SimpleVector_core__SimpleVector_byte32_t_O_unsigned_int_core__AbstractSimpleVector_O_,
  /* 787 */ &&obj_finalize_STAMP_core__SimpleVector_byte32_t_O,
  /* 791 */ &&obj_finalize_STAMP_core__template_SimpleVector_core__SimpleVector_size_t_O_unsigned_long_core__AbstractSimpleVector_O_,
  /* 795 */ &&obj_finalize_STAMP_core__SimpleVector_size_t_O,
  /* 799 */ &&obj_finalize_STAMP_core__template_SimpleVector_core__SimpleVector_double_O_double_core__AbstractSimpleVector_O_,
  /* 803 */ &&obj_finalize_STAMP_core__SimpleVector_double_O,
  /* 807 */ &&obj_finalize_STAMP_core__template_SimpleVector_core__SimpleVector_byte64_t_O_unsigned_long_core__AbstractSimpleVector_O_,
  /* 811 */ &&obj_finalize_STAMP_core__SimpleVector_byte64_t_O,
  /* 815 */ &&obj_finalize_STAMP_core__template_SimpleBitUnitVector_core__SimpleVector_int2_t_O_2_1_,
  /* 819 */ &&obj_finalize_STAMP_core__SimpleVector_int2_t_O,
  /* 823 */ &&obj_finalize_STAMP_core__template_SimpleVector_core__SimpleVector_int64_t_O_long_core__AbstractSimpleVector_O_,
  /* 827 */ &&obj_finalize_STAMP_core__SimpleVector_int64_t_O,
  /* 831 */ &&obj_finalize_STAMP_core__template_SimpleVector_core__SimpleVector_fixnum_O_long_core__AbstractSimpleVector_O_,
  /* 835 */ &&obj_finalize_STAMP_core__SimpleVector_fixnum_O,
  /* 839 */ &&obj_finalize_STAMP_core__template_SimpleVector_core__SimpleVector_int8_t_O_signed_char_core__AbstractSimpleVector_O_,
  /* 843 */ &&obj_finalize_STAMP_core__SimpleVector_int8_t_O,
  /* 847 */ &&obj_finalize_STAMP_core__template_SimpleVector_core__SimpleVector_float_O_float_core__AbstractSimpleVector_O_,
  /* 851 */ &&obj_finalize_STAMP_core__SimpleVector_float_O,
  /* 855 */ &&obj_finalize_STAMP_core__template_SimpleVector_core__SimpleVector_O_gctools__smart_ptr_core__T_O__core__AbstractSimpleVector_O_,
  /* 859 */ &&obj_finalize_STAMP_core__SimpleVector_O,
  /* 863 */ &&obj_finalize_STAMP_core__template_SimpleVector_core__SimpleVector_byte8_t_O_unsigned_char_core__AbstractSimpleVector_O_,
  /* 867 */ &&obj_finalize_STAMP_core__SimpleVector_byte8_t_O,
  /* 871 */ &&obj_finalize_STAMP_core__template_SimpleBitUnitVector_core__SimpleVector_byte2_t_O_2_0_,
  /* 875 */ &&obj_finalize_STAMP_core__SimpleVector_byte2_t_O,
  /* 879 */ &&obj_finalize_STAMP_core__template_SimpleVector_core__SimpleVector_int32_t_O_int_core__AbstractSimpleVector_O_,
  /* 883 */ &&obj_finalize_STAMP_core__SimpleVector_int32_t_O,
  /* 887 */ &&obj_finalize_STAMP_core__template_SimpleBitUnitVector_core__SimpleVector_byte4_t_O_4_0_,
  /* 891 */ &&obj_finalize_STAMP_core__SimpleVector_byte4_t_O,
  /* 895 */ &&obj_finalize_STAMP_core__Symbol_O,
  /* 899 */ &&obj_finalize_STAMP_core__Null_O,
  /* 903 */ &&obj_finalize_STAMP_core__Character_dummy_O,
  /* 907 */ &&obj_finalize_STAMP_llvmo__DataLayout_O,
  /* 911 */ &&obj_finalize_STAMP_core__LoadTimeValues_O,
  /* 915 */ &&obj_finalize_STAMP_core__SharpEqualWrapper_O,
  /* 919 */ &&obj_finalize_STAMP_llvmo__ClaspJIT_O,
  /* 923 */ &&obj_finalize_STAMP_core__Readtable_O,
  /* 927 */ &&obj_finalize_STAMP_core__PosixTime_O,
  /* 931 */ &&obj_finalize_STAMP_core__Exposer_O,
  /* 935 */ &&obj_finalize_STAMP_core__CoreExposer_O,
  /* 939 */ &&obj_finalize_STAMP_asttooling__AsttoolingExposer_O,
  /* 943 */ &&obj_finalize_STAMP_llvmo__StructLayout_O,
  /* 947 */ &&obj_finalize_STAMP_core__PosixTimeDuration_O,
  /* 951 */ &&obj_finalize_STAMP_clasp_ffi__ForeignTypeSpec_O,
  /* 953 */ &&obj_finalize_STAMP_core__Instance_O,
  /* 956 */ &&obj_finalize_STAMP_core__DerivableCxxObject_O,
  /* 961 */ &&obj_finalize_STAMP_clbind__ClassRep_O,
  /* 967 */ &&obj_finalize_STAMP_core__SmallMap_O,
  /* 971 */ &&obj_finalize_STAMP_mpip__Mpi_O,
  /* 975 */ &&obj_finalize_STAMP_core__ExternalObject_O,
  /* 979 */ &&obj_finalize_STAMP_llvmo__Pass_O,
  /* 983 */ &&obj_finalize_STAMP_llvmo__ModulePass_O,
  /* 987 */ &&obj_finalize_STAMP_llvmo__ImmutablePass_O,
  /* 991 */ &&obj_finalize_STAMP_llvmo__TargetLibraryInfoWrapperPass_O,
  /* 995 */ &&obj_finalize_STAMP_llvmo__FunctionPass_O,
  /* 999 */ &&obj_finalize_STAMP_llvmo__ExecutionEngine_O,
  /* 1003 */ &&obj_finalize_STAMP_llvmo__MCSubtargetInfo_O,
  /* 1007 */ &&obj_finalize_STAMP_llvmo__TargetSubtargetInfo_O,
  /* 1011 */ &&obj_finalize_STAMP_llvmo__Type_O,
  /* 1015 */ &&obj_finalize_STAMP_llvmo__FunctionType_O,
  /* 1019 */ &&obj_finalize_STAMP_llvmo__CompositeType_O,
  /* 1023 */ &&obj_finalize_STAMP_llvmo__SequentialType_O,
  /* 1027 */ &&obj_finalize_STAMP_llvmo__PointerType_O,
  /* 1031 */ &&obj_finalize_STAMP_llvmo__ArrayType_O,
  /* 1035 */ &&obj_finalize_STAMP_llvmo__VectorType_O,
  /* 1039 */ &&obj_finalize_STAMP_llvmo__StructType_O,
  /* 1043 */ &&obj_finalize_STAMP_llvmo__IntegerType_O,
  /* 1047 */ &&obj_finalize_STAMP_llvmo__JITDylib_O,
  /* 1051 */ &&obj_finalize_STAMP_llvmo__DIContext_O,
  /* 1055 */ &&obj_finalize_STAMP_llvmo__TargetPassConfig_O,
  /* 1059 */ &&obj_finalize_STAMP_llvmo__IRBuilderBase_O,
  /* 1063 */ &&obj_finalize_STAMP_llvmo__IRBuilder_O,
  /* 1067 */ &&obj_finalize_STAMP_llvmo__APFloat_O,
  /* 1071 */ &&obj_finalize_STAMP_llvmo__APInt_O,
  /* 1075 */ &&obj_finalize_STAMP_llvmo__DIBuilder_O,
  /* 1079 */ &&obj_finalize_STAMP_llvmo__SectionedAddress_O,
  /* 1083 */ &&obj_finalize_STAMP_llvmo__EngineBuilder_O,
  /* 1087 */ &&obj_finalize_STAMP_llvmo__PassManagerBase_O,
  /* 1091 */ &&obj_finalize_STAMP_llvmo__PassManager_O,
  /* 1095 */ &&obj_finalize_STAMP_llvmo__FunctionPassManager_O,
  /* 1099 */ &&obj_finalize_STAMP_llvmo__Metadata_O,
  /* 1103 */ &&obj_finalize_STAMP_llvmo__MDNode_O,
  /* 1107 */ &&obj_finalize_STAMP_llvmo__DINode_O,
  /* 1111 */ &&obj_finalize_STAMP_llvmo__DIVariable_O,
  /* 1115 */ &&obj_finalize_STAMP_llvmo__DILocalVariable_O,
  /* 1119 */ &&obj_finalize_STAMP_llvmo__DIScope_O,
  /* 1123 */ &&obj_finalize_STAMP_llvmo__DIFile_O,
  /* 1127 */ &&obj_finalize_STAMP_llvmo__DIType_O,
  /* 1131 */ &&obj_finalize_STAMP_llvmo__DICompositeType_O,
  /* 1135 */ &&obj_finalize_STAMP_llvmo__DIDerivedType_O,
  /* 1139 */ &&obj_finalize_STAMP_llvmo__DIBasicType_O,
  /* 1143 */ &&obj_finalize_STAMP_llvmo__DISubroutineType_O,
  /* 1147 */ &&obj_finalize_STAMP_llvmo__DILocalScope_O,
  /* 1151 */ &&obj_finalize_STAMP_llvmo__DISubprogram_O,
  /* 1155 */ &&obj_finalize_STAMP_llvmo__DILexicalBlockBase_O,
  /* 1159 */ &&obj_finalize_STAMP_llvmo__DILexicalBlock_O,
  /* 1163 */ &&obj_finalize_STAMP_llvmo__DICompileUnit_O,
  /* 1167 */ &&obj_finalize_STAMP_llvmo__DIExpression_O,
  /* 1171 */ &&obj_finalize_STAMP_llvmo__DILocation_O,
  /* 1175 */ &&obj_finalize_STAMP_llvmo__ValueAsMetadata_O,
  /* 1179 */ &&obj_finalize_STAMP_llvmo__MDString_O,
  /* 1183 */ &&obj_finalize_STAMP_llvmo__Value_O,
  /* 1187 */ &&obj_finalize_STAMP_llvmo__Argument_O,
  /* 1191 */ &&obj_finalize_STAMP_llvmo__BasicBlock_O,
  /* 1195 */ &&obj_finalize_STAMP_llvmo__MetadataAsValue_O,
  /* 1199 */ &&obj_finalize_STAMP_llvmo__User_O,
  /* 1203 */ &&obj_finalize_STAMP_llvmo__Instruction_O,
  /* 1207 */ &&obj_finalize_STAMP_llvmo__UnaryInstruction_O,
  /* 1211 */ &&obj_finalize_STAMP_llvmo__VAArgInst_O,
  /* 1215 */ &&obj_finalize_STAMP_llvmo__LoadInst_O,
  /* 1219 */ &&obj_finalize_STAMP_llvmo__AllocaInst_O,
  /* 1223 */ &&obj_finalize_STAMP_llvmo__SwitchInst_O,
  /* 1227 */ &&obj_finalize_STAMP_llvmo__AtomicRMWInst_O,
  /* 1231 */ &&obj_finalize_STAMP_llvmo__LandingPadInst_O,
  /* 1235 */ &&obj_finalize_STAMP_llvmo__StoreInst_O,
  /* 1239 */ &&obj_finalize_STAMP_llvmo__UnreachableInst_O,
  /* 1243 */ &&obj_finalize_STAMP_llvmo__ReturnInst_O,
  /* 1247 */ &&obj_finalize_STAMP_llvmo__ResumeInst_O,
  /* 1251 */ &&obj_finalize_STAMP_llvmo__AtomicCmpXchgInst_O,
  /* 1255 */ &&obj_finalize_STAMP_llvmo__FenceInst_O,
  /* 1259 */ &&obj_finalize_STAMP_llvmo__CallBase_O,
  /* 1263 */ &&obj_finalize_STAMP_llvmo__CallInst_O,
  /* 1267 */ &&obj_finalize_STAMP_llvmo__InvokeInst_O,
  /* 1271 */ &&obj_finalize_STAMP_llvmo__PHINode_O,
  /* 1275 */ &&obj_finalize_STAMP_llvmo__IndirectBrInst_O,
  /* 1279 */ &&obj_finalize_STAMP_llvmo__BranchInst_O,
  /* 1283 */ &&obj_finalize_STAMP_llvmo__Constant_O,
  /* 1287 */ &&obj_finalize_STAMP_llvmo__GlobalValue_O,
  /* 1291 */ &&obj_finalize_STAMP_llvmo__Function_O,
  /* 1295 */ &&obj_finalize_STAMP_llvmo__GlobalVariable_O,
  /* 1299 */ &&obj_finalize_STAMP_llvmo__BlockAddress_O,
  /* 1303 */ &&obj_finalize_STAMP_llvmo__ConstantDataSequential_O,
  /* 1307 */ &&obj_finalize_STAMP_llvmo__ConstantDataArray_O,
  /* 1311 */ &&obj_finalize_STAMP_llvmo__ConstantStruct_O,
  /* 1315 */ &&obj_finalize_STAMP_llvmo__ConstantInt_O,
  /* 1319 */ &&obj_finalize_STAMP_llvmo__ConstantFP_O,
  /* 1323 */ &&obj_finalize_STAMP_llvmo__ConstantExpr_O,
  /* 1327 */ &&obj_finalize_STAMP_llvmo__ConstantPointerNull_O,
  /* 1331 */ &&obj_finalize_STAMP_llvmo__UndefValue_O,
  /* 1335 */ &&obj_finalize_STAMP_llvmo__ConstantArray_O,
  /* 1339 */ &&obj_finalize_STAMP_llvmo__TargetMachine_O,
  /* 1343 */ &&obj_finalize_STAMP_llvmo__LLVMTargetMachine_O,
  /* 1347 */ &&obj_finalize_STAMP_llvmo__ThreadSafeContext_O,
  /* 1351 */ &&obj_finalize_STAMP_llvmo__NamedMDNode_O,
  /* 1355 */ &&obj_finalize_STAMP_llvmo__Triple_O,
  /* 1359 */ &&obj_finalize_STAMP_llvmo__DWARFContext_O,
  /* 1363 */ &&obj_finalize_STAMP_llvmo__TargetOptions_O,
  /* 1367 */ &&obj_finalize_STAMP_llvmo__ObjectFile_O,
  /* 1371 */ &&obj_finalize_STAMP_llvmo__LLVMContext_O,
  /* 1375 */ &&obj_finalize_STAMP_llvmo__PassManagerBuilder_O,
  /* 1379 */ &&obj_finalize_STAMP_llvmo__Module_O,
  /* 1383 */ &&obj_finalize_STAMP_llvmo__Target_O,
  /* 1387 */ &&obj_finalize_STAMP_llvmo__Linker_O,
  /* 1391 */ &&obj_finalize_STAMP_core__Rack_O,
  /* 1395 */ &&obj_finalize_STAMP_core__SmallMultimap_O,
  /* 1399 */ &&obj_finalize_STAMP_core__Sigset_O,
  /* 1403 */ &&obj_finalize_STAMP_core__Environment_O,
  /* 1407 */ &&obj_finalize_STAMP_core__GlueEnvironment_O,
  /* 1411 */ &&obj_finalize_STAMP_core__LexicalEnvironment_O,
  /* 1415 */ &&obj_finalize_STAMP_core__RuntimeVisibleEnvironment_O,
  /* 1419 */ &&obj_finalize_STAMP_core__FunctionValueEnvironment_O,
  /* 1423 */ &&obj_finalize_STAMP_core__TagbodyEnvironment_O,
  /* 1427 */ &&obj_finalize_STAMP_core__BlockEnvironment_O,
  /* 1431 */ &&obj_finalize_STAMP_core__ValueEnvironment_O,
  /* 1435 */ &&obj_finalize_STAMP_core__CompileTimeEnvironment_O,
  /* 1439 */ &&obj_finalize_STAMP_core__CatchEnvironment_O,
  /* 1443 */ &&obj_finalize_STAMP_core__MacroletEnvironment_O,
  /* 1447 */ &&obj_finalize_STAMP_core__SymbolMacroletEnvironment_O,
  /* 1451 */ &&obj_finalize_STAMP_core__FunctionContainerEnvironment_O,
  /* 1455 */ &&obj_finalize_STAMP_core__UnwindProtectEnvironment_O,
  /* 1459 */ &&obj_finalize_STAMP_core__ActivationFrame_O,
  /* 1463 */ &&obj_finalize_STAMP_core__ValueFrame_O,
  /* 1467 */ &&obj_finalize_STAMP_core__FunctionFrame_O,
  /* 1471 */ &&obj_finalize_STAMP_core__RandomState_O,
  /* 1475 */ &&obj_finalize_STAMP_core__AtomicFixnumHolder_O,
  /* 1479 */ &&obj_finalize_STAMP_core__HashTableBase_O,
  /* 1483 */ &&obj_finalize_STAMP_core__WeakKeyHashTable_O,
  /* 1487 */ &&obj_finalize_STAMP_core__HashTable_O,
  /* 1491 */ &&obj_finalize_STAMP_core__HashTableEqualp_O,
  /* 1495 */ &&obj_finalize_STAMP_core__HashTableEq_O,
  /* 1499 */ &&obj_finalize_STAMP_core__HashTableEql_O,
  /* 1503 */ &&obj_finalize_STAMP_core__HashTableEqual_O,
  /* 1507 */ &&obj_finalize_STAMP_llvmo__InsertPoint_O,
  /* 1511 */ &&obj_finalize_STAMP_core__Scope_O,
  /* 1515 */ &&obj_finalize_STAMP_core__FileScope_O,
  /* 1519 */ &&obj_finalize_STAMP_core__Path_O,
  /* 1523 */ &&obj_finalize_STAMP_core__Pathname_O,
  /* 1527 */ &&obj_finalize_STAMP_core__LogicalPathname_O,
  /* 1531 */ &&obj_finalize_STAMP_core__Cache_O,
  /* 1535 */ &&obj_finalize_STAMP_core__Number_O,
  /* 1539 */ &&obj_finalize_STAMP_core__Real_O,
  /* 1543 */ &&obj_finalize_STAMP_core__Rational_O,
  /* 1547 */ &&obj_finalize_STAMP_core__Ratio_O,
  /* 1551 */ &&obj_finalize_STAMP_core__Integer_O,
  /* 1555 */ &&obj_finalize_STAMP_core__Bignum_O,
  /* 1559 */ &&obj_finalize_STAMP_core__Fixnum_dummy_O,
  /* 1563 */ &&obj_finalize_STAMP_core__Float_O,
  /* 1567 */ &&obj_finalize_STAMP_core__DoubleFloat_O,
  /* 1571 */ &&obj_finalize_STAMP_core__SingleFloat_dummy_O,
  /* 1575 */ &&obj_finalize_STAMP_core__LongFloat_O,
  /* 1579 */ &&obj_finalize_STAMP_core__ShortFloat_O,
  /* 1583 */ &&obj_finalize_STAMP_core__Complex_O,
  /* 1587 */ &&obj_finalize_STAMP_core__Stream_O,
  /* 1591 */ &&obj_finalize_STAMP_core__AnsiStream_O,
  /* 1595 */ &&obj_finalize_STAMP_core__SynonymStream_O,
  /* 1599 */ &&obj_finalize_STAMP_core__ConcatenatedStream_O,
  /* 1603 */ &&obj_finalize_STAMP_core__FileStream_O,
  /* 1607 */ &&obj_finalize_STAMP_core__IOFileStream_O,
  /* 1611 */ &&obj_finalize_STAMP_core__IOStreamStream_O,
  /* 1615 */ &&obj_finalize_STAMP_core__BroadcastStream_O,
  /* 1619 */ &&obj_finalize_STAMP_core__StringStream_O,
  /* 1623 */ &&obj_finalize_STAMP_core__StringOutputStream_O,
  /* 1627 */ &&obj_finalize_STAMP_core__StringInputStream_O,
  /* 1631 */ &&obj_finalize_STAMP_core__EchoStream_O,
  /* 1635 */ &&obj_finalize_STAMP_core__TwoWayStream_O,
  /* 1639 */ &&obj_finalize_STAMP_core__Package_O,
  /* 1643 */ &&obj_finalize_STAMP_core__FileStatus_O,
  /* 1647 */ &&obj_finalize_STAMP_core__InvocationHistoryFrameIterator_O,
  /* 1651 */ &&obj_finalize_STAMP_core__SourcePosInfo_O,
  /* 1655 */ &&obj_finalize_STAMP_core__IntArray_O,
  /* 1659 */ &&obj_finalize_STAMP_core__DirectoryEntry_O,
  /* 1663 */ &&obj_finalize_STAMP_core__LightUserData_O,
  /* 1667 */ &&obj_finalize_STAMP_core__UserData_O,
  /* 1671 */ &&obj_finalize_STAMP_core__Record_O,
  /* 1675 */ &&obj_finalize_STAMP_clbind__ClassRegistry_O,
  /* 1679 */ &&obj_finalize_STAMP_core__Cons_O,
  /* 1683 */ &&obj_finalize_STAMP_core__Lisp_O,
  /* 1687 */ &&obj_finalize_STAMP_clang__RecursiveASTVisitor_asttooling__AstVisitor_O_,
  /* 1691 */ &&obj_finalize_STAMP_asttooling__AstVisitor_O,
  /* 1695 */ &&obj_finalize_STAMP_clang__tooling__ToolAction,
  /* 1699 */ &&obj_finalize_STAMP_clang__tooling__FrontendActionFactory,
  /* 1703 */ &&obj_finalize_STAMP_clang__ast_matchers__MatchFinder__MatchCallback,
  /* 1707 */ &&obj_finalize_STAMP_gctools__GCContainer,
  /* 1711 */ &&obj_finalize_STAMP_gctools__GCArray_moveable_unsigned_int_,
  /* 1715 */ &&obj_finalize_STAMP_gctools__GCVector_moveable_core__CacheRecord_,
  /* 1719 */ &&obj_finalize_STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__Cons_O__,
  /* 1723 */ &&obj_finalize_STAMP_gctools__GCVector_moveable_double_,
  /* 1727 */ &&obj_finalize_STAMP_gctools__GCArray_moveable_short_,
  /* 1731 */ &&obj_finalize_STAMP_gctools__GCVector_moveable_gctools__smart_ptr_clbind__ClassRep_O__,
  /* 1735 */ &&obj_finalize_STAMP_gctools__GCBitUnitArray_moveable_4_0_,
  /* 1739 */ &&obj_finalize_STAMP_gctools__GCVector_moveable_core__Cons_O_,
  /* 1743 */ &&obj_finalize_STAMP_gctools__GCVector_moveable_core__SymbolClassHolderPair_,
  /* 1747 */ &&obj_finalize_STAMP_gctools__GCArray_moveable_signed_char_,
  /* 1751 */ &&obj_finalize_STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__List_V__,
  /* 1755 */ &&obj_finalize_STAMP_gctools__GCVector_moveable_std__pair_gctools__smart_ptr_core__T_O__gctools__smart_ptr_core__T_O___,
  /* 1759 */ &&obj_finalize_STAMP_gctools__GCArray_moveable_unsigned_char_,
  /* 1763 */ &&obj_finalize_STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__Symbol_O__,
  /* 1767 */ &&obj_finalize_STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__T_O__,
  /* 1771 */ &&obj_finalize_STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__SingleDispatchMethod_O__,
  /* 1775 */ &&obj_finalize_STAMP_gctools__GCArray_moveable_double_,
  /* 1779 */ &&obj_finalize_STAMP_gctools__GCVector_moveable_core__OptionalArgument_,
  /* 1783 */ &&obj_finalize_STAMP_gctools__GCVector_moveable_core__KeywordArgument_,
  /* 1787 */ &&obj_finalize_STAMP_gctools__GCVector_moveable_core__RequiredArgument_,
  /* 1791 */ &&obj_finalize_STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__FileScope_O__,
  /* 1795 */ &&obj_finalize_STAMP_gctools__GCBitUnitArray_moveable_4_1_,
  /* 1799 */ &&obj_finalize_STAMP_gctools__GCVector_moveable_core__SymbolStorage_,
  /* 1803 */ &&obj_finalize_STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__Instance_O__,
  /* 1807 */ &&obj_finalize_STAMP_gctools__GCArray_moveable_unsigned_long_,
  /* 1811 */ &&obj_finalize_STAMP_gctools__GCVector_moveable_std__pair_gctools__smart_ptr_core__Symbol_O__gctools__smart_ptr_core__T_O___,
  /* 1815 */ &&obj_finalize_STAMP_gctools__GCBitUnitArray_moveable_2_0_,
  /* 1819 */ &&obj_finalize_STAMP_gctools__GCArray_moveable_int_,
  /* 1823 */ &&obj_finalize_STAMP_gctools__GCBitUnitArray_moveable_1_0_,
  /* 1827 */ &&obj_finalize_STAMP_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__,
  /* 1831 */ &&obj_finalize_STAMP_gctools__GCVector_moveable_core__AuxArgument_,
  /* 1835 */ &&obj_finalize_STAMP_gctools__GCBitUnitArray_moveable_2_1_,
  /* 1839 */ &&obj_finalize_STAMP_gctools__GCArray_moveable_long_,
  /* 1843 */ &&obj_finalize_STAMP_gctools__GCVector_moveable_int_,
  /* 1847 */ &&obj_finalize_STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__Package_O__,
  /* 1851 */ &&obj_finalize_STAMP_gctools__GCArray_moveable_float_,
  /* 1855 */ &&obj_finalize_STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__Creator_O__,
  /* 1859 */ &&obj_finalize_STAMP_gctools__GCVector_moveable_core__T_O___,
  /* 1863 */ &&obj_finalize_STAMP_gctools__GCArray_moveable_unsigned_short_,
  /* 1867 */ &&obj_finalize_STAMP_gctools__GCVector_moveable_float_,
  /* 1871 */ &&obj_finalize_STAMP_clang__FrontendAction,
  /* 1875 */ &&obj_finalize_STAMP_clang__ASTFrontendAction,
  /* 1879 */ &&obj_finalize_STAMP_clang__SyntaxOnlyAction,
   NULL
};
#endif // defined(GC_OBJ_FINALIZE_TABLE)
#if defined(GC_OBJ_DEALLOCATOR)
obj_deallocate_unmanaged_instance_STAMP_core__T_O:
{
     // stamp value 7
    core::T_O* obj_gc_safe = reinterpret_cast<core::T_O*>(client);
    GC<core::T_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__VaList_dummy_O:
{
     // stamp value 11
    core::VaList_dummy_O* obj_gc_safe = reinterpret_cast<core::VaList_dummy_O*>(client);
    GC<core::VaList_dummy_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__Unused_dummy_O:
{
     // stamp value 15
    core::Unused_dummy_O* obj_gc_safe = reinterpret_cast<core::Unused_dummy_O*>(client);
    GC<core::Unused_dummy_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__General_O:
{
     // stamp value 19
    core::General_O* obj_gc_safe = reinterpret_cast<core::General_O*>(client);
    GC<core::General_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__MultiStringBuffer_O:
{
     // stamp value 23
    core::MultiStringBuffer_O* obj_gc_safe = reinterpret_cast<core::MultiStringBuffer_O*>(client);
    GC<core::MultiStringBuffer_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__ClassHolder_O:
{
     // stamp value 27
    core::ClassHolder_O* obj_gc_safe = reinterpret_cast<core::ClassHolder_O*>(client);
    GC<core::ClassHolder_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__WrappedPointer_O:
{
     // stamp value 30
    core::WrappedPointer_O* obj_gc_safe = reinterpret_cast<core::WrappedPointer_O*>(client);
    GC<core::WrappedPointer_O>::deallocate_unmanaged_instance(obj_gc_safe);
}
obj_deallocate_unmanaged_instance_STAMP_core__FdSet_O:
{
     // stamp value 35
    core::FdSet_O* obj_gc_safe = reinterpret_cast<core::FdSet_O*>(client);
    GC<core::FdSet_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__SymbolToEnumConverter_O:
{
     // stamp value 39
    core::SymbolToEnumConverter_O* obj_gc_safe = reinterpret_cast<core::SymbolToEnumConverter_O*>(client);
    GC<core::SymbolToEnumConverter_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__Attribute_O:
{
     // stamp value 43
    llvmo::Attribute_O* obj_gc_safe = reinterpret_cast<llvmo::Attribute_O*>(client);
    GC<llvmo::Attribute_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__LambdaListHandler_O:
{
     // stamp value 47
    core::LambdaListHandler_O* obj_gc_safe = reinterpret_cast<core::LambdaListHandler_O*>(client);
    GC<core::LambdaListHandler_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__AttributeSet_O:
{
     // stamp value 51
    llvmo::AttributeSet_O* obj_gc_safe = reinterpret_cast<llvmo::AttributeSet_O*>(client);
    GC<llvmo::AttributeSet_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__AtomicT_Holder_O:
{
     // stamp value 55
    core::AtomicT_Holder_O* obj_gc_safe = reinterpret_cast<core::AtomicT_Holder_O*>(client);
    GC<core::AtomicT_Holder_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__Function_O:
{
     // stamp value 59
    core::Function_O* obj_gc_safe = reinterpret_cast<core::Function_O*>(client);
    GC<core::Function_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__FuncallableInstance_O:
{
     // stamp value 61
    core::FuncallableInstance_O* obj_gc_safe = reinterpret_cast<core::FuncallableInstance_O*>(client);
    GC<core::FuncallableInstance_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__Creator_O:
{
     // stamp value 67
    core::Creator_O* obj_gc_safe = reinterpret_cast<core::Creator_O*>(client);
    GC<core::Creator_O>::deallocate_unmanaged_instance(obj_gc_safe);
}
obj_deallocate_unmanaged_instance_STAMP_core__ClassRepCreator_O:
{
     // stamp value 71
    core::ClassRepCreator_O* obj_gc_safe = reinterpret_cast<core::ClassRepCreator_O*>(client);
    GC<core::ClassRepCreator_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__DerivableCxxClassCreator_O:
{
     // stamp value 75
    core::DerivableCxxClassCreator_O* obj_gc_safe = reinterpret_cast<core::DerivableCxxClassCreator_O*>(client);
    GC<core::DerivableCxxClassCreator_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__FuncallableInstanceCreator_O:
{
     // stamp value 79
    core::FuncallableInstanceCreator_O* obj_gc_safe = reinterpret_cast<core::FuncallableInstanceCreator_O*>(client);
    GC<core::FuncallableInstanceCreator_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_clbind__ConstructorCreator_O:
{
     // stamp value 83
    clbind::ConstructorCreator_O* obj_gc_safe = reinterpret_cast<clbind::ConstructorCreator_O*>(client);
    GC<clbind::ConstructorCreator_O>::deallocate_unmanaged_instance(obj_gc_safe);
}
obj_deallocate_unmanaged_instance_STAMP_clbind__DummyCreator_O:
{
     // stamp value 87
    clbind::DummyCreator_O* obj_gc_safe = reinterpret_cast<clbind::DummyCreator_O*>(client);
    GC<clbind::DummyCreator_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__InstanceCreator_O:
{
     // stamp value 91
    core::InstanceCreator_O* obj_gc_safe = reinterpret_cast<core::InstanceCreator_O*>(client);
    GC<core::InstanceCreator_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__StandardClassCreator_O:
{
     // stamp value 95
    core::StandardClassCreator_O* obj_gc_safe = reinterpret_cast<core::StandardClassCreator_O*>(client);
    GC<core::StandardClassCreator_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__SpecialForm_O:
{
     // stamp value 99
    core::SpecialForm_O* obj_gc_safe = reinterpret_cast<core::SpecialForm_O*>(client);
    GC<core::SpecialForm_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__Closure_O:
{
     // stamp value 103
    core::Closure_O* obj_gc_safe = reinterpret_cast<core::Closure_O*>(client);
    GC<core::Closure_O>::deallocate_unmanaged_instance(obj_gc_safe);
}
obj_deallocate_unmanaged_instance_STAMP_core__ClosureWithSlots_O:
{
     // stamp value 107
    core::ClosureWithSlots_O* obj_gc_safe = reinterpret_cast<core::ClosureWithSlots_O*>(client);
    GC<core::ClosureWithSlots_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__SingleDispatchCxxEffectiveMethodFunction_O:
{
     // stamp value 111
    core::SingleDispatchCxxEffectiveMethodFunction_O* obj_gc_safe = reinterpret_cast<core::SingleDispatchCxxEffectiveMethodFunction_O*>(client);
    GC<core::SingleDispatchCxxEffectiveMethodFunction_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__SingleDispatchMethodFunction_O:
{
     // stamp value 115
    core::SingleDispatchMethodFunction_O* obj_gc_safe = reinterpret_cast<core::SingleDispatchMethodFunction_O*>(client);
    GC<core::SingleDispatchMethodFunction_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__CxxMethodFunction_O:
{
     // stamp value 119
    core::CxxMethodFunction_O* obj_gc_safe = reinterpret_cast<core::CxxMethodFunction_O*>(client);
    GC<core::CxxMethodFunction_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__BuiltinClosure_O:
{
     // stamp value 123
    core::BuiltinClosure_O* obj_gc_safe = reinterpret_cast<core::BuiltinClosure_O*>(client);
    GC<core::BuiltinClosure_O>::deallocate_unmanaged_instance(obj_gc_safe);
}
obj_deallocate_unmanaged_instance_STAMP_core__TranslationFunctor_O:
{
     // stamp value 127
    core::TranslationFunctor_O* obj_gc_safe = reinterpret_cast<core::TranslationFunctor_O*>(client);
    GC<core::TranslationFunctor_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__SingleDispatchGenericFunctionClosure_O:
{
     // stamp value 131
    core::SingleDispatchGenericFunctionClosure_O* obj_gc_safe = reinterpret_cast<core::SingleDispatchGenericFunctionClosure_O*>(client);
    GC<core::SingleDispatchGenericFunctionClosure_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__SingleDispatchEffectiveMethodFunction_O:
{
     // stamp value 135
    core::SingleDispatchEffectiveMethodFunction_O* obj_gc_safe = reinterpret_cast<core::SingleDispatchEffectiveMethodFunction_O*>(client);
    GC<core::SingleDispatchEffectiveMethodFunction_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__WeakPointer_O:
{
     // stamp value 139
    core::WeakPointer_O* obj_gc_safe = reinterpret_cast<core::WeakPointer_O*>(client);
    GC<core::WeakPointer_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__DebugLoc_O:
{
     // stamp value 143
    llvmo::DebugLoc_O* obj_gc_safe = reinterpret_cast<llvmo::DebugLoc_O*>(client);
    GC<llvmo::DebugLoc_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__Pointer_O:
{
     // stamp value 147
    core::Pointer_O* obj_gc_safe = reinterpret_cast<core::Pointer_O*>(client);
    GC<core::Pointer_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_clasp_ffi__ForeignData_O:
{
     // stamp value 151
    clasp_ffi::ForeignData_O* obj_gc_safe = reinterpret_cast<clasp_ffi::ForeignData_O*>(client);
    GC<clasp_ffi::ForeignData_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__CxxObject_O:
{
     // stamp value 155
    core::CxxObject_O* obj_gc_safe = reinterpret_cast<core::CxxObject_O*>(client);
    GC<core::CxxObject_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__NativeVector_float_O:
{
     // stamp value 159
    core::NativeVector_float_O* obj_gc_safe = reinterpret_cast<core::NativeVector_float_O*>(client);
    GC<core::NativeVector_float_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__MDBuilder_O:
{
     // stamp value 163
    llvmo::MDBuilder_O* obj_gc_safe = reinterpret_cast<llvmo::MDBuilder_O*>(client);
    GC<llvmo::MDBuilder_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_mp__ConditionVariable_O:
{
     // stamp value 167
    mp::ConditionVariable_O* obj_gc_safe = reinterpret_cast<mp::ConditionVariable_O*>(client);
    GC<mp::ConditionVariable_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__NativeVector_double_O:
{
     // stamp value 171
    core::NativeVector_double_O* obj_gc_safe = reinterpret_cast<core::NativeVector_double_O*>(client);
    GC<core::NativeVector_double_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__NativeVector_int_O:
{
     // stamp value 175
    core::NativeVector_int_O* obj_gc_safe = reinterpret_cast<core::NativeVector_int_O*>(client);
    GC<core::NativeVector_int_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__FunctionCallee_O:
{
     // stamp value 179
    llvmo::FunctionCallee_O* obj_gc_safe = reinterpret_cast<llvmo::FunctionCallee_O*>(client);
    GC<llvmo::FunctionCallee_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__Serializer_O:
{
     // stamp value 183
    core::Serializer_O* obj_gc_safe = reinterpret_cast<core::Serializer_O*>(client);
    GC<core::Serializer_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__DINodeArray_O:
{
     // stamp value 187
    llvmo::DINodeArray_O* obj_gc_safe = reinterpret_cast<llvmo::DINodeArray_O*>(client);
    GC<llvmo::DINodeArray_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_mp__Mutex_O:
{
     // stamp value 191
    mp::Mutex_O* obj_gc_safe = reinterpret_cast<mp::Mutex_O*>(client);
    GC<mp::Mutex_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_mp__RecursiveMutex_O:
{
     // stamp value 195
    mp::RecursiveMutex_O* obj_gc_safe = reinterpret_cast<mp::RecursiveMutex_O*>(client);
    GC<mp::RecursiveMutex_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__DITypeRefArray_O:
{
     // stamp value 199
    llvmo::DITypeRefArray_O* obj_gc_safe = reinterpret_cast<llvmo::DITypeRefArray_O*>(client);
    GC<llvmo::DITypeRefArray_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_mp__SharedMutex_O:
{
     // stamp value 203
    mp::SharedMutex_O* obj_gc_safe = reinterpret_cast<mp::SharedMutex_O*>(client);
    GC<mp::SharedMutex_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_mp__Process_O:
{
     // stamp value 207
    mp::Process_O* obj_gc_safe = reinterpret_cast<mp::Process_O*>(client);
    GC<mp::Process_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__SingleDispatchMethod_O:
{
     // stamp value 211
    core::SingleDispatchMethod_O* obj_gc_safe = reinterpret_cast<core::SingleDispatchMethod_O*>(client);
    GC<core::SingleDispatchMethod_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__Iterator_O:
{
     // stamp value 215
    core::Iterator_O* obj_gc_safe = reinterpret_cast<core::Iterator_O*>(client);
    GC<core::Iterator_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__DirectoryIterator_O:
{
     // stamp value 219
    core::DirectoryIterator_O* obj_gc_safe = reinterpret_cast<core::DirectoryIterator_O*>(client);
    GC<core::DirectoryIterator_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__RecursiveDirectoryIterator_O:
{
     // stamp value 223
    core::RecursiveDirectoryIterator_O* obj_gc_safe = reinterpret_cast<core::RecursiveDirectoryIterator_O*>(client);
    GC<core::RecursiveDirectoryIterator_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__Array_O:
{
     // stamp value 227
    core::Array_O* obj_gc_safe = reinterpret_cast<core::Array_O*>(client);
    GC<core::Array_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__MDArray_O:
{
     // stamp value 231
    core::MDArray_O* obj_gc_safe = reinterpret_cast<core::MDArray_O*>(client);
    GC<core::MDArray_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__template_Array_core__MDArray_int16_t_O_core__SimpleMDArray_int16_t_O_core__SimpleVector_int16_t_O_core__MDArray_O_:
{
     // do nothing stamp value 235
    THROW_HARD_ERROR(BF("Should never deallocate object core::template_Array<core::MDArray_int16_t_O,core::SimpleMDArray_int16_t_O,core::SimpleVector_int16_t_O,core::MDArray_O>"));
}
obj_deallocate_unmanaged_instance_STAMP_core__MDArray_int16_t_O:
{
     // stamp value 239
    core::MDArray_int16_t_O* obj_gc_safe = reinterpret_cast<core::MDArray_int16_t_O*>(client);
    GC<core::MDArray_int16_t_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__template_Array_core__MDArray_int8_t_O_core__SimpleMDArray_int8_t_O_core__SimpleVector_int8_t_O_core__MDArray_O_:
{
     // do nothing stamp value 243
    THROW_HARD_ERROR(BF("Should never deallocate object core::template_Array<core::MDArray_int8_t_O,core::SimpleMDArray_int8_t_O,core::SimpleVector_int8_t_O,core::MDArray_O>"));
}
obj_deallocate_unmanaged_instance_STAMP_core__MDArray_int8_t_O:
{
     // stamp value 247
    core::MDArray_int8_t_O* obj_gc_safe = reinterpret_cast<core::MDArray_int8_t_O*>(client);
    GC<core::MDArray_int8_t_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__template_Array_core__MDArray_int32_t_O_core__SimpleMDArray_int32_t_O_core__SimpleVector_int32_t_O_core__MDArray_O_:
{
     // do nothing stamp value 251
    THROW_HARD_ERROR(BF("Should never deallocate object core::template_Array<core::MDArray_int32_t_O,core::SimpleMDArray_int32_t_O,core::SimpleVector_int32_t_O,core::MDArray_O>"));
}
obj_deallocate_unmanaged_instance_STAMP_core__MDArray_int32_t_O:
{
     // stamp value 255
    core::MDArray_int32_t_O* obj_gc_safe = reinterpret_cast<core::MDArray_int32_t_O*>(client);
    GC<core::MDArray_int32_t_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__template_Array_core__MDArray_byte4_t_O_core__SimpleMDArray_byte4_t_O_core__SimpleVector_byte4_t_O_core__MDArray_O_:
{
     // do nothing stamp value 259
    THROW_HARD_ERROR(BF("Should never deallocate object core::template_Array<core::MDArray_byte4_t_O,core::SimpleMDArray_byte4_t_O,core::SimpleVector_byte4_t_O,core::MDArray_O>"));
}
obj_deallocate_unmanaged_instance_STAMP_core__MDArray_byte4_t_O:
{
     // stamp value 263
    core::MDArray_byte4_t_O* obj_gc_safe = reinterpret_cast<core::MDArray_byte4_t_O*>(client);
    GC<core::MDArray_byte4_t_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__template_Array_core__MDArray_float_O_core__SimpleMDArray_float_O_core__SimpleVector_float_O_core__MDArray_O_:
{
     // do nothing stamp value 267
    THROW_HARD_ERROR(BF("Should never deallocate object core::template_Array<core::MDArray_float_O,core::SimpleMDArray_float_O,core::SimpleVector_float_O,core::MDArray_O>"));
}
obj_deallocate_unmanaged_instance_STAMP_core__MDArray_float_O:
{
     // stamp value 271
    core::MDArray_float_O* obj_gc_safe = reinterpret_cast<core::MDArray_float_O*>(client);
    GC<core::MDArray_float_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__template_Array_core__MDArray_size_t_O_core__SimpleMDArray_size_t_O_core__SimpleVector_size_t_O_core__MDArray_O_:
{
     // do nothing stamp value 275
    THROW_HARD_ERROR(BF("Should never deallocate object core::template_Array<core::MDArray_size_t_O,core::SimpleMDArray_size_t_O,core::SimpleVector_size_t_O,core::MDArray_O>"));
}
obj_deallocate_unmanaged_instance_STAMP_core__MDArray_size_t_O:
{
     // stamp value 279
    core::MDArray_size_t_O* obj_gc_safe = reinterpret_cast<core::MDArray_size_t_O*>(client);
    GC<core::MDArray_size_t_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__template_Array_core__MDArray_byte8_t_O_core__SimpleMDArray_byte8_t_O_core__SimpleVector_byte8_t_O_core__MDArray_O_:
{
     // do nothing stamp value 283
    THROW_HARD_ERROR(BF("Should never deallocate object core::template_Array<core::MDArray_byte8_t_O,core::SimpleMDArray_byte8_t_O,core::SimpleVector_byte8_t_O,core::MDArray_O>"));
}
obj_deallocate_unmanaged_instance_STAMP_core__MDArray_byte8_t_O:
{
     // stamp value 287
    core::MDArray_byte8_t_O* obj_gc_safe = reinterpret_cast<core::MDArray_byte8_t_O*>(client);
    GC<core::MDArray_byte8_t_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__template_Array_core__MDArray_int64_t_O_core__SimpleMDArray_int64_t_O_core__SimpleVector_int64_t_O_core__MDArray_O_:
{
     // do nothing stamp value 291
    THROW_HARD_ERROR(BF("Should never deallocate object core::template_Array<core::MDArray_int64_t_O,core::SimpleMDArray_int64_t_O,core::SimpleVector_int64_t_O,core::MDArray_O>"));
}
obj_deallocate_unmanaged_instance_STAMP_core__MDArray_int64_t_O:
{
     // stamp value 295
    core::MDArray_int64_t_O* obj_gc_safe = reinterpret_cast<core::MDArray_int64_t_O*>(client);
    GC<core::MDArray_int64_t_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__template_Array_core__MDArray_byte32_t_O_core__SimpleMDArray_byte32_t_O_core__SimpleVector_byte32_t_O_core__MDArray_O_:
{
     // do nothing stamp value 299
    THROW_HARD_ERROR(BF("Should never deallocate object core::template_Array<core::MDArray_byte32_t_O,core::SimpleMDArray_byte32_t_O,core::SimpleVector_byte32_t_O,core::MDArray_O>"));
}
obj_deallocate_unmanaged_instance_STAMP_core__MDArray_byte32_t_O:
{
     // stamp value 303
    core::MDArray_byte32_t_O* obj_gc_safe = reinterpret_cast<core::MDArray_byte32_t_O*>(client);
    GC<core::MDArray_byte32_t_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__template_Array_core__MDArray_byte2_t_O_core__SimpleMDArray_byte2_t_O_core__SimpleVector_byte2_t_O_core__MDArray_O_:
{
     // do nothing stamp value 307
    THROW_HARD_ERROR(BF("Should never deallocate object core::template_Array<core::MDArray_byte2_t_O,core::SimpleMDArray_byte2_t_O,core::SimpleVector_byte2_t_O,core::MDArray_O>"));
}
obj_deallocate_unmanaged_instance_STAMP_core__MDArray_byte2_t_O:
{
     // stamp value 311
    core::MDArray_byte2_t_O* obj_gc_safe = reinterpret_cast<core::MDArray_byte2_t_O*>(client);
    GC<core::MDArray_byte2_t_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__template_Array_core__MDArray_int2_t_O_core__SimpleMDArray_int2_t_O_core__SimpleVector_int2_t_O_core__MDArray_O_:
{
     // do nothing stamp value 315
    THROW_HARD_ERROR(BF("Should never deallocate object core::template_Array<core::MDArray_int2_t_O,core::SimpleMDArray_int2_t_O,core::SimpleVector_int2_t_O,core::MDArray_O>"));
}
obj_deallocate_unmanaged_instance_STAMP_core__MDArray_int2_t_O:
{
     // stamp value 319
    core::MDArray_int2_t_O* obj_gc_safe = reinterpret_cast<core::MDArray_int2_t_O*>(client);
    GC<core::MDArray_int2_t_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__template_Array_core__MDArray_fixnum_O_core__SimpleMDArray_fixnum_O_core__SimpleVector_fixnum_O_core__MDArray_O_:
{
     // do nothing stamp value 323
    THROW_HARD_ERROR(BF("Should never deallocate object core::template_Array<core::MDArray_fixnum_O,core::SimpleMDArray_fixnum_O,core::SimpleVector_fixnum_O,core::MDArray_O>"));
}
obj_deallocate_unmanaged_instance_STAMP_core__MDArray_fixnum_O:
{
     // stamp value 327
    core::MDArray_fixnum_O* obj_gc_safe = reinterpret_cast<core::MDArray_fixnum_O*>(client);
    GC<core::MDArray_fixnum_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__template_Array_core__MDArrayBaseChar_O_core__SimpleMDArrayBaseChar_O_core__SimpleBaseString_O_core__MDArray_O_:
{
     // do nothing stamp value 331
    THROW_HARD_ERROR(BF("Should never deallocate object core::template_Array<core::MDArrayBaseChar_O,core::SimpleMDArrayBaseChar_O,core::SimpleBaseString_O,core::MDArray_O>"));
}
obj_deallocate_unmanaged_instance_STAMP_core__MDArrayBaseChar_O:
{
     // stamp value 335
    core::MDArrayBaseChar_O* obj_gc_safe = reinterpret_cast<core::MDArrayBaseChar_O*>(client);
    GC<core::MDArrayBaseChar_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__template_Array_core__MDArray_byte64_t_O_core__SimpleMDArray_byte64_t_O_core__SimpleVector_byte64_t_O_core__MDArray_O_:
{
     // do nothing stamp value 339
    THROW_HARD_ERROR(BF("Should never deallocate object core::template_Array<core::MDArray_byte64_t_O,core::SimpleMDArray_byte64_t_O,core::SimpleVector_byte64_t_O,core::MDArray_O>"));
}
obj_deallocate_unmanaged_instance_STAMP_core__MDArray_byte64_t_O:
{
     // stamp value 343
    core::MDArray_byte64_t_O* obj_gc_safe = reinterpret_cast<core::MDArray_byte64_t_O*>(client);
    GC<core::MDArray_byte64_t_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__template_Array_core__MDArrayCharacter_O_core__SimpleMDArrayCharacter_O_core__SimpleCharacterString_O_core__MDArray_O_:
{
     // do nothing stamp value 347
    THROW_HARD_ERROR(BF("Should never deallocate object core::template_Array<core::MDArrayCharacter_O,core::SimpleMDArrayCharacter_O,core::SimpleCharacterString_O,core::MDArray_O>"));
}
obj_deallocate_unmanaged_instance_STAMP_core__MDArrayCharacter_O:
{
     // stamp value 351
    core::MDArrayCharacter_O* obj_gc_safe = reinterpret_cast<core::MDArrayCharacter_O*>(client);
    GC<core::MDArrayCharacter_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__template_Array_core__MDArrayT_O_core__SimpleMDArrayT_O_core__SimpleVector_O_core__MDArray_O_:
{
     // do nothing stamp value 355
    THROW_HARD_ERROR(BF("Should never deallocate object core::template_Array<core::MDArrayT_O,core::SimpleMDArrayT_O,core::SimpleVector_O,core::MDArray_O>"));
}
obj_deallocate_unmanaged_instance_STAMP_core__MDArrayT_O:
{
     // stamp value 359
    core::MDArrayT_O* obj_gc_safe = reinterpret_cast<core::MDArrayT_O*>(client);
    GC<core::MDArrayT_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__template_Array_core__MDArrayBit_O_core__SimpleMDArrayBit_O_core__SimpleBitVector_O_core__MDArray_O_:
{
     // do nothing stamp value 363
    THROW_HARD_ERROR(BF("Should never deallocate object core::template_Array<core::MDArrayBit_O,core::SimpleMDArrayBit_O,core::SimpleBitVector_O,core::MDArray_O>"));
}
obj_deallocate_unmanaged_instance_STAMP_core__MDArrayBit_O:
{
     // stamp value 367
    core::MDArrayBit_O* obj_gc_safe = reinterpret_cast<core::MDArrayBit_O*>(client);
    GC<core::MDArrayBit_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__template_Array_core__MDArray_byte16_t_O_core__SimpleMDArray_byte16_t_O_core__SimpleVector_byte16_t_O_core__MDArray_O_:
{
     // do nothing stamp value 371
    THROW_HARD_ERROR(BF("Should never deallocate object core::template_Array<core::MDArray_byte16_t_O,core::SimpleMDArray_byte16_t_O,core::SimpleVector_byte16_t_O,core::MDArray_O>"));
}
obj_deallocate_unmanaged_instance_STAMP_core__MDArray_byte16_t_O:
{
     // stamp value 375
    core::MDArray_byte16_t_O* obj_gc_safe = reinterpret_cast<core::MDArray_byte16_t_O*>(client);
    GC<core::MDArray_byte16_t_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__SimpleMDArray_O:
{
     // stamp value 379
    core::SimpleMDArray_O* obj_gc_safe = reinterpret_cast<core::SimpleMDArray_O*>(client);
    GC<core::SimpleMDArray_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleArray_core__SimpleMDArray_int8_t_O_core__SimpleVector_int8_t_O_core__SimpleMDArray_O_:
{
     // do nothing stamp value 383
    THROW_HARD_ERROR(BF("Should never deallocate object core::template_SimpleArray<core::SimpleMDArray_int8_t_O,core::SimpleVector_int8_t_O,core::SimpleMDArray_O>"));
}
obj_deallocate_unmanaged_instance_STAMP_core__SimpleMDArray_int8_t_O:
{
     // stamp value 387
    core::SimpleMDArray_int8_t_O* obj_gc_safe = reinterpret_cast<core::SimpleMDArray_int8_t_O*>(client);
    GC<core::SimpleMDArray_int8_t_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleArray_core__SimpleMDArray_double_O_core__SimpleVector_double_O_core__SimpleMDArray_O_:
{
     // do nothing stamp value 391
    THROW_HARD_ERROR(BF("Should never deallocate object core::template_SimpleArray<core::SimpleMDArray_double_O,core::SimpleVector_double_O,core::SimpleMDArray_O>"));
}
obj_deallocate_unmanaged_instance_STAMP_core__SimpleMDArray_double_O:
{
     // stamp value 395
    core::SimpleMDArray_double_O* obj_gc_safe = reinterpret_cast<core::SimpleMDArray_double_O*>(client);
    GC<core::SimpleMDArray_double_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleArray_core__SimpleMDArray_byte32_t_O_core__SimpleVector_byte32_t_O_core__SimpleMDArray_O_:
{
     // do nothing stamp value 399
    THROW_HARD_ERROR(BF("Should never deallocate object core::template_SimpleArray<core::SimpleMDArray_byte32_t_O,core::SimpleVector_byte32_t_O,core::SimpleMDArray_O>"));
}
obj_deallocate_unmanaged_instance_STAMP_core__SimpleMDArray_byte32_t_O:
{
     // stamp value 403
    core::SimpleMDArray_byte32_t_O* obj_gc_safe = reinterpret_cast<core::SimpleMDArray_byte32_t_O*>(client);
    GC<core::SimpleMDArray_byte32_t_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleArray_core__SimpleMDArrayT_O_core__SimpleVector_O_core__SimpleMDArray_O_:
{
     // do nothing stamp value 407
    THROW_HARD_ERROR(BF("Should never deallocate object core::template_SimpleArray<core::SimpleMDArrayT_O,core::SimpleVector_O,core::SimpleMDArray_O>"));
}
obj_deallocate_unmanaged_instance_STAMP_core__SimpleMDArrayT_O:
{
     // stamp value 411
    core::SimpleMDArrayT_O* obj_gc_safe = reinterpret_cast<core::SimpleMDArrayT_O*>(client);
    GC<core::SimpleMDArrayT_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleArray_core__SimpleMDArray_int2_t_O_core__SimpleVector_int2_t_O_core__SimpleMDArray_O_:
{
     // do nothing stamp value 415
    THROW_HARD_ERROR(BF("Should never deallocate object core::template_SimpleArray<core::SimpleMDArray_int2_t_O,core::SimpleVector_int2_t_O,core::SimpleMDArray_O>"));
}
obj_deallocate_unmanaged_instance_STAMP_core__SimpleMDArray_int2_t_O:
{
     // stamp value 419
    core::SimpleMDArray_int2_t_O* obj_gc_safe = reinterpret_cast<core::SimpleMDArray_int2_t_O*>(client);
    GC<core::SimpleMDArray_int2_t_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleArray_core__SimpleMDArray_byte4_t_O_core__SimpleVector_byte4_t_O_core__SimpleMDArray_O_:
{
     // do nothing stamp value 423
    THROW_HARD_ERROR(BF("Should never deallocate object core::template_SimpleArray<core::SimpleMDArray_byte4_t_O,core::SimpleVector_byte4_t_O,core::SimpleMDArray_O>"));
}
obj_deallocate_unmanaged_instance_STAMP_core__SimpleMDArray_byte4_t_O:
{
     // stamp value 427
    core::SimpleMDArray_byte4_t_O* obj_gc_safe = reinterpret_cast<core::SimpleMDArray_byte4_t_O*>(client);
    GC<core::SimpleMDArray_byte4_t_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleArray_core__SimpleMDArray_int32_t_O_core__SimpleVector_int32_t_O_core__SimpleMDArray_O_:
{
     // do nothing stamp value 431
    THROW_HARD_ERROR(BF("Should never deallocate object core::template_SimpleArray<core::SimpleMDArray_int32_t_O,core::SimpleVector_int32_t_O,core::SimpleMDArray_O>"));
}
obj_deallocate_unmanaged_instance_STAMP_core__SimpleMDArray_int32_t_O:
{
     // stamp value 435
    core::SimpleMDArray_int32_t_O* obj_gc_safe = reinterpret_cast<core::SimpleMDArray_int32_t_O*>(client);
    GC<core::SimpleMDArray_int32_t_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleArray_core__SimpleMDArray_float_O_core__SimpleVector_float_O_core__SimpleMDArray_O_:
{
     // do nothing stamp value 439
    THROW_HARD_ERROR(BF("Should never deallocate object core::template_SimpleArray<core::SimpleMDArray_float_O,core::SimpleVector_float_O,core::SimpleMDArray_O>"));
}
obj_deallocate_unmanaged_instance_STAMP_core__SimpleMDArray_float_O:
{
     // stamp value 443
    core::SimpleMDArray_float_O* obj_gc_safe = reinterpret_cast<core::SimpleMDArray_float_O*>(client);
    GC<core::SimpleMDArray_float_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleArray_core__SimpleMDArray_int16_t_O_core__SimpleVector_int16_t_O_core__SimpleMDArray_O_:
{
     // do nothing stamp value 447
    THROW_HARD_ERROR(BF("Should never deallocate object core::template_SimpleArray<core::SimpleMDArray_int16_t_O,core::SimpleVector_int16_t_O,core::SimpleMDArray_O>"));
}
obj_deallocate_unmanaged_instance_STAMP_core__SimpleMDArray_int16_t_O:
{
     // stamp value 451
    core::SimpleMDArray_int16_t_O* obj_gc_safe = reinterpret_cast<core::SimpleMDArray_int16_t_O*>(client);
    GC<core::SimpleMDArray_int16_t_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleArray_core__SimpleMDArray_size_t_O_core__SimpleVector_size_t_O_core__SimpleMDArray_O_:
{
     // do nothing stamp value 455
    THROW_HARD_ERROR(BF("Should never deallocate object core::template_SimpleArray<core::SimpleMDArray_size_t_O,core::SimpleVector_size_t_O,core::SimpleMDArray_O>"));
}
obj_deallocate_unmanaged_instance_STAMP_core__SimpleMDArray_size_t_O:
{
     // stamp value 459
    core::SimpleMDArray_size_t_O* obj_gc_safe = reinterpret_cast<core::SimpleMDArray_size_t_O*>(client);
    GC<core::SimpleMDArray_size_t_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleArray_core__SimpleMDArray_int4_t_O_core__SimpleVector_int4_t_O_core__SimpleMDArray_O_:
{
     // do nothing stamp value 463
    THROW_HARD_ERROR(BF("Should never deallocate object core::template_SimpleArray<core::SimpleMDArray_int4_t_O,core::SimpleVector_int4_t_O,core::SimpleMDArray_O>"));
}
obj_deallocate_unmanaged_instance_STAMP_core__SimpleMDArray_int4_t_O:
{
     // stamp value 467
    core::SimpleMDArray_int4_t_O* obj_gc_safe = reinterpret_cast<core::SimpleMDArray_int4_t_O*>(client);
    GC<core::SimpleMDArray_int4_t_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleArray_core__SimpleMDArrayCharacter_O_core__SimpleCharacterString_O_core__SimpleMDArray_O_:
{
     // do nothing stamp value 471
    THROW_HARD_ERROR(BF("Should never deallocate object core::template_SimpleArray<core::SimpleMDArrayCharacter_O,core::SimpleCharacterString_O,core::SimpleMDArray_O>"));
}
obj_deallocate_unmanaged_instance_STAMP_core__SimpleMDArrayCharacter_O:
{
     // stamp value 475
    core::SimpleMDArrayCharacter_O* obj_gc_safe = reinterpret_cast<core::SimpleMDArrayCharacter_O*>(client);
    GC<core::SimpleMDArrayCharacter_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleArray_core__SimpleMDArray_byte2_t_O_core__SimpleVector_byte2_t_O_core__SimpleMDArray_O_:
{
     // do nothing stamp value 479
    THROW_HARD_ERROR(BF("Should never deallocate object core::template_SimpleArray<core::SimpleMDArray_byte2_t_O,core::SimpleVector_byte2_t_O,core::SimpleMDArray_O>"));
}
obj_deallocate_unmanaged_instance_STAMP_core__SimpleMDArray_byte2_t_O:
{
     // stamp value 483
    core::SimpleMDArray_byte2_t_O* obj_gc_safe = reinterpret_cast<core::SimpleMDArray_byte2_t_O*>(client);
    GC<core::SimpleMDArray_byte2_t_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleArray_core__SimpleMDArray_fixnum_O_core__SimpleVector_fixnum_O_core__SimpleMDArray_O_:
{
     // do nothing stamp value 487
    THROW_HARD_ERROR(BF("Should never deallocate object core::template_SimpleArray<core::SimpleMDArray_fixnum_O,core::SimpleVector_fixnum_O,core::SimpleMDArray_O>"));
}
obj_deallocate_unmanaged_instance_STAMP_core__SimpleMDArray_fixnum_O:
{
     // stamp value 491
    core::SimpleMDArray_fixnum_O* obj_gc_safe = reinterpret_cast<core::SimpleMDArray_fixnum_O*>(client);
    GC<core::SimpleMDArray_fixnum_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleArray_core__SimpleMDArray_byte16_t_O_core__SimpleVector_byte16_t_O_core__SimpleMDArray_O_:
{
     // do nothing stamp value 495
    THROW_HARD_ERROR(BF("Should never deallocate object core::template_SimpleArray<core::SimpleMDArray_byte16_t_O,core::SimpleVector_byte16_t_O,core::SimpleMDArray_O>"));
}
obj_deallocate_unmanaged_instance_STAMP_core__SimpleMDArray_byte16_t_O:
{
     // stamp value 499
    core::SimpleMDArray_byte16_t_O* obj_gc_safe = reinterpret_cast<core::SimpleMDArray_byte16_t_O*>(client);
    GC<core::SimpleMDArray_byte16_t_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleArray_core__SimpleMDArrayBaseChar_O_core__SimpleBaseString_O_core__SimpleMDArray_O_:
{
     // do nothing stamp value 503
    THROW_HARD_ERROR(BF("Should never deallocate object core::template_SimpleArray<core::SimpleMDArrayBaseChar_O,core::SimpleBaseString_O,core::SimpleMDArray_O>"));
}
obj_deallocate_unmanaged_instance_STAMP_core__SimpleMDArrayBaseChar_O:
{
     // stamp value 507
    core::SimpleMDArrayBaseChar_O* obj_gc_safe = reinterpret_cast<core::SimpleMDArrayBaseChar_O*>(client);
    GC<core::SimpleMDArrayBaseChar_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleArray_core__SimpleMDArray_byte64_t_O_core__SimpleVector_byte64_t_O_core__SimpleMDArray_O_:
{
     // do nothing stamp value 511
    THROW_HARD_ERROR(BF("Should never deallocate object core::template_SimpleArray<core::SimpleMDArray_byte64_t_O,core::SimpleVector_byte64_t_O,core::SimpleMDArray_O>"));
}
obj_deallocate_unmanaged_instance_STAMP_core__SimpleMDArray_byte64_t_O:
{
     // stamp value 515
    core::SimpleMDArray_byte64_t_O* obj_gc_safe = reinterpret_cast<core::SimpleMDArray_byte64_t_O*>(client);
    GC<core::SimpleMDArray_byte64_t_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleArray_core__SimpleMDArrayBit_O_core__SimpleBitVector_O_core__SimpleMDArray_O_:
{
     // do nothing stamp value 519
    THROW_HARD_ERROR(BF("Should never deallocate object core::template_SimpleArray<core::SimpleMDArrayBit_O,core::SimpleBitVector_O,core::SimpleMDArray_O>"));
}
obj_deallocate_unmanaged_instance_STAMP_core__SimpleMDArrayBit_O:
{
     // stamp value 523
    core::SimpleMDArrayBit_O* obj_gc_safe = reinterpret_cast<core::SimpleMDArrayBit_O*>(client);
    GC<core::SimpleMDArrayBit_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleArray_core__SimpleMDArray_byte8_t_O_core__SimpleVector_byte8_t_O_core__SimpleMDArray_O_:
{
     // do nothing stamp value 527
    THROW_HARD_ERROR(BF("Should never deallocate object core::template_SimpleArray<core::SimpleMDArray_byte8_t_O,core::SimpleVector_byte8_t_O,core::SimpleMDArray_O>"));
}
obj_deallocate_unmanaged_instance_STAMP_core__SimpleMDArray_byte8_t_O:
{
     // stamp value 531
    core::SimpleMDArray_byte8_t_O* obj_gc_safe = reinterpret_cast<core::SimpleMDArray_byte8_t_O*>(client);
    GC<core::SimpleMDArray_byte8_t_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleArray_core__SimpleMDArray_int64_t_O_core__SimpleVector_int64_t_O_core__SimpleMDArray_O_:
{
     // do nothing stamp value 535
    THROW_HARD_ERROR(BF("Should never deallocate object core::template_SimpleArray<core::SimpleMDArray_int64_t_O,core::SimpleVector_int64_t_O,core::SimpleMDArray_O>"));
}
obj_deallocate_unmanaged_instance_STAMP_core__SimpleMDArray_int64_t_O:
{
     // stamp value 539
    core::SimpleMDArray_int64_t_O* obj_gc_safe = reinterpret_cast<core::SimpleMDArray_int64_t_O*>(client);
    GC<core::SimpleMDArray_int64_t_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__template_Array_core__MDArray_int4_t_O_core__SimpleMDArray_int4_t_O_core__SimpleVector_int4_t_O_core__MDArray_O_:
{
     // do nothing stamp value 543
    THROW_HARD_ERROR(BF("Should never deallocate object core::template_Array<core::MDArray_int4_t_O,core::SimpleMDArray_int4_t_O,core::SimpleVector_int4_t_O,core::MDArray_O>"));
}
obj_deallocate_unmanaged_instance_STAMP_core__MDArray_int4_t_O:
{
     // stamp value 547
    core::MDArray_int4_t_O* obj_gc_safe = reinterpret_cast<core::MDArray_int4_t_O*>(client);
    GC<core::MDArray_int4_t_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__template_Array_core__MDArray_double_O_core__SimpleMDArray_double_O_core__SimpleVector_double_O_core__MDArray_O_:
{
     // do nothing stamp value 551
    THROW_HARD_ERROR(BF("Should never deallocate object core::template_Array<core::MDArray_double_O,core::SimpleMDArray_double_O,core::SimpleVector_double_O,core::MDArray_O>"));
}
obj_deallocate_unmanaged_instance_STAMP_core__MDArray_double_O:
{
     // stamp value 555
    core::MDArray_double_O* obj_gc_safe = reinterpret_cast<core::MDArray_double_O*>(client);
    GC<core::MDArray_double_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__ComplexVector_O:
{
     // stamp value 559
    core::ComplexVector_O* obj_gc_safe = reinterpret_cast<core::ComplexVector_O*>(client);
    GC<core::ComplexVector_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__template_Vector_core__ComplexVector_double_O_core__SimpleVector_double_O_core__ComplexVector_O_:
{
     // do nothing stamp value 563
    THROW_HARD_ERROR(BF("Should never deallocate object core::template_Vector<core::ComplexVector_double_O,core::SimpleVector_double_O,core::ComplexVector_O>"));
}
obj_deallocate_unmanaged_instance_STAMP_core__ComplexVector_double_O:
{
     // stamp value 567
    core::ComplexVector_double_O* obj_gc_safe = reinterpret_cast<core::ComplexVector_double_O*>(client);
    GC<core::ComplexVector_double_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__template_Vector_core__ComplexVector_int8_t_O_core__SimpleVector_int8_t_O_core__ComplexVector_O_:
{
     // do nothing stamp value 571
    THROW_HARD_ERROR(BF("Should never deallocate object core::template_Vector<core::ComplexVector_int8_t_O,core::SimpleVector_int8_t_O,core::ComplexVector_O>"));
}
obj_deallocate_unmanaged_instance_STAMP_core__ComplexVector_int8_t_O:
{
     // stamp value 575
    core::ComplexVector_int8_t_O* obj_gc_safe = reinterpret_cast<core::ComplexVector_int8_t_O*>(client);
    GC<core::ComplexVector_int8_t_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__template_Vector_core__ComplexVector_byte64_t_O_core__SimpleVector_byte64_t_O_core__ComplexVector_O_:
{
     // do nothing stamp value 579
    THROW_HARD_ERROR(BF("Should never deallocate object core::template_Vector<core::ComplexVector_byte64_t_O,core::SimpleVector_byte64_t_O,core::ComplexVector_O>"));
}
obj_deallocate_unmanaged_instance_STAMP_core__ComplexVector_byte64_t_O:
{
     // stamp value 583
    core::ComplexVector_byte64_t_O* obj_gc_safe = reinterpret_cast<core::ComplexVector_byte64_t_O*>(client);
    GC<core::ComplexVector_byte64_t_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__template_Vector_core__ComplexVector_T_O_core__SimpleVector_O_core__ComplexVector_O_:
{
     // do nothing stamp value 587
    THROW_HARD_ERROR(BF("Should never deallocate object core::template_Vector<core::ComplexVector_T_O,core::SimpleVector_O,core::ComplexVector_O>"));
}
obj_deallocate_unmanaged_instance_STAMP_core__ComplexVector_T_O:
{
     // stamp value 591
    core::ComplexVector_T_O* obj_gc_safe = reinterpret_cast<core::ComplexVector_T_O*>(client);
    GC<core::ComplexVector_T_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__template_Vector_core__ComplexVector_int2_t_O_core__SimpleVector_int2_t_O_core__ComplexVector_O_:
{
     // do nothing stamp value 595
    THROW_HARD_ERROR(BF("Should never deallocate object core::template_Vector<core::ComplexVector_int2_t_O,core::SimpleVector_int2_t_O,core::ComplexVector_O>"));
}
obj_deallocate_unmanaged_instance_STAMP_core__ComplexVector_int2_t_O:
{
     // stamp value 599
    core::ComplexVector_int2_t_O* obj_gc_safe = reinterpret_cast<core::ComplexVector_int2_t_O*>(client);
    GC<core::ComplexVector_int2_t_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__template_Vector_core__ComplexVector_int32_t_O_core__SimpleVector_int32_t_O_core__ComplexVector_O_:
{
     // do nothing stamp value 603
    THROW_HARD_ERROR(BF("Should never deallocate object core::template_Vector<core::ComplexVector_int32_t_O,core::SimpleVector_int32_t_O,core::ComplexVector_O>"));
}
obj_deallocate_unmanaged_instance_STAMP_core__ComplexVector_int32_t_O:
{
     // stamp value 607
    core::ComplexVector_int32_t_O* obj_gc_safe = reinterpret_cast<core::ComplexVector_int32_t_O*>(client);
    GC<core::ComplexVector_int32_t_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__template_Vector_core__ComplexVector_byte16_t_O_core__SimpleVector_byte16_t_O_core__ComplexVector_O_:
{
     // do nothing stamp value 611
    THROW_HARD_ERROR(BF("Should never deallocate object core::template_Vector<core::ComplexVector_byte16_t_O,core::SimpleVector_byte16_t_O,core::ComplexVector_O>"));
}
obj_deallocate_unmanaged_instance_STAMP_core__ComplexVector_byte16_t_O:
{
     // stamp value 615
    core::ComplexVector_byte16_t_O* obj_gc_safe = reinterpret_cast<core::ComplexVector_byte16_t_O*>(client);
    GC<core::ComplexVector_byte16_t_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__template_Vector_core__ComplexVector_float_O_core__SimpleVector_float_O_core__ComplexVector_O_:
{
     // do nothing stamp value 619
    THROW_HARD_ERROR(BF("Should never deallocate object core::template_Vector<core::ComplexVector_float_O,core::SimpleVector_float_O,core::ComplexVector_O>"));
}
obj_deallocate_unmanaged_instance_STAMP_core__ComplexVector_float_O:
{
     // stamp value 623
    core::ComplexVector_float_O* obj_gc_safe = reinterpret_cast<core::ComplexVector_float_O*>(client);
    GC<core::ComplexVector_float_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__template_Vector_core__ComplexVector_int16_t_O_core__SimpleVector_int16_t_O_core__ComplexVector_O_:
{
     // do nothing stamp value 627
    THROW_HARD_ERROR(BF("Should never deallocate object core::template_Vector<core::ComplexVector_int16_t_O,core::SimpleVector_int16_t_O,core::ComplexVector_O>"));
}
obj_deallocate_unmanaged_instance_STAMP_core__ComplexVector_int16_t_O:
{
     // stamp value 631
    core::ComplexVector_int16_t_O* obj_gc_safe = reinterpret_cast<core::ComplexVector_int16_t_O*>(client);
    GC<core::ComplexVector_int16_t_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__template_Vector_core__ComplexVector_int4_t_O_core__SimpleVector_int4_t_O_core__ComplexVector_O_:
{
     // do nothing stamp value 635
    THROW_HARD_ERROR(BF("Should never deallocate object core::template_Vector<core::ComplexVector_int4_t_O,core::SimpleVector_int4_t_O,core::ComplexVector_O>"));
}
obj_deallocate_unmanaged_instance_STAMP_core__ComplexVector_int4_t_O:
{
     // stamp value 639
    core::ComplexVector_int4_t_O* obj_gc_safe = reinterpret_cast<core::ComplexVector_int4_t_O*>(client);
    GC<core::ComplexVector_int4_t_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__template_Vector_core__ComplexVector_size_t_O_core__SimpleVector_size_t_O_core__ComplexVector_O_:
{
     // do nothing stamp value 643
    THROW_HARD_ERROR(BF("Should never deallocate object core::template_Vector<core::ComplexVector_size_t_O,core::SimpleVector_size_t_O,core::ComplexVector_O>"));
}
obj_deallocate_unmanaged_instance_STAMP_core__ComplexVector_size_t_O:
{
     // stamp value 647
    core::ComplexVector_size_t_O* obj_gc_safe = reinterpret_cast<core::ComplexVector_size_t_O*>(client);
    GC<core::ComplexVector_size_t_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__template_Vector_core__ComplexVector_byte2_t_O_core__SimpleVector_byte2_t_O_core__ComplexVector_O_:
{
     // do nothing stamp value 651
    THROW_HARD_ERROR(BF("Should never deallocate object core::template_Vector<core::ComplexVector_byte2_t_O,core::SimpleVector_byte2_t_O,core::ComplexVector_O>"));
}
obj_deallocate_unmanaged_instance_STAMP_core__ComplexVector_byte2_t_O:
{
     // stamp value 655
    core::ComplexVector_byte2_t_O* obj_gc_safe = reinterpret_cast<core::ComplexVector_byte2_t_O*>(client);
    GC<core::ComplexVector_byte2_t_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__template_Vector_core__ComplexVector_byte8_t_O_core__SimpleVector_byte8_t_O_core__ComplexVector_O_:
{
     // do nothing stamp value 659
    THROW_HARD_ERROR(BF("Should never deallocate object core::template_Vector<core::ComplexVector_byte8_t_O,core::SimpleVector_byte8_t_O,core::ComplexVector_O>"));
}
obj_deallocate_unmanaged_instance_STAMP_core__ComplexVector_byte8_t_O:
{
     // stamp value 663
    core::ComplexVector_byte8_t_O* obj_gc_safe = reinterpret_cast<core::ComplexVector_byte8_t_O*>(client);
    GC<core::ComplexVector_byte8_t_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__template_Vector_core__ComplexVector_byte32_t_O_core__SimpleVector_byte32_t_O_core__ComplexVector_O_:
{
     // do nothing stamp value 667
    THROW_HARD_ERROR(BF("Should never deallocate object core::template_Vector<core::ComplexVector_byte32_t_O,core::SimpleVector_byte32_t_O,core::ComplexVector_O>"));
}
obj_deallocate_unmanaged_instance_STAMP_core__ComplexVector_byte32_t_O:
{
     // stamp value 671
    core::ComplexVector_byte32_t_O* obj_gc_safe = reinterpret_cast<core::ComplexVector_byte32_t_O*>(client);
    GC<core::ComplexVector_byte32_t_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__template_Vector_core__BitVectorNs_O_core__SimpleBitVector_O_core__ComplexVector_O_:
{
     // do nothing stamp value 675
    THROW_HARD_ERROR(BF("Should never deallocate object core::template_Vector<core::BitVectorNs_O,core::SimpleBitVector_O,core::ComplexVector_O>"));
}
obj_deallocate_unmanaged_instance_STAMP_core__BitVectorNs_O:
{
     // stamp value 679
    core::BitVectorNs_O* obj_gc_safe = reinterpret_cast<core::BitVectorNs_O*>(client);
    GC<core::BitVectorNs_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__StrNs_O:
{
     // stamp value 683
    core::StrNs_O* obj_gc_safe = reinterpret_cast<core::StrNs_O*>(client);
    GC<core::StrNs_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__template_Vector_core__Str8Ns_O_core__SimpleBaseString_O_core__StrNs_O_:
{
     // do nothing stamp value 687
    THROW_HARD_ERROR(BF("Should never deallocate object core::template_Vector<core::Str8Ns_O,core::SimpleBaseString_O,core::StrNs_O>"));
}
obj_deallocate_unmanaged_instance_STAMP_core__Str8Ns_O:
{
     // stamp value 691
    core::Str8Ns_O* obj_gc_safe = reinterpret_cast<core::Str8Ns_O*>(client);
    GC<core::Str8Ns_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__template_Vector_core__StrWNs_O_core__SimpleCharacterString_O_core__StrNs_O_:
{
     // do nothing stamp value 695
    THROW_HARD_ERROR(BF("Should never deallocate object core::template_Vector<core::StrWNs_O,core::SimpleCharacterString_O,core::StrNs_O>"));
}
obj_deallocate_unmanaged_instance_STAMP_core__StrWNs_O:
{
     // stamp value 699
    core::StrWNs_O* obj_gc_safe = reinterpret_cast<core::StrWNs_O*>(client);
    GC<core::StrWNs_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__template_Vector_core__ComplexVector_byte4_t_O_core__SimpleVector_byte4_t_O_core__ComplexVector_O_:
{
     // do nothing stamp value 703
    THROW_HARD_ERROR(BF("Should never deallocate object core::template_Vector<core::ComplexVector_byte4_t_O,core::SimpleVector_byte4_t_O,core::ComplexVector_O>"));
}
obj_deallocate_unmanaged_instance_STAMP_core__ComplexVector_byte4_t_O:
{
     // stamp value 707
    core::ComplexVector_byte4_t_O* obj_gc_safe = reinterpret_cast<core::ComplexVector_byte4_t_O*>(client);
    GC<core::ComplexVector_byte4_t_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__template_Vector_core__ComplexVector_fixnum_O_core__SimpleVector_fixnum_O_core__ComplexVector_O_:
{
     // do nothing stamp value 711
    THROW_HARD_ERROR(BF("Should never deallocate object core::template_Vector<core::ComplexVector_fixnum_O,core::SimpleVector_fixnum_O,core::ComplexVector_O>"));
}
obj_deallocate_unmanaged_instance_STAMP_core__ComplexVector_fixnum_O:
{
     // stamp value 715
    core::ComplexVector_fixnum_O* obj_gc_safe = reinterpret_cast<core::ComplexVector_fixnum_O*>(client);
    GC<core::ComplexVector_fixnum_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__template_Vector_core__ComplexVector_int64_t_O_core__SimpleVector_int64_t_O_core__ComplexVector_O_:
{
     // do nothing stamp value 719
    THROW_HARD_ERROR(BF("Should never deallocate object core::template_Vector<core::ComplexVector_int64_t_O,core::SimpleVector_int64_t_O,core::ComplexVector_O>"));
}
obj_deallocate_unmanaged_instance_STAMP_core__ComplexVector_int64_t_O:
{
     // stamp value 723
    core::ComplexVector_int64_t_O* obj_gc_safe = reinterpret_cast<core::ComplexVector_int64_t_O*>(client);
    GC<core::ComplexVector_int64_t_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__AbstractSimpleVector_O:
{
     // stamp value 727
    core::AbstractSimpleVector_O* obj_gc_safe = reinterpret_cast<core::AbstractSimpleVector_O*>(client);
    GC<core::AbstractSimpleVector_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__SimpleString_O:
{
     // stamp value 731
    core::SimpleString_O* obj_gc_safe = reinterpret_cast<core::SimpleString_O*>(client);
    GC<core::SimpleString_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleVector_core__SimpleCharacterString_O_int_core__SimpleString_O_:
{
     // do nothing stamp value 735
    THROW_HARD_ERROR(BF("Should never deallocate object core::template_SimpleVector<core::SimpleCharacterString_O,int,core::SimpleString_O>"));
}
obj_deallocate_unmanaged_instance_STAMP_core__SimpleCharacterString_O:
{
     // stamp value 739
    core::SimpleCharacterString_O* obj_gc_safe = reinterpret_cast<core::SimpleCharacterString_O*>(client);
    GC<core::SimpleCharacterString_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleVector_core__SimpleBaseString_O_unsigned_char_core__SimpleString_O_:
{
     // do nothing stamp value 743
    THROW_HARD_ERROR(BF("Should never deallocate object core::template_SimpleVector<core::SimpleBaseString_O,unsigned char,core::SimpleString_O>"));
}
obj_deallocate_unmanaged_instance_STAMP_core__SimpleBaseString_O:
{
     // stamp value 747
    core::SimpleBaseString_O* obj_gc_safe = reinterpret_cast<core::SimpleBaseString_O*>(client);
    GC<core::SimpleBaseString_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleVector_core__SimpleVector_int16_t_O_short_core__AbstractSimpleVector_O_:
{
     // do nothing stamp value 751
    THROW_HARD_ERROR(BF("Should never deallocate object core::template_SimpleVector<core::SimpleVector_int16_t_O,short,core::AbstractSimpleVector_O>"));
}
obj_deallocate_unmanaged_instance_STAMP_core__SimpleVector_int16_t_O:
{
     // stamp value 755
    core::SimpleVector_int16_t_O* obj_gc_safe = reinterpret_cast<core::SimpleVector_int16_t_O*>(client);
    GC<core::SimpleVector_int16_t_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleVector_core__SimpleVector_byte16_t_O_unsigned_short_core__AbstractSimpleVector_O_:
{
     // do nothing stamp value 759
    THROW_HARD_ERROR(BF("Should never deallocate object core::template_SimpleVector<core::SimpleVector_byte16_t_O,unsigned short,core::AbstractSimpleVector_O>"));
}
obj_deallocate_unmanaged_instance_STAMP_core__SimpleVector_byte16_t_O:
{
     // stamp value 763
    core::SimpleVector_byte16_t_O* obj_gc_safe = reinterpret_cast<core::SimpleVector_byte16_t_O*>(client);
    GC<core::SimpleVector_byte16_t_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleBitUnitVector_core__SimpleBitVector_O_1_0_:
{
     // do nothing stamp value 767
    THROW_HARD_ERROR(BF("Should never deallocate object core::template_SimpleBitUnitVector<core::SimpleBitVector_O,1,0>"));
}
obj_deallocate_unmanaged_instance_STAMP_core__SimpleBitVector_O:
{
     // stamp value 771
    core::SimpleBitVector_O* obj_gc_safe = reinterpret_cast<core::SimpleBitVector_O*>(client);
    GC<core::SimpleBitVector_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleBitUnitVector_core__SimpleVector_int4_t_O_4_1_:
{
     // do nothing stamp value 775
    THROW_HARD_ERROR(BF("Should never deallocate object core::template_SimpleBitUnitVector<core::SimpleVector_int4_t_O,4,1>"));
}
obj_deallocate_unmanaged_instance_STAMP_core__SimpleVector_int4_t_O:
{
     // stamp value 779
    core::SimpleVector_int4_t_O* obj_gc_safe = reinterpret_cast<core::SimpleVector_int4_t_O*>(client);
    GC<core::SimpleVector_int4_t_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleVector_core__SimpleVector_byte32_t_O_unsigned_int_core__AbstractSimpleVector_O_:
{
     // do nothing stamp value 783
    THROW_HARD_ERROR(BF("Should never deallocate object core::template_SimpleVector<core::SimpleVector_byte32_t_O,unsigned int,core::AbstractSimpleVector_O>"));
}
obj_deallocate_unmanaged_instance_STAMP_core__SimpleVector_byte32_t_O:
{
     // stamp value 787
    core::SimpleVector_byte32_t_O* obj_gc_safe = reinterpret_cast<core::SimpleVector_byte32_t_O*>(client);
    GC<core::SimpleVector_byte32_t_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleVector_core__SimpleVector_size_t_O_unsigned_long_core__AbstractSimpleVector_O_:
{
     // do nothing stamp value 791
    THROW_HARD_ERROR(BF("Should never deallocate object core::template_SimpleVector<core::SimpleVector_size_t_O,unsigned long,core::AbstractSimpleVector_O>"));
}
obj_deallocate_unmanaged_instance_STAMP_core__SimpleVector_size_t_O:
{
     // stamp value 795
    core::SimpleVector_size_t_O* obj_gc_safe = reinterpret_cast<core::SimpleVector_size_t_O*>(client);
    GC<core::SimpleVector_size_t_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleVector_core__SimpleVector_double_O_double_core__AbstractSimpleVector_O_:
{
     // do nothing stamp value 799
    THROW_HARD_ERROR(BF("Should never deallocate object core::template_SimpleVector<core::SimpleVector_double_O,double,core::AbstractSimpleVector_O>"));
}
obj_deallocate_unmanaged_instance_STAMP_core__SimpleVector_double_O:
{
     // stamp value 803
    core::SimpleVector_double_O* obj_gc_safe = reinterpret_cast<core::SimpleVector_double_O*>(client);
    GC<core::SimpleVector_double_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleVector_core__SimpleVector_byte64_t_O_unsigned_long_core__AbstractSimpleVector_O_:
{
     // do nothing stamp value 807
    THROW_HARD_ERROR(BF("Should never deallocate object core::template_SimpleVector<core::SimpleVector_byte64_t_O,unsigned long,core::AbstractSimpleVector_O>"));
}
obj_deallocate_unmanaged_instance_STAMP_core__SimpleVector_byte64_t_O:
{
     // stamp value 811
    core::SimpleVector_byte64_t_O* obj_gc_safe = reinterpret_cast<core::SimpleVector_byte64_t_O*>(client);
    GC<core::SimpleVector_byte64_t_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleBitUnitVector_core__SimpleVector_int2_t_O_2_1_:
{
     // do nothing stamp value 815
    THROW_HARD_ERROR(BF("Should never deallocate object core::template_SimpleBitUnitVector<core::SimpleVector_int2_t_O,2,1>"));
}
obj_deallocate_unmanaged_instance_STAMP_core__SimpleVector_int2_t_O:
{
     // stamp value 819
    core::SimpleVector_int2_t_O* obj_gc_safe = reinterpret_cast<core::SimpleVector_int2_t_O*>(client);
    GC<core::SimpleVector_int2_t_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleVector_core__SimpleVector_int64_t_O_long_core__AbstractSimpleVector_O_:
{
     // do nothing stamp value 823
    THROW_HARD_ERROR(BF("Should never deallocate object core::template_SimpleVector<core::SimpleVector_int64_t_O,long,core::AbstractSimpleVector_O>"));
}
obj_deallocate_unmanaged_instance_STAMP_core__SimpleVector_int64_t_O:
{
     // stamp value 827
    core::SimpleVector_int64_t_O* obj_gc_safe = reinterpret_cast<core::SimpleVector_int64_t_O*>(client);
    GC<core::SimpleVector_int64_t_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleVector_core__SimpleVector_fixnum_O_long_core__AbstractSimpleVector_O_:
{
     // do nothing stamp value 831
    THROW_HARD_ERROR(BF("Should never deallocate object core::template_SimpleVector<core::SimpleVector_fixnum_O,long,core::AbstractSimpleVector_O>"));
}
obj_deallocate_unmanaged_instance_STAMP_core__SimpleVector_fixnum_O:
{
     // stamp value 835
    core::SimpleVector_fixnum_O* obj_gc_safe = reinterpret_cast<core::SimpleVector_fixnum_O*>(client);
    GC<core::SimpleVector_fixnum_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleVector_core__SimpleVector_int8_t_O_signed_char_core__AbstractSimpleVector_O_:
{
     // do nothing stamp value 839
    THROW_HARD_ERROR(BF("Should never deallocate object core::template_SimpleVector<core::SimpleVector_int8_t_O,signed char,core::AbstractSimpleVector_O>"));
}
obj_deallocate_unmanaged_instance_STAMP_core__SimpleVector_int8_t_O:
{
     // stamp value 843
    core::SimpleVector_int8_t_O* obj_gc_safe = reinterpret_cast<core::SimpleVector_int8_t_O*>(client);
    GC<core::SimpleVector_int8_t_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleVector_core__SimpleVector_float_O_float_core__AbstractSimpleVector_O_:
{
     // do nothing stamp value 847
    THROW_HARD_ERROR(BF("Should never deallocate object core::template_SimpleVector<core::SimpleVector_float_O,float,core::AbstractSimpleVector_O>"));
}
obj_deallocate_unmanaged_instance_STAMP_core__SimpleVector_float_O:
{
     // stamp value 851
    core::SimpleVector_float_O* obj_gc_safe = reinterpret_cast<core::SimpleVector_float_O*>(client);
    GC<core::SimpleVector_float_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleVector_core__SimpleVector_O_gctools__smart_ptr_core__T_O__core__AbstractSimpleVector_O_:
{
     // do nothing stamp value 855
    THROW_HARD_ERROR(BF("Should never deallocate object core::template_SimpleVector<core::SimpleVector_O,gctools::smart_ptr<core::T_O>,core::AbstractSimpleVector_O>"));
}
obj_deallocate_unmanaged_instance_STAMP_core__SimpleVector_O:
{
     // stamp value 859
    core::SimpleVector_O* obj_gc_safe = reinterpret_cast<core::SimpleVector_O*>(client);
    GC<core::SimpleVector_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleVector_core__SimpleVector_byte8_t_O_unsigned_char_core__AbstractSimpleVector_O_:
{
     // do nothing stamp value 863
    THROW_HARD_ERROR(BF("Should never deallocate object core::template_SimpleVector<core::SimpleVector_byte8_t_O,unsigned char,core::AbstractSimpleVector_O>"));
}
obj_deallocate_unmanaged_instance_STAMP_core__SimpleVector_byte8_t_O:
{
     // stamp value 867
    core::SimpleVector_byte8_t_O* obj_gc_safe = reinterpret_cast<core::SimpleVector_byte8_t_O*>(client);
    GC<core::SimpleVector_byte8_t_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleBitUnitVector_core__SimpleVector_byte2_t_O_2_0_:
{
     // do nothing stamp value 871
    THROW_HARD_ERROR(BF("Should never deallocate object core::template_SimpleBitUnitVector<core::SimpleVector_byte2_t_O,2,0>"));
}
obj_deallocate_unmanaged_instance_STAMP_core__SimpleVector_byte2_t_O:
{
     // stamp value 875
    core::SimpleVector_byte2_t_O* obj_gc_safe = reinterpret_cast<core::SimpleVector_byte2_t_O*>(client);
    GC<core::SimpleVector_byte2_t_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleVector_core__SimpleVector_int32_t_O_int_core__AbstractSimpleVector_O_:
{
     // do nothing stamp value 879
    THROW_HARD_ERROR(BF("Should never deallocate object core::template_SimpleVector<core::SimpleVector_int32_t_O,int,core::AbstractSimpleVector_O>"));
}
obj_deallocate_unmanaged_instance_STAMP_core__SimpleVector_int32_t_O:
{
     // stamp value 883
    core::SimpleVector_int32_t_O* obj_gc_safe = reinterpret_cast<core::SimpleVector_int32_t_O*>(client);
    GC<core::SimpleVector_int32_t_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleBitUnitVector_core__SimpleVector_byte4_t_O_4_0_:
{
     // do nothing stamp value 887
    THROW_HARD_ERROR(BF("Should never deallocate object core::template_SimpleBitUnitVector<core::SimpleVector_byte4_t_O,4,0>"));
}
obj_deallocate_unmanaged_instance_STAMP_core__SimpleVector_byte4_t_O:
{
     // stamp value 891
    core::SimpleVector_byte4_t_O* obj_gc_safe = reinterpret_cast<core::SimpleVector_byte4_t_O*>(client);
    GC<core::SimpleVector_byte4_t_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__Symbol_O:
{
     // stamp value 895
    core::Symbol_O* obj_gc_safe = reinterpret_cast<core::Symbol_O*>(client);
    GC<core::Symbol_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__Null_O:
{
     // stamp value 899
    core::Null_O* obj_gc_safe = reinterpret_cast<core::Null_O*>(client);
    GC<core::Null_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__Character_dummy_O:
{
     // stamp value 903
    core::Character_dummy_O* obj_gc_safe = reinterpret_cast<core::Character_dummy_O*>(client);
    GC<core::Character_dummy_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__DataLayout_O:
{
     // stamp value 907
    llvmo::DataLayout_O* obj_gc_safe = reinterpret_cast<llvmo::DataLayout_O*>(client);
    GC<llvmo::DataLayout_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__LoadTimeValues_O:
{
     // stamp value 911
    core::LoadTimeValues_O* obj_gc_safe = reinterpret_cast<core::LoadTimeValues_O*>(client);
    GC<core::LoadTimeValues_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__SharpEqualWrapper_O:
{
     // stamp value 915
    core::SharpEqualWrapper_O* obj_gc_safe = reinterpret_cast<core::SharpEqualWrapper_O*>(client);
    GC<core::SharpEqualWrapper_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__ClaspJIT_O:
{
     // stamp value 919
    llvmo::ClaspJIT_O* obj_gc_safe = reinterpret_cast<llvmo::ClaspJIT_O*>(client);
    GC<llvmo::ClaspJIT_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__Readtable_O:
{
     // stamp value 923
    core::Readtable_O* obj_gc_safe = reinterpret_cast<core::Readtable_O*>(client);
    GC<core::Readtable_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__PosixTime_O:
{
     // stamp value 927
    core::PosixTime_O* obj_gc_safe = reinterpret_cast<core::PosixTime_O*>(client);
    GC<core::PosixTime_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__Exposer_O:
{
     // stamp value 931
    core::Exposer_O* obj_gc_safe = reinterpret_cast<core::Exposer_O*>(client);
    GC<core::Exposer_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__CoreExposer_O:
{
     // stamp value 935
    core::CoreExposer_O* obj_gc_safe = reinterpret_cast<core::CoreExposer_O*>(client);
    GC<core::CoreExposer_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_asttooling__AsttoolingExposer_O:
{
     // stamp value 939
    asttooling::AsttoolingExposer_O* obj_gc_safe = reinterpret_cast<asttooling::AsttoolingExposer_O*>(client);
    GC<asttooling::AsttoolingExposer_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__StructLayout_O:
{
     // stamp value 943
    llvmo::StructLayout_O* obj_gc_safe = reinterpret_cast<llvmo::StructLayout_O*>(client);
    GC<llvmo::StructLayout_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__PosixTimeDuration_O:
{
     // stamp value 947
    core::PosixTimeDuration_O* obj_gc_safe = reinterpret_cast<core::PosixTimeDuration_O*>(client);
    GC<core::PosixTimeDuration_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_clasp_ffi__ForeignTypeSpec_O:
{
     // stamp value 951
    clasp_ffi::ForeignTypeSpec_O* obj_gc_safe = reinterpret_cast<clasp_ffi::ForeignTypeSpec_O*>(client);
    GC<clasp_ffi::ForeignTypeSpec_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__Instance_O:
{
     // stamp value 953
    core::Instance_O* obj_gc_safe = reinterpret_cast<core::Instance_O*>(client);
    GC<core::Instance_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__DerivableCxxObject_O:
{
     // stamp value 956
    core::DerivableCxxObject_O* obj_gc_safe = reinterpret_cast<core::DerivableCxxObject_O*>(client);
    GC<core::DerivableCxxObject_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_clbind__ClassRep_O:
{
     // stamp value 961
    clbind::ClassRep_O* obj_gc_safe = reinterpret_cast<clbind::ClassRep_O*>(client);
    GC<clbind::ClassRep_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__SmallMap_O:
{
     // stamp value 967
    core::SmallMap_O* obj_gc_safe = reinterpret_cast<core::SmallMap_O*>(client);
    GC<core::SmallMap_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_mpip__Mpi_O:
{
     // stamp value 971
    mpip::Mpi_O* obj_gc_safe = reinterpret_cast<mpip::Mpi_O*>(client);
    GC<mpip::Mpi_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__ExternalObject_O:
{
     // stamp value 975
    core::ExternalObject_O* obj_gc_safe = reinterpret_cast<core::ExternalObject_O*>(client);
    GC<core::ExternalObject_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__Pass_O:
{
     // stamp value 979
    llvmo::Pass_O* obj_gc_safe = reinterpret_cast<llvmo::Pass_O*>(client);
    GC<llvmo::Pass_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__ModulePass_O:
{
     // stamp value 983
    llvmo::ModulePass_O* obj_gc_safe = reinterpret_cast<llvmo::ModulePass_O*>(client);
    GC<llvmo::ModulePass_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__ImmutablePass_O:
{
     // stamp value 987
    llvmo::ImmutablePass_O* obj_gc_safe = reinterpret_cast<llvmo::ImmutablePass_O*>(client);
    GC<llvmo::ImmutablePass_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__TargetLibraryInfoWrapperPass_O:
{
     // stamp value 991
    llvmo::TargetLibraryInfoWrapperPass_O* obj_gc_safe = reinterpret_cast<llvmo::TargetLibraryInfoWrapperPass_O*>(client);
    GC<llvmo::TargetLibraryInfoWrapperPass_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__FunctionPass_O:
{
     // stamp value 995
    llvmo::FunctionPass_O* obj_gc_safe = reinterpret_cast<llvmo::FunctionPass_O*>(client);
    GC<llvmo::FunctionPass_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__ExecutionEngine_O:
{
     // stamp value 999
    llvmo::ExecutionEngine_O* obj_gc_safe = reinterpret_cast<llvmo::ExecutionEngine_O*>(client);
    GC<llvmo::ExecutionEngine_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__MCSubtargetInfo_O:
{
     // stamp value 1003
    llvmo::MCSubtargetInfo_O* obj_gc_safe = reinterpret_cast<llvmo::MCSubtargetInfo_O*>(client);
    GC<llvmo::MCSubtargetInfo_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__TargetSubtargetInfo_O:
{
     // stamp value 1007
    llvmo::TargetSubtargetInfo_O* obj_gc_safe = reinterpret_cast<llvmo::TargetSubtargetInfo_O*>(client);
    GC<llvmo::TargetSubtargetInfo_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__Type_O:
{
     // stamp value 1011
    llvmo::Type_O* obj_gc_safe = reinterpret_cast<llvmo::Type_O*>(client);
    GC<llvmo::Type_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__FunctionType_O:
{
     // stamp value 1015
    llvmo::FunctionType_O* obj_gc_safe = reinterpret_cast<llvmo::FunctionType_O*>(client);
    GC<llvmo::FunctionType_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__CompositeType_O:
{
     // stamp value 1019
    llvmo::CompositeType_O* obj_gc_safe = reinterpret_cast<llvmo::CompositeType_O*>(client);
    GC<llvmo::CompositeType_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__SequentialType_O:
{
     // stamp value 1023
    llvmo::SequentialType_O* obj_gc_safe = reinterpret_cast<llvmo::SequentialType_O*>(client);
    GC<llvmo::SequentialType_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__PointerType_O:
{
     // stamp value 1027
    llvmo::PointerType_O* obj_gc_safe = reinterpret_cast<llvmo::PointerType_O*>(client);
    GC<llvmo::PointerType_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__ArrayType_O:
{
     // stamp value 1031
    llvmo::ArrayType_O* obj_gc_safe = reinterpret_cast<llvmo::ArrayType_O*>(client);
    GC<llvmo::ArrayType_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__VectorType_O:
{
     // stamp value 1035
    llvmo::VectorType_O* obj_gc_safe = reinterpret_cast<llvmo::VectorType_O*>(client);
    GC<llvmo::VectorType_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__StructType_O:
{
     // stamp value 1039
    llvmo::StructType_O* obj_gc_safe = reinterpret_cast<llvmo::StructType_O*>(client);
    GC<llvmo::StructType_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__IntegerType_O:
{
     // stamp value 1043
    llvmo::IntegerType_O* obj_gc_safe = reinterpret_cast<llvmo::IntegerType_O*>(client);
    GC<llvmo::IntegerType_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__JITDylib_O:
{
     // stamp value 1047
    llvmo::JITDylib_O* obj_gc_safe = reinterpret_cast<llvmo::JITDylib_O*>(client);
    GC<llvmo::JITDylib_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__DIContext_O:
{
     // stamp value 1051
    llvmo::DIContext_O* obj_gc_safe = reinterpret_cast<llvmo::DIContext_O*>(client);
    GC<llvmo::DIContext_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__TargetPassConfig_O:
{
     // stamp value 1055
    llvmo::TargetPassConfig_O* obj_gc_safe = reinterpret_cast<llvmo::TargetPassConfig_O*>(client);
    GC<llvmo::TargetPassConfig_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__IRBuilderBase_O:
{
     // stamp value 1059
    llvmo::IRBuilderBase_O* obj_gc_safe = reinterpret_cast<llvmo::IRBuilderBase_O*>(client);
    GC<llvmo::IRBuilderBase_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__IRBuilder_O:
{
     // stamp value 1063
    llvmo::IRBuilder_O* obj_gc_safe = reinterpret_cast<llvmo::IRBuilder_O*>(client);
    GC<llvmo::IRBuilder_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__APFloat_O:
{
     // stamp value 1067
    llvmo::APFloat_O* obj_gc_safe = reinterpret_cast<llvmo::APFloat_O*>(client);
    GC<llvmo::APFloat_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__APInt_O:
{
     // stamp value 1071
    llvmo::APInt_O* obj_gc_safe = reinterpret_cast<llvmo::APInt_O*>(client);
    GC<llvmo::APInt_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__DIBuilder_O:
{
     // stamp value 1075
    llvmo::DIBuilder_O* obj_gc_safe = reinterpret_cast<llvmo::DIBuilder_O*>(client);
    GC<llvmo::DIBuilder_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__SectionedAddress_O:
{
     // stamp value 1079
    llvmo::SectionedAddress_O* obj_gc_safe = reinterpret_cast<llvmo::SectionedAddress_O*>(client);
    GC<llvmo::SectionedAddress_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__EngineBuilder_O:
{
     // stamp value 1083
    llvmo::EngineBuilder_O* obj_gc_safe = reinterpret_cast<llvmo::EngineBuilder_O*>(client);
    GC<llvmo::EngineBuilder_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__PassManagerBase_O:
{
     // stamp value 1087
    llvmo::PassManagerBase_O* obj_gc_safe = reinterpret_cast<llvmo::PassManagerBase_O*>(client);
    GC<llvmo::PassManagerBase_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__PassManager_O:
{
     // stamp value 1091
    llvmo::PassManager_O* obj_gc_safe = reinterpret_cast<llvmo::PassManager_O*>(client);
    GC<llvmo::PassManager_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__FunctionPassManager_O:
{
     // stamp value 1095
    llvmo::FunctionPassManager_O* obj_gc_safe = reinterpret_cast<llvmo::FunctionPassManager_O*>(client);
    GC<llvmo::FunctionPassManager_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__Metadata_O:
{
     // stamp value 1099
    llvmo::Metadata_O* obj_gc_safe = reinterpret_cast<llvmo::Metadata_O*>(client);
    GC<llvmo::Metadata_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__MDNode_O:
{
     // stamp value 1103
    llvmo::MDNode_O* obj_gc_safe = reinterpret_cast<llvmo::MDNode_O*>(client);
    GC<llvmo::MDNode_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__DINode_O:
{
     // stamp value 1107
    llvmo::DINode_O* obj_gc_safe = reinterpret_cast<llvmo::DINode_O*>(client);
    GC<llvmo::DINode_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__DIVariable_O:
{
     // stamp value 1111
    llvmo::DIVariable_O* obj_gc_safe = reinterpret_cast<llvmo::DIVariable_O*>(client);
    GC<llvmo::DIVariable_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__DILocalVariable_O:
{
     // stamp value 1115
    llvmo::DILocalVariable_O* obj_gc_safe = reinterpret_cast<llvmo::DILocalVariable_O*>(client);
    GC<llvmo::DILocalVariable_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__DIScope_O:
{
     // stamp value 1119
    llvmo::DIScope_O* obj_gc_safe = reinterpret_cast<llvmo::DIScope_O*>(client);
    GC<llvmo::DIScope_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__DIFile_O:
{
     // stamp value 1123
    llvmo::DIFile_O* obj_gc_safe = reinterpret_cast<llvmo::DIFile_O*>(client);
    GC<llvmo::DIFile_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__DIType_O:
{
     // stamp value 1127
    llvmo::DIType_O* obj_gc_safe = reinterpret_cast<llvmo::DIType_O*>(client);
    GC<llvmo::DIType_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__DICompositeType_O:
{
     // stamp value 1131
    llvmo::DICompositeType_O* obj_gc_safe = reinterpret_cast<llvmo::DICompositeType_O*>(client);
    GC<llvmo::DICompositeType_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__DIDerivedType_O:
{
     // stamp value 1135
    llvmo::DIDerivedType_O* obj_gc_safe = reinterpret_cast<llvmo::DIDerivedType_O*>(client);
    GC<llvmo::DIDerivedType_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__DIBasicType_O:
{
     // stamp value 1139
    llvmo::DIBasicType_O* obj_gc_safe = reinterpret_cast<llvmo::DIBasicType_O*>(client);
    GC<llvmo::DIBasicType_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__DISubroutineType_O:
{
     // stamp value 1143
    llvmo::DISubroutineType_O* obj_gc_safe = reinterpret_cast<llvmo::DISubroutineType_O*>(client);
    GC<llvmo::DISubroutineType_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__DILocalScope_O:
{
     // stamp value 1147
    llvmo::DILocalScope_O* obj_gc_safe = reinterpret_cast<llvmo::DILocalScope_O*>(client);
    GC<llvmo::DILocalScope_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__DISubprogram_O:
{
     // stamp value 1151
    llvmo::DISubprogram_O* obj_gc_safe = reinterpret_cast<llvmo::DISubprogram_O*>(client);
    GC<llvmo::DISubprogram_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__DILexicalBlockBase_O:
{
     // stamp value 1155
    llvmo::DILexicalBlockBase_O* obj_gc_safe = reinterpret_cast<llvmo::DILexicalBlockBase_O*>(client);
    GC<llvmo::DILexicalBlockBase_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__DILexicalBlock_O:
{
     // stamp value 1159
    llvmo::DILexicalBlock_O* obj_gc_safe = reinterpret_cast<llvmo::DILexicalBlock_O*>(client);
    GC<llvmo::DILexicalBlock_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__DICompileUnit_O:
{
     // stamp value 1163
    llvmo::DICompileUnit_O* obj_gc_safe = reinterpret_cast<llvmo::DICompileUnit_O*>(client);
    GC<llvmo::DICompileUnit_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__DIExpression_O:
{
     // stamp value 1167
    llvmo::DIExpression_O* obj_gc_safe = reinterpret_cast<llvmo::DIExpression_O*>(client);
    GC<llvmo::DIExpression_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__DILocation_O:
{
     // stamp value 1171
    llvmo::DILocation_O* obj_gc_safe = reinterpret_cast<llvmo::DILocation_O*>(client);
    GC<llvmo::DILocation_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__ValueAsMetadata_O:
{
     // stamp value 1175
    llvmo::ValueAsMetadata_O* obj_gc_safe = reinterpret_cast<llvmo::ValueAsMetadata_O*>(client);
    GC<llvmo::ValueAsMetadata_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__MDString_O:
{
     // stamp value 1179
    llvmo::MDString_O* obj_gc_safe = reinterpret_cast<llvmo::MDString_O*>(client);
    GC<llvmo::MDString_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__Value_O:
{
     // stamp value 1183
    llvmo::Value_O* obj_gc_safe = reinterpret_cast<llvmo::Value_O*>(client);
    GC<llvmo::Value_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__Argument_O:
{
     // stamp value 1187
    llvmo::Argument_O* obj_gc_safe = reinterpret_cast<llvmo::Argument_O*>(client);
    GC<llvmo::Argument_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__BasicBlock_O:
{
     // stamp value 1191
    llvmo::BasicBlock_O* obj_gc_safe = reinterpret_cast<llvmo::BasicBlock_O*>(client);
    GC<llvmo::BasicBlock_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__MetadataAsValue_O:
{
     // stamp value 1195
    llvmo::MetadataAsValue_O* obj_gc_safe = reinterpret_cast<llvmo::MetadataAsValue_O*>(client);
    GC<llvmo::MetadataAsValue_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__User_O:
{
     // stamp value 1199
    llvmo::User_O* obj_gc_safe = reinterpret_cast<llvmo::User_O*>(client);
    GC<llvmo::User_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__Instruction_O:
{
     // stamp value 1203
    llvmo::Instruction_O* obj_gc_safe = reinterpret_cast<llvmo::Instruction_O*>(client);
    GC<llvmo::Instruction_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__UnaryInstruction_O:
{
     // stamp value 1207
    llvmo::UnaryInstruction_O* obj_gc_safe = reinterpret_cast<llvmo::UnaryInstruction_O*>(client);
    GC<llvmo::UnaryInstruction_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__VAArgInst_O:
{
     // stamp value 1211
    llvmo::VAArgInst_O* obj_gc_safe = reinterpret_cast<llvmo::VAArgInst_O*>(client);
    GC<llvmo::VAArgInst_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__LoadInst_O:
{
     // stamp value 1215
    llvmo::LoadInst_O* obj_gc_safe = reinterpret_cast<llvmo::LoadInst_O*>(client);
    GC<llvmo::LoadInst_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__AllocaInst_O:
{
     // stamp value 1219
    llvmo::AllocaInst_O* obj_gc_safe = reinterpret_cast<llvmo::AllocaInst_O*>(client);
    GC<llvmo::AllocaInst_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__SwitchInst_O:
{
     // stamp value 1223
    llvmo::SwitchInst_O* obj_gc_safe = reinterpret_cast<llvmo::SwitchInst_O*>(client);
    GC<llvmo::SwitchInst_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__AtomicRMWInst_O:
{
     // stamp value 1227
    llvmo::AtomicRMWInst_O* obj_gc_safe = reinterpret_cast<llvmo::AtomicRMWInst_O*>(client);
    GC<llvmo::AtomicRMWInst_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__LandingPadInst_O:
{
     // stamp value 1231
    llvmo::LandingPadInst_O* obj_gc_safe = reinterpret_cast<llvmo::LandingPadInst_O*>(client);
    GC<llvmo::LandingPadInst_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__StoreInst_O:
{
     // stamp value 1235
    llvmo::StoreInst_O* obj_gc_safe = reinterpret_cast<llvmo::StoreInst_O*>(client);
    GC<llvmo::StoreInst_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__UnreachableInst_O:
{
     // stamp value 1239
    llvmo::UnreachableInst_O* obj_gc_safe = reinterpret_cast<llvmo::UnreachableInst_O*>(client);
    GC<llvmo::UnreachableInst_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__ReturnInst_O:
{
     // stamp value 1243
    llvmo::ReturnInst_O* obj_gc_safe = reinterpret_cast<llvmo::ReturnInst_O*>(client);
    GC<llvmo::ReturnInst_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__ResumeInst_O:
{
     // stamp value 1247
    llvmo::ResumeInst_O* obj_gc_safe = reinterpret_cast<llvmo::ResumeInst_O*>(client);
    GC<llvmo::ResumeInst_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__AtomicCmpXchgInst_O:
{
     // stamp value 1251
    llvmo::AtomicCmpXchgInst_O* obj_gc_safe = reinterpret_cast<llvmo::AtomicCmpXchgInst_O*>(client);
    GC<llvmo::AtomicCmpXchgInst_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__FenceInst_O:
{
     // stamp value 1255
    llvmo::FenceInst_O* obj_gc_safe = reinterpret_cast<llvmo::FenceInst_O*>(client);
    GC<llvmo::FenceInst_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__CallBase_O:
{
     // stamp value 1259
    llvmo::CallBase_O* obj_gc_safe = reinterpret_cast<llvmo::CallBase_O*>(client);
    GC<llvmo::CallBase_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__CallInst_O:
{
     // stamp value 1263
    llvmo::CallInst_O* obj_gc_safe = reinterpret_cast<llvmo::CallInst_O*>(client);
    GC<llvmo::CallInst_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__InvokeInst_O:
{
     // stamp value 1267
    llvmo::InvokeInst_O* obj_gc_safe = reinterpret_cast<llvmo::InvokeInst_O*>(client);
    GC<llvmo::InvokeInst_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__PHINode_O:
{
     // stamp value 1271
    llvmo::PHINode_O* obj_gc_safe = reinterpret_cast<llvmo::PHINode_O*>(client);
    GC<llvmo::PHINode_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__IndirectBrInst_O:
{
     // stamp value 1275
    llvmo::IndirectBrInst_O* obj_gc_safe = reinterpret_cast<llvmo::IndirectBrInst_O*>(client);
    GC<llvmo::IndirectBrInst_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__BranchInst_O:
{
     // stamp value 1279
    llvmo::BranchInst_O* obj_gc_safe = reinterpret_cast<llvmo::BranchInst_O*>(client);
    GC<llvmo::BranchInst_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__Constant_O:
{
     // stamp value 1283
    llvmo::Constant_O* obj_gc_safe = reinterpret_cast<llvmo::Constant_O*>(client);
    GC<llvmo::Constant_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__GlobalValue_O:
{
     // stamp value 1287
    llvmo::GlobalValue_O* obj_gc_safe = reinterpret_cast<llvmo::GlobalValue_O*>(client);
    GC<llvmo::GlobalValue_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__Function_O:
{
     // stamp value 1291
    llvmo::Function_O* obj_gc_safe = reinterpret_cast<llvmo::Function_O*>(client);
    GC<llvmo::Function_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__GlobalVariable_O:
{
     // stamp value 1295
    llvmo::GlobalVariable_O* obj_gc_safe = reinterpret_cast<llvmo::GlobalVariable_O*>(client);
    GC<llvmo::GlobalVariable_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__BlockAddress_O:
{
     // stamp value 1299
    llvmo::BlockAddress_O* obj_gc_safe = reinterpret_cast<llvmo::BlockAddress_O*>(client);
    GC<llvmo::BlockAddress_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__ConstantDataSequential_O:
{
     // stamp value 1303
    llvmo::ConstantDataSequential_O* obj_gc_safe = reinterpret_cast<llvmo::ConstantDataSequential_O*>(client);
    GC<llvmo::ConstantDataSequential_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__ConstantDataArray_O:
{
     // stamp value 1307
    llvmo::ConstantDataArray_O* obj_gc_safe = reinterpret_cast<llvmo::ConstantDataArray_O*>(client);
    GC<llvmo::ConstantDataArray_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__ConstantStruct_O:
{
     // stamp value 1311
    llvmo::ConstantStruct_O* obj_gc_safe = reinterpret_cast<llvmo::ConstantStruct_O*>(client);
    GC<llvmo::ConstantStruct_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__ConstantInt_O:
{
     // stamp value 1315
    llvmo::ConstantInt_O* obj_gc_safe = reinterpret_cast<llvmo::ConstantInt_O*>(client);
    GC<llvmo::ConstantInt_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__ConstantFP_O:
{
     // stamp value 1319
    llvmo::ConstantFP_O* obj_gc_safe = reinterpret_cast<llvmo::ConstantFP_O*>(client);
    GC<llvmo::ConstantFP_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__ConstantExpr_O:
{
     // stamp value 1323
    llvmo::ConstantExpr_O* obj_gc_safe = reinterpret_cast<llvmo::ConstantExpr_O*>(client);
    GC<llvmo::ConstantExpr_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__ConstantPointerNull_O:
{
     // stamp value 1327
    llvmo::ConstantPointerNull_O* obj_gc_safe = reinterpret_cast<llvmo::ConstantPointerNull_O*>(client);
    GC<llvmo::ConstantPointerNull_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__UndefValue_O:
{
     // stamp value 1331
    llvmo::UndefValue_O* obj_gc_safe = reinterpret_cast<llvmo::UndefValue_O*>(client);
    GC<llvmo::UndefValue_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__ConstantArray_O:
{
     // stamp value 1335
    llvmo::ConstantArray_O* obj_gc_safe = reinterpret_cast<llvmo::ConstantArray_O*>(client);
    GC<llvmo::ConstantArray_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__TargetMachine_O:
{
     // stamp value 1339
    llvmo::TargetMachine_O* obj_gc_safe = reinterpret_cast<llvmo::TargetMachine_O*>(client);
    GC<llvmo::TargetMachine_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__LLVMTargetMachine_O:
{
     // stamp value 1343
    llvmo::LLVMTargetMachine_O* obj_gc_safe = reinterpret_cast<llvmo::LLVMTargetMachine_O*>(client);
    GC<llvmo::LLVMTargetMachine_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__ThreadSafeContext_O:
{
     // stamp value 1347
    llvmo::ThreadSafeContext_O* obj_gc_safe = reinterpret_cast<llvmo::ThreadSafeContext_O*>(client);
    GC<llvmo::ThreadSafeContext_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__NamedMDNode_O:
{
     // stamp value 1351
    llvmo::NamedMDNode_O* obj_gc_safe = reinterpret_cast<llvmo::NamedMDNode_O*>(client);
    GC<llvmo::NamedMDNode_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__Triple_O:
{
     // stamp value 1355
    llvmo::Triple_O* obj_gc_safe = reinterpret_cast<llvmo::Triple_O*>(client);
    GC<llvmo::Triple_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__DWARFContext_O:
{
     // stamp value 1359
    llvmo::DWARFContext_O* obj_gc_safe = reinterpret_cast<llvmo::DWARFContext_O*>(client);
    GC<llvmo::DWARFContext_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__TargetOptions_O:
{
     // stamp value 1363
    llvmo::TargetOptions_O* obj_gc_safe = reinterpret_cast<llvmo::TargetOptions_O*>(client);
    GC<llvmo::TargetOptions_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__ObjectFile_O:
{
     // stamp value 1367
    llvmo::ObjectFile_O* obj_gc_safe = reinterpret_cast<llvmo::ObjectFile_O*>(client);
    GC<llvmo::ObjectFile_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__LLVMContext_O:
{
     // stamp value 1371
    llvmo::LLVMContext_O* obj_gc_safe = reinterpret_cast<llvmo::LLVMContext_O*>(client);
    GC<llvmo::LLVMContext_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__PassManagerBuilder_O:
{
     // stamp value 1375
    llvmo::PassManagerBuilder_O* obj_gc_safe = reinterpret_cast<llvmo::PassManagerBuilder_O*>(client);
    GC<llvmo::PassManagerBuilder_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__Module_O:
{
     // stamp value 1379
    llvmo::Module_O* obj_gc_safe = reinterpret_cast<llvmo::Module_O*>(client);
    GC<llvmo::Module_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__Target_O:
{
     // stamp value 1383
    llvmo::Target_O* obj_gc_safe = reinterpret_cast<llvmo::Target_O*>(client);
    GC<llvmo::Target_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__Linker_O:
{
     // stamp value 1387
    llvmo::Linker_O* obj_gc_safe = reinterpret_cast<llvmo::Linker_O*>(client);
    GC<llvmo::Linker_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__Rack_O:
{
     // stamp value 1391
    core::Rack_O* obj_gc_safe = reinterpret_cast<core::Rack_O*>(client);
    GC<core::Rack_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__SmallMultimap_O:
{
     // stamp value 1395
    core::SmallMultimap_O* obj_gc_safe = reinterpret_cast<core::SmallMultimap_O*>(client);
    GC<core::SmallMultimap_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__Sigset_O:
{
     // stamp value 1399
    core::Sigset_O* obj_gc_safe = reinterpret_cast<core::Sigset_O*>(client);
    GC<core::Sigset_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__Environment_O:
{
     // stamp value 1403
    core::Environment_O* obj_gc_safe = reinterpret_cast<core::Environment_O*>(client);
    GC<core::Environment_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__GlueEnvironment_O:
{
     // stamp value 1407
    core::GlueEnvironment_O* obj_gc_safe = reinterpret_cast<core::GlueEnvironment_O*>(client);
    GC<core::GlueEnvironment_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__LexicalEnvironment_O:
{
     // stamp value 1411
    core::LexicalEnvironment_O* obj_gc_safe = reinterpret_cast<core::LexicalEnvironment_O*>(client);
    GC<core::LexicalEnvironment_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__RuntimeVisibleEnvironment_O:
{
     // stamp value 1415
    core::RuntimeVisibleEnvironment_O* obj_gc_safe = reinterpret_cast<core::RuntimeVisibleEnvironment_O*>(client);
    GC<core::RuntimeVisibleEnvironment_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__FunctionValueEnvironment_O:
{
     // stamp value 1419
    core::FunctionValueEnvironment_O* obj_gc_safe = reinterpret_cast<core::FunctionValueEnvironment_O*>(client);
    GC<core::FunctionValueEnvironment_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__TagbodyEnvironment_O:
{
     // stamp value 1423
    core::TagbodyEnvironment_O* obj_gc_safe = reinterpret_cast<core::TagbodyEnvironment_O*>(client);
    GC<core::TagbodyEnvironment_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__BlockEnvironment_O:
{
     // stamp value 1427
    core::BlockEnvironment_O* obj_gc_safe = reinterpret_cast<core::BlockEnvironment_O*>(client);
    GC<core::BlockEnvironment_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__ValueEnvironment_O:
{
     // stamp value 1431
    core::ValueEnvironment_O* obj_gc_safe = reinterpret_cast<core::ValueEnvironment_O*>(client);
    GC<core::ValueEnvironment_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__CompileTimeEnvironment_O:
{
     // stamp value 1435
    core::CompileTimeEnvironment_O* obj_gc_safe = reinterpret_cast<core::CompileTimeEnvironment_O*>(client);
    GC<core::CompileTimeEnvironment_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__CatchEnvironment_O:
{
     // stamp value 1439
    core::CatchEnvironment_O* obj_gc_safe = reinterpret_cast<core::CatchEnvironment_O*>(client);
    GC<core::CatchEnvironment_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__MacroletEnvironment_O:
{
     // stamp value 1443
    core::MacroletEnvironment_O* obj_gc_safe = reinterpret_cast<core::MacroletEnvironment_O*>(client);
    GC<core::MacroletEnvironment_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__SymbolMacroletEnvironment_O:
{
     // stamp value 1447
    core::SymbolMacroletEnvironment_O* obj_gc_safe = reinterpret_cast<core::SymbolMacroletEnvironment_O*>(client);
    GC<core::SymbolMacroletEnvironment_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__FunctionContainerEnvironment_O:
{
     // stamp value 1451
    core::FunctionContainerEnvironment_O* obj_gc_safe = reinterpret_cast<core::FunctionContainerEnvironment_O*>(client);
    GC<core::FunctionContainerEnvironment_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__UnwindProtectEnvironment_O:
{
     // stamp value 1455
    core::UnwindProtectEnvironment_O* obj_gc_safe = reinterpret_cast<core::UnwindProtectEnvironment_O*>(client);
    GC<core::UnwindProtectEnvironment_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__ActivationFrame_O:
{
     // stamp value 1459
    core::ActivationFrame_O* obj_gc_safe = reinterpret_cast<core::ActivationFrame_O*>(client);
    GC<core::ActivationFrame_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__ValueFrame_O:
{
     // stamp value 1463
    core::ValueFrame_O* obj_gc_safe = reinterpret_cast<core::ValueFrame_O*>(client);
    GC<core::ValueFrame_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__FunctionFrame_O:
{
     // stamp value 1467
    core::FunctionFrame_O* obj_gc_safe = reinterpret_cast<core::FunctionFrame_O*>(client);
    GC<core::FunctionFrame_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__RandomState_O:
{
     // stamp value 1471
    core::RandomState_O* obj_gc_safe = reinterpret_cast<core::RandomState_O*>(client);
    GC<core::RandomState_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__AtomicFixnumHolder_O:
{
     // stamp value 1475
    core::AtomicFixnumHolder_O* obj_gc_safe = reinterpret_cast<core::AtomicFixnumHolder_O*>(client);
    GC<core::AtomicFixnumHolder_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__HashTableBase_O:
{
     // stamp value 1479
    core::HashTableBase_O* obj_gc_safe = reinterpret_cast<core::HashTableBase_O*>(client);
    GC<core::HashTableBase_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__WeakKeyHashTable_O:
{
     // stamp value 1483
    core::WeakKeyHashTable_O* obj_gc_safe = reinterpret_cast<core::WeakKeyHashTable_O*>(client);
    GC<core::WeakKeyHashTable_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__HashTable_O:
{
     // stamp value 1487
    core::HashTable_O* obj_gc_safe = reinterpret_cast<core::HashTable_O*>(client);
    GC<core::HashTable_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__HashTableEqualp_O:
{
     // stamp value 1491
    core::HashTableEqualp_O* obj_gc_safe = reinterpret_cast<core::HashTableEqualp_O*>(client);
    GC<core::HashTableEqualp_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__HashTableEq_O:
{
     // stamp value 1495
    core::HashTableEq_O* obj_gc_safe = reinterpret_cast<core::HashTableEq_O*>(client);
    GC<core::HashTableEq_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__HashTableEql_O:
{
     // stamp value 1499
    core::HashTableEql_O* obj_gc_safe = reinterpret_cast<core::HashTableEql_O*>(client);
    GC<core::HashTableEql_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__HashTableEqual_O:
{
     // stamp value 1503
    core::HashTableEqual_O* obj_gc_safe = reinterpret_cast<core::HashTableEqual_O*>(client);
    GC<core::HashTableEqual_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__InsertPoint_O:
{
     // stamp value 1507
    llvmo::InsertPoint_O* obj_gc_safe = reinterpret_cast<llvmo::InsertPoint_O*>(client);
    GC<llvmo::InsertPoint_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__Scope_O:
{
     // stamp value 1511
    core::Scope_O* obj_gc_safe = reinterpret_cast<core::Scope_O*>(client);
    GC<core::Scope_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__FileScope_O:
{
     // stamp value 1515
    core::FileScope_O* obj_gc_safe = reinterpret_cast<core::FileScope_O*>(client);
    GC<core::FileScope_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__Path_O:
{
     // stamp value 1519
    core::Path_O* obj_gc_safe = reinterpret_cast<core::Path_O*>(client);
    GC<core::Path_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__Pathname_O:
{
     // stamp value 1523
    core::Pathname_O* obj_gc_safe = reinterpret_cast<core::Pathname_O*>(client);
    GC<core::Pathname_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__LogicalPathname_O:
{
     // stamp value 1527
    core::LogicalPathname_O* obj_gc_safe = reinterpret_cast<core::LogicalPathname_O*>(client);
    GC<core::LogicalPathname_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__Cache_O:
{
     // stamp value 1531
    core::Cache_O* obj_gc_safe = reinterpret_cast<core::Cache_O*>(client);
    GC<core::Cache_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__Number_O:
{
     // stamp value 1535
    core::Number_O* obj_gc_safe = reinterpret_cast<core::Number_O*>(client);
    GC<core::Number_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__Real_O:
{
     // stamp value 1539
    core::Real_O* obj_gc_safe = reinterpret_cast<core::Real_O*>(client);
    GC<core::Real_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__Rational_O:
{
     // stamp value 1543
    core::Rational_O* obj_gc_safe = reinterpret_cast<core::Rational_O*>(client);
    GC<core::Rational_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__Ratio_O:
{
     // stamp value 1547
    core::Ratio_O* obj_gc_safe = reinterpret_cast<core::Ratio_O*>(client);
    GC<core::Ratio_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__Integer_O:
{
     // stamp value 1551
    core::Integer_O* obj_gc_safe = reinterpret_cast<core::Integer_O*>(client);
    GC<core::Integer_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__Bignum_O:
{
     // stamp value 1555
    core::Bignum_O* obj_gc_safe = reinterpret_cast<core::Bignum_O*>(client);
    GC<core::Bignum_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__Fixnum_dummy_O:
{
     // stamp value 1559
    core::Fixnum_dummy_O* obj_gc_safe = reinterpret_cast<core::Fixnum_dummy_O*>(client);
    GC<core::Fixnum_dummy_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__Float_O:
{
     // stamp value 1563
    core::Float_O* obj_gc_safe = reinterpret_cast<core::Float_O*>(client);
    GC<core::Float_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__DoubleFloat_O:
{
     // stamp value 1567
    core::DoubleFloat_O* obj_gc_safe = reinterpret_cast<core::DoubleFloat_O*>(client);
    GC<core::DoubleFloat_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__SingleFloat_dummy_O:
{
     // stamp value 1571
    core::SingleFloat_dummy_O* obj_gc_safe = reinterpret_cast<core::SingleFloat_dummy_O*>(client);
    GC<core::SingleFloat_dummy_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__LongFloat_O:
{
     // stamp value 1575
    core::LongFloat_O* obj_gc_safe = reinterpret_cast<core::LongFloat_O*>(client);
    GC<core::LongFloat_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__ShortFloat_O:
{
     // stamp value 1579
    core::ShortFloat_O* obj_gc_safe = reinterpret_cast<core::ShortFloat_O*>(client);
    GC<core::ShortFloat_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__Complex_O:
{
     // stamp value 1583
    core::Complex_O* obj_gc_safe = reinterpret_cast<core::Complex_O*>(client);
    GC<core::Complex_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__Stream_O:
{
     // stamp value 1587
    core::Stream_O* obj_gc_safe = reinterpret_cast<core::Stream_O*>(client);
    GC<core::Stream_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__AnsiStream_O:
{
     // stamp value 1591
    core::AnsiStream_O* obj_gc_safe = reinterpret_cast<core::AnsiStream_O*>(client);
    GC<core::AnsiStream_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__SynonymStream_O:
{
     // stamp value 1595
    core::SynonymStream_O* obj_gc_safe = reinterpret_cast<core::SynonymStream_O*>(client);
    GC<core::SynonymStream_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__ConcatenatedStream_O:
{
     // stamp value 1599
    core::ConcatenatedStream_O* obj_gc_safe = reinterpret_cast<core::ConcatenatedStream_O*>(client);
    GC<core::ConcatenatedStream_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__FileStream_O:
{
     // stamp value 1603
    core::FileStream_O* obj_gc_safe = reinterpret_cast<core::FileStream_O*>(client);
    GC<core::FileStream_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__IOFileStream_O:
{
     // stamp value 1607
    core::IOFileStream_O* obj_gc_safe = reinterpret_cast<core::IOFileStream_O*>(client);
    GC<core::IOFileStream_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__IOStreamStream_O:
{
     // stamp value 1611
    core::IOStreamStream_O* obj_gc_safe = reinterpret_cast<core::IOStreamStream_O*>(client);
    GC<core::IOStreamStream_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__BroadcastStream_O:
{
     // stamp value 1615
    core::BroadcastStream_O* obj_gc_safe = reinterpret_cast<core::BroadcastStream_O*>(client);
    GC<core::BroadcastStream_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__StringStream_O:
{
     // stamp value 1619
    core::StringStream_O* obj_gc_safe = reinterpret_cast<core::StringStream_O*>(client);
    GC<core::StringStream_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__StringOutputStream_O:
{
     // stamp value 1623
    core::StringOutputStream_O* obj_gc_safe = reinterpret_cast<core::StringOutputStream_O*>(client);
    GC<core::StringOutputStream_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__StringInputStream_O:
{
     // stamp value 1627
    core::StringInputStream_O* obj_gc_safe = reinterpret_cast<core::StringInputStream_O*>(client);
    GC<core::StringInputStream_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__EchoStream_O:
{
     // stamp value 1631
    core::EchoStream_O* obj_gc_safe = reinterpret_cast<core::EchoStream_O*>(client);
    GC<core::EchoStream_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__TwoWayStream_O:
{
     // stamp value 1635
    core::TwoWayStream_O* obj_gc_safe = reinterpret_cast<core::TwoWayStream_O*>(client);
    GC<core::TwoWayStream_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__Package_O:
{
     // stamp value 1639
    core::Package_O* obj_gc_safe = reinterpret_cast<core::Package_O*>(client);
    GC<core::Package_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__FileStatus_O:
{
     // stamp value 1643
    core::FileStatus_O* obj_gc_safe = reinterpret_cast<core::FileStatus_O*>(client);
    GC<core::FileStatus_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__InvocationHistoryFrameIterator_O:
{
     // stamp value 1647
    core::InvocationHistoryFrameIterator_O* obj_gc_safe = reinterpret_cast<core::InvocationHistoryFrameIterator_O*>(client);
    GC<core::InvocationHistoryFrameIterator_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__SourcePosInfo_O:
{
     // stamp value 1651
    core::SourcePosInfo_O* obj_gc_safe = reinterpret_cast<core::SourcePosInfo_O*>(client);
    GC<core::SourcePosInfo_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__IntArray_O:
{
     // stamp value 1655
    core::IntArray_O* obj_gc_safe = reinterpret_cast<core::IntArray_O*>(client);
    GC<core::IntArray_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__DirectoryEntry_O:
{
     // stamp value 1659
    core::DirectoryEntry_O* obj_gc_safe = reinterpret_cast<core::DirectoryEntry_O*>(client);
    GC<core::DirectoryEntry_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__LightUserData_O:
{
     // stamp value 1663
    core::LightUserData_O* obj_gc_safe = reinterpret_cast<core::LightUserData_O*>(client);
    GC<core::LightUserData_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__UserData_O:
{
     // stamp value 1667
    core::UserData_O* obj_gc_safe = reinterpret_cast<core::UserData_O*>(client);
    GC<core::UserData_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__Record_O:
{
     // stamp value 1671
    core::Record_O* obj_gc_safe = reinterpret_cast<core::Record_O*>(client);
    GC<core::Record_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_clbind__ClassRegistry_O:
{
     // stamp value 1675
    clbind::ClassRegistry_O* obj_gc_safe = reinterpret_cast<clbind::ClassRegistry_O*>(client);
    GC<clbind::ClassRegistry_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__Cons_O:
{
     // stamp value 1679
    core::Cons_O* obj_gc_safe = reinterpret_cast<core::Cons_O*>(client);
    GC<core::Cons_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__Lisp_O:
{
     // stamp value 1683
    core::Lisp_O* obj_gc_safe = reinterpret_cast<core::Lisp_O*>(client);
    GC<core::Lisp_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_clang__RecursiveASTVisitor_asttooling__AstVisitor_O_:
{
     // do nothing stamp value 1687
    THROW_HARD_ERROR(BF("Should never deallocate object clang::RecursiveASTVisitor<asttooling::AstVisitor_O>"));
}
obj_deallocate_unmanaged_instance_STAMP_asttooling__AstVisitor_O:
{
     // stamp value 1691
    asttooling::AstVisitor_O* obj_gc_safe = reinterpret_cast<asttooling::AstVisitor_O*>(client);
    GC<asttooling::AstVisitor_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_clang__tooling__ToolAction:
{
     // do nothing stamp value 1695
    THROW_HARD_ERROR(BF("Should never deallocate object clang::tooling::ToolAction"));
}
obj_deallocate_unmanaged_instance_STAMP_clang__tooling__FrontendActionFactory:
{
     // do nothing stamp value 1699
    THROW_HARD_ERROR(BF("Should never deallocate object clang::tooling::FrontendActionFactory"));
}
obj_deallocate_unmanaged_instance_STAMP_clang__ast_matchers__MatchFinder__MatchCallback:
{
     // do nothing stamp value 1703
    THROW_HARD_ERROR(BF("Should never deallocate object clang::ast_matchers::MatchFinder::MatchCallback"));
}
obj_deallocate_unmanaged_instance_STAMP_gctools__GCContainer:
{
     // do nothing stamp value 1707
    THROW_HARD_ERROR(BF("Should never deallocate object gctools::GCContainer"));
}
obj_deallocate_unmanaged_instance_STAMP_gctools__GCArray_moveable_unsigned_int_:
{
     // stamp value 1711
    THROW_HARD_ERROR(BF("Should never deallocate containers gctools::GCArray_moveable<unsigned int>"));}
obj_deallocate_unmanaged_instance_STAMP_gctools__GCVector_moveable_core__CacheRecord_:
{
     // stamp value 1715
    THROW_HARD_ERROR(BF("Should never deallocate containers gctools::GCVector_moveable<core::CacheRecord>"));}
obj_deallocate_unmanaged_instance_STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__Cons_O__:
{
     // stamp value 1719
    THROW_HARD_ERROR(BF("Should never deallocate containers gctools::GCVector_moveable<gctools::smart_ptr<core::Cons_O>>"));}
obj_deallocate_unmanaged_instance_STAMP_gctools__GCVector_moveable_double_:
{
     // stamp value 1723
    THROW_HARD_ERROR(BF("Should never deallocate containers gctools::GCVector_moveable<double>"));}
obj_deallocate_unmanaged_instance_STAMP_gctools__GCArray_moveable_short_:
{
     // stamp value 1727
    THROW_HARD_ERROR(BF("Should never deallocate containers gctools::GCArray_moveable<short>"));}
obj_deallocate_unmanaged_instance_STAMP_gctools__GCVector_moveable_gctools__smart_ptr_clbind__ClassRep_O__:
{
     // stamp value 1731
    THROW_HARD_ERROR(BF("Should never deallocate containers gctools::GCVector_moveable<gctools::smart_ptr<clbind::ClassRep_O>>"));}
obj_deallocate_unmanaged_instance_STAMP_gctools__GCBitUnitArray_moveable_4_0_:
{
     // stamp value 1735
    THROW_HARD_ERROR(BF("Should never deallocate gcbitunits gctools::GCBitUnitArray_moveable<4,0>"));}
obj_deallocate_unmanaged_instance_STAMP_gctools__GCVector_moveable_core__Cons_O_:
{
     // stamp value 1739
    THROW_HARD_ERROR(BF("Should never deallocate containers gctools::GCVector_moveable<core::Cons_O>"));}
obj_deallocate_unmanaged_instance_STAMP_gctools__GCVector_moveable_core__SymbolClassHolderPair_:
{
     // stamp value 1743
    THROW_HARD_ERROR(BF("Should never deallocate containers gctools::GCVector_moveable<core::SymbolClassHolderPair>"));}
obj_deallocate_unmanaged_instance_STAMP_gctools__GCArray_moveable_signed_char_:
{
     // stamp value 1747
    THROW_HARD_ERROR(BF("Should never deallocate containers gctools::GCArray_moveable<signed char>"));}
obj_deallocate_unmanaged_instance_STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__List_V__:
{
     // stamp value 1751
    THROW_HARD_ERROR(BF("Should never deallocate containers gctools::GCVector_moveable<gctools::smart_ptr<core::List_V>>"));}
obj_deallocate_unmanaged_instance_STAMP_gctools__GCVector_moveable_std__pair_gctools__smart_ptr_core__T_O__gctools__smart_ptr_core__T_O___:
{
     // stamp value 1755
    THROW_HARD_ERROR(BF("Should never deallocate containers gctools::GCVector_moveable<std::pair<gctools::smart_ptr<core::T_O>,gctools::smart_ptr<core::T_O>>>"));}
obj_deallocate_unmanaged_instance_STAMP_gctools__GCArray_moveable_unsigned_char_:
{
     // stamp value 1759
    THROW_HARD_ERROR(BF("Should never deallocate containers gctools::GCArray_moveable<unsigned char>"));}
obj_deallocate_unmanaged_instance_STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__Symbol_O__:
{
     // stamp value 1763
    THROW_HARD_ERROR(BF("Should never deallocate containers gctools::GCVector_moveable<gctools::smart_ptr<core::Symbol_O>>"));}
obj_deallocate_unmanaged_instance_STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__T_O__:
{
     // stamp value 1767
    THROW_HARD_ERROR(BF("Should never deallocate containers gctools::GCVector_moveable<gctools::smart_ptr<core::T_O>>"));}
obj_deallocate_unmanaged_instance_STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__SingleDispatchMethod_O__:
{
     // stamp value 1771
    THROW_HARD_ERROR(BF("Should never deallocate containers gctools::GCVector_moveable<gctools::smart_ptr<core::SingleDispatchMethod_O>>"));}
obj_deallocate_unmanaged_instance_STAMP_gctools__GCArray_moveable_double_:
{
     // stamp value 1775
    THROW_HARD_ERROR(BF("Should never deallocate containers gctools::GCArray_moveable<double>"));}
obj_deallocate_unmanaged_instance_STAMP_gctools__GCVector_moveable_core__OptionalArgument_:
{
     // stamp value 1779
    THROW_HARD_ERROR(BF("Should never deallocate containers gctools::GCVector_moveable<core::OptionalArgument>"));}
obj_deallocate_unmanaged_instance_STAMP_gctools__GCVector_moveable_core__KeywordArgument_:
{
     // stamp value 1783
    THROW_HARD_ERROR(BF("Should never deallocate containers gctools::GCVector_moveable<core::KeywordArgument>"));}
obj_deallocate_unmanaged_instance_STAMP_gctools__GCVector_moveable_core__RequiredArgument_:
{
     // stamp value 1787
    THROW_HARD_ERROR(BF("Should never deallocate containers gctools::GCVector_moveable<core::RequiredArgument>"));}
obj_deallocate_unmanaged_instance_STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__FileScope_O__:
{
     // stamp value 1791
    THROW_HARD_ERROR(BF("Should never deallocate containers gctools::GCVector_moveable<gctools::smart_ptr<core::FileScope_O>>"));}
obj_deallocate_unmanaged_instance_STAMP_gctools__GCBitUnitArray_moveable_4_1_:
{
     // stamp value 1795
    THROW_HARD_ERROR(BF("Should never deallocate gcbitunits gctools::GCBitUnitArray_moveable<4,1>"));}
obj_deallocate_unmanaged_instance_STAMP_gctools__GCVector_moveable_core__SymbolStorage_:
{
     // stamp value 1799
    THROW_HARD_ERROR(BF("Should never deallocate containers gctools::GCVector_moveable<core::SymbolStorage>"));}
obj_deallocate_unmanaged_instance_STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__Instance_O__:
{
     // stamp value 1803
    THROW_HARD_ERROR(BF("Should never deallocate containers gctools::GCVector_moveable<gctools::smart_ptr<core::Instance_O>>"));}
obj_deallocate_unmanaged_instance_STAMP_gctools__GCArray_moveable_unsigned_long_:
{
     // stamp value 1807
    THROW_HARD_ERROR(BF("Should never deallocate containers gctools::GCArray_moveable<unsigned long>"));}
obj_deallocate_unmanaged_instance_STAMP_gctools__GCVector_moveable_std__pair_gctools__smart_ptr_core__Symbol_O__gctools__smart_ptr_core__T_O___:
{
     // stamp value 1811
    THROW_HARD_ERROR(BF("Should never deallocate containers gctools::GCVector_moveable<std::pair<gctools::smart_ptr<core::Symbol_O>,gctools::smart_ptr<core::T_O>>>"));}
obj_deallocate_unmanaged_instance_STAMP_gctools__GCBitUnitArray_moveable_2_0_:
{
     // stamp value 1815
    THROW_HARD_ERROR(BF("Should never deallocate gcbitunits gctools::GCBitUnitArray_moveable<2,0>"));}
obj_deallocate_unmanaged_instance_STAMP_gctools__GCArray_moveable_int_:
{
     // stamp value 1819
    THROW_HARD_ERROR(BF("Should never deallocate containers gctools::GCArray_moveable<int>"));}
obj_deallocate_unmanaged_instance_STAMP_gctools__GCBitUnitArray_moveable_1_0_:
{
     // stamp value 1823
    THROW_HARD_ERROR(BF("Should never deallocate gcbitunits gctools::GCBitUnitArray_moveable<1,0>"));}
obj_deallocate_unmanaged_instance_STAMP_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__:
{
     // stamp value 1827
    THROW_HARD_ERROR(BF("Should never deallocate containers gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>>"));}
obj_deallocate_unmanaged_instance_STAMP_gctools__GCVector_moveable_core__AuxArgument_:
{
     // stamp value 1831
    THROW_HARD_ERROR(BF("Should never deallocate containers gctools::GCVector_moveable<core::AuxArgument>"));}
obj_deallocate_unmanaged_instance_STAMP_gctools__GCBitUnitArray_moveable_2_1_:
{
     // stamp value 1835
    THROW_HARD_ERROR(BF("Should never deallocate gcbitunits gctools::GCBitUnitArray_moveable<2,1>"));}
obj_deallocate_unmanaged_instance_STAMP_gctools__GCArray_moveable_long_:
{
     // stamp value 1839
    THROW_HARD_ERROR(BF("Should never deallocate containers gctools::GCArray_moveable<long>"));}
obj_deallocate_unmanaged_instance_STAMP_gctools__GCVector_moveable_int_:
{
     // stamp value 1843
    THROW_HARD_ERROR(BF("Should never deallocate containers gctools::GCVector_moveable<int>"));}
obj_deallocate_unmanaged_instance_STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__Package_O__:
{
     // stamp value 1847
    THROW_HARD_ERROR(BF("Should never deallocate containers gctools::GCVector_moveable<gctools::smart_ptr<core::Package_O>>"));}
obj_deallocate_unmanaged_instance_STAMP_gctools__GCArray_moveable_float_:
{
     // stamp value 1851
    THROW_HARD_ERROR(BF("Should never deallocate containers gctools::GCArray_moveable<float>"));}
obj_deallocate_unmanaged_instance_STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__Creator_O__:
{
     // stamp value 1855
    THROW_HARD_ERROR(BF("Should never deallocate containers gctools::GCVector_moveable<gctools::smart_ptr<core::Creator_O>>"));}
obj_deallocate_unmanaged_instance_STAMP_gctools__GCVector_moveable_core__T_O___:
{
     // stamp value 1859
    THROW_HARD_ERROR(BF("Should never deallocate containers gctools::GCVector_moveable<core::T_O *>"));}
obj_deallocate_unmanaged_instance_STAMP_gctools__GCArray_moveable_unsigned_short_:
{
     // stamp value 1863
    THROW_HARD_ERROR(BF("Should never deallocate containers gctools::GCArray_moveable<unsigned short>"));}
obj_deallocate_unmanaged_instance_STAMP_gctools__GCVector_moveable_float_:
{
     // stamp value 1867
    THROW_HARD_ERROR(BF("Should never deallocate containers gctools::GCVector_moveable<float>"));}
obj_deallocate_unmanaged_instance_STAMP_clang__FrontendAction:
{
     // do nothing stamp value 1871
    THROW_HARD_ERROR(BF("Should never deallocate object clang::FrontendAction"));
}
obj_deallocate_unmanaged_instance_STAMP_clang__ASTFrontendAction:
{
     // do nothing stamp value 1875
    THROW_HARD_ERROR(BF("Should never deallocate object clang::ASTFrontendAction"));
}
obj_deallocate_unmanaged_instance_STAMP_clang__SyntaxOnlyAction:
{
     // do nothing stamp value 1879
    THROW_HARD_ERROR(BF("Should never deallocate object clang::SyntaxOnlyAction"));
}
#endif // defined(GC_OBJ_DEALLOCATOR)
#if defined(GC_OBJ_DEALLOCATOR_HELPERS)

#endif // defined(GC_OBJ_DEALLOCATOR_HELPERS)
#if defined(GC_OBJ_DEALLOCATOR_TABLE)
static void* OBJ_DEALLOCATOR_table[] = { 
  /* 0 */ NULL,
  /* 7 */ &&obj_deallocate_unmanaged_instance_STAMP_core__T_O,
  /* 11 */ &&obj_deallocate_unmanaged_instance_STAMP_core__VaList_dummy_O,
  /* 15 */ &&obj_deallocate_unmanaged_instance_STAMP_core__Unused_dummy_O,
  /* 19 */ &&obj_deallocate_unmanaged_instance_STAMP_core__General_O,
  /* 23 */ &&obj_deallocate_unmanaged_instance_STAMP_core__MultiStringBuffer_O,
  /* 27 */ &&obj_deallocate_unmanaged_instance_STAMP_core__ClassHolder_O,
  /* 30 */ &&obj_deallocate_unmanaged_instance_STAMP_core__WrappedPointer_O,
  /* 35 */ &&obj_deallocate_unmanaged_instance_STAMP_core__FdSet_O,
  /* 39 */ &&obj_deallocate_unmanaged_instance_STAMP_core__SymbolToEnumConverter_O,
  /* 43 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__Attribute_O,
  /* 47 */ &&obj_deallocate_unmanaged_instance_STAMP_core__LambdaListHandler_O,
  /* 51 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__AttributeSet_O,
  /* 55 */ &&obj_deallocate_unmanaged_instance_STAMP_core__AtomicT_Holder_O,
  /* 59 */ &&obj_deallocate_unmanaged_instance_STAMP_core__Function_O,
  /* 61 */ &&obj_deallocate_unmanaged_instance_STAMP_core__FuncallableInstance_O,
  /* 67 */ &&obj_deallocate_unmanaged_instance_STAMP_core__Creator_O,
  /* 71 */ &&obj_deallocate_unmanaged_instance_STAMP_core__ClassRepCreator_O,
  /* 75 */ &&obj_deallocate_unmanaged_instance_STAMP_core__DerivableCxxClassCreator_O,
  /* 79 */ &&obj_deallocate_unmanaged_instance_STAMP_core__FuncallableInstanceCreator_O,
  /* 83 */ &&obj_deallocate_unmanaged_instance_STAMP_clbind__ConstructorCreator_O,
  /* 87 */ &&obj_deallocate_unmanaged_instance_STAMP_clbind__DummyCreator_O,
  /* 91 */ &&obj_deallocate_unmanaged_instance_STAMP_core__InstanceCreator_O,
  /* 95 */ &&obj_deallocate_unmanaged_instance_STAMP_core__StandardClassCreator_O,
  /* 99 */ &&obj_deallocate_unmanaged_instance_STAMP_core__SpecialForm_O,
  /* 103 */ &&obj_deallocate_unmanaged_instance_STAMP_core__Closure_O,
  /* 107 */ &&obj_deallocate_unmanaged_instance_STAMP_core__ClosureWithSlots_O,
  /* 111 */ &&obj_deallocate_unmanaged_instance_STAMP_core__SingleDispatchCxxEffectiveMethodFunction_O,
  /* 115 */ &&obj_deallocate_unmanaged_instance_STAMP_core__SingleDispatchMethodFunction_O,
  /* 119 */ &&obj_deallocate_unmanaged_instance_STAMP_core__CxxMethodFunction_O,
  /* 123 */ &&obj_deallocate_unmanaged_instance_STAMP_core__BuiltinClosure_O,
  /* 127 */ &&obj_deallocate_unmanaged_instance_STAMP_core__TranslationFunctor_O,
  /* 131 */ &&obj_deallocate_unmanaged_instance_STAMP_core__SingleDispatchGenericFunctionClosure_O,
  /* 135 */ &&obj_deallocate_unmanaged_instance_STAMP_core__SingleDispatchEffectiveMethodFunction_O,
  /* 139 */ &&obj_deallocate_unmanaged_instance_STAMP_core__WeakPointer_O,
  /* 143 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__DebugLoc_O,
  /* 147 */ &&obj_deallocate_unmanaged_instance_STAMP_core__Pointer_O,
  /* 151 */ &&obj_deallocate_unmanaged_instance_STAMP_clasp_ffi__ForeignData_O,
  /* 155 */ &&obj_deallocate_unmanaged_instance_STAMP_core__CxxObject_O,
  /* 159 */ &&obj_deallocate_unmanaged_instance_STAMP_core__NativeVector_float_O,
  /* 163 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__MDBuilder_O,
  /* 167 */ &&obj_deallocate_unmanaged_instance_STAMP_mp__ConditionVariable_O,
  /* 171 */ &&obj_deallocate_unmanaged_instance_STAMP_core__NativeVector_double_O,
  /* 175 */ &&obj_deallocate_unmanaged_instance_STAMP_core__NativeVector_int_O,
  /* 179 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__FunctionCallee_O,
  /* 183 */ &&obj_deallocate_unmanaged_instance_STAMP_core__Serializer_O,
  /* 187 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__DINodeArray_O,
  /* 191 */ &&obj_deallocate_unmanaged_instance_STAMP_mp__Mutex_O,
  /* 195 */ &&obj_deallocate_unmanaged_instance_STAMP_mp__RecursiveMutex_O,
  /* 199 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__DITypeRefArray_O,
  /* 203 */ &&obj_deallocate_unmanaged_instance_STAMP_mp__SharedMutex_O,
  /* 207 */ &&obj_deallocate_unmanaged_instance_STAMP_mp__Process_O,
  /* 211 */ &&obj_deallocate_unmanaged_instance_STAMP_core__SingleDispatchMethod_O,
  /* 215 */ &&obj_deallocate_unmanaged_instance_STAMP_core__Iterator_O,
  /* 219 */ &&obj_deallocate_unmanaged_instance_STAMP_core__DirectoryIterator_O,
  /* 223 */ &&obj_deallocate_unmanaged_instance_STAMP_core__RecursiveDirectoryIterator_O,
  /* 227 */ &&obj_deallocate_unmanaged_instance_STAMP_core__Array_O,
  /* 231 */ &&obj_deallocate_unmanaged_instance_STAMP_core__MDArray_O,
  /* 235 */ &&obj_deallocate_unmanaged_instance_STAMP_core__template_Array_core__MDArray_int16_t_O_core__SimpleMDArray_int16_t_O_core__SimpleVector_int16_t_O_core__MDArray_O_,
  /* 239 */ &&obj_deallocate_unmanaged_instance_STAMP_core__MDArray_int16_t_O,
  /* 243 */ &&obj_deallocate_unmanaged_instance_STAMP_core__template_Array_core__MDArray_int8_t_O_core__SimpleMDArray_int8_t_O_core__SimpleVector_int8_t_O_core__MDArray_O_,
  /* 247 */ &&obj_deallocate_unmanaged_instance_STAMP_core__MDArray_int8_t_O,
  /* 251 */ &&obj_deallocate_unmanaged_instance_STAMP_core__template_Array_core__MDArray_int32_t_O_core__SimpleMDArray_int32_t_O_core__SimpleVector_int32_t_O_core__MDArray_O_,
  /* 255 */ &&obj_deallocate_unmanaged_instance_STAMP_core__MDArray_int32_t_O,
  /* 259 */ &&obj_deallocate_unmanaged_instance_STAMP_core__template_Array_core__MDArray_byte4_t_O_core__SimpleMDArray_byte4_t_O_core__SimpleVector_byte4_t_O_core__MDArray_O_,
  /* 263 */ &&obj_deallocate_unmanaged_instance_STAMP_core__MDArray_byte4_t_O,
  /* 267 */ &&obj_deallocate_unmanaged_instance_STAMP_core__template_Array_core__MDArray_float_O_core__SimpleMDArray_float_O_core__SimpleVector_float_O_core__MDArray_O_,
  /* 271 */ &&obj_deallocate_unmanaged_instance_STAMP_core__MDArray_float_O,
  /* 275 */ &&obj_deallocate_unmanaged_instance_STAMP_core__template_Array_core__MDArray_size_t_O_core__SimpleMDArray_size_t_O_core__SimpleVector_size_t_O_core__MDArray_O_,
  /* 279 */ &&obj_deallocate_unmanaged_instance_STAMP_core__MDArray_size_t_O,
  /* 283 */ &&obj_deallocate_unmanaged_instance_STAMP_core__template_Array_core__MDArray_byte8_t_O_core__SimpleMDArray_byte8_t_O_core__SimpleVector_byte8_t_O_core__MDArray_O_,
  /* 287 */ &&obj_deallocate_unmanaged_instance_STAMP_core__MDArray_byte8_t_O,
  /* 291 */ &&obj_deallocate_unmanaged_instance_STAMP_core__template_Array_core__MDArray_int64_t_O_core__SimpleMDArray_int64_t_O_core__SimpleVector_int64_t_O_core__MDArray_O_,
  /* 295 */ &&obj_deallocate_unmanaged_instance_STAMP_core__MDArray_int64_t_O,
  /* 299 */ &&obj_deallocate_unmanaged_instance_STAMP_core__template_Array_core__MDArray_byte32_t_O_core__SimpleMDArray_byte32_t_O_core__SimpleVector_byte32_t_O_core__MDArray_O_,
  /* 303 */ &&obj_deallocate_unmanaged_instance_STAMP_core__MDArray_byte32_t_O,
  /* 307 */ &&obj_deallocate_unmanaged_instance_STAMP_core__template_Array_core__MDArray_byte2_t_O_core__SimpleMDArray_byte2_t_O_core__SimpleVector_byte2_t_O_core__MDArray_O_,
  /* 311 */ &&obj_deallocate_unmanaged_instance_STAMP_core__MDArray_byte2_t_O,
  /* 315 */ &&obj_deallocate_unmanaged_instance_STAMP_core__template_Array_core__MDArray_int2_t_O_core__SimpleMDArray_int2_t_O_core__SimpleVector_int2_t_O_core__MDArray_O_,
  /* 319 */ &&obj_deallocate_unmanaged_instance_STAMP_core__MDArray_int2_t_O,
  /* 323 */ &&obj_deallocate_unmanaged_instance_STAMP_core__template_Array_core__MDArray_fixnum_O_core__SimpleMDArray_fixnum_O_core__SimpleVector_fixnum_O_core__MDArray_O_,
  /* 327 */ &&obj_deallocate_unmanaged_instance_STAMP_core__MDArray_fixnum_O,
  /* 331 */ &&obj_deallocate_unmanaged_instance_STAMP_core__template_Array_core__MDArrayBaseChar_O_core__SimpleMDArrayBaseChar_O_core__SimpleBaseString_O_core__MDArray_O_,
  /* 335 */ &&obj_deallocate_unmanaged_instance_STAMP_core__MDArrayBaseChar_O,
  /* 339 */ &&obj_deallocate_unmanaged_instance_STAMP_core__template_Array_core__MDArray_byte64_t_O_core__SimpleMDArray_byte64_t_O_core__SimpleVector_byte64_t_O_core__MDArray_O_,
  /* 343 */ &&obj_deallocate_unmanaged_instance_STAMP_core__MDArray_byte64_t_O,
  /* 347 */ &&obj_deallocate_unmanaged_instance_STAMP_core__template_Array_core__MDArrayCharacter_O_core__SimpleMDArrayCharacter_O_core__SimpleCharacterString_O_core__MDArray_O_,
  /* 351 */ &&obj_deallocate_unmanaged_instance_STAMP_core__MDArrayCharacter_O,
  /* 355 */ &&obj_deallocate_unmanaged_instance_STAMP_core__template_Array_core__MDArrayT_O_core__SimpleMDArrayT_O_core__SimpleVector_O_core__MDArray_O_,
  /* 359 */ &&obj_deallocate_unmanaged_instance_STAMP_core__MDArrayT_O,
  /* 363 */ &&obj_deallocate_unmanaged_instance_STAMP_core__template_Array_core__MDArrayBit_O_core__SimpleMDArrayBit_O_core__SimpleBitVector_O_core__MDArray_O_,
  /* 367 */ &&obj_deallocate_unmanaged_instance_STAMP_core__MDArrayBit_O,
  /* 371 */ &&obj_deallocate_unmanaged_instance_STAMP_core__template_Array_core__MDArray_byte16_t_O_core__SimpleMDArray_byte16_t_O_core__SimpleVector_byte16_t_O_core__MDArray_O_,
  /* 375 */ &&obj_deallocate_unmanaged_instance_STAMP_core__MDArray_byte16_t_O,
  /* 379 */ &&obj_deallocate_unmanaged_instance_STAMP_core__SimpleMDArray_O,
  /* 383 */ &&obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleArray_core__SimpleMDArray_int8_t_O_core__SimpleVector_int8_t_O_core__SimpleMDArray_O_,
  /* 387 */ &&obj_deallocate_unmanaged_instance_STAMP_core__SimpleMDArray_int8_t_O,
  /* 391 */ &&obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleArray_core__SimpleMDArray_double_O_core__SimpleVector_double_O_core__SimpleMDArray_O_,
  /* 395 */ &&obj_deallocate_unmanaged_instance_STAMP_core__SimpleMDArray_double_O,
  /* 399 */ &&obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleArray_core__SimpleMDArray_byte32_t_O_core__SimpleVector_byte32_t_O_core__SimpleMDArray_O_,
  /* 403 */ &&obj_deallocate_unmanaged_instance_STAMP_core__SimpleMDArray_byte32_t_O,
  /* 407 */ &&obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleArray_core__SimpleMDArrayT_O_core__SimpleVector_O_core__SimpleMDArray_O_,
  /* 411 */ &&obj_deallocate_unmanaged_instance_STAMP_core__SimpleMDArrayT_O,
  /* 415 */ &&obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleArray_core__SimpleMDArray_int2_t_O_core__SimpleVector_int2_t_O_core__SimpleMDArray_O_,
  /* 419 */ &&obj_deallocate_unmanaged_instance_STAMP_core__SimpleMDArray_int2_t_O,
  /* 423 */ &&obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleArray_core__SimpleMDArray_byte4_t_O_core__SimpleVector_byte4_t_O_core__SimpleMDArray_O_,
  /* 427 */ &&obj_deallocate_unmanaged_instance_STAMP_core__SimpleMDArray_byte4_t_O,
  /* 431 */ &&obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleArray_core__SimpleMDArray_int32_t_O_core__SimpleVector_int32_t_O_core__SimpleMDArray_O_,
  /* 435 */ &&obj_deallocate_unmanaged_instance_STAMP_core__SimpleMDArray_int32_t_O,
  /* 439 */ &&obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleArray_core__SimpleMDArray_float_O_core__SimpleVector_float_O_core__SimpleMDArray_O_,
  /* 443 */ &&obj_deallocate_unmanaged_instance_STAMP_core__SimpleMDArray_float_O,
  /* 447 */ &&obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleArray_core__SimpleMDArray_int16_t_O_core__SimpleVector_int16_t_O_core__SimpleMDArray_O_,
  /* 451 */ &&obj_deallocate_unmanaged_instance_STAMP_core__SimpleMDArray_int16_t_O,
  /* 455 */ &&obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleArray_core__SimpleMDArray_size_t_O_core__SimpleVector_size_t_O_core__SimpleMDArray_O_,
  /* 459 */ &&obj_deallocate_unmanaged_instance_STAMP_core__SimpleMDArray_size_t_O,
  /* 463 */ &&obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleArray_core__SimpleMDArray_int4_t_O_core__SimpleVector_int4_t_O_core__SimpleMDArray_O_,
  /* 467 */ &&obj_deallocate_unmanaged_instance_STAMP_core__SimpleMDArray_int4_t_O,
  /* 471 */ &&obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleArray_core__SimpleMDArrayCharacter_O_core__SimpleCharacterString_O_core__SimpleMDArray_O_,
  /* 475 */ &&obj_deallocate_unmanaged_instance_STAMP_core__SimpleMDArrayCharacter_O,
  /* 479 */ &&obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleArray_core__SimpleMDArray_byte2_t_O_core__SimpleVector_byte2_t_O_core__SimpleMDArray_O_,
  /* 483 */ &&obj_deallocate_unmanaged_instance_STAMP_core__SimpleMDArray_byte2_t_O,
  /* 487 */ &&obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleArray_core__SimpleMDArray_fixnum_O_core__SimpleVector_fixnum_O_core__SimpleMDArray_O_,
  /* 491 */ &&obj_deallocate_unmanaged_instance_STAMP_core__SimpleMDArray_fixnum_O,
  /* 495 */ &&obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleArray_core__SimpleMDArray_byte16_t_O_core__SimpleVector_byte16_t_O_core__SimpleMDArray_O_,
  /* 499 */ &&obj_deallocate_unmanaged_instance_STAMP_core__SimpleMDArray_byte16_t_O,
  /* 503 */ &&obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleArray_core__SimpleMDArrayBaseChar_O_core__SimpleBaseString_O_core__SimpleMDArray_O_,
  /* 507 */ &&obj_deallocate_unmanaged_instance_STAMP_core__SimpleMDArrayBaseChar_O,
  /* 511 */ &&obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleArray_core__SimpleMDArray_byte64_t_O_core__SimpleVector_byte64_t_O_core__SimpleMDArray_O_,
  /* 515 */ &&obj_deallocate_unmanaged_instance_STAMP_core__SimpleMDArray_byte64_t_O,
  /* 519 */ &&obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleArray_core__SimpleMDArrayBit_O_core__SimpleBitVector_O_core__SimpleMDArray_O_,
  /* 523 */ &&obj_deallocate_unmanaged_instance_STAMP_core__SimpleMDArrayBit_O,
  /* 527 */ &&obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleArray_core__SimpleMDArray_byte8_t_O_core__SimpleVector_byte8_t_O_core__SimpleMDArray_O_,
  /* 531 */ &&obj_deallocate_unmanaged_instance_STAMP_core__SimpleMDArray_byte8_t_O,
  /* 535 */ &&obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleArray_core__SimpleMDArray_int64_t_O_core__SimpleVector_int64_t_O_core__SimpleMDArray_O_,
  /* 539 */ &&obj_deallocate_unmanaged_instance_STAMP_core__SimpleMDArray_int64_t_O,
  /* 543 */ &&obj_deallocate_unmanaged_instance_STAMP_core__template_Array_core__MDArray_int4_t_O_core__SimpleMDArray_int4_t_O_core__SimpleVector_int4_t_O_core__MDArray_O_,
  /* 547 */ &&obj_deallocate_unmanaged_instance_STAMP_core__MDArray_int4_t_O,
  /* 551 */ &&obj_deallocate_unmanaged_instance_STAMP_core__template_Array_core__MDArray_double_O_core__SimpleMDArray_double_O_core__SimpleVector_double_O_core__MDArray_O_,
  /* 555 */ &&obj_deallocate_unmanaged_instance_STAMP_core__MDArray_double_O,
  /* 559 */ &&obj_deallocate_unmanaged_instance_STAMP_core__ComplexVector_O,
  /* 563 */ &&obj_deallocate_unmanaged_instance_STAMP_core__template_Vector_core__ComplexVector_double_O_core__SimpleVector_double_O_core__ComplexVector_O_,
  /* 567 */ &&obj_deallocate_unmanaged_instance_STAMP_core__ComplexVector_double_O,
  /* 571 */ &&obj_deallocate_unmanaged_instance_STAMP_core__template_Vector_core__ComplexVector_int8_t_O_core__SimpleVector_int8_t_O_core__ComplexVector_O_,
  /* 575 */ &&obj_deallocate_unmanaged_instance_STAMP_core__ComplexVector_int8_t_O,
  /* 579 */ &&obj_deallocate_unmanaged_instance_STAMP_core__template_Vector_core__ComplexVector_byte64_t_O_core__SimpleVector_byte64_t_O_core__ComplexVector_O_,
  /* 583 */ &&obj_deallocate_unmanaged_instance_STAMP_core__ComplexVector_byte64_t_O,
  /* 587 */ &&obj_deallocate_unmanaged_instance_STAMP_core__template_Vector_core__ComplexVector_T_O_core__SimpleVector_O_core__ComplexVector_O_,
  /* 591 */ &&obj_deallocate_unmanaged_instance_STAMP_core__ComplexVector_T_O,
  /* 595 */ &&obj_deallocate_unmanaged_instance_STAMP_core__template_Vector_core__ComplexVector_int2_t_O_core__SimpleVector_int2_t_O_core__ComplexVector_O_,
  /* 599 */ &&obj_deallocate_unmanaged_instance_STAMP_core__ComplexVector_int2_t_O,
  /* 603 */ &&obj_deallocate_unmanaged_instance_STAMP_core__template_Vector_core__ComplexVector_int32_t_O_core__SimpleVector_int32_t_O_core__ComplexVector_O_,
  /* 607 */ &&obj_deallocate_unmanaged_instance_STAMP_core__ComplexVector_int32_t_O,
  /* 611 */ &&obj_deallocate_unmanaged_instance_STAMP_core__template_Vector_core__ComplexVector_byte16_t_O_core__SimpleVector_byte16_t_O_core__ComplexVector_O_,
  /* 615 */ &&obj_deallocate_unmanaged_instance_STAMP_core__ComplexVector_byte16_t_O,
  /* 619 */ &&obj_deallocate_unmanaged_instance_STAMP_core__template_Vector_core__ComplexVector_float_O_core__SimpleVector_float_O_core__ComplexVector_O_,
  /* 623 */ &&obj_deallocate_unmanaged_instance_STAMP_core__ComplexVector_float_O,
  /* 627 */ &&obj_deallocate_unmanaged_instance_STAMP_core__template_Vector_core__ComplexVector_int16_t_O_core__SimpleVector_int16_t_O_core__ComplexVector_O_,
  /* 631 */ &&obj_deallocate_unmanaged_instance_STAMP_core__ComplexVector_int16_t_O,
  /* 635 */ &&obj_deallocate_unmanaged_instance_STAMP_core__template_Vector_core__ComplexVector_int4_t_O_core__SimpleVector_int4_t_O_core__ComplexVector_O_,
  /* 639 */ &&obj_deallocate_unmanaged_instance_STAMP_core__ComplexVector_int4_t_O,
  /* 643 */ &&obj_deallocate_unmanaged_instance_STAMP_core__template_Vector_core__ComplexVector_size_t_O_core__SimpleVector_size_t_O_core__ComplexVector_O_,
  /* 647 */ &&obj_deallocate_unmanaged_instance_STAMP_core__ComplexVector_size_t_O,
  /* 651 */ &&obj_deallocate_unmanaged_instance_STAMP_core__template_Vector_core__ComplexVector_byte2_t_O_core__SimpleVector_byte2_t_O_core__ComplexVector_O_,
  /* 655 */ &&obj_deallocate_unmanaged_instance_STAMP_core__ComplexVector_byte2_t_O,
  /* 659 */ &&obj_deallocate_unmanaged_instance_STAMP_core__template_Vector_core__ComplexVector_byte8_t_O_core__SimpleVector_byte8_t_O_core__ComplexVector_O_,
  /* 663 */ &&obj_deallocate_unmanaged_instance_STAMP_core__ComplexVector_byte8_t_O,
  /* 667 */ &&obj_deallocate_unmanaged_instance_STAMP_core__template_Vector_core__ComplexVector_byte32_t_O_core__SimpleVector_byte32_t_O_core__ComplexVector_O_,
  /* 671 */ &&obj_deallocate_unmanaged_instance_STAMP_core__ComplexVector_byte32_t_O,
  /* 675 */ &&obj_deallocate_unmanaged_instance_STAMP_core__template_Vector_core__BitVectorNs_O_core__SimpleBitVector_O_core__ComplexVector_O_,
  /* 679 */ &&obj_deallocate_unmanaged_instance_STAMP_core__BitVectorNs_O,
  /* 683 */ &&obj_deallocate_unmanaged_instance_STAMP_core__StrNs_O,
  /* 687 */ &&obj_deallocate_unmanaged_instance_STAMP_core__template_Vector_core__Str8Ns_O_core__SimpleBaseString_O_core__StrNs_O_,
  /* 691 */ &&obj_deallocate_unmanaged_instance_STAMP_core__Str8Ns_O,
  /* 695 */ &&obj_deallocate_unmanaged_instance_STAMP_core__template_Vector_core__StrWNs_O_core__SimpleCharacterString_O_core__StrNs_O_,
  /* 699 */ &&obj_deallocate_unmanaged_instance_STAMP_core__StrWNs_O,
  /* 703 */ &&obj_deallocate_unmanaged_instance_STAMP_core__template_Vector_core__ComplexVector_byte4_t_O_core__SimpleVector_byte4_t_O_core__ComplexVector_O_,
  /* 707 */ &&obj_deallocate_unmanaged_instance_STAMP_core__ComplexVector_byte4_t_O,
  /* 711 */ &&obj_deallocate_unmanaged_instance_STAMP_core__template_Vector_core__ComplexVector_fixnum_O_core__SimpleVector_fixnum_O_core__ComplexVector_O_,
  /* 715 */ &&obj_deallocate_unmanaged_instance_STAMP_core__ComplexVector_fixnum_O,
  /* 719 */ &&obj_deallocate_unmanaged_instance_STAMP_core__template_Vector_core__ComplexVector_int64_t_O_core__SimpleVector_int64_t_O_core__ComplexVector_O_,
  /* 723 */ &&obj_deallocate_unmanaged_instance_STAMP_core__ComplexVector_int64_t_O,
  /* 727 */ &&obj_deallocate_unmanaged_instance_STAMP_core__AbstractSimpleVector_O,
  /* 731 */ &&obj_deallocate_unmanaged_instance_STAMP_core__SimpleString_O,
  /* 735 */ &&obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleVector_core__SimpleCharacterString_O_int_core__SimpleString_O_,
  /* 739 */ &&obj_deallocate_unmanaged_instance_STAMP_core__SimpleCharacterString_O,
  /* 743 */ &&obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleVector_core__SimpleBaseString_O_unsigned_char_core__SimpleString_O_,
  /* 747 */ &&obj_deallocate_unmanaged_instance_STAMP_core__SimpleBaseString_O,
  /* 751 */ &&obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleVector_core__SimpleVector_int16_t_O_short_core__AbstractSimpleVector_O_,
  /* 755 */ &&obj_deallocate_unmanaged_instance_STAMP_core__SimpleVector_int16_t_O,
  /* 759 */ &&obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleVector_core__SimpleVector_byte16_t_O_unsigned_short_core__AbstractSimpleVector_O_,
  /* 763 */ &&obj_deallocate_unmanaged_instance_STAMP_core__SimpleVector_byte16_t_O,
  /* 767 */ &&obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleBitUnitVector_core__SimpleBitVector_O_1_0_,
  /* 771 */ &&obj_deallocate_unmanaged_instance_STAMP_core__SimpleBitVector_O,
  /* 775 */ &&obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleBitUnitVector_core__SimpleVector_int4_t_O_4_1_,
  /* 779 */ &&obj_deallocate_unmanaged_instance_STAMP_core__SimpleVector_int4_t_O,
  /* 783 */ &&obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleVector_core__SimpleVector_byte32_t_O_unsigned_int_core__AbstractSimpleVector_O_,
  /* 787 */ &&obj_deallocate_unmanaged_instance_STAMP_core__SimpleVector_byte32_t_O,
  /* 791 */ &&obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleVector_core__SimpleVector_size_t_O_unsigned_long_core__AbstractSimpleVector_O_,
  /* 795 */ &&obj_deallocate_unmanaged_instance_STAMP_core__SimpleVector_size_t_O,
  /* 799 */ &&obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleVector_core__SimpleVector_double_O_double_core__AbstractSimpleVector_O_,
  /* 803 */ &&obj_deallocate_unmanaged_instance_STAMP_core__SimpleVector_double_O,
  /* 807 */ &&obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleVector_core__SimpleVector_byte64_t_O_unsigned_long_core__AbstractSimpleVector_O_,
  /* 811 */ &&obj_deallocate_unmanaged_instance_STAMP_core__SimpleVector_byte64_t_O,
  /* 815 */ &&obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleBitUnitVector_core__SimpleVector_int2_t_O_2_1_,
  /* 819 */ &&obj_deallocate_unmanaged_instance_STAMP_core__SimpleVector_int2_t_O,
  /* 823 */ &&obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleVector_core__SimpleVector_int64_t_O_long_core__AbstractSimpleVector_O_,
  /* 827 */ &&obj_deallocate_unmanaged_instance_STAMP_core__SimpleVector_int64_t_O,
  /* 831 */ &&obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleVector_core__SimpleVector_fixnum_O_long_core__AbstractSimpleVector_O_,
  /* 835 */ &&obj_deallocate_unmanaged_instance_STAMP_core__SimpleVector_fixnum_O,
  /* 839 */ &&obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleVector_core__SimpleVector_int8_t_O_signed_char_core__AbstractSimpleVector_O_,
  /* 843 */ &&obj_deallocate_unmanaged_instance_STAMP_core__SimpleVector_int8_t_O,
  /* 847 */ &&obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleVector_core__SimpleVector_float_O_float_core__AbstractSimpleVector_O_,
  /* 851 */ &&obj_deallocate_unmanaged_instance_STAMP_core__SimpleVector_float_O,
  /* 855 */ &&obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleVector_core__SimpleVector_O_gctools__smart_ptr_core__T_O__core__AbstractSimpleVector_O_,
  /* 859 */ &&obj_deallocate_unmanaged_instance_STAMP_core__SimpleVector_O,
  /* 863 */ &&obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleVector_core__SimpleVector_byte8_t_O_unsigned_char_core__AbstractSimpleVector_O_,
  /* 867 */ &&obj_deallocate_unmanaged_instance_STAMP_core__SimpleVector_byte8_t_O,
  /* 871 */ &&obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleBitUnitVector_core__SimpleVector_byte2_t_O_2_0_,
  /* 875 */ &&obj_deallocate_unmanaged_instance_STAMP_core__SimpleVector_byte2_t_O,
  /* 879 */ &&obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleVector_core__SimpleVector_int32_t_O_int_core__AbstractSimpleVector_O_,
  /* 883 */ &&obj_deallocate_unmanaged_instance_STAMP_core__SimpleVector_int32_t_O,
  /* 887 */ &&obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleBitUnitVector_core__SimpleVector_byte4_t_O_4_0_,
  /* 891 */ &&obj_deallocate_unmanaged_instance_STAMP_core__SimpleVector_byte4_t_O,
  /* 895 */ &&obj_deallocate_unmanaged_instance_STAMP_core__Symbol_O,
  /* 899 */ &&obj_deallocate_unmanaged_instance_STAMP_core__Null_O,
  /* 903 */ &&obj_deallocate_unmanaged_instance_STAMP_core__Character_dummy_O,
  /* 907 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__DataLayout_O,
  /* 911 */ &&obj_deallocate_unmanaged_instance_STAMP_core__LoadTimeValues_O,
  /* 915 */ &&obj_deallocate_unmanaged_instance_STAMP_core__SharpEqualWrapper_O,
  /* 919 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__ClaspJIT_O,
  /* 923 */ &&obj_deallocate_unmanaged_instance_STAMP_core__Readtable_O,
  /* 927 */ &&obj_deallocate_unmanaged_instance_STAMP_core__PosixTime_O,
  /* 931 */ &&obj_deallocate_unmanaged_instance_STAMP_core__Exposer_O,
  /* 935 */ &&obj_deallocate_unmanaged_instance_STAMP_core__CoreExposer_O,
  /* 939 */ &&obj_deallocate_unmanaged_instance_STAMP_asttooling__AsttoolingExposer_O,
  /* 943 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__StructLayout_O,
  /* 947 */ &&obj_deallocate_unmanaged_instance_STAMP_core__PosixTimeDuration_O,
  /* 951 */ &&obj_deallocate_unmanaged_instance_STAMP_clasp_ffi__ForeignTypeSpec_O,
  /* 953 */ &&obj_deallocate_unmanaged_instance_STAMP_core__Instance_O,
  /* 956 */ &&obj_deallocate_unmanaged_instance_STAMP_core__DerivableCxxObject_O,
  /* 961 */ &&obj_deallocate_unmanaged_instance_STAMP_clbind__ClassRep_O,
  /* 967 */ &&obj_deallocate_unmanaged_instance_STAMP_core__SmallMap_O,
  /* 971 */ &&obj_deallocate_unmanaged_instance_STAMP_mpip__Mpi_O,
  /* 975 */ &&obj_deallocate_unmanaged_instance_STAMP_core__ExternalObject_O,
  /* 979 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__Pass_O,
  /* 983 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__ModulePass_O,
  /* 987 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__ImmutablePass_O,
  /* 991 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__TargetLibraryInfoWrapperPass_O,
  /* 995 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__FunctionPass_O,
  /* 999 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__ExecutionEngine_O,
  /* 1003 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__MCSubtargetInfo_O,
  /* 1007 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__TargetSubtargetInfo_O,
  /* 1011 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__Type_O,
  /* 1015 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__FunctionType_O,
  /* 1019 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__CompositeType_O,
  /* 1023 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__SequentialType_O,
  /* 1027 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__PointerType_O,
  /* 1031 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__ArrayType_O,
  /* 1035 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__VectorType_O,
  /* 1039 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__StructType_O,
  /* 1043 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__IntegerType_O,
  /* 1047 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__JITDylib_O,
  /* 1051 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__DIContext_O,
  /* 1055 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__TargetPassConfig_O,
  /* 1059 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__IRBuilderBase_O,
  /* 1063 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__IRBuilder_O,
  /* 1067 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__APFloat_O,
  /* 1071 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__APInt_O,
  /* 1075 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__DIBuilder_O,
  /* 1079 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__SectionedAddress_O,
  /* 1083 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__EngineBuilder_O,
  /* 1087 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__PassManagerBase_O,
  /* 1091 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__PassManager_O,
  /* 1095 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__FunctionPassManager_O,
  /* 1099 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__Metadata_O,
  /* 1103 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__MDNode_O,
  /* 1107 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__DINode_O,
  /* 1111 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__DIVariable_O,
  /* 1115 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__DILocalVariable_O,
  /* 1119 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__DIScope_O,
  /* 1123 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__DIFile_O,
  /* 1127 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__DIType_O,
  /* 1131 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__DICompositeType_O,
  /* 1135 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__DIDerivedType_O,
  /* 1139 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__DIBasicType_O,
  /* 1143 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__DISubroutineType_O,
  /* 1147 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__DILocalScope_O,
  /* 1151 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__DISubprogram_O,
  /* 1155 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__DILexicalBlockBase_O,
  /* 1159 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__DILexicalBlock_O,
  /* 1163 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__DICompileUnit_O,
  /* 1167 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__DIExpression_O,
  /* 1171 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__DILocation_O,
  /* 1175 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__ValueAsMetadata_O,
  /* 1179 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__MDString_O,
  /* 1183 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__Value_O,
  /* 1187 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__Argument_O,
  /* 1191 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__BasicBlock_O,
  /* 1195 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__MetadataAsValue_O,
  /* 1199 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__User_O,
  /* 1203 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__Instruction_O,
  /* 1207 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__UnaryInstruction_O,
  /* 1211 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__VAArgInst_O,
  /* 1215 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__LoadInst_O,
  /* 1219 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__AllocaInst_O,
  /* 1223 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__SwitchInst_O,
  /* 1227 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__AtomicRMWInst_O,
  /* 1231 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__LandingPadInst_O,
  /* 1235 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__StoreInst_O,
  /* 1239 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__UnreachableInst_O,
  /* 1243 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__ReturnInst_O,
  /* 1247 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__ResumeInst_O,
  /* 1251 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__AtomicCmpXchgInst_O,
  /* 1255 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__FenceInst_O,
  /* 1259 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__CallBase_O,
  /* 1263 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__CallInst_O,
  /* 1267 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__InvokeInst_O,
  /* 1271 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__PHINode_O,
  /* 1275 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__IndirectBrInst_O,
  /* 1279 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__BranchInst_O,
  /* 1283 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__Constant_O,
  /* 1287 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__GlobalValue_O,
  /* 1291 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__Function_O,
  /* 1295 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__GlobalVariable_O,
  /* 1299 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__BlockAddress_O,
  /* 1303 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__ConstantDataSequential_O,
  /* 1307 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__ConstantDataArray_O,
  /* 1311 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__ConstantStruct_O,
  /* 1315 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__ConstantInt_O,
  /* 1319 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__ConstantFP_O,
  /* 1323 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__ConstantExpr_O,
  /* 1327 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__ConstantPointerNull_O,
  /* 1331 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__UndefValue_O,
  /* 1335 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__ConstantArray_O,
  /* 1339 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__TargetMachine_O,
  /* 1343 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__LLVMTargetMachine_O,
  /* 1347 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__ThreadSafeContext_O,
  /* 1351 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__NamedMDNode_O,
  /* 1355 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__Triple_O,
  /* 1359 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__DWARFContext_O,
  /* 1363 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__TargetOptions_O,
  /* 1367 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__ObjectFile_O,
  /* 1371 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__LLVMContext_O,
  /* 1375 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__PassManagerBuilder_O,
  /* 1379 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__Module_O,
  /* 1383 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__Target_O,
  /* 1387 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__Linker_O,
  /* 1391 */ &&obj_deallocate_unmanaged_instance_STAMP_core__Rack_O,
  /* 1395 */ &&obj_deallocate_unmanaged_instance_STAMP_core__SmallMultimap_O,
  /* 1399 */ &&obj_deallocate_unmanaged_instance_STAMP_core__Sigset_O,
  /* 1403 */ &&obj_deallocate_unmanaged_instance_STAMP_core__Environment_O,
  /* 1407 */ &&obj_deallocate_unmanaged_instance_STAMP_core__GlueEnvironment_O,
  /* 1411 */ &&obj_deallocate_unmanaged_instance_STAMP_core__LexicalEnvironment_O,
  /* 1415 */ &&obj_deallocate_unmanaged_instance_STAMP_core__RuntimeVisibleEnvironment_O,
  /* 1419 */ &&obj_deallocate_unmanaged_instance_STAMP_core__FunctionValueEnvironment_O,
  /* 1423 */ &&obj_deallocate_unmanaged_instance_STAMP_core__TagbodyEnvironment_O,
  /* 1427 */ &&obj_deallocate_unmanaged_instance_STAMP_core__BlockEnvironment_O,
  /* 1431 */ &&obj_deallocate_unmanaged_instance_STAMP_core__ValueEnvironment_O,
  /* 1435 */ &&obj_deallocate_unmanaged_instance_STAMP_core__CompileTimeEnvironment_O,
  /* 1439 */ &&obj_deallocate_unmanaged_instance_STAMP_core__CatchEnvironment_O,
  /* 1443 */ &&obj_deallocate_unmanaged_instance_STAMP_core__MacroletEnvironment_O,
  /* 1447 */ &&obj_deallocate_unmanaged_instance_STAMP_core__SymbolMacroletEnvironment_O,
  /* 1451 */ &&obj_deallocate_unmanaged_instance_STAMP_core__FunctionContainerEnvironment_O,
  /* 1455 */ &&obj_deallocate_unmanaged_instance_STAMP_core__UnwindProtectEnvironment_O,
  /* 1459 */ &&obj_deallocate_unmanaged_instance_STAMP_core__ActivationFrame_O,
  /* 1463 */ &&obj_deallocate_unmanaged_instance_STAMP_core__ValueFrame_O,
  /* 1467 */ &&obj_deallocate_unmanaged_instance_STAMP_core__FunctionFrame_O,
  /* 1471 */ &&obj_deallocate_unmanaged_instance_STAMP_core__RandomState_O,
  /* 1475 */ &&obj_deallocate_unmanaged_instance_STAMP_core__AtomicFixnumHolder_O,
  /* 1479 */ &&obj_deallocate_unmanaged_instance_STAMP_core__HashTableBase_O,
  /* 1483 */ &&obj_deallocate_unmanaged_instance_STAMP_core__WeakKeyHashTable_O,
  /* 1487 */ &&obj_deallocate_unmanaged_instance_STAMP_core__HashTable_O,
  /* 1491 */ &&obj_deallocate_unmanaged_instance_STAMP_core__HashTableEqualp_O,
  /* 1495 */ &&obj_deallocate_unmanaged_instance_STAMP_core__HashTableEq_O,
  /* 1499 */ &&obj_deallocate_unmanaged_instance_STAMP_core__HashTableEql_O,
  /* 1503 */ &&obj_deallocate_unmanaged_instance_STAMP_core__HashTableEqual_O,
  /* 1507 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__InsertPoint_O,
  /* 1511 */ &&obj_deallocate_unmanaged_instance_STAMP_core__Scope_O,
  /* 1515 */ &&obj_deallocate_unmanaged_instance_STAMP_core__FileScope_O,
  /* 1519 */ &&obj_deallocate_unmanaged_instance_STAMP_core__Path_O,
  /* 1523 */ &&obj_deallocate_unmanaged_instance_STAMP_core__Pathname_O,
  /* 1527 */ &&obj_deallocate_unmanaged_instance_STAMP_core__LogicalPathname_O,
  /* 1531 */ &&obj_deallocate_unmanaged_instance_STAMP_core__Cache_O,
  /* 1535 */ &&obj_deallocate_unmanaged_instance_STAMP_core__Number_O,
  /* 1539 */ &&obj_deallocate_unmanaged_instance_STAMP_core__Real_O,
  /* 1543 */ &&obj_deallocate_unmanaged_instance_STAMP_core__Rational_O,
  /* 1547 */ &&obj_deallocate_unmanaged_instance_STAMP_core__Ratio_O,
  /* 1551 */ &&obj_deallocate_unmanaged_instance_STAMP_core__Integer_O,
  /* 1555 */ &&obj_deallocate_unmanaged_instance_STAMP_core__Bignum_O,
  /* 1559 */ &&obj_deallocate_unmanaged_instance_STAMP_core__Fixnum_dummy_O,
  /* 1563 */ &&obj_deallocate_unmanaged_instance_STAMP_core__Float_O,
  /* 1567 */ &&obj_deallocate_unmanaged_instance_STAMP_core__DoubleFloat_O,
  /* 1571 */ &&obj_deallocate_unmanaged_instance_STAMP_core__SingleFloat_dummy_O,
  /* 1575 */ &&obj_deallocate_unmanaged_instance_STAMP_core__LongFloat_O,
  /* 1579 */ &&obj_deallocate_unmanaged_instance_STAMP_core__ShortFloat_O,
  /* 1583 */ &&obj_deallocate_unmanaged_instance_STAMP_core__Complex_O,
  /* 1587 */ &&obj_deallocate_unmanaged_instance_STAMP_core__Stream_O,
  /* 1591 */ &&obj_deallocate_unmanaged_instance_STAMP_core__AnsiStream_O,
  /* 1595 */ &&obj_deallocate_unmanaged_instance_STAMP_core__SynonymStream_O,
  /* 1599 */ &&obj_deallocate_unmanaged_instance_STAMP_core__ConcatenatedStream_O,
  /* 1603 */ &&obj_deallocate_unmanaged_instance_STAMP_core__FileStream_O,
  /* 1607 */ &&obj_deallocate_unmanaged_instance_STAMP_core__IOFileStream_O,
  /* 1611 */ &&obj_deallocate_unmanaged_instance_STAMP_core__IOStreamStream_O,
  /* 1615 */ &&obj_deallocate_unmanaged_instance_STAMP_core__BroadcastStream_O,
  /* 1619 */ &&obj_deallocate_unmanaged_instance_STAMP_core__StringStream_O,
  /* 1623 */ &&obj_deallocate_unmanaged_instance_STAMP_core__StringOutputStream_O,
  /* 1627 */ &&obj_deallocate_unmanaged_instance_STAMP_core__StringInputStream_O,
  /* 1631 */ &&obj_deallocate_unmanaged_instance_STAMP_core__EchoStream_O,
  /* 1635 */ &&obj_deallocate_unmanaged_instance_STAMP_core__TwoWayStream_O,
  /* 1639 */ &&obj_deallocate_unmanaged_instance_STAMP_core__Package_O,
  /* 1643 */ &&obj_deallocate_unmanaged_instance_STAMP_core__FileStatus_O,
  /* 1647 */ &&obj_deallocate_unmanaged_instance_STAMP_core__InvocationHistoryFrameIterator_O,
  /* 1651 */ &&obj_deallocate_unmanaged_instance_STAMP_core__SourcePosInfo_O,
  /* 1655 */ &&obj_deallocate_unmanaged_instance_STAMP_core__IntArray_O,
  /* 1659 */ &&obj_deallocate_unmanaged_instance_STAMP_core__DirectoryEntry_O,
  /* 1663 */ &&obj_deallocate_unmanaged_instance_STAMP_core__LightUserData_O,
  /* 1667 */ &&obj_deallocate_unmanaged_instance_STAMP_core__UserData_O,
  /* 1671 */ &&obj_deallocate_unmanaged_instance_STAMP_core__Record_O,
  /* 1675 */ &&obj_deallocate_unmanaged_instance_STAMP_clbind__ClassRegistry_O,
  /* 1679 */ &&obj_deallocate_unmanaged_instance_STAMP_core__Cons_O,
  /* 1683 */ &&obj_deallocate_unmanaged_instance_STAMP_core__Lisp_O,
  /* 1687 */ &&obj_deallocate_unmanaged_instance_STAMP_clang__RecursiveASTVisitor_asttooling__AstVisitor_O_,
  /* 1691 */ &&obj_deallocate_unmanaged_instance_STAMP_asttooling__AstVisitor_O,
  /* 1695 */ &&obj_deallocate_unmanaged_instance_STAMP_clang__tooling__ToolAction,
  /* 1699 */ &&obj_deallocate_unmanaged_instance_STAMP_clang__tooling__FrontendActionFactory,
  /* 1703 */ &&obj_deallocate_unmanaged_instance_STAMP_clang__ast_matchers__MatchFinder__MatchCallback,
  /* 1707 */ &&obj_deallocate_unmanaged_instance_STAMP_gctools__GCContainer,
  /* 1711 */ &&obj_deallocate_unmanaged_instance_STAMP_gctools__GCArray_moveable_unsigned_int_,
  /* 1715 */ &&obj_deallocate_unmanaged_instance_STAMP_gctools__GCVector_moveable_core__CacheRecord_,
  /* 1719 */ &&obj_deallocate_unmanaged_instance_STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__Cons_O__,
  /* 1723 */ &&obj_deallocate_unmanaged_instance_STAMP_gctools__GCVector_moveable_double_,
  /* 1727 */ &&obj_deallocate_unmanaged_instance_STAMP_gctools__GCArray_moveable_short_,
  /* 1731 */ &&obj_deallocate_unmanaged_instance_STAMP_gctools__GCVector_moveable_gctools__smart_ptr_clbind__ClassRep_O__,
  /* 1735 */ &&obj_deallocate_unmanaged_instance_STAMP_gctools__GCBitUnitArray_moveable_4_0_,
  /* 1739 */ &&obj_deallocate_unmanaged_instance_STAMP_gctools__GCVector_moveable_core__Cons_O_,
  /* 1743 */ &&obj_deallocate_unmanaged_instance_STAMP_gctools__GCVector_moveable_core__SymbolClassHolderPair_,
  /* 1747 */ &&obj_deallocate_unmanaged_instance_STAMP_gctools__GCArray_moveable_signed_char_,
  /* 1751 */ &&obj_deallocate_unmanaged_instance_STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__List_V__,
  /* 1755 */ &&obj_deallocate_unmanaged_instance_STAMP_gctools__GCVector_moveable_std__pair_gctools__smart_ptr_core__T_O__gctools__smart_ptr_core__T_O___,
  /* 1759 */ &&obj_deallocate_unmanaged_instance_STAMP_gctools__GCArray_moveable_unsigned_char_,
  /* 1763 */ &&obj_deallocate_unmanaged_instance_STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__Symbol_O__,
  /* 1767 */ &&obj_deallocate_unmanaged_instance_STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__T_O__,
  /* 1771 */ &&obj_deallocate_unmanaged_instance_STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__SingleDispatchMethod_O__,
  /* 1775 */ &&obj_deallocate_unmanaged_instance_STAMP_gctools__GCArray_moveable_double_,
  /* 1779 */ &&obj_deallocate_unmanaged_instance_STAMP_gctools__GCVector_moveable_core__OptionalArgument_,
  /* 1783 */ &&obj_deallocate_unmanaged_instance_STAMP_gctools__GCVector_moveable_core__KeywordArgument_,
  /* 1787 */ &&obj_deallocate_unmanaged_instance_STAMP_gctools__GCVector_moveable_core__RequiredArgument_,
  /* 1791 */ &&obj_deallocate_unmanaged_instance_STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__FileScope_O__,
  /* 1795 */ &&obj_deallocate_unmanaged_instance_STAMP_gctools__GCBitUnitArray_moveable_4_1_,
  /* 1799 */ &&obj_deallocate_unmanaged_instance_STAMP_gctools__GCVector_moveable_core__SymbolStorage_,
  /* 1803 */ &&obj_deallocate_unmanaged_instance_STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__Instance_O__,
  /* 1807 */ &&obj_deallocate_unmanaged_instance_STAMP_gctools__GCArray_moveable_unsigned_long_,
  /* 1811 */ &&obj_deallocate_unmanaged_instance_STAMP_gctools__GCVector_moveable_std__pair_gctools__smart_ptr_core__Symbol_O__gctools__smart_ptr_core__T_O___,
  /* 1815 */ &&obj_deallocate_unmanaged_instance_STAMP_gctools__GCBitUnitArray_moveable_2_0_,
  /* 1819 */ &&obj_deallocate_unmanaged_instance_STAMP_gctools__GCArray_moveable_int_,
  /* 1823 */ &&obj_deallocate_unmanaged_instance_STAMP_gctools__GCBitUnitArray_moveable_1_0_,
  /* 1827 */ &&obj_deallocate_unmanaged_instance_STAMP_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__,
  /* 1831 */ &&obj_deallocate_unmanaged_instance_STAMP_gctools__GCVector_moveable_core__AuxArgument_,
  /* 1835 */ &&obj_deallocate_unmanaged_instance_STAMP_gctools__GCBitUnitArray_moveable_2_1_,
  /* 1839 */ &&obj_deallocate_unmanaged_instance_STAMP_gctools__GCArray_moveable_long_,
  /* 1843 */ &&obj_deallocate_unmanaged_instance_STAMP_gctools__GCVector_moveable_int_,
  /* 1847 */ &&obj_deallocate_unmanaged_instance_STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__Package_O__,
  /* 1851 */ &&obj_deallocate_unmanaged_instance_STAMP_gctools__GCArray_moveable_float_,
  /* 1855 */ &&obj_deallocate_unmanaged_instance_STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__Creator_O__,
  /* 1859 */ &&obj_deallocate_unmanaged_instance_STAMP_gctools__GCVector_moveable_core__T_O___,
  /* 1863 */ &&obj_deallocate_unmanaged_instance_STAMP_gctools__GCArray_moveable_unsigned_short_,
  /* 1867 */ &&obj_deallocate_unmanaged_instance_STAMP_gctools__GCVector_moveable_float_,
  /* 1871 */ &&obj_deallocate_unmanaged_instance_STAMP_clang__FrontendAction,
  /* 1875 */ &&obj_deallocate_unmanaged_instance_STAMP_clang__ASTFrontendAction,
  /* 1879 */ &&obj_deallocate_unmanaged_instance_STAMP_clang__SyntaxOnlyAction,
   NULL
};
#endif // defined(GC_OBJ_DEALLOCATOR_TABLE)
#if defined(GC_GLOBAL_SYMBOLS)
#endif // defined(GC_GLOBAL_SYMBOLS)
#if defined(GC_GLOBALS)
 TAGGED_POINTER_FIX(_lisp);
#endif // defined(GC_GLOBALS)

/*
    File: test-gcvector.cc
*/

/*
Copyright (c) 2014, Christian E. Schafmeister
 
CLASP is free software; you can redistribute it and/or
modify it under the terms of the GNU Library General Public
License as published by the Free Software Foundation; either
version 2 of the License, or (at your option) any later version.
 
See directory 'clasp/licenses' for full details.
 
The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/
/* -^- */
case KIND_GCVECTOR_gctools__GCVector_struct_asttooling__Diagnostics__ErrorContent_class_gctools__GCAlloc_malloc_class_gctools__GCVector_impl_struct_asttooling__Diagnostics__ErrorContent____: {
  // processing #S(GCCONTAINER :KEY "gctools::GCVector<struct asttooling::Diagnostics::ErrorContent,class gctools::GCAlloc_malloc<class gctools::GCVector_impl<struct asttooling::Diagnostics::ErrorContent> >>" :NAME "gctools::GCVector" :BASES ("gctools::GCContainer") :VBASES CL:NIL :HAS-DESTRUCTOR CL:NIL :DECL-TYPE #S(CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::GCVector<struct asttooling::Diagnostics::ErrorContent,class gctools::GCAlloc_malloc<class gctools::GCVector_impl<struct asttooling::Diagnostics::ErrorContent> >>" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CL:INDEX 0 :CTYPE #S(CXXRECORD-CTYPE :KEY "asttooling::Diagnostics::ErrorContent")) #S(GC-TEMPLATE-ARGUMENT :CL:INDEX 1 :CTYPE #S(CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::GCAlloc_malloc<class gctools::GCVector_impl<struct asttooling::Diagnostics::ErrorContent>>" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CL:INDEX 0 :CTYPE #S(CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::GCVector_impl<struct asttooling::Diagnostics::ErrorContent>" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CL:INDEX 0 :CTYPE #S(CXXRECORD-CTYPE :KEY "asttooling::Diagnostics::ErrorContent")))))))))))
  // parm0-ctype = #S(CXXRECORD-CTYPE :KEY "asttooling::Diagnostics::ErrorContent")
  gctools::GCVector<struct asttooling::Diagnostics::ErrorContent, class gctools::GCAlloc_malloc<class gctools::GCVector_impl<struct asttooling::Diagnostics::ErrorContent>>> *obj_gc_safe = reinterpret_cast<gctools::GCVector<struct asttooling::Diagnostics::ErrorContent, class gctools::GCAlloc_malloc<class gctools::GCVector_impl<struct asttooling::Diagnostics::ErrorContent>>> *>(base);
  DEBUG_SCAN_OBJECT(obj_gc_safe);
  for (gctools::GCVector<struct asttooling::Diagnostics::ErrorContent, class gctools::GCAlloc_malloc<class gctools::GCVector_impl<struct asttooling::Diagnostics::ErrorContent>>>::iterator it = obj_gc_safe.begin(); it != obj_gc_safe.end(); ++it) {
    // A scanner for #S(CXXRECORD-CTYPE :KEY "asttooling::Diagnostics::ErrorContent")
    it->onHeapScanGCRoots(GC_SCAN_ARGS_PROTOTYPE);
  }
  typedef typename gctools::GCVector<struct asttooling::Diagnostics::ErrorContent, class gctools::GCAlloc_malloc<class gctools::GCVector_impl<struct asttooling::Diagnostics::ErrorContent>>>::impl_type type_KIND_GCVECTOR_gctools__GCVector_struct_asttooling__Diagnostics__ErrorContent_class_gctools__GCAlloc_malloc_class_gctools__GCVector_impl_struct_asttooling__Diagnostics__ErrorContent____;
  base = (char *)base + ALIGN(gc_sizeof<type_KIND_GCVECTOR_gctools__GCVector_struct_asttooling__Diagnostics__ErrorContent_class_gctools__GCAlloc_malloc_class_gctools__GCVector_impl_struct_asttooling__Diagnostics__ErrorContent____>(gcvector_gc_safe->_Capacity));
} break;
case KIND_GCVECTOR_gctools__GCVector_struct_asttooling__Diagnostics__ErrorContent__Message_class_gctools__GCAlloc_malloc_class_gctools__GCVector_impl_struct_asttooling__Diagnostics__ErrorContent__Message____: {
  // processing #S(GCCONTAINER :KEY "gctools::GCVector<struct asttooling::Diagnostics::ErrorContent::Message,class gctools::GCAlloc_malloc<class gctools::GCVector_impl<struct asttooling::Diagnostics::ErrorContent::Message> >>" :NAME "gctools::GCVector" :BASES ("gctools::GCContainer") :VBASES CL:NIL :HAS-DESTRUCTOR CL:NIL :DECL-TYPE #S(CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::GCVector<struct asttooling::Diagnostics::ErrorContent::Message,class gctools::GCAlloc_malloc<class gctools::GCVector_impl<struct asttooling::Diagnostics::ErrorContent::Message> >>" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CL:INDEX 0 :CTYPE #S(CXXRECORD-CTYPE :KEY "asttooling::Diagnostics::ErrorContent::Message")) #S(GC-TEMPLATE-ARGUMENT :CL:INDEX 1 :CTYPE #S(CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::GCAlloc_malloc<class gctools::GCVector_impl<struct asttooling::Diagnostics::ErrorContent::Message>>" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CL:INDEX 0 :CTYPE #S(CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::GCVector_impl<struct asttooling::Diagnostics::ErrorContent::Message>" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CL:INDEX 0 :CTYPE #S(CXXRECORD-CTYPE :KEY "asttooling::Diagnostics::ErrorContent::Message")))))))))))
  // parm0-ctype = #S(CXXRECORD-CTYPE :KEY "asttooling::Diagnostics::ErrorContent::Message")
  gctools::GCVector<struct asttooling::Diagnostics::ErrorContent::Message, class gctools::GCAlloc_malloc<class gctools::GCVector_impl<struct asttooling::Diagnostics::ErrorContent::Message>>> *obj_gc_safe = reinterpret_cast<gctools::GCVector<struct asttooling::Diagnostics::ErrorContent::Message, class gctools::GCAlloc_malloc<class gctools::GCVector_impl<struct asttooling::Diagnostics::ErrorContent::Message>>> *>(base);
  DEBUG_SCAN_OBJECT(obj_gc_safe);
  for (gctools::GCVector<struct asttooling::Diagnostics::ErrorContent::Message, class gctools::GCAlloc_malloc<class gctools::GCVector_impl<struct asttooling::Diagnostics::ErrorContent::Message>>>::iterator it = obj_gc_safe.begin(); it != obj_gc_safe.end(); ++it) {
    // A scanner for #S(CXXRECORD-CTYPE :KEY "asttooling::Diagnostics::ErrorContent::Message")
    it->onHeapScanGCRoots(GC_SCAN_ARGS_PROTOTYPE);
  }
  typedef typename gctools::GCVector<struct asttooling::Diagnostics::ErrorContent::Message, class gctools::GCAlloc_malloc<class gctools::GCVector_impl<struct asttooling::Diagnostics::ErrorContent::Message>>>::impl_type type_KIND_GCVECTOR_gctools__GCVector_struct_asttooling__Diagnostics__ErrorContent__Message_class_gctools__GCAlloc_malloc_class_gctools__GCVector_impl_struct_asttooling__Diagnostics__ErrorContent__Message____;
  base = (char *)base + ALIGN(gc_sizeof<type_KIND_GCVECTOR_gctools__GCVector_struct_asttooling__Diagnostics__ErrorContent__Message_class_gctools__GCAlloc_malloc_class_gctools__GCVector_impl_struct_asttooling__Diagnostics__ErrorContent__Message____>(gcvector_gc_safe->_Capacity));
} break;
case KIND_GCVECTOR_gctools__GCVector_struct_core__OptionalArgument_class_gctools__GCAlloc_malloc_class_gctools__GCVector_impl_struct_core__OptionalArgument____: {
  // processing #S(GCCONTAINER :KEY "gctools::GCVector<struct core::OptionalArgument,class gctools::GCAlloc_malloc<class gctools::GCVector_impl<struct core::OptionalArgument> >>" :NAME "gctools::GCVector" :BASES ("gctools::GCContainer") :VBASES CL:NIL :HAS-DESTRUCTOR CL:NIL :DECL-TYPE #S(CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::GCVector<struct core::OptionalArgument,class gctools::GCAlloc_malloc<class gctools::GCVector_impl<struct core::OptionalArgument> >>" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CL:INDEX 0 :CTYPE #S(CXXRECORD-CTYPE :KEY "core::OptionalArgument")) #S(GC-TEMPLATE-ARGUMENT :CL:INDEX 1 :CTYPE #S(CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::GCAlloc_malloc<class gctools::GCVector_impl<struct core::OptionalArgument>>" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CL:INDEX 0 :CTYPE #S(CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::GCVector_impl<struct core::OptionalArgument>" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CL:INDEX 0 :CTYPE #S(CXXRECORD-CTYPE :KEY "core::OptionalArgument")))))))))))
  // parm0-ctype = #S(CXXRECORD-CTYPE :KEY "core::OptionalArgument")
  gctools::GCVector<struct core::OptionalArgument, class gctools::GCAlloc_malloc<class gctools::GCVector_impl<struct core::OptionalArgument>>> *obj_gc_safe = reinterpret_cast<gctools::GCVector<struct core::OptionalArgument, class gctools::GCAlloc_malloc<class gctools::GCVector_impl<struct core::OptionalArgument>>> *>(base);
  DEBUG_SCAN_OBJECT(obj_gc_safe);
  for (gctools::GCVector<struct core::OptionalArgument, class gctools::GCAlloc_malloc<class gctools::GCVector_impl<struct core::OptionalArgument>>>::iterator it = obj_gc_safe.begin(); it != obj_gc_safe.end(); ++it) {
    // A scanner for #S(CXXRECORD-CTYPE :KEY "core::OptionalArgument")
    it->onHeapScanGCRoots(GC_SCAN_ARGS_PROTOTYPE);
  }
  typedef typename gctools::GCVector<struct core::OptionalArgument, class gctools::GCAlloc_malloc<class gctools::GCVector_impl<struct core::OptionalArgument>>>::impl_type type_KIND_GCVECTOR_gctools__GCVector_struct_core__OptionalArgument_class_gctools__GCAlloc_malloc_class_gctools__GCVector_impl_struct_core__OptionalArgument____;
  base = (char *)base + ALIGN(gc_sizeof<type_KIND_GCVECTOR_gctools__GCVector_struct_core__OptionalArgument_class_gctools__GCAlloc_malloc_class_gctools__GCVector_impl_struct_core__OptionalArgument____>(gcvector_gc_safe->_Capacity));
} break;
case KIND_GCVECTOR_gctools__GCVector_class_mem__smart_ptr_class_core__SourceFileInfo_O__class_gctools__GCAlloc_malloc_class_gctools__GCVector_impl_class_mem__smart_ptr_class_core__SourceFileInfo_O______: {
  // processing #S(GCCONTAINER :KEY "gctools::GCVector<class mem::smart_ptr<class core::SourceFileInfo_O>,class gctools::GCAlloc_malloc<class gctools::GCVector_impl<class mem::smart_ptr<class core::SourceFileInfo_O> > >>" :NAME "gctools::GCVector" :BASES ("gctools::GCContainer") :VBASES CL:NIL :HAS-DESTRUCTOR CL:NIL :DECL-TYPE #S(CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::GCVector<class mem::smart_ptr<class core::SourceFileInfo_O>,class gctools::GCAlloc_malloc<class gctools::GCVector_impl<class mem::smart_ptr<class core::SourceFileInfo_O> > >>" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CL:INDEX 0 :CTYPE #S(SMART-PTR-CTYPE :KEY "mem::smart_ptr<class core::SourceFileInfo_O>" :SPECIALIZER "class core::SourceFileInfo_O")) #S(GC-TEMPLATE-ARGUMENT :CL:INDEX 1 :CTYPE #S(CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::GCAlloc_malloc<class gctools::GCVector_impl<class mem::smart_ptr<class core::SourceFileInfo_O> >>" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CL:INDEX 0 :CTYPE #S(CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::GCVector_impl<class mem::smart_ptr<class core::SourceFileInfo_O>>" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CL:INDEX 0 :CTYPE #S(SMART-PTR-CTYPE :KEY "mem::smart_ptr<class core::SourceFileInfo_O>" :SPECIALIZER "class core::SourceFileInfo_O")))))))))))
  // parm0-ctype = #S(SMART-PTR-CTYPE :KEY "mem::smart_ptr<class core::SourceFileInfo_O>" :SPECIALIZER "class core::SourceFileInfo_O")
  gctools::GCVector<class mem::smart_ptr<class core::SourceFileInfo_O>, class gctools::GCAlloc_malloc<class gctools::GCVector_impl<class mem::smart_ptr<class core::SourceFileInfo_O>>>> *obj_gc_safe = reinterpret_cast<gctools::GCVector<class mem::smart_ptr<class core::SourceFileInfo_O>, class gctools::GCAlloc_malloc<class gctools::GCVector_impl<class mem::smart_ptr<class core::SourceFileInfo_O>>>> *>(base);
  DEBUG_SCAN_OBJECT(obj_gc_safe);
  for (gctools::GCVector<class mem::smart_ptr<class core::SourceFileInfo_O>, class gctools::GCAlloc_malloc<class gctools::GCVector_impl<class mem::smart_ptr<class core::SourceFileInfo_O>>>>::iterator it = obj_gc_safe.begin(); it != obj_gc_safe.end(); ++it) {
    // A scanner for #S(SMART-PTR-CTYPE :KEY "mem::smart_ptr<class core::SourceFileInfo_O>" :SPECIALIZER "class core::SourceFileInfo_O")
    SMART_PTR_FIX(*it);
  }
  typedef typename gctools::GCVector<class mem::smart_ptr<class core::SourceFileInfo_O>, class gctools::GCAlloc_malloc<class gctools::GCVector_impl<class mem::smart_ptr<class core::SourceFileInfo_O>>>>::impl_type type_KIND_GCVECTOR_gctools__GCVector_class_mem__smart_ptr_class_core__SourceFileInfo_O__class_gctools__GCAlloc_malloc_class_gctools__GCVector_impl_class_mem__smart_ptr_class_core__SourceFileInfo_O______;
  base = (char *)base + ALIGN(gc_sizeof<type_KIND_GCVECTOR_gctools__GCVector_class_mem__smart_ptr_class_core__SourceFileInfo_O__class_gctools__GCAlloc_malloc_class_gctools__GCVector_impl_class_mem__smart_ptr_class_core__SourceFileInfo_O______>(gcvector_gc_safe->_Capacity));
} break;
case KIND_GCVECTOR_gctools__GCVector_struct_core__AuxArgument_class_gctools__GCAlloc_malloc_class_gctools__GCVector_impl_struct_core__AuxArgument____: {
  // processing #S(GCCONTAINER :KEY "gctools::GCVector<struct core::AuxArgument,class gctools::GCAlloc_malloc<class gctools::GCVector_impl<struct core::AuxArgument> >>" :NAME "gctools::GCVector" :BASES ("gctools::GCContainer") :VBASES CL:NIL :HAS-DESTRUCTOR CL:NIL :DECL-TYPE #S(CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::GCVector<struct core::AuxArgument,class gctools::GCAlloc_malloc<class gctools::GCVector_impl<struct core::AuxArgument> >>" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CL:INDEX 0 :CTYPE #S(CXXRECORD-CTYPE :KEY "core::AuxArgument")) #S(GC-TEMPLATE-ARGUMENT :CL:INDEX 1 :CTYPE #S(CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::GCAlloc_malloc<class gctools::GCVector_impl<struct core::AuxArgument>>" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CL:INDEX 0 :CTYPE #S(CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::GCVector_impl<struct core::AuxArgument>" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CL:INDEX 0 :CTYPE #S(CXXRECORD-CTYPE :KEY "core::AuxArgument")))))))))))
  // parm0-ctype = #S(CXXRECORD-CTYPE :KEY "core::AuxArgument")
  gctools::GCVector<struct core::AuxArgument, class gctools::GCAlloc_malloc<class gctools::GCVector_impl<struct core::AuxArgument>>> *obj_gc_safe = reinterpret_cast<gctools::GCVector<struct core::AuxArgument, class gctools::GCAlloc_malloc<class gctools::GCVector_impl<struct core::AuxArgument>>> *>(base);
  DEBUG_SCAN_OBJECT(obj_gc_safe);
  for (gctools::GCVector<struct core::AuxArgument, class gctools::GCAlloc_malloc<class gctools::GCVector_impl<struct core::AuxArgument>>>::iterator it = obj_gc_safe.begin(); it != obj_gc_safe.end(); ++it) {
    // A scanner for #S(CXXRECORD-CTYPE :KEY "core::AuxArgument")
    it->onHeapScanGCRoots(GC_SCAN_ARGS_PROTOTYPE);
  }
  typedef typename gctools::GCVector<struct core::AuxArgument, class gctools::GCAlloc_malloc<class gctools::GCVector_impl<struct core::AuxArgument>>>::impl_type type_KIND_GCVECTOR_gctools__GCVector_struct_core__AuxArgument_class_gctools__GCAlloc_malloc_class_gctools__GCVector_impl_struct_core__AuxArgument____;
  base = (char *)base + ALIGN(gc_sizeof<type_KIND_GCVECTOR_gctools__GCVector_struct_core__AuxArgument_class_gctools__GCAlloc_malloc_class_gctools__GCVector_impl_struct_core__AuxArgument____>(gcvector_gc_safe->_Capacity));
} break;
case KIND_GCVECTOR_gctools__GCVector_struct_asttooling__Diagnostics__ContextFrame_class_gctools__GCAlloc_malloc_class_gctools__GCVector_impl_struct_asttooling__Diagnostics__ContextFrame____: {
  // processing #S(GCCONTAINER :KEY "gctools::GCVector<struct asttooling::Diagnostics::ContextFrame,class gctools::GCAlloc_malloc<class gctools::GCVector_impl<struct asttooling::Diagnostics::ContextFrame> >>" :NAME "gctools::GCVector" :BASES ("gctools::GCContainer") :VBASES CL:NIL :HAS-DESTRUCTOR CL:NIL :DECL-TYPE #S(CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::GCVector<struct asttooling::Diagnostics::ContextFrame,class gctools::GCAlloc_malloc<class gctools::GCVector_impl<struct asttooling::Diagnostics::ContextFrame> >>" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CL:INDEX 0 :CTYPE #S(CXXRECORD-CTYPE :KEY "asttooling::Diagnostics::ContextFrame")) #S(GC-TEMPLATE-ARGUMENT :CL:INDEX 1 :CTYPE #S(CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::GCAlloc_malloc<class gctools::GCVector_impl<struct asttooling::Diagnostics::ContextFrame>>" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CL:INDEX 0 :CTYPE #S(CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::GCVector_impl<struct asttooling::Diagnostics::ContextFrame>" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CL:INDEX 0 :CTYPE #S(CXXRECORD-CTYPE :KEY "asttooling::Diagnostics::ContextFrame")))))))))))
  // parm0-ctype = #S(CXXRECORD-CTYPE :KEY "asttooling::Diagnostics::ContextFrame")
  gctools::GCVector<struct asttooling::Diagnostics::ContextFrame, class gctools::GCAlloc_malloc<class gctools::GCVector_impl<struct asttooling::Diagnostics::ContextFrame>>> *obj_gc_safe = reinterpret_cast<gctools::GCVector<struct asttooling::Diagnostics::ContextFrame, class gctools::GCAlloc_malloc<class gctools::GCVector_impl<struct asttooling::Diagnostics::ContextFrame>>> *>(base);
  DEBUG_SCAN_OBJECT(obj_gc_safe);
  for (gctools::GCVector<struct asttooling::Diagnostics::ContextFrame, class gctools::GCAlloc_malloc<class gctools::GCVector_impl<struct asttooling::Diagnostics::ContextFrame>>>::iterator it = obj_gc_safe.begin(); it != obj_gc_safe.end(); ++it) {
    // A scanner for #S(CXXRECORD-CTYPE :KEY "asttooling::Diagnostics::ContextFrame")
    it->onHeapScanGCRoots(GC_SCAN_ARGS_PROTOTYPE);
  }
  typedef typename gctools::GCVector<struct asttooling::Diagnostics::ContextFrame, class gctools::GCAlloc_malloc<class gctools::GCVector_impl<struct asttooling::Diagnostics::ContextFrame>>>::impl_type type_KIND_GCVECTOR_gctools__GCVector_struct_asttooling__Diagnostics__ContextFrame_class_gctools__GCAlloc_malloc_class_gctools__GCVector_impl_struct_asttooling__Diagnostics__ContextFrame____;
  base = (char *)base + ALIGN(gc_sizeof<type_KIND_GCVECTOR_gctools__GCVector_struct_asttooling__Diagnostics__ContextFrame_class_gctools__GCAlloc_malloc_class_gctools__GCVector_impl_struct_asttooling__Diagnostics__ContextFrame____>(gcvector_gc_safe->_Capacity));
} break;
case KIND_GCVECTOR_gctools__GCVector_struct_core__RequiredArgument_class_gctools__GCAlloc_malloc_class_gctools__GCVector_impl_struct_core__RequiredArgument____: {
  // processing #S(GCCONTAINER :KEY "gctools::GCVector<struct core::RequiredArgument,class gctools::GCAlloc_malloc<class gctools::GCVector_impl<struct core::RequiredArgument> >>" :NAME "gctools::GCVector" :BASES ("gctools::GCContainer") :VBASES CL:NIL :HAS-DESTRUCTOR CL:NIL :DECL-TYPE #S(CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::GCVector<struct core::RequiredArgument,class gctools::GCAlloc_malloc<class gctools::GCVector_impl<struct core::RequiredArgument> >>" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CL:INDEX 0 :CTYPE #S(CXXRECORD-CTYPE :KEY "core::RequiredArgument")) #S(GC-TEMPLATE-ARGUMENT :CL:INDEX 1 :CTYPE #S(CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::GCAlloc_malloc<class gctools::GCVector_impl<struct core::RequiredArgument>>" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CL:INDEX 0 :CTYPE #S(CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::GCVector_impl<struct core::RequiredArgument>" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CL:INDEX 0 :CTYPE #S(CXXRECORD-CTYPE :KEY "core::RequiredArgument")))))))))))
  // parm0-ctype = #S(CXXRECORD-CTYPE :KEY "core::RequiredArgument")
  gctools::GCVector<struct core::RequiredArgument, class gctools::GCAlloc_malloc<class gctools::GCVector_impl<struct core::RequiredArgument>>> *obj_gc_safe = reinterpret_cast<gctools::GCVector<struct core::RequiredArgument, class gctools::GCAlloc_malloc<class gctools::GCVector_impl<struct core::RequiredArgument>>> *>(base);
  DEBUG_SCAN_OBJECT(obj_gc_safe);
  for (gctools::GCVector<struct core::RequiredArgument, class gctools::GCAlloc_malloc<class gctools::GCVector_impl<struct core::RequiredArgument>>>::iterator it = obj_gc_safe.begin(); it != obj_gc_safe.end(); ++it) {
    // A scanner for #S(CXXRECORD-CTYPE :KEY "core::RequiredArgument")
    it->onHeapScanGCRoots(GC_SCAN_ARGS_PROTOTYPE);
  }
  typedef typename gctools::GCVector<struct core::RequiredArgument, class gctools::GCAlloc_malloc<class gctools::GCVector_impl<struct core::RequiredArgument>>>::impl_type type_KIND_GCVECTOR_gctools__GCVector_struct_core__RequiredArgument_class_gctools__GCAlloc_malloc_class_gctools__GCVector_impl_struct_core__RequiredArgument____;
  base = (char *)base + ALIGN(gc_sizeof<type_KIND_GCVECTOR_gctools__GCVector_struct_core__RequiredArgument_class_gctools__GCAlloc_malloc_class_gctools__GCVector_impl_struct_core__RequiredArgument____>(gcvector_gc_safe->_Capacity));
} break;
case KIND_GCVECTOR_gctools__GCVector: {
  // processing #S(GCCONTAINER :KEY "gctools::GCVector" :NAME "gctools::GCVector" :BASES ("gctools::GCContainer") :VBASES CL:NIL :HAS-DESTRUCTOR CL:NIL :DECL-TYPE #S(CXXRECORD-CTYPE :KEY "gctools::GCVector"))
  THROW_HARD_ERROR(BF("Should never scan #S(CXXRECORD-CTYPE :KEY " gctools::GCVector ")"));
} break;
case KIND_GCVECTOR_gctools__GCVector_class_mem__smart_ptr_class_core__Str_O__class_gctools__GCAlloc_malloc_class_gctools__GCVector_impl_class_mem__smart_ptr_class_core__Str_O______: {
  // processing #S(GCCONTAINER :KEY "gctools::GCVector<class mem::smart_ptr<class core::Str_O>,class gctools::GCAlloc_malloc<class gctools::GCVector_impl<class mem::smart_ptr<class core::Str_O> > >>" :NAME "gctools::GCVector" :BASES ("gctools::GCContainer") :VBASES CL:NIL :HAS-DESTRUCTOR CL:NIL :DECL-TYPE #S(CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::GCVector<class mem::smart_ptr<class core::Str_O>,class gctools::GCAlloc_malloc<class gctools::GCVector_impl<class mem::smart_ptr<class core::Str_O> > >>" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CL:INDEX 0 :CTYPE #S(SMART-PTR-CTYPE :KEY "mem::smart_ptr<class core::Str_O>" :SPECIALIZER "class core::Str_O")) #S(GC-TEMPLATE-ARGUMENT :CL:INDEX 1 :CTYPE #S(CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::GCAlloc_malloc<class gctools::GCVector_impl<class mem::smart_ptr<class core::Str_O> >>" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CL:INDEX 0 :CTYPE #S(CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::GCVector_impl<class mem::smart_ptr<class core::Str_O>>" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CL:INDEX 0 :CTYPE #S(SMART-PTR-CTYPE :KEY "mem::smart_ptr<class core::Str_O>" :SPECIALIZER "class core::Str_O")))))))))))
  // parm0-ctype = #S(SMART-PTR-CTYPE :KEY "mem::smart_ptr<class core::Str_O>" :SPECIALIZER "class core::Str_O")
  gctools::GCVector<class mem::smart_ptr<class core::Str_O>, class gctools::GCAlloc_malloc<class gctools::GCVector_impl<class mem::smart_ptr<class core::Str_O>>>> *obj_gc_safe = reinterpret_cast<gctools::GCVector<class mem::smart_ptr<class core::Str_O>, class gctools::GCAlloc_malloc<class gctools::GCVector_impl<class mem::smart_ptr<class core::Str_O>>>> *>(base);
  DEBUG_SCAN_OBJECT(obj_gc_safe);
  for (gctools::GCVector<class mem::smart_ptr<class core::Str_O>, class gctools::GCAlloc_malloc<class gctools::GCVector_impl<class mem::smart_ptr<class core::Str_O>>>>::iterator it = obj_gc_safe.begin(); it != obj_gc_safe.end(); ++it) {
    // A scanner for #S(SMART-PTR-CTYPE :KEY "mem::smart_ptr<class core::Str_O>" :SPECIALIZER "class core::Str_O")
    SMART_PTR_FIX(*it);
  }
  typedef typename gctools::GCVector<class mem::smart_ptr<class core::Str_O>, class gctools::GCAlloc_malloc<class gctools::GCVector_impl<class mem::smart_ptr<class core::Str_O>>>>::impl_type type_KIND_GCVECTOR_gctools__GCVector_class_mem__smart_ptr_class_core__Str_O__class_gctools__GCAlloc_malloc_class_gctools__GCVector_impl_class_mem__smart_ptr_class_core__Str_O______;
  base = (char *)base + ALIGN(gc_sizeof<type_KIND_GCVECTOR_gctools__GCVector_class_mem__smart_ptr_class_core__Str_O__class_gctools__GCAlloc_malloc_class_gctools__GCVector_impl_class_mem__smart_ptr_class_core__Str_O______>(gcvector_gc_safe->_Capacity));
} break;
case KIND_GCVECTOR_gctools__GCVector_class_mem__smart_ptr_class_core__Symbol_O__class_gctools__GCAlloc_malloc_class_gctools__GCVector_impl_class_mem__smart_ptr_class_core__Symbol_O______: {
  // processing #S(GCCONTAINER :KEY "gctools::GCVector<class mem::smart_ptr<class core::Symbol_O>,class gctools::GCAlloc_malloc<class gctools::GCVector_impl<class mem::smart_ptr<class core::Symbol_O> > >>" :NAME "gctools::GCVector" :BASES ("gctools::GCContainer") :VBASES CL:NIL :HAS-DESTRUCTOR CL:NIL :DECL-TYPE #S(CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::GCVector<class mem::smart_ptr<class core::Symbol_O>,class gctools::GCAlloc_malloc<class gctools::GCVector_impl<class mem::smart_ptr<class core::Symbol_O> > >>" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CL:INDEX 0 :CTYPE #S(SMART-PTR-CTYPE :KEY "mem::smart_ptr<class core::Symbol_O>" :SPECIALIZER "class core::Symbol_O")) #S(GC-TEMPLATE-ARGUMENT :CL:INDEX 1 :CTYPE #S(CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::GCAlloc_malloc<class gctools::GCVector_impl<class mem::smart_ptr<class core::Symbol_O> >>" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CL:INDEX 0 :CTYPE #S(CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::GCVector_impl<class mem::smart_ptr<class core::Symbol_O>>" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CL:INDEX 0 :CTYPE #S(SMART-PTR-CTYPE :KEY "mem::smart_ptr<class core::Symbol_O>" :SPECIALIZER "class core::Symbol_O")))))))))))
  // parm0-ctype = #S(SMART-PTR-CTYPE :KEY "mem::smart_ptr<class core::Symbol_O>" :SPECIALIZER "class core::Symbol_O")
  gctools::GCVector<class mem::smart_ptr<class core::Symbol_O>, class gctools::GCAlloc_malloc<class gctools::GCVector_impl<class mem::smart_ptr<class core::Symbol_O>>>> *obj_gc_safe = reinterpret_cast<gctools::GCVector<class mem::smart_ptr<class core::Symbol_O>, class gctools::GCAlloc_malloc<class gctools::GCVector_impl<class mem::smart_ptr<class core::Symbol_O>>>> *>(base);
  DEBUG_SCAN_OBJECT(obj_gc_safe);
  for (gctools::GCVector<class mem::smart_ptr<class core::Symbol_O>, class gctools::GCAlloc_malloc<class gctools::GCVector_impl<class mem::smart_ptr<class core::Symbol_O>>>>::iterator it = obj_gc_safe.begin(); it != obj_gc_safe.end(); ++it) {
    // A scanner for #S(SMART-PTR-CTYPE :KEY "mem::smart_ptr<class core::Symbol_O>" :SPECIALIZER "class core::Symbol_O")
    SMART_PTR_FIX(*it);
  }
  typedef typename gctools::GCVector<class mem::smart_ptr<class core::Symbol_O>, class gctools::GCAlloc_malloc<class gctools::GCVector_impl<class mem::smart_ptr<class core::Symbol_O>>>>::impl_type type_KIND_GCVECTOR_gctools__GCVector_class_mem__smart_ptr_class_core__Symbol_O__class_gctools__GCAlloc_malloc_class_gctools__GCVector_impl_class_mem__smart_ptr_class_core__Symbol_O______;
  base = (char *)base + ALIGN(gc_sizeof<type_KIND_GCVECTOR_gctools__GCVector_class_mem__smart_ptr_class_core__Symbol_O__class_gctools__GCAlloc_malloc_class_gctools__GCVector_impl_class_mem__smart_ptr_class_core__Symbol_O______>(gcvector_gc_safe->_Capacity));
} break;
case KIND_GCVECTOR_gctools__GCVector_class_mem__smart_ptr_class_core__T_O__class_gctools__GCAlloc_malloc_class_gctools__GCVector_impl_class_mem__smart_ptr_class_core__T_O______: {
  // processing #S(GCCONTAINER :KEY "gctools::GCVector<class mem::smart_ptr<class core::T_O>,class gctools::GCAlloc_malloc<class gctools::GCVector_impl<class mem::smart_ptr<class core::T_O> > >>" :NAME "gctools::GCVector" :BASES ("gctools::GCContainer") :VBASES CL:NIL :HAS-DESTRUCTOR CL:NIL :DECL-TYPE #S(CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::GCVector<class mem::smart_ptr<class core::T_O>,class gctools::GCAlloc_malloc<class gctools::GCVector_impl<class mem::smart_ptr<class core::T_O> > >>" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CL:INDEX 0 :CTYPE #S(SMART-PTR-CTYPE :KEY "mem::smart_ptr<class core::T_O>" :SPECIALIZER "class core::T_O")) #S(GC-TEMPLATE-ARGUMENT :CL:INDEX 1 :CTYPE #S(CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::GCAlloc_malloc<class gctools::GCVector_impl<class mem::smart_ptr<class core::T_O> >>" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CL:INDEX 0 :CTYPE #S(CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::GCVector_impl<class mem::smart_ptr<class core::T_O>>" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CL:INDEX 0 :CTYPE #S(SMART-PTR-CTYPE :KEY "mem::smart_ptr<class core::T_O>" :SPECIALIZER "class core::T_O")))))))))))
  // parm0-ctype = #S(SMART-PTR-CTYPE :KEY "mem::smart_ptr<class core::T_O>" :SPECIALIZER "class core::T_O")
  gctools::GCVector<class mem::smart_ptr<class core::T_O>, class gctools::GCAlloc_malloc<class gctools::GCVector_impl<class mem::smart_ptr<class core::T_O>>>> *obj_gc_safe = reinterpret_cast<gctools::GCVector<class mem::smart_ptr<class core::T_O>, class gctools::GCAlloc_malloc<class gctools::GCVector_impl<class mem::smart_ptr<class core::T_O>>>> *>(base);
  DEBUG_SCAN_OBJECT(obj_gc_safe);
  for (gctools::GCVector<class mem::smart_ptr<class core::T_O>, class gctools::GCAlloc_malloc<class gctools::GCVector_impl<class mem::smart_ptr<class core::T_O>>>>::iterator it = obj_gc_safe.begin(); it != obj_gc_safe.end(); ++it) {
    // A scanner for #S(SMART-PTR-CTYPE :KEY "mem::smart_ptr<class core::T_O>" :SPECIALIZER "class core::T_O")
    SMART_PTR_FIX(*it);
  }
  typedef typename gctools::GCVector<class mem::smart_ptr<class core::T_O>, class gctools::GCAlloc_malloc<class gctools::GCVector_impl<class mem::smart_ptr<class core::T_O>>>>::impl_type type_KIND_GCVECTOR_gctools__GCVector_class_mem__smart_ptr_class_core__T_O__class_gctools__GCAlloc_malloc_class_gctools__GCVector_impl_class_mem__smart_ptr_class_core__T_O______;
  base = (char *)base + ALIGN(gc_sizeof<type_KIND_GCVECTOR_gctools__GCVector_class_mem__smart_ptr_class_core__T_O__class_gctools__GCAlloc_malloc_class_gctools__GCVector_impl_class_mem__smart_ptr_class_core__T_O______>(gcvector_gc_safe->_Capacity));
} break;
case KIND_GCVECTOR_gctools__GCVector_class_mem__smart_ptr_class_clbind__ClassRep_O__class_gctools__GCAlloc_malloc_class_gctools__GCVector_impl_class_mem__smart_ptr_class_clbind__ClassRep_O______: {
  // processing #S(GCCONTAINER :KEY "gctools::GCVector<class mem::smart_ptr<class clbind::ClassRep_O>,class gctools::GCAlloc_malloc<class gctools::GCVector_impl<class mem::smart_ptr<class clbind::ClassRep_O> > >>" :NAME "gctools::GCVector" :BASES ("gctools::GCContainer") :VBASES CL:NIL :HAS-DESTRUCTOR CL:NIL :DECL-TYPE #S(CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::GCVector<class mem::smart_ptr<class clbind::ClassRep_O>,class gctools::GCAlloc_malloc<class gctools::GCVector_impl<class mem::smart_ptr<class clbind::ClassRep_O> > >>" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CL:INDEX 0 :CTYPE #S(SMART-PTR-CTYPE :KEY "mem::smart_ptr<class clbind::ClassRep_O>" :SPECIALIZER "class clbind::ClassRep_O")) #S(GC-TEMPLATE-ARGUMENT :CL:INDEX 1 :CTYPE #S(CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::GCAlloc_malloc<class gctools::GCVector_impl<class mem::smart_ptr<class clbind::ClassRep_O> >>" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CL:INDEX 0 :CTYPE #S(CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::GCVector_impl<class mem::smart_ptr<class clbind::ClassRep_O>>" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CL:INDEX 0 :CTYPE #S(SMART-PTR-CTYPE :KEY "mem::smart_ptr<class clbind::ClassRep_O>" :SPECIALIZER "class clbind::ClassRep_O")))))))))))
  // parm0-ctype = #S(SMART-PTR-CTYPE :KEY "mem::smart_ptr<class clbind::ClassRep_O>" :SPECIALIZER "class clbind::ClassRep_O")
  gctools::GCVector<class mem::smart_ptr<class clbind::ClassRep_O>, class gctools::GCAlloc_malloc<class gctools::GCVector_impl<class mem::smart_ptr<class clbind::ClassRep_O>>>> *obj_gc_safe = reinterpret_cast<gctools::GCVector<class mem::smart_ptr<class clbind::ClassRep_O>, class gctools::GCAlloc_malloc<class gctools::GCVector_impl<class mem::smart_ptr<class clbind::ClassRep_O>>>> *>(base);
  DEBUG_SCAN_OBJECT(obj_gc_safe);
  for (gctools::GCVector<class mem::smart_ptr<class clbind::ClassRep_O>, class gctools::GCAlloc_malloc<class gctools::GCVector_impl<class mem::smart_ptr<class clbind::ClassRep_O>>>>::iterator it = obj_gc_safe.begin(); it != obj_gc_safe.end(); ++it) {
    // A scanner for #S(SMART-PTR-CTYPE :KEY "mem::smart_ptr<class clbind::ClassRep_O>" :SPECIALIZER "class clbind::ClassRep_O")
    SMART_PTR_FIX(*it);
  }
  typedef typename gctools::GCVector<class mem::smart_ptr<class clbind::ClassRep_O>, class gctools::GCAlloc_malloc<class gctools::GCVector_impl<class mem::smart_ptr<class clbind::ClassRep_O>>>>::impl_type type_KIND_GCVECTOR_gctools__GCVector_class_mem__smart_ptr_class_clbind__ClassRep_O__class_gctools__GCAlloc_malloc_class_gctools__GCVector_impl_class_mem__smart_ptr_class_clbind__ClassRep_O______;
  base = (char *)base + ALIGN(gc_sizeof<type_KIND_GCVECTOR_gctools__GCVector_class_mem__smart_ptr_class_clbind__ClassRep_O__class_gctools__GCAlloc_malloc_class_gctools__GCVector_impl_class_mem__smart_ptr_class_clbind__ClassRep_O______>(gcvector_gc_safe->_Capacity));
} break;
case KIND_GCVECTOR_gctools__GCVector_struct_gctools__X_class_gctools__GCAlloc_malloc_class_gctools__GCVector_impl_struct_gctools__X____: {
  // processing #S(GCCONTAINER :KEY "gctools::GCVector<struct gctools::X,class gctools::GCAlloc_malloc<class gctools::GCVector_impl<struct gctools::X> >>" :NAME "gctools::GCVector" :BASES ("gctools::GCContainer") :VBASES CL:NIL :HAS-DESTRUCTOR CL:NIL :DECL-TYPE #S(CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::GCVector<struct gctools::X,class gctools::GCAlloc_malloc<class gctools::GCVector_impl<struct gctools::X> >>" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CL:INDEX 0 :CTYPE #S(CXXRECORD-CTYPE :KEY "gctools::X")) #S(GC-TEMPLATE-ARGUMENT :CL:INDEX 1 :CTYPE #S(CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::GCAlloc_malloc<class gctools::GCVector_impl<struct gctools::X>>" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CL:INDEX 0 :CTYPE #S(CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::GCVector_impl<struct gctools::X>" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CL:INDEX 0 :CTYPE #S(CXXRECORD-CTYPE :KEY "gctools::X")))))))))))
  // parm0-ctype = #S(CXXRECORD-CTYPE :KEY "gctools::X")
  gctools::GCVector<struct gctools::X, class gctools::GCAlloc_malloc<class gctools::GCVector_impl<struct gctools::X>>> *obj_gc_safe = reinterpret_cast<gctools::GCVector<struct gctools::X, class gctools::GCAlloc_malloc<class gctools::GCVector_impl<struct gctools::X>>> *>(base);
  DEBUG_SCAN_OBJECT(obj_gc_safe);
  for (gctools::GCVector<struct gctools::X, class gctools::GCAlloc_malloc<class gctools::GCVector_impl<struct gctools::X>>>::iterator it = obj_gc_safe.begin(); it != obj_gc_safe.end(); ++it) {
    // A scanner for #S(CXXRECORD-CTYPE :KEY "gctools::X")
    it->onHeapScanGCRoots(GC_SCAN_ARGS_PROTOTYPE);
  }
  typedef typename gctools::GCVector<struct gctools::X, class gctools::GCAlloc_malloc<class gctools::GCVector_impl<struct gctools::X>>>::impl_type type_KIND_GCVECTOR_gctools__GCVector_struct_gctools__X_class_gctools__GCAlloc_malloc_class_gctools__GCVector_impl_struct_gctools__X____;
  base = (char *)base + ALIGN(gc_sizeof<type_KIND_GCVECTOR_gctools__GCVector_struct_gctools__X_class_gctools__GCAlloc_malloc_class_gctools__GCVector_impl_struct_gctools__X____>(gcvector_gc_safe->_Capacity));
} break;
case KIND_GCVECTOR_gctools__GCVector_struct_core__KeywordArgument_class_gctools__GCAlloc_malloc_class_gctools__GCVector_impl_struct_core__KeywordArgument____: {
  // processing #S(GCCONTAINER :KEY "gctools::GCVector<struct core::KeywordArgument,class gctools::GCAlloc_malloc<class gctools::GCVector_impl<struct core::KeywordArgument> >>" :NAME "gctools::GCVector" :BASES ("gctools::GCContainer") :VBASES CL:NIL :HAS-DESTRUCTOR CL:NIL :DECL-TYPE #S(CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::GCVector<struct core::KeywordArgument,class gctools::GCAlloc_malloc<class gctools::GCVector_impl<struct core::KeywordArgument> >>" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CL:INDEX 0 :CTYPE #S(CXXRECORD-CTYPE :KEY "core::KeywordArgument")) #S(GC-TEMPLATE-ARGUMENT :CL:INDEX 1 :CTYPE #S(CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::GCAlloc_malloc<class gctools::GCVector_impl<struct core::KeywordArgument>>" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CL:INDEX 0 :CTYPE #S(CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::GCVector_impl<struct core::KeywordArgument>" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CL:INDEX 0 :CTYPE #S(CXXRECORD-CTYPE :KEY "core::KeywordArgument")))))))))))
  // parm0-ctype = #S(CXXRECORD-CTYPE :KEY "core::KeywordArgument")
  gctools::GCVector<struct core::KeywordArgument, class gctools::GCAlloc_malloc<class gctools::GCVector_impl<struct core::KeywordArgument>>> *obj_gc_safe = reinterpret_cast<gctools::GCVector<struct core::KeywordArgument, class gctools::GCAlloc_malloc<class gctools::GCVector_impl<struct core::KeywordArgument>>> *>(base);
  DEBUG_SCAN_OBJECT(obj_gc_safe);
  for (gctools::GCVector<struct core::KeywordArgument, class gctools::GCAlloc_malloc<class gctools::GCVector_impl<struct core::KeywordArgument>>>::iterator it = obj_gc_safe.begin(); it != obj_gc_safe.end(); ++it) {
    // A scanner for #S(CXXRECORD-CTYPE :KEY "core::KeywordArgument")
    it->onHeapScanGCRoots(GC_SCAN_ARGS_PROTOTYPE);
  }
  typedef typename gctools::GCVector<struct core::KeywordArgument, class gctools::GCAlloc_malloc<class gctools::GCVector_impl<struct core::KeywordArgument>>>::impl_type type_KIND_GCVECTOR_gctools__GCVector_struct_core__KeywordArgument_class_gctools__GCAlloc_malloc_class_gctools__GCVector_impl_struct_core__KeywordArgument____;
  base = (char *)base + ALIGN(gc_sizeof<type_KIND_GCVECTOR_gctools__GCVector_struct_core__KeywordArgument_class_gctools__GCAlloc_malloc_class_gctools__GCVector_impl_struct_core__KeywordArgument____>(gcvector_gc_safe->_Capacity));
} break;
case KIND_GCVECTOR_gctools__GCVector_class_mem__smart_ptr_class_core__Cons_O__class_gctools__GCAlloc_malloc_class_gctools__GCVector_impl_class_mem__smart_ptr_class_core__Cons_O______: {
  // processing #S(GCCONTAINER :KEY "gctools::GCVector<class mem::smart_ptr<class core::Cons_O>,class gctools::GCAlloc_malloc<class gctools::GCVector_impl<class mem::smart_ptr<class core::Cons_O> > >>" :NAME "gctools::GCVector" :BASES ("gctools::GCContainer") :VBASES CL:NIL :HAS-DESTRUCTOR CL:NIL :DECL-TYPE #S(CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::GCVector<class mem::smart_ptr<class core::Cons_O>,class gctools::GCAlloc_malloc<class gctools::GCVector_impl<class mem::smart_ptr<class core::Cons_O> > >>" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CL:INDEX 0 :CTYPE #S(SMART-PTR-CTYPE :KEY "mem::smart_ptr<class core::Cons_O>" :SPECIALIZER "class core::Cons_O")) #S(GC-TEMPLATE-ARGUMENT :CL:INDEX 1 :CTYPE #S(CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::GCAlloc_malloc<class gctools::GCVector_impl<class mem::smart_ptr<class core::Cons_O> >>" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CL:INDEX 0 :CTYPE #S(CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::GCVector_impl<class mem::smart_ptr<class core::Cons_O>>" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CL:INDEX 0 :CTYPE #S(SMART-PTR-CTYPE :KEY "mem::smart_ptr<class core::Cons_O>" :SPECIALIZER "class core::Cons_O")))))))))))
  // parm0-ctype = #S(SMART-PTR-CTYPE :KEY "mem::smart_ptr<class core::Cons_O>" :SPECIALIZER "class core::Cons_O")
  gctools::GCVector<class mem::smart_ptr<class core::Cons_O>, class gctools::GCAlloc_malloc<class gctools::GCVector_impl<class mem::smart_ptr<class core::Cons_O>>>> *obj_gc_safe = reinterpret_cast<gctools::GCVector<class mem::smart_ptr<class core::Cons_O>, class gctools::GCAlloc_malloc<class gctools::GCVector_impl<class mem::smart_ptr<class core::Cons_O>>>> *>(base);
  DEBUG_SCAN_OBJECT(obj_gc_safe);
  for (gctools::GCVector<class mem::smart_ptr<class core::Cons_O>, class gctools::GCAlloc_malloc<class gctools::GCVector_impl<class mem::smart_ptr<class core::Cons_O>>>>::iterator it = obj_gc_safe.begin(); it != obj_gc_safe.end(); ++it) {
    // A scanner for #S(SMART-PTR-CTYPE :KEY "mem::smart_ptr<class core::Cons_O>" :SPECIALIZER "class core::Cons_O")
    SMART_PTR_FIX(*it);
  }
  typedef typename gctools::GCVector<class mem::smart_ptr<class core::Cons_O>, class gctools::GCAlloc_malloc<class gctools::GCVector_impl<class mem::smart_ptr<class core::Cons_O>>>>::impl_type type_KIND_GCVECTOR_gctools__GCVector_class_mem__smart_ptr_class_core__Cons_O__class_gctools__GCAlloc_malloc_class_gctools__GCVector_impl_class_mem__smart_ptr_class_core__Cons_O______;
  base = (char *)base + ALIGN(gc_sizeof<type_KIND_GCVECTOR_gctools__GCVector_class_mem__smart_ptr_class_core__Cons_O__class_gctools__GCAlloc_malloc_class_gctools__GCVector_impl_class_mem__smart_ptr_class_core__Cons_O______>(gcvector_gc_safe->_Capacity));
} break;
case KIND_GCVECTOR_gctools__GCVector_class_mem__smart_ptr_class_core__Package_O__class_gctools__GCAlloc_malloc_class_gctools__GCVector_impl_class_mem__smart_ptr_class_core__Package_O______: {
  // processing #S(GCCONTAINER :KEY "gctools::GCVector<class mem::smart_ptr<class core::Package_O>,class gctools::GCAlloc_malloc<class gctools::GCVector_impl<class mem::smart_ptr<class core::Package_O> > >>" :NAME "gctools::GCVector" :BASES ("gctools::GCContainer") :VBASES CL:NIL :HAS-DESTRUCTOR CL:NIL :DECL-TYPE #S(CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::GCVector<class mem::smart_ptr<class core::Package_O>,class gctools::GCAlloc_malloc<class gctools::GCVector_impl<class mem::smart_ptr<class core::Package_O> > >>" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CL:INDEX 0 :CTYPE #S(SMART-PTR-CTYPE :KEY "mem::smart_ptr<class core::Package_O>" :SPECIALIZER "class core::Package_O")) #S(GC-TEMPLATE-ARGUMENT :CL:INDEX 1 :CTYPE #S(CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::GCAlloc_malloc<class gctools::GCVector_impl<class mem::smart_ptr<class core::Package_O> >>" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CL:INDEX 0 :CTYPE #S(CLASS-TEMPLATE-SPECIALIZATION-CTYPE :KEY "gctools::GCVector_impl<class mem::smart_ptr<class core::Package_O>>" :ARGUMENTS (#S(GC-TEMPLATE-ARGUMENT :CL:INDEX 0 :CTYPE #S(SMART-PTR-CTYPE :KEY "mem::smart_ptr<class core::Package_O>" :SPECIALIZER "class core::Package_O")))))))))))
  // parm0-ctype = #S(SMART-PTR-CTYPE :KEY "mem::smart_ptr<class core::Package_O>" :SPECIALIZER "class core::Package_O")
  gctools::GCVector<class mem::smart_ptr<class core::Package_O>, class gctools::GCAlloc_malloc<class gctools::GCVector_impl<class mem::smart_ptr<class core::Package_O>>>> *obj_gc_safe = reinterpret_cast<gctools::GCVector<class mem::smart_ptr<class core::Package_O>, class gctools::GCAlloc_malloc<class gctools::GCVector_impl<class mem::smart_ptr<class core::Package_O>>>> *>(base);
  DEBUG_SCAN_OBJECT(obj_gc_safe);
  for (gctools::GCVector<class mem::smart_ptr<class core::Package_O>, class gctools::GCAlloc_malloc<class gctools::GCVector_impl<class mem::smart_ptr<class core::Package_O>>>>::iterator it = obj_gc_safe.begin(); it != obj_gc_safe.end(); ++it) {
    // A scanner for #S(SMART-PTR-CTYPE :KEY "mem::smart_ptr<class core::Package_O>" :SPECIALIZER "class core::Package_O")
    SMART_PTR_FIX(*it);
  }
  typedef typename gctools::GCVector<class mem::smart_ptr<class core::Package_O>, class gctools::GCAlloc_malloc<class gctools::GCVector_impl<class mem::smart_ptr<class core::Package_O>>>>::impl_type type_KIND_GCVECTOR_gctools__GCVector_class_mem__smart_ptr_class_core__Package_O__class_gctools__GCAlloc_malloc_class_gctools__GCVector_impl_class_mem__smart_ptr_class_core__Package_O______;
  base = (char *)base + ALIGN(gc_sizeof<type_KIND_GCVECTOR_gctools__GCVector_class_mem__smart_ptr_class_core__Package_O__class_gctools__GCAlloc_malloc_class_gctools__GCVector_impl_class_mem__smart_ptr_class_core__Package_O______>(gcvector_gc_safe->_Capacity));
} break;

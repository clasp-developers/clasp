// This file was GENERATED by command:
//     pump.py clbind_functoids.pmp
// DO NOT EDIT BY HAND!!!

// ret = 0
// template_ = 0
// numVoids = 0
// numArgs = 16
/* Specialization */
template <typename Pols , typename RT  ,typename ARG0,typename ARG1,typename ARG2,typename ARG3,typename ARG4,typename ARG5,
    typename ARG6,typename ARG7,typename ARG8,typename ARG9,typename ARG10,typename ARG11,typename ARG12,typename ARG13,
    typename ARG14,typename ARG15 >
class VariadicFunctor
<  RT  (*)(ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9, ARG10, ARG11, ARG12, ARG13, ARG14, ARG15), Pols>
: public core::BuiltinClosure_O {
public:
typedef VariadicFunctor <  RT  (*)(ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9, ARG10, ARG11, ARG12, ARG13, ARG14,
    ARG15), Pols> MyType;
typedef core::BuiltinClosure_O TemplatedBase;
public:
typedef RT(*Type)(ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9, ARG10, ARG11, ARG12, ARG13, ARG14, ARG15);
Type fptr;
public:
virtual const char* describe() const { return "VariadicFunctor"; };
enum { NumParams = 16 };
VariadicFunctor(core::T_sp name, Type ptr) : core::BuiltinClosure_O(entry_point,name), fptr(ptr) {};
DISABLE_NEW();
virtual size_t templatedSizeof() const { return sizeof(*this);};
static inline LCC_RETURN LISP_CALLING_CONVENTION()
{
MyType* closure = gctools::untag_general<MyType*>((MyType*)lcc_closure);
INCREMENT_FUNCTION_CALL_COUNTER(closure);
INITIALIZE_VA_LIST();
INVOCATION_HISTORY_FRAME();
MAKE_STACK_FRAME(frame,closure->asSmartPtr().raw_(),16);
core::StackFrameDynamicScopeManager scope(frame);
lambdaListHandler_createBindings(closure->asSmartPtr(),closure->_lambdaListHandler,scope,LCC_PASS_ARGS_LLH);
translate::from_object<ARG0,typename DoesNotContain_<Pols,pureOutValue<1> >::type > a0(frame->arg(0));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<1> >::type >::go(args);
translate::from_object<ARG1,typename DoesNotContain_<Pols,pureOutValue<2> >::type > a1(frame->arg(1));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<2> >::type >::go(args);
translate::from_object<ARG2,typename DoesNotContain_<Pols,pureOutValue<3> >::type > a2(frame->arg(2));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<3> >::type >::go(args);
translate::from_object<ARG3,typename DoesNotContain_<Pols,pureOutValue<4> >::type > a3(frame->arg(3));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<4> >::type >::go(args);
translate::from_object<ARG4,typename DoesNotContain_<Pols,pureOutValue<5> >::type > a4(frame->arg(4));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<5> >::type >::go(args);
translate::from_object<ARG5,typename DoesNotContain_<Pols,pureOutValue<6> >::type > a5(frame->arg(5));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<6> >::type >::go(args);
translate::from_object<ARG6,typename DoesNotContain_<Pols,pureOutValue<7> >::type > a6(frame->arg(6));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<7> >::type >::go(args);
translate::from_object<ARG7,typename DoesNotContain_<Pols,pureOutValue<8> >::type > a7(frame->arg(7));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<8> >::type >::go(args);
translate::from_object<ARG8,typename DoesNotContain_<Pols,pureOutValue<9> >::type > a8(frame->arg(8));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<9> >::type >::go(args);
translate::from_object<ARG9,typename DoesNotContain_<Pols,pureOutValue<10> >::type > a9(frame->arg(9));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<10> >::type >::go(args);
translate::from_object<ARG10,typename DoesNotContain_<Pols,pureOutValue<11> >::type > a10(frame->arg(10));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<11> >::type >::go(args);
translate::from_object<ARG11,typename DoesNotContain_<Pols,pureOutValue<12> >::type > a11(frame->arg(11));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<12> >::type >::go(args);
translate::from_object<ARG12,typename DoesNotContain_<Pols,pureOutValue<13> >::type > a12(frame->arg(12));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<13> >::type >::go(args);
translate::from_object<ARG13,typename DoesNotContain_<Pols,pureOutValue<14> >::type > a13(frame->arg(13));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<14> >::type >::go(args);
translate::from_object<ARG14,typename DoesNotContain_<Pols,pureOutValue<15> >::type > a14(frame->arg(14));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<15> >::type >::go(args);
translate::from_object<ARG15,typename DoesNotContain_<Pols,pureOutValue<16> >::type > a15(frame->arg(15));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<16> >::type >::go(args);
RT retval =  closure->fptr(a0._v,a1._v,a2._v,a3._v,a4._v,a5._v,a6._v,a7._v,a8._v,a9._v,a10._v,a11._v,a12._v,a13._v,a14._v,a15._v);
core::MultipleValues& returnValues = core::lisp_multipleValues();
returnValues.setSize(0);
int oidx = 1;
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,0>::type()
, typename AdoptPointer<Pols,0>::type()
, a0._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,1>::type()
, typename AdoptPointer<Pols,1>::type()
, a1._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,2>::type()
, typename AdoptPointer<Pols,2>::type()
, a2._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,3>::type()
, typename AdoptPointer<Pols,3>::type()
, a3._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,4>::type()
, typename AdoptPointer<Pols,4>::type()
, a4._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,5>::type()
, typename AdoptPointer<Pols,5>::type()
, a5._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,6>::type()
, typename AdoptPointer<Pols,6>::type()
, a6._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,7>::type()
, typename AdoptPointer<Pols,7>::type()
, a7._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,8>::type()
, typename AdoptPointer<Pols,8>::type()
, a8._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,9>::type()
, typename AdoptPointer<Pols,9>::type()
, a9._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,10>::type()
, typename AdoptPointer<Pols,10>::type()
, a10._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,11>::type()
, typename AdoptPointer<Pols,11>::type()
, a11._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,12>::type()
, typename AdoptPointer<Pols,12>::type()
, a12._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,13>::type()
, typename AdoptPointer<Pols,13>::type()
, a13._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,14>::type()
, typename AdoptPointer<Pols,14>::type()
, a14._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,15>::type()
, typename AdoptPointer<Pols,15>::type()
, a15._v);
return LCC_RETURN(translate::to_object<RT,typename AdoptPointer<Pols,result>::type >::convert(retval).raw_(),oidx);
}
};
// ret = 0
// template_ = 1
// numVoids = 1
// numArgs = 15
/* Specialization */
template <typename Pols , typename RT  ,typename ARG0,typename ARG1,typename ARG2,typename ARG3,typename ARG4,typename ARG5,
    typename ARG6,typename ARG7,typename ARG8,typename ARG9,typename ARG10,typename ARG11,typename ARG12,typename ARG13,
    typename ARG14 >
class VariadicFunctor
<  RT  (*)(ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9, ARG10, ARG11, ARG12, ARG13, ARG14), Pols>
: public core::BuiltinClosure_O {
public:
typedef VariadicFunctor <  RT  (*)(ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9, ARG10, ARG11, ARG12, ARG13, ARG14),
    Pols> MyType;
typedef core::BuiltinClosure_O TemplatedBase;
public:
typedef RT(*Type)(ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9, ARG10, ARG11, ARG12, ARG13, ARG14);
Type fptr;
public:
virtual const char* describe() const { return "VariadicFunctor"; };
enum { NumParams = 15 };
VariadicFunctor(core::T_sp name, Type ptr) : core::BuiltinClosure_O(entry_point,name), fptr(ptr) {};
DISABLE_NEW();
virtual size_t templatedSizeof() const { return sizeof(*this);};
static inline LCC_RETURN LISP_CALLING_CONVENTION()
{
MyType* closure = gctools::untag_general<MyType*>((MyType*)lcc_closure);
INCREMENT_FUNCTION_CALL_COUNTER(closure);
INITIALIZE_VA_LIST();
INVOCATION_HISTORY_FRAME();
MAKE_STACK_FRAME(frame,closure->asSmartPtr().raw_(),15);
core::StackFrameDynamicScopeManager scope(frame);
lambdaListHandler_createBindings(closure->asSmartPtr(),closure->_lambdaListHandler,scope,LCC_PASS_ARGS_LLH);
translate::from_object<ARG0,typename DoesNotContain_<Pols,pureOutValue<1> >::type > a0(frame->arg(0));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<1> >::type >::go(args);
translate::from_object<ARG1,typename DoesNotContain_<Pols,pureOutValue<2> >::type > a1(frame->arg(1));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<2> >::type >::go(args);
translate::from_object<ARG2,typename DoesNotContain_<Pols,pureOutValue<3> >::type > a2(frame->arg(2));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<3> >::type >::go(args);
translate::from_object<ARG3,typename DoesNotContain_<Pols,pureOutValue<4> >::type > a3(frame->arg(3));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<4> >::type >::go(args);
translate::from_object<ARG4,typename DoesNotContain_<Pols,pureOutValue<5> >::type > a4(frame->arg(4));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<5> >::type >::go(args);
translate::from_object<ARG5,typename DoesNotContain_<Pols,pureOutValue<6> >::type > a5(frame->arg(5));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<6> >::type >::go(args);
translate::from_object<ARG6,typename DoesNotContain_<Pols,pureOutValue<7> >::type > a6(frame->arg(6));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<7> >::type >::go(args);
translate::from_object<ARG7,typename DoesNotContain_<Pols,pureOutValue<8> >::type > a7(frame->arg(7));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<8> >::type >::go(args);
translate::from_object<ARG8,typename DoesNotContain_<Pols,pureOutValue<9> >::type > a8(frame->arg(8));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<9> >::type >::go(args);
translate::from_object<ARG9,typename DoesNotContain_<Pols,pureOutValue<10> >::type > a9(frame->arg(9));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<10> >::type >::go(args);
translate::from_object<ARG10,typename DoesNotContain_<Pols,pureOutValue<11> >::type > a10(frame->arg(10));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<11> >::type >::go(args);
translate::from_object<ARG11,typename DoesNotContain_<Pols,pureOutValue<12> >::type > a11(frame->arg(11));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<12> >::type >::go(args);
translate::from_object<ARG12,typename DoesNotContain_<Pols,pureOutValue<13> >::type > a12(frame->arg(12));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<13> >::type >::go(args);
translate::from_object<ARG13,typename DoesNotContain_<Pols,pureOutValue<14> >::type > a13(frame->arg(13));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<14> >::type >::go(args);
translate::from_object<ARG14,typename DoesNotContain_<Pols,pureOutValue<15> >::type > a14(frame->arg(14));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<15> >::type >::go(args);
RT retval =  closure->fptr(a0._v,a1._v,a2._v,a3._v,a4._v,a5._v,a6._v,a7._v,a8._v,a9._v,a10._v,a11._v,a12._v,a13._v,a14._v);
core::MultipleValues& returnValues = core::lisp_multipleValues();
returnValues.setSize(0);
int oidx = 1;
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,0>::type()
, typename AdoptPointer<Pols,0>::type()
, a0._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,1>::type()
, typename AdoptPointer<Pols,1>::type()
, a1._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,2>::type()
, typename AdoptPointer<Pols,2>::type()
, a2._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,3>::type()
, typename AdoptPointer<Pols,3>::type()
, a3._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,4>::type()
, typename AdoptPointer<Pols,4>::type()
, a4._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,5>::type()
, typename AdoptPointer<Pols,5>::type()
, a5._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,6>::type()
, typename AdoptPointer<Pols,6>::type()
, a6._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,7>::type()
, typename AdoptPointer<Pols,7>::type()
, a7._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,8>::type()
, typename AdoptPointer<Pols,8>::type()
, a8._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,9>::type()
, typename AdoptPointer<Pols,9>::type()
, a9._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,10>::type()
, typename AdoptPointer<Pols,10>::type()
, a10._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,11>::type()
, typename AdoptPointer<Pols,11>::type()
, a11._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,12>::type()
, typename AdoptPointer<Pols,12>::type()
, a12._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,13>::type()
, typename AdoptPointer<Pols,13>::type()
, a13._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,14>::type()
, typename AdoptPointer<Pols,14>::type()
, a14._v);
return LCC_RETURN(translate::to_object<RT,typename AdoptPointer<Pols,result>::type >::convert(retval).raw_(),oidx);
}
};
// ret = 0
// template_ = 2
// numVoids = 2
// numArgs = 14
/* Specialization */
template <typename Pols , typename RT  ,typename ARG0,typename ARG1,typename ARG2,typename ARG3,typename ARG4,typename ARG5,
    typename ARG6,typename ARG7,typename ARG8,typename ARG9,typename ARG10,typename ARG11,typename ARG12,typename ARG13 >
class VariadicFunctor
<  RT  (*)(ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9, ARG10, ARG11, ARG12, ARG13), Pols>
: public core::BuiltinClosure_O {
public:
typedef VariadicFunctor <  RT  (*)(ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9, ARG10, ARG11, ARG12, ARG13),
    Pols> MyType;
typedef core::BuiltinClosure_O TemplatedBase;
public:
typedef RT(*Type)(ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9, ARG10, ARG11, ARG12, ARG13);
Type fptr;
public:
virtual const char* describe() const { return "VariadicFunctor"; };
enum { NumParams = 14 };
VariadicFunctor(core::T_sp name, Type ptr) : core::BuiltinClosure_O(entry_point,name), fptr(ptr) {};
DISABLE_NEW();
virtual size_t templatedSizeof() const { return sizeof(*this);};
static inline LCC_RETURN LISP_CALLING_CONVENTION()
{
MyType* closure = gctools::untag_general<MyType*>((MyType*)lcc_closure);
INCREMENT_FUNCTION_CALL_COUNTER(closure);
INITIALIZE_VA_LIST();
INVOCATION_HISTORY_FRAME();
MAKE_STACK_FRAME(frame,closure->asSmartPtr().raw_(),14);
core::StackFrameDynamicScopeManager scope(frame);
lambdaListHandler_createBindings(closure->asSmartPtr(),closure->_lambdaListHandler,scope,LCC_PASS_ARGS_LLH);
translate::from_object<ARG0,typename DoesNotContain_<Pols,pureOutValue<1> >::type > a0(frame->arg(0));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<1> >::type >::go(args);
translate::from_object<ARG1,typename DoesNotContain_<Pols,pureOutValue<2> >::type > a1(frame->arg(1));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<2> >::type >::go(args);
translate::from_object<ARG2,typename DoesNotContain_<Pols,pureOutValue<3> >::type > a2(frame->arg(2));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<3> >::type >::go(args);
translate::from_object<ARG3,typename DoesNotContain_<Pols,pureOutValue<4> >::type > a3(frame->arg(3));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<4> >::type >::go(args);
translate::from_object<ARG4,typename DoesNotContain_<Pols,pureOutValue<5> >::type > a4(frame->arg(4));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<5> >::type >::go(args);
translate::from_object<ARG5,typename DoesNotContain_<Pols,pureOutValue<6> >::type > a5(frame->arg(5));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<6> >::type >::go(args);
translate::from_object<ARG6,typename DoesNotContain_<Pols,pureOutValue<7> >::type > a6(frame->arg(6));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<7> >::type >::go(args);
translate::from_object<ARG7,typename DoesNotContain_<Pols,pureOutValue<8> >::type > a7(frame->arg(7));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<8> >::type >::go(args);
translate::from_object<ARG8,typename DoesNotContain_<Pols,pureOutValue<9> >::type > a8(frame->arg(8));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<9> >::type >::go(args);
translate::from_object<ARG9,typename DoesNotContain_<Pols,pureOutValue<10> >::type > a9(frame->arg(9));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<10> >::type >::go(args);
translate::from_object<ARG10,typename DoesNotContain_<Pols,pureOutValue<11> >::type > a10(frame->arg(10));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<11> >::type >::go(args);
translate::from_object<ARG11,typename DoesNotContain_<Pols,pureOutValue<12> >::type > a11(frame->arg(11));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<12> >::type >::go(args);
translate::from_object<ARG12,typename DoesNotContain_<Pols,pureOutValue<13> >::type > a12(frame->arg(12));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<13> >::type >::go(args);
translate::from_object<ARG13,typename DoesNotContain_<Pols,pureOutValue<14> >::type > a13(frame->arg(13));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<14> >::type >::go(args);
RT retval =  closure->fptr(a0._v,a1._v,a2._v,a3._v,a4._v,a5._v,a6._v,a7._v,a8._v,a9._v,a10._v,a11._v,a12._v,a13._v);
core::MultipleValues& returnValues = core::lisp_multipleValues();
returnValues.setSize(0);
int oidx = 1;
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,0>::type()
, typename AdoptPointer<Pols,0>::type()
, a0._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,1>::type()
, typename AdoptPointer<Pols,1>::type()
, a1._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,2>::type()
, typename AdoptPointer<Pols,2>::type()
, a2._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,3>::type()
, typename AdoptPointer<Pols,3>::type()
, a3._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,4>::type()
, typename AdoptPointer<Pols,4>::type()
, a4._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,5>::type()
, typename AdoptPointer<Pols,5>::type()
, a5._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,6>::type()
, typename AdoptPointer<Pols,6>::type()
, a6._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,7>::type()
, typename AdoptPointer<Pols,7>::type()
, a7._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,8>::type()
, typename AdoptPointer<Pols,8>::type()
, a8._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,9>::type()
, typename AdoptPointer<Pols,9>::type()
, a9._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,10>::type()
, typename AdoptPointer<Pols,10>::type()
, a10._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,11>::type()
, typename AdoptPointer<Pols,11>::type()
, a11._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,12>::type()
, typename AdoptPointer<Pols,12>::type()
, a12._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,13>::type()
, typename AdoptPointer<Pols,13>::type()
, a13._v);
return LCC_RETURN(translate::to_object<RT,typename AdoptPointer<Pols,result>::type >::convert(retval).raw_(),oidx);
}
};
// ret = 0
// template_ = 3
// numVoids = 3
// numArgs = 13
/* Specialization */
template <typename Pols , typename RT  ,typename ARG0,typename ARG1,typename ARG2,typename ARG3,typename ARG4,typename ARG5,
    typename ARG6,typename ARG7,typename ARG8,typename ARG9,typename ARG10,typename ARG11,typename ARG12 >
class VariadicFunctor
<  RT  (*)(ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9, ARG10, ARG11, ARG12), Pols>
: public core::BuiltinClosure_O {
public:
typedef VariadicFunctor <  RT  (*)(ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9, ARG10, ARG11, ARG12), Pols> MyType;
typedef core::BuiltinClosure_O TemplatedBase;
public:
typedef RT(*Type)(ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9, ARG10, ARG11, ARG12);
Type fptr;
public:
virtual const char* describe() const { return "VariadicFunctor"; };
enum { NumParams = 13 };
VariadicFunctor(core::T_sp name, Type ptr) : core::BuiltinClosure_O(entry_point,name), fptr(ptr) {};
DISABLE_NEW();
virtual size_t templatedSizeof() const { return sizeof(*this);};
static inline LCC_RETURN LISP_CALLING_CONVENTION()
{
MyType* closure = gctools::untag_general<MyType*>((MyType*)lcc_closure);
INCREMENT_FUNCTION_CALL_COUNTER(closure);
INITIALIZE_VA_LIST();
INVOCATION_HISTORY_FRAME();
MAKE_STACK_FRAME(frame,closure->asSmartPtr().raw_(),13);
core::StackFrameDynamicScopeManager scope(frame);
lambdaListHandler_createBindings(closure->asSmartPtr(),closure->_lambdaListHandler,scope,LCC_PASS_ARGS_LLH);
translate::from_object<ARG0,typename DoesNotContain_<Pols,pureOutValue<1> >::type > a0(frame->arg(0));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<1> >::type >::go(args);
translate::from_object<ARG1,typename DoesNotContain_<Pols,pureOutValue<2> >::type > a1(frame->arg(1));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<2> >::type >::go(args);
translate::from_object<ARG2,typename DoesNotContain_<Pols,pureOutValue<3> >::type > a2(frame->arg(2));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<3> >::type >::go(args);
translate::from_object<ARG3,typename DoesNotContain_<Pols,pureOutValue<4> >::type > a3(frame->arg(3));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<4> >::type >::go(args);
translate::from_object<ARG4,typename DoesNotContain_<Pols,pureOutValue<5> >::type > a4(frame->arg(4));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<5> >::type >::go(args);
translate::from_object<ARG5,typename DoesNotContain_<Pols,pureOutValue<6> >::type > a5(frame->arg(5));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<6> >::type >::go(args);
translate::from_object<ARG6,typename DoesNotContain_<Pols,pureOutValue<7> >::type > a6(frame->arg(6));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<7> >::type >::go(args);
translate::from_object<ARG7,typename DoesNotContain_<Pols,pureOutValue<8> >::type > a7(frame->arg(7));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<8> >::type >::go(args);
translate::from_object<ARG8,typename DoesNotContain_<Pols,pureOutValue<9> >::type > a8(frame->arg(8));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<9> >::type >::go(args);
translate::from_object<ARG9,typename DoesNotContain_<Pols,pureOutValue<10> >::type > a9(frame->arg(9));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<10> >::type >::go(args);
translate::from_object<ARG10,typename DoesNotContain_<Pols,pureOutValue<11> >::type > a10(frame->arg(10));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<11> >::type >::go(args);
translate::from_object<ARG11,typename DoesNotContain_<Pols,pureOutValue<12> >::type > a11(frame->arg(11));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<12> >::type >::go(args);
translate::from_object<ARG12,typename DoesNotContain_<Pols,pureOutValue<13> >::type > a12(frame->arg(12));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<13> >::type >::go(args);
RT retval =  closure->fptr(a0._v,a1._v,a2._v,a3._v,a4._v,a5._v,a6._v,a7._v,a8._v,a9._v,a10._v,a11._v,a12._v);
core::MultipleValues& returnValues = core::lisp_multipleValues();
returnValues.setSize(0);
int oidx = 1;
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,0>::type()
, typename AdoptPointer<Pols,0>::type()
, a0._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,1>::type()
, typename AdoptPointer<Pols,1>::type()
, a1._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,2>::type()
, typename AdoptPointer<Pols,2>::type()
, a2._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,3>::type()
, typename AdoptPointer<Pols,3>::type()
, a3._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,4>::type()
, typename AdoptPointer<Pols,4>::type()
, a4._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,5>::type()
, typename AdoptPointer<Pols,5>::type()
, a5._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,6>::type()
, typename AdoptPointer<Pols,6>::type()
, a6._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,7>::type()
, typename AdoptPointer<Pols,7>::type()
, a7._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,8>::type()
, typename AdoptPointer<Pols,8>::type()
, a8._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,9>::type()
, typename AdoptPointer<Pols,9>::type()
, a9._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,10>::type()
, typename AdoptPointer<Pols,10>::type()
, a10._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,11>::type()
, typename AdoptPointer<Pols,11>::type()
, a11._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,12>::type()
, typename AdoptPointer<Pols,12>::type()
, a12._v);
return LCC_RETURN(translate::to_object<RT,typename AdoptPointer<Pols,result>::type >::convert(retval).raw_(),oidx);
}
};
// ret = 0
// template_ = 4
// numVoids = 4
// numArgs = 12
/* Specialization */
template <typename Pols , typename RT  ,typename ARG0,typename ARG1,typename ARG2,typename ARG3,typename ARG4,typename ARG5,
    typename ARG6,typename ARG7,typename ARG8,typename ARG9,typename ARG10,typename ARG11 >
class VariadicFunctor
<  RT  (*)(ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9, ARG10, ARG11), Pols>
: public core::BuiltinClosure_O {
public:
typedef VariadicFunctor <  RT  (*)(ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9, ARG10, ARG11), Pols> MyType;
typedef core::BuiltinClosure_O TemplatedBase;
public:
typedef RT(*Type)(ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9, ARG10, ARG11);
Type fptr;
public:
virtual const char* describe() const { return "VariadicFunctor"; };
enum { NumParams = 12 };
VariadicFunctor(core::T_sp name, Type ptr) : core::BuiltinClosure_O(entry_point,name), fptr(ptr) {};
DISABLE_NEW();
virtual size_t templatedSizeof() const { return sizeof(*this);};
static inline LCC_RETURN LISP_CALLING_CONVENTION()
{
MyType* closure = gctools::untag_general<MyType*>((MyType*)lcc_closure);
INCREMENT_FUNCTION_CALL_COUNTER(closure);
INITIALIZE_VA_LIST();
INVOCATION_HISTORY_FRAME();
MAKE_STACK_FRAME(frame,closure->asSmartPtr().raw_(),12);
core::StackFrameDynamicScopeManager scope(frame);
lambdaListHandler_createBindings(closure->asSmartPtr(),closure->_lambdaListHandler,scope,LCC_PASS_ARGS_LLH);
translate::from_object<ARG0,typename DoesNotContain_<Pols,pureOutValue<1> >::type > a0(frame->arg(0));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<1> >::type >::go(args);
translate::from_object<ARG1,typename DoesNotContain_<Pols,pureOutValue<2> >::type > a1(frame->arg(1));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<2> >::type >::go(args);
translate::from_object<ARG2,typename DoesNotContain_<Pols,pureOutValue<3> >::type > a2(frame->arg(2));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<3> >::type >::go(args);
translate::from_object<ARG3,typename DoesNotContain_<Pols,pureOutValue<4> >::type > a3(frame->arg(3));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<4> >::type >::go(args);
translate::from_object<ARG4,typename DoesNotContain_<Pols,pureOutValue<5> >::type > a4(frame->arg(4));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<5> >::type >::go(args);
translate::from_object<ARG5,typename DoesNotContain_<Pols,pureOutValue<6> >::type > a5(frame->arg(5));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<6> >::type >::go(args);
translate::from_object<ARG6,typename DoesNotContain_<Pols,pureOutValue<7> >::type > a6(frame->arg(6));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<7> >::type >::go(args);
translate::from_object<ARG7,typename DoesNotContain_<Pols,pureOutValue<8> >::type > a7(frame->arg(7));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<8> >::type >::go(args);
translate::from_object<ARG8,typename DoesNotContain_<Pols,pureOutValue<9> >::type > a8(frame->arg(8));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<9> >::type >::go(args);
translate::from_object<ARG9,typename DoesNotContain_<Pols,pureOutValue<10> >::type > a9(frame->arg(9));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<10> >::type >::go(args);
translate::from_object<ARG10,typename DoesNotContain_<Pols,pureOutValue<11> >::type > a10(frame->arg(10));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<11> >::type >::go(args);
translate::from_object<ARG11,typename DoesNotContain_<Pols,pureOutValue<12> >::type > a11(frame->arg(11));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<12> >::type >::go(args);
RT retval =  closure->fptr(a0._v,a1._v,a2._v,a3._v,a4._v,a5._v,a6._v,a7._v,a8._v,a9._v,a10._v,a11._v);
core::MultipleValues& returnValues = core::lisp_multipleValues();
returnValues.setSize(0);
int oidx = 1;
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,0>::type()
, typename AdoptPointer<Pols,0>::type()
, a0._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,1>::type()
, typename AdoptPointer<Pols,1>::type()
, a1._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,2>::type()
, typename AdoptPointer<Pols,2>::type()
, a2._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,3>::type()
, typename AdoptPointer<Pols,3>::type()
, a3._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,4>::type()
, typename AdoptPointer<Pols,4>::type()
, a4._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,5>::type()
, typename AdoptPointer<Pols,5>::type()
, a5._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,6>::type()
, typename AdoptPointer<Pols,6>::type()
, a6._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,7>::type()
, typename AdoptPointer<Pols,7>::type()
, a7._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,8>::type()
, typename AdoptPointer<Pols,8>::type()
, a8._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,9>::type()
, typename AdoptPointer<Pols,9>::type()
, a9._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,10>::type()
, typename AdoptPointer<Pols,10>::type()
, a10._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,11>::type()
, typename AdoptPointer<Pols,11>::type()
, a11._v);
return LCC_RETURN(translate::to_object<RT,typename AdoptPointer<Pols,result>::type >::convert(retval).raw_(),oidx);
}
};
// ret = 0
// template_ = 5
// numVoids = 5
// numArgs = 11
/* Specialization */
template <typename Pols , typename RT  ,typename ARG0,typename ARG1,typename ARG2,typename ARG3,typename ARG4,typename ARG5,
    typename ARG6,typename ARG7,typename ARG8,typename ARG9,typename ARG10 >
class VariadicFunctor
<  RT  (*)(ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9, ARG10), Pols>
: public core::BuiltinClosure_O {
public:
typedef VariadicFunctor <  RT  (*)(ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9, ARG10), Pols> MyType;
typedef core::BuiltinClosure_O TemplatedBase;
public:
typedef RT(*Type)(ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9, ARG10);
Type fptr;
public:
virtual const char* describe() const { return "VariadicFunctor"; };
enum { NumParams = 11 };
VariadicFunctor(core::T_sp name, Type ptr) : core::BuiltinClosure_O(entry_point,name), fptr(ptr) {};
DISABLE_NEW();
virtual size_t templatedSizeof() const { return sizeof(*this);};
static inline LCC_RETURN LISP_CALLING_CONVENTION()
{
MyType* closure = gctools::untag_general<MyType*>((MyType*)lcc_closure);
INCREMENT_FUNCTION_CALL_COUNTER(closure);
INITIALIZE_VA_LIST();
INVOCATION_HISTORY_FRAME();
MAKE_STACK_FRAME(frame,closure->asSmartPtr().raw_(),11);
core::StackFrameDynamicScopeManager scope(frame);
lambdaListHandler_createBindings(closure->asSmartPtr(),closure->_lambdaListHandler,scope,LCC_PASS_ARGS_LLH);
translate::from_object<ARG0,typename DoesNotContain_<Pols,pureOutValue<1> >::type > a0(frame->arg(0));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<1> >::type >::go(args);
translate::from_object<ARG1,typename DoesNotContain_<Pols,pureOutValue<2> >::type > a1(frame->arg(1));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<2> >::type >::go(args);
translate::from_object<ARG2,typename DoesNotContain_<Pols,pureOutValue<3> >::type > a2(frame->arg(2));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<3> >::type >::go(args);
translate::from_object<ARG3,typename DoesNotContain_<Pols,pureOutValue<4> >::type > a3(frame->arg(3));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<4> >::type >::go(args);
translate::from_object<ARG4,typename DoesNotContain_<Pols,pureOutValue<5> >::type > a4(frame->arg(4));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<5> >::type >::go(args);
translate::from_object<ARG5,typename DoesNotContain_<Pols,pureOutValue<6> >::type > a5(frame->arg(5));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<6> >::type >::go(args);
translate::from_object<ARG6,typename DoesNotContain_<Pols,pureOutValue<7> >::type > a6(frame->arg(6));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<7> >::type >::go(args);
translate::from_object<ARG7,typename DoesNotContain_<Pols,pureOutValue<8> >::type > a7(frame->arg(7));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<8> >::type >::go(args);
translate::from_object<ARG8,typename DoesNotContain_<Pols,pureOutValue<9> >::type > a8(frame->arg(8));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<9> >::type >::go(args);
translate::from_object<ARG9,typename DoesNotContain_<Pols,pureOutValue<10> >::type > a9(frame->arg(9));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<10> >::type >::go(args);
translate::from_object<ARG10,typename DoesNotContain_<Pols,pureOutValue<11> >::type > a10(frame->arg(10));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<11> >::type >::go(args);
RT retval =  closure->fptr(a0._v,a1._v,a2._v,a3._v,a4._v,a5._v,a6._v,a7._v,a8._v,a9._v,a10._v);
core::MultipleValues& returnValues = core::lisp_multipleValues();
returnValues.setSize(0);
int oidx = 1;
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,0>::type()
, typename AdoptPointer<Pols,0>::type()
, a0._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,1>::type()
, typename AdoptPointer<Pols,1>::type()
, a1._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,2>::type()
, typename AdoptPointer<Pols,2>::type()
, a2._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,3>::type()
, typename AdoptPointer<Pols,3>::type()
, a3._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,4>::type()
, typename AdoptPointer<Pols,4>::type()
, a4._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,5>::type()
, typename AdoptPointer<Pols,5>::type()
, a5._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,6>::type()
, typename AdoptPointer<Pols,6>::type()
, a6._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,7>::type()
, typename AdoptPointer<Pols,7>::type()
, a7._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,8>::type()
, typename AdoptPointer<Pols,8>::type()
, a8._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,9>::type()
, typename AdoptPointer<Pols,9>::type()
, a9._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,10>::type()
, typename AdoptPointer<Pols,10>::type()
, a10._v);
return LCC_RETURN(translate::to_object<RT,typename AdoptPointer<Pols,result>::type >::convert(retval).raw_(),oidx);
}
};
// ret = 0
// template_ = 6
// numVoids = 6
// numArgs = 10
/* Specialization */
template <typename Pols , typename RT  ,typename ARG0,typename ARG1,typename ARG2,typename ARG3,typename ARG4,typename ARG5,
    typename ARG6,typename ARG7,typename ARG8,typename ARG9 >
class VariadicFunctor
<  RT  (*)(ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9), Pols>
: public core::BuiltinClosure_O {
public:
typedef VariadicFunctor <  RT  (*)(ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9), Pols> MyType;
typedef core::BuiltinClosure_O TemplatedBase;
public:
typedef RT(*Type)(ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9);
Type fptr;
public:
virtual const char* describe() const { return "VariadicFunctor"; };
enum { NumParams = 10 };
VariadicFunctor(core::T_sp name, Type ptr) : core::BuiltinClosure_O(entry_point,name), fptr(ptr) {};
DISABLE_NEW();
virtual size_t templatedSizeof() const { return sizeof(*this);};
static inline LCC_RETURN LISP_CALLING_CONVENTION()
{
MyType* closure = gctools::untag_general<MyType*>((MyType*)lcc_closure);
INCREMENT_FUNCTION_CALL_COUNTER(closure);
INITIALIZE_VA_LIST();
INVOCATION_HISTORY_FRAME();
MAKE_STACK_FRAME(frame,closure->asSmartPtr().raw_(),10);
core::StackFrameDynamicScopeManager scope(frame);
lambdaListHandler_createBindings(closure->asSmartPtr(),closure->_lambdaListHandler,scope,LCC_PASS_ARGS_LLH);
translate::from_object<ARG0,typename DoesNotContain_<Pols,pureOutValue<1> >::type > a0(frame->arg(0));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<1> >::type >::go(args);
translate::from_object<ARG1,typename DoesNotContain_<Pols,pureOutValue<2> >::type > a1(frame->arg(1));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<2> >::type >::go(args);
translate::from_object<ARG2,typename DoesNotContain_<Pols,pureOutValue<3> >::type > a2(frame->arg(2));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<3> >::type >::go(args);
translate::from_object<ARG3,typename DoesNotContain_<Pols,pureOutValue<4> >::type > a3(frame->arg(3));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<4> >::type >::go(args);
translate::from_object<ARG4,typename DoesNotContain_<Pols,pureOutValue<5> >::type > a4(frame->arg(4));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<5> >::type >::go(args);
translate::from_object<ARG5,typename DoesNotContain_<Pols,pureOutValue<6> >::type > a5(frame->arg(5));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<6> >::type >::go(args);
translate::from_object<ARG6,typename DoesNotContain_<Pols,pureOutValue<7> >::type > a6(frame->arg(6));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<7> >::type >::go(args);
translate::from_object<ARG7,typename DoesNotContain_<Pols,pureOutValue<8> >::type > a7(frame->arg(7));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<8> >::type >::go(args);
translate::from_object<ARG8,typename DoesNotContain_<Pols,pureOutValue<9> >::type > a8(frame->arg(8));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<9> >::type >::go(args);
translate::from_object<ARG9,typename DoesNotContain_<Pols,pureOutValue<10> >::type > a9(frame->arg(9));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<10> >::type >::go(args);
RT retval =  closure->fptr(a0._v,a1._v,a2._v,a3._v,a4._v,a5._v,a6._v,a7._v,a8._v,a9._v);
core::MultipleValues& returnValues = core::lisp_multipleValues();
returnValues.setSize(0);
int oidx = 1;
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,0>::type()
, typename AdoptPointer<Pols,0>::type()
, a0._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,1>::type()
, typename AdoptPointer<Pols,1>::type()
, a1._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,2>::type()
, typename AdoptPointer<Pols,2>::type()
, a2._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,3>::type()
, typename AdoptPointer<Pols,3>::type()
, a3._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,4>::type()
, typename AdoptPointer<Pols,4>::type()
, a4._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,5>::type()
, typename AdoptPointer<Pols,5>::type()
, a5._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,6>::type()
, typename AdoptPointer<Pols,6>::type()
, a6._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,7>::type()
, typename AdoptPointer<Pols,7>::type()
, a7._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,8>::type()
, typename AdoptPointer<Pols,8>::type()
, a8._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,9>::type()
, typename AdoptPointer<Pols,9>::type()
, a9._v);
return LCC_RETURN(translate::to_object<RT,typename AdoptPointer<Pols,result>::type >::convert(retval).raw_(),oidx);
}
};
// ret = 0
// template_ = 7
// numVoids = 7
// numArgs = 9
/* Specialization */
template <typename Pols , typename RT  ,typename ARG0,typename ARG1,typename ARG2,typename ARG3,typename ARG4,typename ARG5,
    typename ARG6,typename ARG7,typename ARG8 >
class VariadicFunctor
<  RT  (*)(ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8), Pols>
: public core::BuiltinClosure_O {
public:
typedef VariadicFunctor <  RT  (*)(ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8), Pols> MyType;
typedef core::BuiltinClosure_O TemplatedBase;
public:
typedef RT(*Type)(ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8);
Type fptr;
public:
virtual const char* describe() const { return "VariadicFunctor"; };
enum { NumParams = 9 };
VariadicFunctor(core::T_sp name, Type ptr) : core::BuiltinClosure_O(entry_point,name), fptr(ptr) {};
DISABLE_NEW();
virtual size_t templatedSizeof() const { return sizeof(*this);};
static inline LCC_RETURN LISP_CALLING_CONVENTION()
{
MyType* closure = gctools::untag_general<MyType*>((MyType*)lcc_closure);
INCREMENT_FUNCTION_CALL_COUNTER(closure);
INITIALIZE_VA_LIST();
INVOCATION_HISTORY_FRAME();
MAKE_STACK_FRAME(frame,closure->asSmartPtr().raw_(),9);
core::StackFrameDynamicScopeManager scope(frame);
lambdaListHandler_createBindings(closure->asSmartPtr(),closure->_lambdaListHandler,scope,LCC_PASS_ARGS_LLH);
translate::from_object<ARG0,typename DoesNotContain_<Pols,pureOutValue<1> >::type > a0(frame->arg(0));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<1> >::type >::go(args);
translate::from_object<ARG1,typename DoesNotContain_<Pols,pureOutValue<2> >::type > a1(frame->arg(1));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<2> >::type >::go(args);
translate::from_object<ARG2,typename DoesNotContain_<Pols,pureOutValue<3> >::type > a2(frame->arg(2));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<3> >::type >::go(args);
translate::from_object<ARG3,typename DoesNotContain_<Pols,pureOutValue<4> >::type > a3(frame->arg(3));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<4> >::type >::go(args);
translate::from_object<ARG4,typename DoesNotContain_<Pols,pureOutValue<5> >::type > a4(frame->arg(4));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<5> >::type >::go(args);
translate::from_object<ARG5,typename DoesNotContain_<Pols,pureOutValue<6> >::type > a5(frame->arg(5));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<6> >::type >::go(args);
translate::from_object<ARG6,typename DoesNotContain_<Pols,pureOutValue<7> >::type > a6(frame->arg(6));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<7> >::type >::go(args);
translate::from_object<ARG7,typename DoesNotContain_<Pols,pureOutValue<8> >::type > a7(frame->arg(7));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<8> >::type >::go(args);
translate::from_object<ARG8,typename DoesNotContain_<Pols,pureOutValue<9> >::type > a8(frame->arg(8));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<9> >::type >::go(args);
RT retval =  closure->fptr(a0._v,a1._v,a2._v,a3._v,a4._v,a5._v,a6._v,a7._v,a8._v);
core::MultipleValues& returnValues = core::lisp_multipleValues();
returnValues.setSize(0);
int oidx = 1;
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,0>::type()
, typename AdoptPointer<Pols,0>::type()
, a0._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,1>::type()
, typename AdoptPointer<Pols,1>::type()
, a1._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,2>::type()
, typename AdoptPointer<Pols,2>::type()
, a2._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,3>::type()
, typename AdoptPointer<Pols,3>::type()
, a3._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,4>::type()
, typename AdoptPointer<Pols,4>::type()
, a4._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,5>::type()
, typename AdoptPointer<Pols,5>::type()
, a5._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,6>::type()
, typename AdoptPointer<Pols,6>::type()
, a6._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,7>::type()
, typename AdoptPointer<Pols,7>::type()
, a7._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,8>::type()
, typename AdoptPointer<Pols,8>::type()
, a8._v);
return LCC_RETURN(translate::to_object<RT,typename AdoptPointer<Pols,result>::type >::convert(retval).raw_(),oidx);
}
};
// ret = 0
// template_ = 8
// numVoids = 8
// numArgs = 8
/* Specialization */
template <typename Pols , typename RT  ,typename ARG0,typename ARG1,typename ARG2,typename ARG3,typename ARG4,typename ARG5,
    typename ARG6,typename ARG7 >
class VariadicFunctor
<  RT  (*)(ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7), Pols>
: public core::BuiltinClosure_O {
public:
typedef VariadicFunctor <  RT  (*)(ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7), Pols> MyType;
typedef core::BuiltinClosure_O TemplatedBase;
public:
typedef RT(*Type)(ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7);
Type fptr;
public:
virtual const char* describe() const { return "VariadicFunctor"; };
enum { NumParams = 8 };
VariadicFunctor(core::T_sp name, Type ptr) : core::BuiltinClosure_O(entry_point,name), fptr(ptr) {};
DISABLE_NEW();
virtual size_t templatedSizeof() const { return sizeof(*this);};
static inline LCC_RETURN LISP_CALLING_CONVENTION()
{
MyType* closure = gctools::untag_general<MyType*>((MyType*)lcc_closure);
INCREMENT_FUNCTION_CALL_COUNTER(closure);
INITIALIZE_VA_LIST();
INVOCATION_HISTORY_FRAME();
MAKE_STACK_FRAME(frame,closure->asSmartPtr().raw_(),8);
core::StackFrameDynamicScopeManager scope(frame);
lambdaListHandler_createBindings(closure->asSmartPtr(),closure->_lambdaListHandler,scope,LCC_PASS_ARGS_LLH);
translate::from_object<ARG0,typename DoesNotContain_<Pols,pureOutValue<1> >::type > a0(frame->arg(0));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<1> >::type >::go(args);
translate::from_object<ARG1,typename DoesNotContain_<Pols,pureOutValue<2> >::type > a1(frame->arg(1));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<2> >::type >::go(args);
translate::from_object<ARG2,typename DoesNotContain_<Pols,pureOutValue<3> >::type > a2(frame->arg(2));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<3> >::type >::go(args);
translate::from_object<ARG3,typename DoesNotContain_<Pols,pureOutValue<4> >::type > a3(frame->arg(3));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<4> >::type >::go(args);
translate::from_object<ARG4,typename DoesNotContain_<Pols,pureOutValue<5> >::type > a4(frame->arg(4));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<5> >::type >::go(args);
translate::from_object<ARG5,typename DoesNotContain_<Pols,pureOutValue<6> >::type > a5(frame->arg(5));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<6> >::type >::go(args);
translate::from_object<ARG6,typename DoesNotContain_<Pols,pureOutValue<7> >::type > a6(frame->arg(6));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<7> >::type >::go(args);
translate::from_object<ARG7,typename DoesNotContain_<Pols,pureOutValue<8> >::type > a7(frame->arg(7));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<8> >::type >::go(args);
RT retval =  closure->fptr(a0._v,a1._v,a2._v,a3._v,a4._v,a5._v,a6._v,a7._v);
core::MultipleValues& returnValues = core::lisp_multipleValues();
returnValues.setSize(0);
int oidx = 1;
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,0>::type()
, typename AdoptPointer<Pols,0>::type()
, a0._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,1>::type()
, typename AdoptPointer<Pols,1>::type()
, a1._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,2>::type()
, typename AdoptPointer<Pols,2>::type()
, a2._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,3>::type()
, typename AdoptPointer<Pols,3>::type()
, a3._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,4>::type()
, typename AdoptPointer<Pols,4>::type()
, a4._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,5>::type()
, typename AdoptPointer<Pols,5>::type()
, a5._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,6>::type()
, typename AdoptPointer<Pols,6>::type()
, a6._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,7>::type()
, typename AdoptPointer<Pols,7>::type()
, a7._v);
return LCC_RETURN(translate::to_object<RT,typename AdoptPointer<Pols,result>::type >::convert(retval).raw_(),oidx);
}
};
// ret = 0
// template_ = 9
// numVoids = 9
// numArgs = 7
/* Specialization */
template <typename Pols , typename RT  ,typename ARG0,typename ARG1,typename ARG2,typename ARG3,typename ARG4,typename ARG5,
    typename ARG6 >
class VariadicFunctor
<  RT  (*)(ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6), Pols>
: public core::BuiltinClosure_O {
public:
typedef VariadicFunctor <  RT  (*)(ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6), Pols> MyType;
typedef core::BuiltinClosure_O TemplatedBase;
public:
typedef RT(*Type)(ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6);
Type fptr;
public:
virtual const char* describe() const { return "VariadicFunctor"; };
enum { NumParams = 7 };
VariadicFunctor(core::T_sp name, Type ptr) : core::BuiltinClosure_O(entry_point,name), fptr(ptr) {};
DISABLE_NEW();
virtual size_t templatedSizeof() const { return sizeof(*this);};
static inline LCC_RETURN LISP_CALLING_CONVENTION()
{
MyType* closure = gctools::untag_general<MyType*>((MyType*)lcc_closure);
INCREMENT_FUNCTION_CALL_COUNTER(closure);
INITIALIZE_VA_LIST();
INVOCATION_HISTORY_FRAME();
MAKE_STACK_FRAME(frame,closure->asSmartPtr().raw_(),7);
core::StackFrameDynamicScopeManager scope(frame);
lambdaListHandler_createBindings(closure->asSmartPtr(),closure->_lambdaListHandler,scope,LCC_PASS_ARGS_LLH);
translate::from_object<ARG0,typename DoesNotContain_<Pols,pureOutValue<1> >::type > a0(frame->arg(0));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<1> >::type >::go(args);
translate::from_object<ARG1,typename DoesNotContain_<Pols,pureOutValue<2> >::type > a1(frame->arg(1));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<2> >::type >::go(args);
translate::from_object<ARG2,typename DoesNotContain_<Pols,pureOutValue<3> >::type > a2(frame->arg(2));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<3> >::type >::go(args);
translate::from_object<ARG3,typename DoesNotContain_<Pols,pureOutValue<4> >::type > a3(frame->arg(3));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<4> >::type >::go(args);
translate::from_object<ARG4,typename DoesNotContain_<Pols,pureOutValue<5> >::type > a4(frame->arg(4));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<5> >::type >::go(args);
translate::from_object<ARG5,typename DoesNotContain_<Pols,pureOutValue<6> >::type > a5(frame->arg(5));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<6> >::type >::go(args);
translate::from_object<ARG6,typename DoesNotContain_<Pols,pureOutValue<7> >::type > a6(frame->arg(6));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<7> >::type >::go(args);
RT retval =  closure->fptr(a0._v,a1._v,a2._v,a3._v,a4._v,a5._v,a6._v);
core::MultipleValues& returnValues = core::lisp_multipleValues();
returnValues.setSize(0);
int oidx = 1;
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,0>::type()
, typename AdoptPointer<Pols,0>::type()
, a0._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,1>::type()
, typename AdoptPointer<Pols,1>::type()
, a1._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,2>::type()
, typename AdoptPointer<Pols,2>::type()
, a2._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,3>::type()
, typename AdoptPointer<Pols,3>::type()
, a3._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,4>::type()
, typename AdoptPointer<Pols,4>::type()
, a4._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,5>::type()
, typename AdoptPointer<Pols,5>::type()
, a5._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,6>::type()
, typename AdoptPointer<Pols,6>::type()
, a6._v);
return LCC_RETURN(translate::to_object<RT,typename AdoptPointer<Pols,result>::type >::convert(retval).raw_(),oidx);
}
};
// ret = 0
// template_ = 10
// numVoids = 10
// numArgs = 6
/* Specialization */
template <typename Pols , typename RT  ,typename ARG0,typename ARG1,typename ARG2,typename ARG3,typename ARG4,typename ARG5 >
class VariadicFunctor
<  RT  (*)(ARG0, ARG1, ARG2, ARG3, ARG4, ARG5), Pols>
: public core::BuiltinClosure_O {
public:
typedef VariadicFunctor <  RT  (*)(ARG0, ARG1, ARG2, ARG3, ARG4, ARG5), Pols> MyType;
typedef core::BuiltinClosure_O TemplatedBase;
public:
typedef RT(*Type)(ARG0, ARG1, ARG2, ARG3, ARG4, ARG5);
Type fptr;
public:
virtual const char* describe() const { return "VariadicFunctor"; };
enum { NumParams = 6 };
VariadicFunctor(core::T_sp name, Type ptr) : core::BuiltinClosure_O(entry_point,name), fptr(ptr) {};
DISABLE_NEW();
virtual size_t templatedSizeof() const { return sizeof(*this);};
static inline LCC_RETURN LISP_CALLING_CONVENTION()
{
MyType* closure = gctools::untag_general<MyType*>((MyType*)lcc_closure);
INCREMENT_FUNCTION_CALL_COUNTER(closure);
INITIALIZE_VA_LIST();
INVOCATION_HISTORY_FRAME();
MAKE_STACK_FRAME(frame,closure->asSmartPtr().raw_(),6);
core::StackFrameDynamicScopeManager scope(frame);
lambdaListHandler_createBindings(closure->asSmartPtr(),closure->_lambdaListHandler,scope,LCC_PASS_ARGS_LLH);
translate::from_object<ARG0,typename DoesNotContain_<Pols,pureOutValue<1> >::type > a0(frame->arg(0));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<1> >::type >::go(args);
translate::from_object<ARG1,typename DoesNotContain_<Pols,pureOutValue<2> >::type > a1(frame->arg(1));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<2> >::type >::go(args);
translate::from_object<ARG2,typename DoesNotContain_<Pols,pureOutValue<3> >::type > a2(frame->arg(2));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<3> >::type >::go(args);
translate::from_object<ARG3,typename DoesNotContain_<Pols,pureOutValue<4> >::type > a3(frame->arg(3));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<4> >::type >::go(args);
translate::from_object<ARG4,typename DoesNotContain_<Pols,pureOutValue<5> >::type > a4(frame->arg(4));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<5> >::type >::go(args);
translate::from_object<ARG5,typename DoesNotContain_<Pols,pureOutValue<6> >::type > a5(frame->arg(5));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<6> >::type >::go(args);
RT retval =  closure->fptr(a0._v,a1._v,a2._v,a3._v,a4._v,a5._v);
core::MultipleValues& returnValues = core::lisp_multipleValues();
returnValues.setSize(0);
int oidx = 1;
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,0>::type()
, typename AdoptPointer<Pols,0>::type()
, a0._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,1>::type()
, typename AdoptPointer<Pols,1>::type()
, a1._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,2>::type()
, typename AdoptPointer<Pols,2>::type()
, a2._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,3>::type()
, typename AdoptPointer<Pols,3>::type()
, a3._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,4>::type()
, typename AdoptPointer<Pols,4>::type()
, a4._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,5>::type()
, typename AdoptPointer<Pols,5>::type()
, a5._v);
return LCC_RETURN(translate::to_object<RT,typename AdoptPointer<Pols,result>::type >::convert(retval).raw_(),oidx);
}
};
// ret = 0
// template_ = 11
// numVoids = 11
// numArgs = 5
/* Specialization */
template <typename Pols , typename RT  ,typename ARG0,typename ARG1,typename ARG2,typename ARG3,typename ARG4 >
class VariadicFunctor
<  RT  (*)(ARG0, ARG1, ARG2, ARG3, ARG4), Pols>
: public core::BuiltinClosure_O {
public:
typedef VariadicFunctor <  RT  (*)(ARG0, ARG1, ARG2, ARG3, ARG4), Pols> MyType;
typedef core::BuiltinClosure_O TemplatedBase;
public:
typedef RT(*Type)(ARG0, ARG1, ARG2, ARG3, ARG4);
Type fptr;
public:
virtual const char* describe() const { return "VariadicFunctor"; };
enum { NumParams = 5 };
VariadicFunctor(core::T_sp name, Type ptr) : core::BuiltinClosure_O(entry_point,name), fptr(ptr) {};
DISABLE_NEW();
virtual size_t templatedSizeof() const { return sizeof(*this);};
static inline LCC_RETURN LISP_CALLING_CONVENTION()
{
MyType* closure = gctools::untag_general<MyType*>((MyType*)lcc_closure);
INCREMENT_FUNCTION_CALL_COUNTER(closure);
INITIALIZE_VA_LIST();
INVOCATION_HISTORY_FRAME();
MAKE_STACK_FRAME(frame,closure->asSmartPtr().raw_(),5);
core::StackFrameDynamicScopeManager scope(frame);
lambdaListHandler_createBindings(closure->asSmartPtr(),closure->_lambdaListHandler,scope,LCC_PASS_ARGS_LLH);
translate::from_object<ARG0,typename DoesNotContain_<Pols,pureOutValue<1> >::type > a0(frame->arg(0));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<1> >::type >::go(args);
translate::from_object<ARG1,typename DoesNotContain_<Pols,pureOutValue<2> >::type > a1(frame->arg(1));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<2> >::type >::go(args);
translate::from_object<ARG2,typename DoesNotContain_<Pols,pureOutValue<3> >::type > a2(frame->arg(2));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<3> >::type >::go(args);
translate::from_object<ARG3,typename DoesNotContain_<Pols,pureOutValue<4> >::type > a3(frame->arg(3));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<4> >::type >::go(args);
translate::from_object<ARG4,typename DoesNotContain_<Pols,pureOutValue<5> >::type > a4(frame->arg(4));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<5> >::type >::go(args);
RT retval =  closure->fptr(a0._v,a1._v,a2._v,a3._v,a4._v);
core::MultipleValues& returnValues = core::lisp_multipleValues();
returnValues.setSize(0);
int oidx = 1;
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,0>::type()
, typename AdoptPointer<Pols,0>::type()
, a0._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,1>::type()
, typename AdoptPointer<Pols,1>::type()
, a1._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,2>::type()
, typename AdoptPointer<Pols,2>::type()
, a2._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,3>::type()
, typename AdoptPointer<Pols,3>::type()
, a3._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,4>::type()
, typename AdoptPointer<Pols,4>::type()
, a4._v);
return LCC_RETURN(translate::to_object<RT,typename AdoptPointer<Pols,result>::type >::convert(retval).raw_(),oidx);
}
};
// ret = 0
// template_ = 12
// numVoids = 12
// numArgs = 4
/* Specialization */
template <typename Pols , typename RT  ,typename ARG0,typename ARG1,typename ARG2,typename ARG3 >
class VariadicFunctor
<  RT  (*)(ARG0, ARG1, ARG2, ARG3), Pols>
: public core::BuiltinClosure_O {
public:
typedef VariadicFunctor <  RT  (*)(ARG0, ARG1, ARG2, ARG3), Pols> MyType;
typedef core::BuiltinClosure_O TemplatedBase;
public:
typedef RT(*Type)(ARG0, ARG1, ARG2, ARG3);
Type fptr;
public:
virtual const char* describe() const { return "VariadicFunctor"; };
enum { NumParams = 4 };
VariadicFunctor(core::T_sp name, Type ptr) : core::BuiltinClosure_O(entry_point,name), fptr(ptr) {};
DISABLE_NEW();
virtual size_t templatedSizeof() const { return sizeof(*this);};
static inline LCC_RETURN LISP_CALLING_CONVENTION()
{
MyType* closure = gctools::untag_general<MyType*>((MyType*)lcc_closure);
INCREMENT_FUNCTION_CALL_COUNTER(closure);
INITIALIZE_VA_LIST();
INVOCATION_HISTORY_FRAME();
MAKE_STACK_FRAME(frame,closure->asSmartPtr().raw_(),4);
core::StackFrameDynamicScopeManager scope(frame);
lambdaListHandler_createBindings(closure->asSmartPtr(),closure->_lambdaListHandler,scope,LCC_PASS_ARGS_LLH);
translate::from_object<ARG0,typename DoesNotContain_<Pols,pureOutValue<1> >::type > a0(frame->arg(0));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<1> >::type >::go(args);
translate::from_object<ARG1,typename DoesNotContain_<Pols,pureOutValue<2> >::type > a1(frame->arg(1));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<2> >::type >::go(args);
translate::from_object<ARG2,typename DoesNotContain_<Pols,pureOutValue<3> >::type > a2(frame->arg(2));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<3> >::type >::go(args);
translate::from_object<ARG3,typename DoesNotContain_<Pols,pureOutValue<4> >::type > a3(frame->arg(3));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<4> >::type >::go(args);
RT retval =  closure->fptr(a0._v,a1._v,a2._v,a3._v);
core::MultipleValues& returnValues = core::lisp_multipleValues();
returnValues.setSize(0);
int oidx = 1;
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,0>::type()
, typename AdoptPointer<Pols,0>::type()
, a0._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,1>::type()
, typename AdoptPointer<Pols,1>::type()
, a1._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,2>::type()
, typename AdoptPointer<Pols,2>::type()
, a2._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,3>::type()
, typename AdoptPointer<Pols,3>::type()
, a3._v);
return LCC_RETURN(translate::to_object<RT,typename AdoptPointer<Pols,result>::type >::convert(retval).raw_(),oidx);
}
};
// ret = 0
// template_ = 13
// numVoids = 13
// numArgs = 3
/* Specialization */
template <typename Pols , typename RT  ,typename ARG0,typename ARG1,typename ARG2 >
class VariadicFunctor
<  RT  (*)(ARG0, ARG1, ARG2), Pols>
: public core::BuiltinClosure_O {
public:
typedef VariadicFunctor <  RT  (*)(ARG0, ARG1, ARG2), Pols> MyType;
typedef core::BuiltinClosure_O TemplatedBase;
public:
typedef RT(*Type)(ARG0, ARG1, ARG2);
Type fptr;
public:
virtual const char* describe() const { return "VariadicFunctor"; };
enum { NumParams = 3 };
VariadicFunctor(core::T_sp name, Type ptr) : core::BuiltinClosure_O(entry_point,name), fptr(ptr) {};
DISABLE_NEW();
virtual size_t templatedSizeof() const { return sizeof(*this);};
static inline LCC_RETURN LISP_CALLING_CONVENTION()
{
MyType* closure = gctools::untag_general<MyType*>((MyType*)lcc_closure);
INCREMENT_FUNCTION_CALL_COUNTER(closure);
INITIALIZE_VA_LIST();
INVOCATION_HISTORY_FRAME();
MAKE_STACK_FRAME(frame,closure->asSmartPtr().raw_(),3);
core::StackFrameDynamicScopeManager scope(frame);
lambdaListHandler_createBindings(closure->asSmartPtr(),closure->_lambdaListHandler,scope,LCC_PASS_ARGS_LLH);
translate::from_object<ARG0,typename DoesNotContain_<Pols,pureOutValue<1> >::type > a0(frame->arg(0));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<1> >::type >::go(args);
translate::from_object<ARG1,typename DoesNotContain_<Pols,pureOutValue<2> >::type > a1(frame->arg(1));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<2> >::type >::go(args);
translate::from_object<ARG2,typename DoesNotContain_<Pols,pureOutValue<3> >::type > a2(frame->arg(2));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<3> >::type >::go(args);
RT retval =  closure->fptr(a0._v,a1._v,a2._v);
core::MultipleValues& returnValues = core::lisp_multipleValues();
returnValues.setSize(0);
int oidx = 1;
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,0>::type()
, typename AdoptPointer<Pols,0>::type()
, a0._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,1>::type()
, typename AdoptPointer<Pols,1>::type()
, a1._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,2>::type()
, typename AdoptPointer<Pols,2>::type()
, a2._v);
return LCC_RETURN(translate::to_object<RT,typename AdoptPointer<Pols,result>::type >::convert(retval).raw_(),oidx);
}
};
// ret = 0
// template_ = 14
// numVoids = 14
// numArgs = 2
/* Specialization */
template <typename Pols , typename RT  ,typename ARG0,typename ARG1 >
class VariadicFunctor
<  RT  (*)(ARG0, ARG1), Pols>
: public core::BuiltinClosure_O {
public:
typedef VariadicFunctor <  RT  (*)(ARG0, ARG1), Pols> MyType;
typedef core::BuiltinClosure_O TemplatedBase;
public:
typedef RT(*Type)(ARG0, ARG1);
Type fptr;
public:
virtual const char* describe() const { return "VariadicFunctor"; };
enum { NumParams = 2 };
VariadicFunctor(core::T_sp name, Type ptr) : core::BuiltinClosure_O(entry_point,name), fptr(ptr) {};
DISABLE_NEW();
virtual size_t templatedSizeof() const { return sizeof(*this);};
static inline LCC_RETURN LISP_CALLING_CONVENTION()
{
MyType* closure = gctools::untag_general<MyType*>((MyType*)lcc_closure);
INCREMENT_FUNCTION_CALL_COUNTER(closure);
INITIALIZE_VA_LIST();
INVOCATION_HISTORY_FRAME();
MAKE_STACK_FRAME(frame,closure->asSmartPtr().raw_(),2);
core::StackFrameDynamicScopeManager scope(frame);
lambdaListHandler_createBindings(closure->asSmartPtr(),closure->_lambdaListHandler,scope,LCC_PASS_ARGS_LLH);
translate::from_object<ARG0,typename DoesNotContain_<Pols,pureOutValue<1> >::type > a0(frame->arg(0));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<1> >::type >::go(args);
translate::from_object<ARG1,typename DoesNotContain_<Pols,pureOutValue<2> >::type > a1(frame->arg(1));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<2> >::type >::go(args);
RT retval =  closure->fptr(a0._v,a1._v);
core::MultipleValues& returnValues = core::lisp_multipleValues();
returnValues.setSize(0);
int oidx = 1;
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,0>::type()
, typename AdoptPointer<Pols,0>::type()
, a0._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,1>::type()
, typename AdoptPointer<Pols,1>::type()
, a1._v);
return LCC_RETURN(translate::to_object<RT,typename AdoptPointer<Pols,result>::type >::convert(retval).raw_(),oidx);
}
};
// ret = 0
// template_ = 15
// numVoids = 15
// numArgs = 1
/* Specialization */
template <typename Pols , typename RT  ,typename ARG0 >
class VariadicFunctor
<  RT  (*)(ARG0), Pols>
: public core::BuiltinClosure_O {
public:
typedef VariadicFunctor <  RT  (*)(ARG0), Pols> MyType;
typedef core::BuiltinClosure_O TemplatedBase;
public:
typedef RT(*Type)(ARG0);
Type fptr;
public:
virtual const char* describe() const { return "VariadicFunctor"; };
enum { NumParams = 1 };
VariadicFunctor(core::T_sp name, Type ptr) : core::BuiltinClosure_O(entry_point,name), fptr(ptr) {};
DISABLE_NEW();
virtual size_t templatedSizeof() const { return sizeof(*this);};
static inline LCC_RETURN LISP_CALLING_CONVENTION()
{
MyType* closure = gctools::untag_general<MyType*>((MyType*)lcc_closure);
INCREMENT_FUNCTION_CALL_COUNTER(closure);
INITIALIZE_VA_LIST();
INVOCATION_HISTORY_FRAME();
MAKE_STACK_FRAME(frame,closure->asSmartPtr().raw_(),1);
core::StackFrameDynamicScopeManager scope(frame);
lambdaListHandler_createBindings(closure->asSmartPtr(),closure->_lambdaListHandler,scope,LCC_PASS_ARGS_LLH);
translate::from_object<ARG0,typename DoesNotContain_<Pols,pureOutValue<1> >::type > a0(frame->arg(0));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<1> >::type >::go(args);
RT retval =  closure->fptr(a0._v);
core::MultipleValues& returnValues = core::lisp_multipleValues();
returnValues.setSize(0);
int oidx = 1;
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,0>::type()
, typename AdoptPointer<Pols,0>::type()
, a0._v);
return LCC_RETURN(translate::to_object<RT,typename AdoptPointer<Pols,result>::type >::convert(retval).raw_(),oidx);
}
};
// ret = 0
// template_ = 16
// numVoids = 16
// numArgs = 0
/* Specialization */
template <typename Pols , typename RT   >
class VariadicFunctor
<  RT  (*)(), Pols>
: public core::BuiltinClosure_O {
public:
typedef VariadicFunctor <  RT  (*)(), Pols> MyType;
typedef core::BuiltinClosure_O TemplatedBase;
public:
typedef RT(*Type)();
Type fptr;
public:
virtual const char* describe() const { return "VariadicFunctor"; };
enum { NumParams = 0 };
VariadicFunctor(core::T_sp name, Type ptr) : core::BuiltinClosure_O(entry_point,name), fptr(ptr) {};
DISABLE_NEW();
virtual size_t templatedSizeof() const { return sizeof(*this);};
static inline LCC_RETURN LISP_CALLING_CONVENTION()
{
MyType* closure = gctools::untag_general<MyType*>((MyType*)lcc_closure);
INCREMENT_FUNCTION_CALL_COUNTER(closure);
INITIALIZE_VA_LIST();
INVOCATION_HISTORY_FRAME();
RT retval =  closure->fptr();
int oidx = 1;
return LCC_RETURN(translate::to_object<RT,typename AdoptPointer<Pols,result>::type >::convert(retval).raw_(),oidx);
}
};
// ret = 1
// template_ = 0
// numVoids = 0
// numArgs = 16
/* Specialization */
template <typename Pols  ,typename ARG0,typename ARG1,typename ARG2,typename ARG3,typename ARG4,typename ARG5,typename ARG6,
    typename ARG7,typename ARG8,typename ARG9,typename ARG10,typename ARG11,typename ARG12,typename ARG13,typename ARG14,
    typename ARG15 >
class VariadicFunctor
< void (*)(ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9, ARG10, ARG11, ARG12, ARG13, ARG14, ARG15), Pols>
: public core::BuiltinClosure_O {
public:
typedef VariadicFunctor < void (*)(ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9, ARG10, ARG11, ARG12, ARG13, ARG14,
    ARG15), Pols> MyType;
typedef core::BuiltinClosure_O TemplatedBase;
public:
typedef void(*Type)(ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9, ARG10, ARG11, ARG12, ARG13, ARG14, ARG15);
Type fptr;
public:
virtual const char* describe() const { return "VariadicFunctor"; };
enum { NumParams = 16 };
VariadicFunctor(core::T_sp name, Type ptr) : core::BuiltinClosure_O(entry_point,name), fptr(ptr) {};
DISABLE_NEW();
virtual size_t templatedSizeof() const { return sizeof(*this);};
static inline LCC_RETURN LISP_CALLING_CONVENTION()
{
MyType* closure = gctools::untag_general<MyType*>((MyType*)lcc_closure);
INCREMENT_FUNCTION_CALL_COUNTER(closure);
INITIALIZE_VA_LIST();
INVOCATION_HISTORY_FRAME();
MAKE_STACK_FRAME(frame,closure->asSmartPtr().raw_(),16);
core::StackFrameDynamicScopeManager scope(frame);
lambdaListHandler_createBindings(closure->asSmartPtr(),closure->_lambdaListHandler,scope,LCC_PASS_ARGS_LLH);
translate::from_object<ARG0,typename DoesNotContain_<Pols,pureOutValue<1> >::type > a0(frame->arg(0));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<1> >::type >::go(args);
translate::from_object<ARG1,typename DoesNotContain_<Pols,pureOutValue<2> >::type > a1(frame->arg(1));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<2> >::type >::go(args);
translate::from_object<ARG2,typename DoesNotContain_<Pols,pureOutValue<3> >::type > a2(frame->arg(2));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<3> >::type >::go(args);
translate::from_object<ARG3,typename DoesNotContain_<Pols,pureOutValue<4> >::type > a3(frame->arg(3));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<4> >::type >::go(args);
translate::from_object<ARG4,typename DoesNotContain_<Pols,pureOutValue<5> >::type > a4(frame->arg(4));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<5> >::type >::go(args);
translate::from_object<ARG5,typename DoesNotContain_<Pols,pureOutValue<6> >::type > a5(frame->arg(5));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<6> >::type >::go(args);
translate::from_object<ARG6,typename DoesNotContain_<Pols,pureOutValue<7> >::type > a6(frame->arg(6));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<7> >::type >::go(args);
translate::from_object<ARG7,typename DoesNotContain_<Pols,pureOutValue<8> >::type > a7(frame->arg(7));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<8> >::type >::go(args);
translate::from_object<ARG8,typename DoesNotContain_<Pols,pureOutValue<9> >::type > a8(frame->arg(8));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<9> >::type >::go(args);
translate::from_object<ARG9,typename DoesNotContain_<Pols,pureOutValue<10> >::type > a9(frame->arg(9));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<10> >::type >::go(args);
translate::from_object<ARG10,typename DoesNotContain_<Pols,pureOutValue<11> >::type > a10(frame->arg(10));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<11> >::type >::go(args);
translate::from_object<ARG11,typename DoesNotContain_<Pols,pureOutValue<12> >::type > a11(frame->arg(11));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<12> >::type >::go(args);
translate::from_object<ARG12,typename DoesNotContain_<Pols,pureOutValue<13> >::type > a12(frame->arg(12));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<13> >::type >::go(args);
translate::from_object<ARG13,typename DoesNotContain_<Pols,pureOutValue<14> >::type > a13(frame->arg(13));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<14> >::type >::go(args);
translate::from_object<ARG14,typename DoesNotContain_<Pols,pureOutValue<15> >::type > a14(frame->arg(14));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<15> >::type >::go(args);
translate::from_object<ARG15,typename DoesNotContain_<Pols,pureOutValue<16> >::type > a15(frame->arg(15));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<16> >::type >::go(args);
closure->fptr(a0._v,a1._v,a2._v,a3._v,a4._v,a5._v,a6._v,a7._v,a8._v,a9._v,a10._v,a11._v,a12._v,a13._v,a14._v,a15._v);
core::MultipleValues& returnValues = core::lisp_multipleValues();
returnValues.setSize(0);
int oidx = 0;                                                                     ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,0>::type()
, typename AdoptPointer<Pols,0>::type()
, a0._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,1>::type()
, typename AdoptPointer<Pols,1>::type()
, a1._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,2>::type()
, typename AdoptPointer<Pols,2>::type()
, a2._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,3>::type()
, typename AdoptPointer<Pols,3>::type()
, a3._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,4>::type()
, typename AdoptPointer<Pols,4>::type()
, a4._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,5>::type()
, typename AdoptPointer<Pols,5>::type()
, a5._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,6>::type()
, typename AdoptPointer<Pols,6>::type()
, a6._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,7>::type()
, typename AdoptPointer<Pols,7>::type()
, a7._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,8>::type()
, typename AdoptPointer<Pols,8>::type()
, a8._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,9>::type()
, typename AdoptPointer<Pols,9>::type()
, a9._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,10>::type()
, typename AdoptPointer<Pols,10>::type()
, a10._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,11>::type()
, typename AdoptPointer<Pols,11>::type()
, a11._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,12>::type()
, typename AdoptPointer<Pols,12>::type()
, a12._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,13>::type()
, typename AdoptPointer<Pols,13>::type()
, a13._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,14>::type()
, typename AdoptPointer<Pols,14>::type()
, a14._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,15>::type()
, typename AdoptPointer<Pols,15>::type()
, a15._v);
return LCC_RETURN(returnValues.valueGet(0,oidx).raw_(),oidx);
}
};
// ret = 1
// template_ = 1
// numVoids = 1
// numArgs = 15
/* Specialization */
template <typename Pols  ,typename ARG0,typename ARG1,typename ARG2,typename ARG3,typename ARG4,typename ARG5,typename ARG6,
    typename ARG7,typename ARG8,typename ARG9,typename ARG10,typename ARG11,typename ARG12,typename ARG13,typename ARG14 >
class VariadicFunctor
< void (*)(ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9, ARG10, ARG11, ARG12, ARG13, ARG14), Pols>
: public core::BuiltinClosure_O {
public:
typedef VariadicFunctor < void (*)(ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9, ARG10, ARG11, ARG12, ARG13, ARG14),
    Pols> MyType;
typedef core::BuiltinClosure_O TemplatedBase;
public:
typedef void(*Type)(ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9, ARG10, ARG11, ARG12, ARG13, ARG14);
Type fptr;
public:
virtual const char* describe() const { return "VariadicFunctor"; };
enum { NumParams = 15 };
VariadicFunctor(core::T_sp name, Type ptr) : core::BuiltinClosure_O(entry_point,name), fptr(ptr) {};
DISABLE_NEW();
virtual size_t templatedSizeof() const { return sizeof(*this);};
static inline LCC_RETURN LISP_CALLING_CONVENTION()
{
MyType* closure = gctools::untag_general<MyType*>((MyType*)lcc_closure);
INCREMENT_FUNCTION_CALL_COUNTER(closure);
INITIALIZE_VA_LIST();
INVOCATION_HISTORY_FRAME();
MAKE_STACK_FRAME(frame,closure->asSmartPtr().raw_(),15);
core::StackFrameDynamicScopeManager scope(frame);
lambdaListHandler_createBindings(closure->asSmartPtr(),closure->_lambdaListHandler,scope,LCC_PASS_ARGS_LLH);
translate::from_object<ARG0,typename DoesNotContain_<Pols,pureOutValue<1> >::type > a0(frame->arg(0));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<1> >::type >::go(args);
translate::from_object<ARG1,typename DoesNotContain_<Pols,pureOutValue<2> >::type > a1(frame->arg(1));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<2> >::type >::go(args);
translate::from_object<ARG2,typename DoesNotContain_<Pols,pureOutValue<3> >::type > a2(frame->arg(2));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<3> >::type >::go(args);
translate::from_object<ARG3,typename DoesNotContain_<Pols,pureOutValue<4> >::type > a3(frame->arg(3));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<4> >::type >::go(args);
translate::from_object<ARG4,typename DoesNotContain_<Pols,pureOutValue<5> >::type > a4(frame->arg(4));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<5> >::type >::go(args);
translate::from_object<ARG5,typename DoesNotContain_<Pols,pureOutValue<6> >::type > a5(frame->arg(5));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<6> >::type >::go(args);
translate::from_object<ARG6,typename DoesNotContain_<Pols,pureOutValue<7> >::type > a6(frame->arg(6));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<7> >::type >::go(args);
translate::from_object<ARG7,typename DoesNotContain_<Pols,pureOutValue<8> >::type > a7(frame->arg(7));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<8> >::type >::go(args);
translate::from_object<ARG8,typename DoesNotContain_<Pols,pureOutValue<9> >::type > a8(frame->arg(8));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<9> >::type >::go(args);
translate::from_object<ARG9,typename DoesNotContain_<Pols,pureOutValue<10> >::type > a9(frame->arg(9));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<10> >::type >::go(args);
translate::from_object<ARG10,typename DoesNotContain_<Pols,pureOutValue<11> >::type > a10(frame->arg(10));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<11> >::type >::go(args);
translate::from_object<ARG11,typename DoesNotContain_<Pols,pureOutValue<12> >::type > a11(frame->arg(11));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<12> >::type >::go(args);
translate::from_object<ARG12,typename DoesNotContain_<Pols,pureOutValue<13> >::type > a12(frame->arg(12));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<13> >::type >::go(args);
translate::from_object<ARG13,typename DoesNotContain_<Pols,pureOutValue<14> >::type > a13(frame->arg(13));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<14> >::type >::go(args);
translate::from_object<ARG14,typename DoesNotContain_<Pols,pureOutValue<15> >::type > a14(frame->arg(14));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<15> >::type >::go(args);
closure->fptr(a0._v,a1._v,a2._v,a3._v,a4._v,a5._v,a6._v,a7._v,a8._v,a9._v,a10._v,a11._v,a12._v,a13._v,a14._v);
core::MultipleValues& returnValues = core::lisp_multipleValues();
returnValues.setSize(0);
int oidx = 0;                                                                     ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,0>::type()
, typename AdoptPointer<Pols,0>::type()
, a0._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,1>::type()
, typename AdoptPointer<Pols,1>::type()
, a1._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,2>::type()
, typename AdoptPointer<Pols,2>::type()
, a2._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,3>::type()
, typename AdoptPointer<Pols,3>::type()
, a3._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,4>::type()
, typename AdoptPointer<Pols,4>::type()
, a4._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,5>::type()
, typename AdoptPointer<Pols,5>::type()
, a5._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,6>::type()
, typename AdoptPointer<Pols,6>::type()
, a6._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,7>::type()
, typename AdoptPointer<Pols,7>::type()
, a7._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,8>::type()
, typename AdoptPointer<Pols,8>::type()
, a8._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,9>::type()
, typename AdoptPointer<Pols,9>::type()
, a9._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,10>::type()
, typename AdoptPointer<Pols,10>::type()
, a10._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,11>::type()
, typename AdoptPointer<Pols,11>::type()
, a11._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,12>::type()
, typename AdoptPointer<Pols,12>::type()
, a12._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,13>::type()
, typename AdoptPointer<Pols,13>::type()
, a13._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,14>::type()
, typename AdoptPointer<Pols,14>::type()
, a14._v);
return LCC_RETURN(returnValues.valueGet(0,oidx).raw_(),oidx);
}
};
// ret = 1
// template_ = 2
// numVoids = 2
// numArgs = 14
/* Specialization */
template <typename Pols  ,typename ARG0,typename ARG1,typename ARG2,typename ARG3,typename ARG4,typename ARG5,typename ARG6,
    typename ARG7,typename ARG8,typename ARG9,typename ARG10,typename ARG11,typename ARG12,typename ARG13 >
class VariadicFunctor
< void (*)(ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9, ARG10, ARG11, ARG12, ARG13), Pols>
: public core::BuiltinClosure_O {
public:
typedef VariadicFunctor < void (*)(ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9, ARG10, ARG11, ARG12, ARG13),
    Pols> MyType;
typedef core::BuiltinClosure_O TemplatedBase;
public:
typedef void(*Type)(ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9, ARG10, ARG11, ARG12, ARG13);
Type fptr;
public:
virtual const char* describe() const { return "VariadicFunctor"; };
enum { NumParams = 14 };
VariadicFunctor(core::T_sp name, Type ptr) : core::BuiltinClosure_O(entry_point,name), fptr(ptr) {};
DISABLE_NEW();
virtual size_t templatedSizeof() const { return sizeof(*this);};
static inline LCC_RETURN LISP_CALLING_CONVENTION()
{
MyType* closure = gctools::untag_general<MyType*>((MyType*)lcc_closure);
INCREMENT_FUNCTION_CALL_COUNTER(closure);
INITIALIZE_VA_LIST();
INVOCATION_HISTORY_FRAME();
MAKE_STACK_FRAME(frame,closure->asSmartPtr().raw_(),14);
core::StackFrameDynamicScopeManager scope(frame);
lambdaListHandler_createBindings(closure->asSmartPtr(),closure->_lambdaListHandler,scope,LCC_PASS_ARGS_LLH);
translate::from_object<ARG0,typename DoesNotContain_<Pols,pureOutValue<1> >::type > a0(frame->arg(0));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<1> >::type >::go(args);
translate::from_object<ARG1,typename DoesNotContain_<Pols,pureOutValue<2> >::type > a1(frame->arg(1));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<2> >::type >::go(args);
translate::from_object<ARG2,typename DoesNotContain_<Pols,pureOutValue<3> >::type > a2(frame->arg(2));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<3> >::type >::go(args);
translate::from_object<ARG3,typename DoesNotContain_<Pols,pureOutValue<4> >::type > a3(frame->arg(3));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<4> >::type >::go(args);
translate::from_object<ARG4,typename DoesNotContain_<Pols,pureOutValue<5> >::type > a4(frame->arg(4));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<5> >::type >::go(args);
translate::from_object<ARG5,typename DoesNotContain_<Pols,pureOutValue<6> >::type > a5(frame->arg(5));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<6> >::type >::go(args);
translate::from_object<ARG6,typename DoesNotContain_<Pols,pureOutValue<7> >::type > a6(frame->arg(6));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<7> >::type >::go(args);
translate::from_object<ARG7,typename DoesNotContain_<Pols,pureOutValue<8> >::type > a7(frame->arg(7));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<8> >::type >::go(args);
translate::from_object<ARG8,typename DoesNotContain_<Pols,pureOutValue<9> >::type > a8(frame->arg(8));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<9> >::type >::go(args);
translate::from_object<ARG9,typename DoesNotContain_<Pols,pureOutValue<10> >::type > a9(frame->arg(9));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<10> >::type >::go(args);
translate::from_object<ARG10,typename DoesNotContain_<Pols,pureOutValue<11> >::type > a10(frame->arg(10));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<11> >::type >::go(args);
translate::from_object<ARG11,typename DoesNotContain_<Pols,pureOutValue<12> >::type > a11(frame->arg(11));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<12> >::type >::go(args);
translate::from_object<ARG12,typename DoesNotContain_<Pols,pureOutValue<13> >::type > a12(frame->arg(12));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<13> >::type >::go(args);
translate::from_object<ARG13,typename DoesNotContain_<Pols,pureOutValue<14> >::type > a13(frame->arg(13));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<14> >::type >::go(args);
closure->fptr(a0._v,a1._v,a2._v,a3._v,a4._v,a5._v,a6._v,a7._v,a8._v,a9._v,a10._v,a11._v,a12._v,a13._v);
core::MultipleValues& returnValues = core::lisp_multipleValues();
returnValues.setSize(0);
int oidx = 0;                                                                     ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,0>::type()
, typename AdoptPointer<Pols,0>::type()
, a0._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,1>::type()
, typename AdoptPointer<Pols,1>::type()
, a1._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,2>::type()
, typename AdoptPointer<Pols,2>::type()
, a2._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,3>::type()
, typename AdoptPointer<Pols,3>::type()
, a3._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,4>::type()
, typename AdoptPointer<Pols,4>::type()
, a4._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,5>::type()
, typename AdoptPointer<Pols,5>::type()
, a5._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,6>::type()
, typename AdoptPointer<Pols,6>::type()
, a6._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,7>::type()
, typename AdoptPointer<Pols,7>::type()
, a7._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,8>::type()
, typename AdoptPointer<Pols,8>::type()
, a8._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,9>::type()
, typename AdoptPointer<Pols,9>::type()
, a9._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,10>::type()
, typename AdoptPointer<Pols,10>::type()
, a10._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,11>::type()
, typename AdoptPointer<Pols,11>::type()
, a11._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,12>::type()
, typename AdoptPointer<Pols,12>::type()
, a12._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,13>::type()
, typename AdoptPointer<Pols,13>::type()
, a13._v);
return LCC_RETURN(returnValues.valueGet(0,oidx).raw_(),oidx);
}
};
// ret = 1
// template_ = 3
// numVoids = 3
// numArgs = 13
/* Specialization */
template <typename Pols  ,typename ARG0,typename ARG1,typename ARG2,typename ARG3,typename ARG4,typename ARG5,typename ARG6,
    typename ARG7,typename ARG8,typename ARG9,typename ARG10,typename ARG11,typename ARG12 >
class VariadicFunctor
< void (*)(ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9, ARG10, ARG11, ARG12), Pols>
: public core::BuiltinClosure_O {
public:
typedef VariadicFunctor < void (*)(ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9, ARG10, ARG11, ARG12), Pols> MyType;
typedef core::BuiltinClosure_O TemplatedBase;
public:
typedef void(*Type)(ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9, ARG10, ARG11, ARG12);
Type fptr;
public:
virtual const char* describe() const { return "VariadicFunctor"; };
enum { NumParams = 13 };
VariadicFunctor(core::T_sp name, Type ptr) : core::BuiltinClosure_O(entry_point,name), fptr(ptr) {};
DISABLE_NEW();
virtual size_t templatedSizeof() const { return sizeof(*this);};
static inline LCC_RETURN LISP_CALLING_CONVENTION()
{
MyType* closure = gctools::untag_general<MyType*>((MyType*)lcc_closure);
INCREMENT_FUNCTION_CALL_COUNTER(closure);
INITIALIZE_VA_LIST();
INVOCATION_HISTORY_FRAME();
MAKE_STACK_FRAME(frame,closure->asSmartPtr().raw_(),13);
core::StackFrameDynamicScopeManager scope(frame);
lambdaListHandler_createBindings(closure->asSmartPtr(),closure->_lambdaListHandler,scope,LCC_PASS_ARGS_LLH);
translate::from_object<ARG0,typename DoesNotContain_<Pols,pureOutValue<1> >::type > a0(frame->arg(0));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<1> >::type >::go(args);
translate::from_object<ARG1,typename DoesNotContain_<Pols,pureOutValue<2> >::type > a1(frame->arg(1));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<2> >::type >::go(args);
translate::from_object<ARG2,typename DoesNotContain_<Pols,pureOutValue<3> >::type > a2(frame->arg(2));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<3> >::type >::go(args);
translate::from_object<ARG3,typename DoesNotContain_<Pols,pureOutValue<4> >::type > a3(frame->arg(3));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<4> >::type >::go(args);
translate::from_object<ARG4,typename DoesNotContain_<Pols,pureOutValue<5> >::type > a4(frame->arg(4));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<5> >::type >::go(args);
translate::from_object<ARG5,typename DoesNotContain_<Pols,pureOutValue<6> >::type > a5(frame->arg(5));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<6> >::type >::go(args);
translate::from_object<ARG6,typename DoesNotContain_<Pols,pureOutValue<7> >::type > a6(frame->arg(6));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<7> >::type >::go(args);
translate::from_object<ARG7,typename DoesNotContain_<Pols,pureOutValue<8> >::type > a7(frame->arg(7));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<8> >::type >::go(args);
translate::from_object<ARG8,typename DoesNotContain_<Pols,pureOutValue<9> >::type > a8(frame->arg(8));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<9> >::type >::go(args);
translate::from_object<ARG9,typename DoesNotContain_<Pols,pureOutValue<10> >::type > a9(frame->arg(9));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<10> >::type >::go(args);
translate::from_object<ARG10,typename DoesNotContain_<Pols,pureOutValue<11> >::type > a10(frame->arg(10));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<11> >::type >::go(args);
translate::from_object<ARG11,typename DoesNotContain_<Pols,pureOutValue<12> >::type > a11(frame->arg(11));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<12> >::type >::go(args);
translate::from_object<ARG12,typename DoesNotContain_<Pols,pureOutValue<13> >::type > a12(frame->arg(12));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<13> >::type >::go(args);
closure->fptr(a0._v,a1._v,a2._v,a3._v,a4._v,a5._v,a6._v,a7._v,a8._v,a9._v,a10._v,a11._v,a12._v);
core::MultipleValues& returnValues = core::lisp_multipleValues();
returnValues.setSize(0);
int oidx = 0;                                                                     ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,0>::type()
, typename AdoptPointer<Pols,0>::type()
, a0._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,1>::type()
, typename AdoptPointer<Pols,1>::type()
, a1._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,2>::type()
, typename AdoptPointer<Pols,2>::type()
, a2._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,3>::type()
, typename AdoptPointer<Pols,3>::type()
, a3._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,4>::type()
, typename AdoptPointer<Pols,4>::type()
, a4._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,5>::type()
, typename AdoptPointer<Pols,5>::type()
, a5._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,6>::type()
, typename AdoptPointer<Pols,6>::type()
, a6._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,7>::type()
, typename AdoptPointer<Pols,7>::type()
, a7._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,8>::type()
, typename AdoptPointer<Pols,8>::type()
, a8._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,9>::type()
, typename AdoptPointer<Pols,9>::type()
, a9._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,10>::type()
, typename AdoptPointer<Pols,10>::type()
, a10._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,11>::type()
, typename AdoptPointer<Pols,11>::type()
, a11._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,12>::type()
, typename AdoptPointer<Pols,12>::type()
, a12._v);
return LCC_RETURN(returnValues.valueGet(0,oidx).raw_(),oidx);
}
};
// ret = 1
// template_ = 4
// numVoids = 4
// numArgs = 12
/* Specialization */
template <typename Pols  ,typename ARG0,typename ARG1,typename ARG2,typename ARG3,typename ARG4,typename ARG5,typename ARG6,
    typename ARG7,typename ARG8,typename ARG9,typename ARG10,typename ARG11 >
class VariadicFunctor
< void (*)(ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9, ARG10, ARG11), Pols>
: public core::BuiltinClosure_O {
public:
typedef VariadicFunctor < void (*)(ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9, ARG10, ARG11), Pols> MyType;
typedef core::BuiltinClosure_O TemplatedBase;
public:
typedef void(*Type)(ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9, ARG10, ARG11);
Type fptr;
public:
virtual const char* describe() const { return "VariadicFunctor"; };
enum { NumParams = 12 };
VariadicFunctor(core::T_sp name, Type ptr) : core::BuiltinClosure_O(entry_point,name), fptr(ptr) {};
DISABLE_NEW();
virtual size_t templatedSizeof() const { return sizeof(*this);};
static inline LCC_RETURN LISP_CALLING_CONVENTION()
{
MyType* closure = gctools::untag_general<MyType*>((MyType*)lcc_closure);
INCREMENT_FUNCTION_CALL_COUNTER(closure);
INITIALIZE_VA_LIST();
INVOCATION_HISTORY_FRAME();
MAKE_STACK_FRAME(frame,closure->asSmartPtr().raw_(),12);
core::StackFrameDynamicScopeManager scope(frame);
lambdaListHandler_createBindings(closure->asSmartPtr(),closure->_lambdaListHandler,scope,LCC_PASS_ARGS_LLH);
translate::from_object<ARG0,typename DoesNotContain_<Pols,pureOutValue<1> >::type > a0(frame->arg(0));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<1> >::type >::go(args);
translate::from_object<ARG1,typename DoesNotContain_<Pols,pureOutValue<2> >::type > a1(frame->arg(1));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<2> >::type >::go(args);
translate::from_object<ARG2,typename DoesNotContain_<Pols,pureOutValue<3> >::type > a2(frame->arg(2));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<3> >::type >::go(args);
translate::from_object<ARG3,typename DoesNotContain_<Pols,pureOutValue<4> >::type > a3(frame->arg(3));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<4> >::type >::go(args);
translate::from_object<ARG4,typename DoesNotContain_<Pols,pureOutValue<5> >::type > a4(frame->arg(4));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<5> >::type >::go(args);
translate::from_object<ARG5,typename DoesNotContain_<Pols,pureOutValue<6> >::type > a5(frame->arg(5));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<6> >::type >::go(args);
translate::from_object<ARG6,typename DoesNotContain_<Pols,pureOutValue<7> >::type > a6(frame->arg(6));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<7> >::type >::go(args);
translate::from_object<ARG7,typename DoesNotContain_<Pols,pureOutValue<8> >::type > a7(frame->arg(7));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<8> >::type >::go(args);
translate::from_object<ARG8,typename DoesNotContain_<Pols,pureOutValue<9> >::type > a8(frame->arg(8));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<9> >::type >::go(args);
translate::from_object<ARG9,typename DoesNotContain_<Pols,pureOutValue<10> >::type > a9(frame->arg(9));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<10> >::type >::go(args);
translate::from_object<ARG10,typename DoesNotContain_<Pols,pureOutValue<11> >::type > a10(frame->arg(10));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<11> >::type >::go(args);
translate::from_object<ARG11,typename DoesNotContain_<Pols,pureOutValue<12> >::type > a11(frame->arg(11));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<12> >::type >::go(args);
closure->fptr(a0._v,a1._v,a2._v,a3._v,a4._v,a5._v,a6._v,a7._v,a8._v,a9._v,a10._v,a11._v);
core::MultipleValues& returnValues = core::lisp_multipleValues();
returnValues.setSize(0);
int oidx = 0;                                                                     ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,0>::type()
, typename AdoptPointer<Pols,0>::type()
, a0._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,1>::type()
, typename AdoptPointer<Pols,1>::type()
, a1._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,2>::type()
, typename AdoptPointer<Pols,2>::type()
, a2._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,3>::type()
, typename AdoptPointer<Pols,3>::type()
, a3._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,4>::type()
, typename AdoptPointer<Pols,4>::type()
, a4._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,5>::type()
, typename AdoptPointer<Pols,5>::type()
, a5._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,6>::type()
, typename AdoptPointer<Pols,6>::type()
, a6._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,7>::type()
, typename AdoptPointer<Pols,7>::type()
, a7._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,8>::type()
, typename AdoptPointer<Pols,8>::type()
, a8._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,9>::type()
, typename AdoptPointer<Pols,9>::type()
, a9._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,10>::type()
, typename AdoptPointer<Pols,10>::type()
, a10._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,11>::type()
, typename AdoptPointer<Pols,11>::type()
, a11._v);
return LCC_RETURN(returnValues.valueGet(0,oidx).raw_(),oidx);
}
};
// ret = 1
// template_ = 5
// numVoids = 5
// numArgs = 11
/* Specialization */
template <typename Pols  ,typename ARG0,typename ARG1,typename ARG2,typename ARG3,typename ARG4,typename ARG5,typename ARG6,
    typename ARG7,typename ARG8,typename ARG9,typename ARG10 >
class VariadicFunctor
< void (*)(ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9, ARG10), Pols>
: public core::BuiltinClosure_O {
public:
typedef VariadicFunctor < void (*)(ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9, ARG10), Pols> MyType;
typedef core::BuiltinClosure_O TemplatedBase;
public:
typedef void(*Type)(ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9, ARG10);
Type fptr;
public:
virtual const char* describe() const { return "VariadicFunctor"; };
enum { NumParams = 11 };
VariadicFunctor(core::T_sp name, Type ptr) : core::BuiltinClosure_O(entry_point,name), fptr(ptr) {};
DISABLE_NEW();
virtual size_t templatedSizeof() const { return sizeof(*this);};
static inline LCC_RETURN LISP_CALLING_CONVENTION()
{
MyType* closure = gctools::untag_general<MyType*>((MyType*)lcc_closure);
INCREMENT_FUNCTION_CALL_COUNTER(closure);
INITIALIZE_VA_LIST();
INVOCATION_HISTORY_FRAME();
MAKE_STACK_FRAME(frame,closure->asSmartPtr().raw_(),11);
core::StackFrameDynamicScopeManager scope(frame);
lambdaListHandler_createBindings(closure->asSmartPtr(),closure->_lambdaListHandler,scope,LCC_PASS_ARGS_LLH);
translate::from_object<ARG0,typename DoesNotContain_<Pols,pureOutValue<1> >::type > a0(frame->arg(0));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<1> >::type >::go(args);
translate::from_object<ARG1,typename DoesNotContain_<Pols,pureOutValue<2> >::type > a1(frame->arg(1));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<2> >::type >::go(args);
translate::from_object<ARG2,typename DoesNotContain_<Pols,pureOutValue<3> >::type > a2(frame->arg(2));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<3> >::type >::go(args);
translate::from_object<ARG3,typename DoesNotContain_<Pols,pureOutValue<4> >::type > a3(frame->arg(3));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<4> >::type >::go(args);
translate::from_object<ARG4,typename DoesNotContain_<Pols,pureOutValue<5> >::type > a4(frame->arg(4));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<5> >::type >::go(args);
translate::from_object<ARG5,typename DoesNotContain_<Pols,pureOutValue<6> >::type > a5(frame->arg(5));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<6> >::type >::go(args);
translate::from_object<ARG6,typename DoesNotContain_<Pols,pureOutValue<7> >::type > a6(frame->arg(6));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<7> >::type >::go(args);
translate::from_object<ARG7,typename DoesNotContain_<Pols,pureOutValue<8> >::type > a7(frame->arg(7));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<8> >::type >::go(args);
translate::from_object<ARG8,typename DoesNotContain_<Pols,pureOutValue<9> >::type > a8(frame->arg(8));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<9> >::type >::go(args);
translate::from_object<ARG9,typename DoesNotContain_<Pols,pureOutValue<10> >::type > a9(frame->arg(9));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<10> >::type >::go(args);
translate::from_object<ARG10,typename DoesNotContain_<Pols,pureOutValue<11> >::type > a10(frame->arg(10));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<11> >::type >::go(args);
closure->fptr(a0._v,a1._v,a2._v,a3._v,a4._v,a5._v,a6._v,a7._v,a8._v,a9._v,a10._v);
core::MultipleValues& returnValues = core::lisp_multipleValues();
returnValues.setSize(0);
int oidx = 0;                                                                     ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,0>::type()
, typename AdoptPointer<Pols,0>::type()
, a0._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,1>::type()
, typename AdoptPointer<Pols,1>::type()
, a1._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,2>::type()
, typename AdoptPointer<Pols,2>::type()
, a2._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,3>::type()
, typename AdoptPointer<Pols,3>::type()
, a3._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,4>::type()
, typename AdoptPointer<Pols,4>::type()
, a4._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,5>::type()
, typename AdoptPointer<Pols,5>::type()
, a5._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,6>::type()
, typename AdoptPointer<Pols,6>::type()
, a6._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,7>::type()
, typename AdoptPointer<Pols,7>::type()
, a7._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,8>::type()
, typename AdoptPointer<Pols,8>::type()
, a8._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,9>::type()
, typename AdoptPointer<Pols,9>::type()
, a9._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,10>::type()
, typename AdoptPointer<Pols,10>::type()
, a10._v);
return LCC_RETURN(returnValues.valueGet(0,oidx).raw_(),oidx);
}
};
// ret = 1
// template_ = 6
// numVoids = 6
// numArgs = 10
/* Specialization */
template <typename Pols  ,typename ARG0,typename ARG1,typename ARG2,typename ARG3,typename ARG4,typename ARG5,typename ARG6,
    typename ARG7,typename ARG8,typename ARG9 >
class VariadicFunctor
< void (*)(ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9), Pols>
: public core::BuiltinClosure_O {
public:
typedef VariadicFunctor < void (*)(ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9), Pols> MyType;
typedef core::BuiltinClosure_O TemplatedBase;
public:
typedef void(*Type)(ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9);
Type fptr;
public:
virtual const char* describe() const { return "VariadicFunctor"; };
enum { NumParams = 10 };
VariadicFunctor(core::T_sp name, Type ptr) : core::BuiltinClosure_O(entry_point,name), fptr(ptr) {};
DISABLE_NEW();
virtual size_t templatedSizeof() const { return sizeof(*this);};
static inline LCC_RETURN LISP_CALLING_CONVENTION()
{
MyType* closure = gctools::untag_general<MyType*>((MyType*)lcc_closure);
INCREMENT_FUNCTION_CALL_COUNTER(closure);
INITIALIZE_VA_LIST();
INVOCATION_HISTORY_FRAME();
MAKE_STACK_FRAME(frame,closure->asSmartPtr().raw_(),10);
core::StackFrameDynamicScopeManager scope(frame);
lambdaListHandler_createBindings(closure->asSmartPtr(),closure->_lambdaListHandler,scope,LCC_PASS_ARGS_LLH);
translate::from_object<ARG0,typename DoesNotContain_<Pols,pureOutValue<1> >::type > a0(frame->arg(0));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<1> >::type >::go(args);
translate::from_object<ARG1,typename DoesNotContain_<Pols,pureOutValue<2> >::type > a1(frame->arg(1));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<2> >::type >::go(args);
translate::from_object<ARG2,typename DoesNotContain_<Pols,pureOutValue<3> >::type > a2(frame->arg(2));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<3> >::type >::go(args);
translate::from_object<ARG3,typename DoesNotContain_<Pols,pureOutValue<4> >::type > a3(frame->arg(3));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<4> >::type >::go(args);
translate::from_object<ARG4,typename DoesNotContain_<Pols,pureOutValue<5> >::type > a4(frame->arg(4));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<5> >::type >::go(args);
translate::from_object<ARG5,typename DoesNotContain_<Pols,pureOutValue<6> >::type > a5(frame->arg(5));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<6> >::type >::go(args);
translate::from_object<ARG6,typename DoesNotContain_<Pols,pureOutValue<7> >::type > a6(frame->arg(6));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<7> >::type >::go(args);
translate::from_object<ARG7,typename DoesNotContain_<Pols,pureOutValue<8> >::type > a7(frame->arg(7));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<8> >::type >::go(args);
translate::from_object<ARG8,typename DoesNotContain_<Pols,pureOutValue<9> >::type > a8(frame->arg(8));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<9> >::type >::go(args);
translate::from_object<ARG9,typename DoesNotContain_<Pols,pureOutValue<10> >::type > a9(frame->arg(9));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<10> >::type >::go(args);
closure->fptr(a0._v,a1._v,a2._v,a3._v,a4._v,a5._v,a6._v,a7._v,a8._v,a9._v);
core::MultipleValues& returnValues = core::lisp_multipleValues();
returnValues.setSize(0);
int oidx = 0;                                                                     ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,0>::type()
, typename AdoptPointer<Pols,0>::type()
, a0._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,1>::type()
, typename AdoptPointer<Pols,1>::type()
, a1._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,2>::type()
, typename AdoptPointer<Pols,2>::type()
, a2._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,3>::type()
, typename AdoptPointer<Pols,3>::type()
, a3._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,4>::type()
, typename AdoptPointer<Pols,4>::type()
, a4._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,5>::type()
, typename AdoptPointer<Pols,5>::type()
, a5._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,6>::type()
, typename AdoptPointer<Pols,6>::type()
, a6._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,7>::type()
, typename AdoptPointer<Pols,7>::type()
, a7._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,8>::type()
, typename AdoptPointer<Pols,8>::type()
, a8._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,9>::type()
, typename AdoptPointer<Pols,9>::type()
, a9._v);
return LCC_RETURN(returnValues.valueGet(0,oidx).raw_(),oidx);
}
};
// ret = 1
// template_ = 7
// numVoids = 7
// numArgs = 9
/* Specialization */
template <typename Pols  ,typename ARG0,typename ARG1,typename ARG2,typename ARG3,typename ARG4,typename ARG5,typename ARG6,
    typename ARG7,typename ARG8 >
class VariadicFunctor
< void (*)(ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8), Pols>
: public core::BuiltinClosure_O {
public:
typedef VariadicFunctor < void (*)(ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8), Pols> MyType;
typedef core::BuiltinClosure_O TemplatedBase;
public:
typedef void(*Type)(ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8);
Type fptr;
public:
virtual const char* describe() const { return "VariadicFunctor"; };
enum { NumParams = 9 };
VariadicFunctor(core::T_sp name, Type ptr) : core::BuiltinClosure_O(entry_point,name), fptr(ptr) {};
DISABLE_NEW();
virtual size_t templatedSizeof() const { return sizeof(*this);};
static inline LCC_RETURN LISP_CALLING_CONVENTION()
{
MyType* closure = gctools::untag_general<MyType*>((MyType*)lcc_closure);
INCREMENT_FUNCTION_CALL_COUNTER(closure);
INITIALIZE_VA_LIST();
INVOCATION_HISTORY_FRAME();
MAKE_STACK_FRAME(frame,closure->asSmartPtr().raw_(),9);
core::StackFrameDynamicScopeManager scope(frame);
lambdaListHandler_createBindings(closure->asSmartPtr(),closure->_lambdaListHandler,scope,LCC_PASS_ARGS_LLH);
translate::from_object<ARG0,typename DoesNotContain_<Pols,pureOutValue<1> >::type > a0(frame->arg(0));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<1> >::type >::go(args);
translate::from_object<ARG1,typename DoesNotContain_<Pols,pureOutValue<2> >::type > a1(frame->arg(1));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<2> >::type >::go(args);
translate::from_object<ARG2,typename DoesNotContain_<Pols,pureOutValue<3> >::type > a2(frame->arg(2));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<3> >::type >::go(args);
translate::from_object<ARG3,typename DoesNotContain_<Pols,pureOutValue<4> >::type > a3(frame->arg(3));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<4> >::type >::go(args);
translate::from_object<ARG4,typename DoesNotContain_<Pols,pureOutValue<5> >::type > a4(frame->arg(4));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<5> >::type >::go(args);
translate::from_object<ARG5,typename DoesNotContain_<Pols,pureOutValue<6> >::type > a5(frame->arg(5));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<6> >::type >::go(args);
translate::from_object<ARG6,typename DoesNotContain_<Pols,pureOutValue<7> >::type > a6(frame->arg(6));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<7> >::type >::go(args);
translate::from_object<ARG7,typename DoesNotContain_<Pols,pureOutValue<8> >::type > a7(frame->arg(7));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<8> >::type >::go(args);
translate::from_object<ARG8,typename DoesNotContain_<Pols,pureOutValue<9> >::type > a8(frame->arg(8));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<9> >::type >::go(args);
closure->fptr(a0._v,a1._v,a2._v,a3._v,a4._v,a5._v,a6._v,a7._v,a8._v);
core::MultipleValues& returnValues = core::lisp_multipleValues();
returnValues.setSize(0);
int oidx = 0;                                                                     ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,0>::type()
, typename AdoptPointer<Pols,0>::type()
, a0._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,1>::type()
, typename AdoptPointer<Pols,1>::type()
, a1._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,2>::type()
, typename AdoptPointer<Pols,2>::type()
, a2._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,3>::type()
, typename AdoptPointer<Pols,3>::type()
, a3._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,4>::type()
, typename AdoptPointer<Pols,4>::type()
, a4._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,5>::type()
, typename AdoptPointer<Pols,5>::type()
, a5._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,6>::type()
, typename AdoptPointer<Pols,6>::type()
, a6._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,7>::type()
, typename AdoptPointer<Pols,7>::type()
, a7._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,8>::type()
, typename AdoptPointer<Pols,8>::type()
, a8._v);
return LCC_RETURN(returnValues.valueGet(0,oidx).raw_(),oidx);
}
};
// ret = 1
// template_ = 8
// numVoids = 8
// numArgs = 8
/* Specialization */
template <typename Pols  ,typename ARG0,typename ARG1,typename ARG2,typename ARG3,typename ARG4,typename ARG5,typename ARG6,
    typename ARG7 >
class VariadicFunctor
< void (*)(ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7), Pols>
: public core::BuiltinClosure_O {
public:
typedef VariadicFunctor < void (*)(ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7), Pols> MyType;
typedef core::BuiltinClosure_O TemplatedBase;
public:
typedef void(*Type)(ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7);
Type fptr;
public:
virtual const char* describe() const { return "VariadicFunctor"; };
enum { NumParams = 8 };
VariadicFunctor(core::T_sp name, Type ptr) : core::BuiltinClosure_O(entry_point,name), fptr(ptr) {};
DISABLE_NEW();
virtual size_t templatedSizeof() const { return sizeof(*this);};
static inline LCC_RETURN LISP_CALLING_CONVENTION()
{
MyType* closure = gctools::untag_general<MyType*>((MyType*)lcc_closure);
INCREMENT_FUNCTION_CALL_COUNTER(closure);
INITIALIZE_VA_LIST();
INVOCATION_HISTORY_FRAME();
MAKE_STACK_FRAME(frame,closure->asSmartPtr().raw_(),8);
core::StackFrameDynamicScopeManager scope(frame);
lambdaListHandler_createBindings(closure->asSmartPtr(),closure->_lambdaListHandler,scope,LCC_PASS_ARGS_LLH);
translate::from_object<ARG0,typename DoesNotContain_<Pols,pureOutValue<1> >::type > a0(frame->arg(0));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<1> >::type >::go(args);
translate::from_object<ARG1,typename DoesNotContain_<Pols,pureOutValue<2> >::type > a1(frame->arg(1));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<2> >::type >::go(args);
translate::from_object<ARG2,typename DoesNotContain_<Pols,pureOutValue<3> >::type > a2(frame->arg(2));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<3> >::type >::go(args);
translate::from_object<ARG3,typename DoesNotContain_<Pols,pureOutValue<4> >::type > a3(frame->arg(3));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<4> >::type >::go(args);
translate::from_object<ARG4,typename DoesNotContain_<Pols,pureOutValue<5> >::type > a4(frame->arg(4));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<5> >::type >::go(args);
translate::from_object<ARG5,typename DoesNotContain_<Pols,pureOutValue<6> >::type > a5(frame->arg(5));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<6> >::type >::go(args);
translate::from_object<ARG6,typename DoesNotContain_<Pols,pureOutValue<7> >::type > a6(frame->arg(6));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<7> >::type >::go(args);
translate::from_object<ARG7,typename DoesNotContain_<Pols,pureOutValue<8> >::type > a7(frame->arg(7));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<8> >::type >::go(args);
closure->fptr(a0._v,a1._v,a2._v,a3._v,a4._v,a5._v,a6._v,a7._v);
core::MultipleValues& returnValues = core::lisp_multipleValues();
returnValues.setSize(0);
int oidx = 0;                                                                     ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,0>::type()
, typename AdoptPointer<Pols,0>::type()
, a0._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,1>::type()
, typename AdoptPointer<Pols,1>::type()
, a1._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,2>::type()
, typename AdoptPointer<Pols,2>::type()
, a2._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,3>::type()
, typename AdoptPointer<Pols,3>::type()
, a3._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,4>::type()
, typename AdoptPointer<Pols,4>::type()
, a4._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,5>::type()
, typename AdoptPointer<Pols,5>::type()
, a5._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,6>::type()
, typename AdoptPointer<Pols,6>::type()
, a6._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,7>::type()
, typename AdoptPointer<Pols,7>::type()
, a7._v);
return LCC_RETURN(returnValues.valueGet(0,oidx).raw_(),oidx);
}
};
// ret = 1
// template_ = 9
// numVoids = 9
// numArgs = 7
/* Specialization */
template <typename Pols  ,typename ARG0,typename ARG1,typename ARG2,typename ARG3,typename ARG4,typename ARG5,typename ARG6 >
class VariadicFunctor
< void (*)(ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6), Pols>
: public core::BuiltinClosure_O {
public:
typedef VariadicFunctor < void (*)(ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6), Pols> MyType;
typedef core::BuiltinClosure_O TemplatedBase;
public:
typedef void(*Type)(ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6);
Type fptr;
public:
virtual const char* describe() const { return "VariadicFunctor"; };
enum { NumParams = 7 };
VariadicFunctor(core::T_sp name, Type ptr) : core::BuiltinClosure_O(entry_point,name), fptr(ptr) {};
DISABLE_NEW();
virtual size_t templatedSizeof() const { return sizeof(*this);};
static inline LCC_RETURN LISP_CALLING_CONVENTION()
{
MyType* closure = gctools::untag_general<MyType*>((MyType*)lcc_closure);
INCREMENT_FUNCTION_CALL_COUNTER(closure);
INITIALIZE_VA_LIST();
INVOCATION_HISTORY_FRAME();
MAKE_STACK_FRAME(frame,closure->asSmartPtr().raw_(),7);
core::StackFrameDynamicScopeManager scope(frame);
lambdaListHandler_createBindings(closure->asSmartPtr(),closure->_lambdaListHandler,scope,LCC_PASS_ARGS_LLH);
translate::from_object<ARG0,typename DoesNotContain_<Pols,pureOutValue<1> >::type > a0(frame->arg(0));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<1> >::type >::go(args);
translate::from_object<ARG1,typename DoesNotContain_<Pols,pureOutValue<2> >::type > a1(frame->arg(1));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<2> >::type >::go(args);
translate::from_object<ARG2,typename DoesNotContain_<Pols,pureOutValue<3> >::type > a2(frame->arg(2));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<3> >::type >::go(args);
translate::from_object<ARG3,typename DoesNotContain_<Pols,pureOutValue<4> >::type > a3(frame->arg(3));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<4> >::type >::go(args);
translate::from_object<ARG4,typename DoesNotContain_<Pols,pureOutValue<5> >::type > a4(frame->arg(4));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<5> >::type >::go(args);
translate::from_object<ARG5,typename DoesNotContain_<Pols,pureOutValue<6> >::type > a5(frame->arg(5));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<6> >::type >::go(args);
translate::from_object<ARG6,typename DoesNotContain_<Pols,pureOutValue<7> >::type > a6(frame->arg(6));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<7> >::type >::go(args);
closure->fptr(a0._v,a1._v,a2._v,a3._v,a4._v,a5._v,a6._v);
core::MultipleValues& returnValues = core::lisp_multipleValues();
returnValues.setSize(0);
int oidx = 0;                                                                     ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,0>::type()
, typename AdoptPointer<Pols,0>::type()
, a0._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,1>::type()
, typename AdoptPointer<Pols,1>::type()
, a1._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,2>::type()
, typename AdoptPointer<Pols,2>::type()
, a2._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,3>::type()
, typename AdoptPointer<Pols,3>::type()
, a3._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,4>::type()
, typename AdoptPointer<Pols,4>::type()
, a4._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,5>::type()
, typename AdoptPointer<Pols,5>::type()
, a5._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,6>::type()
, typename AdoptPointer<Pols,6>::type()
, a6._v);
return LCC_RETURN(returnValues.valueGet(0,oidx).raw_(),oidx);
}
};
// ret = 1
// template_ = 10
// numVoids = 10
// numArgs = 6
/* Specialization */
template <typename Pols  ,typename ARG0,typename ARG1,typename ARG2,typename ARG3,typename ARG4,typename ARG5 >
class VariadicFunctor
< void (*)(ARG0, ARG1, ARG2, ARG3, ARG4, ARG5), Pols>
: public core::BuiltinClosure_O {
public:
typedef VariadicFunctor < void (*)(ARG0, ARG1, ARG2, ARG3, ARG4, ARG5), Pols> MyType;
typedef core::BuiltinClosure_O TemplatedBase;
public:
typedef void(*Type)(ARG0, ARG1, ARG2, ARG3, ARG4, ARG5);
Type fptr;
public:
virtual const char* describe() const { return "VariadicFunctor"; };
enum { NumParams = 6 };
VariadicFunctor(core::T_sp name, Type ptr) : core::BuiltinClosure_O(entry_point,name), fptr(ptr) {};
DISABLE_NEW();
virtual size_t templatedSizeof() const { return sizeof(*this);};
static inline LCC_RETURN LISP_CALLING_CONVENTION()
{
MyType* closure = gctools::untag_general<MyType*>((MyType*)lcc_closure);
INCREMENT_FUNCTION_CALL_COUNTER(closure);
INITIALIZE_VA_LIST();
INVOCATION_HISTORY_FRAME();
MAKE_STACK_FRAME(frame,closure->asSmartPtr().raw_(),6);
core::StackFrameDynamicScopeManager scope(frame);
lambdaListHandler_createBindings(closure->asSmartPtr(),closure->_lambdaListHandler,scope,LCC_PASS_ARGS_LLH);
translate::from_object<ARG0,typename DoesNotContain_<Pols,pureOutValue<1> >::type > a0(frame->arg(0));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<1> >::type >::go(args);
translate::from_object<ARG1,typename DoesNotContain_<Pols,pureOutValue<2> >::type > a1(frame->arg(1));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<2> >::type >::go(args);
translate::from_object<ARG2,typename DoesNotContain_<Pols,pureOutValue<3> >::type > a2(frame->arg(2));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<3> >::type >::go(args);
translate::from_object<ARG3,typename DoesNotContain_<Pols,pureOutValue<4> >::type > a3(frame->arg(3));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<4> >::type >::go(args);
translate::from_object<ARG4,typename DoesNotContain_<Pols,pureOutValue<5> >::type > a4(frame->arg(4));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<5> >::type >::go(args);
translate::from_object<ARG5,typename DoesNotContain_<Pols,pureOutValue<6> >::type > a5(frame->arg(5));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<6> >::type >::go(args);
closure->fptr(a0._v,a1._v,a2._v,a3._v,a4._v,a5._v);
core::MultipleValues& returnValues = core::lisp_multipleValues();
returnValues.setSize(0);
int oidx = 0;                                                                     ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,0>::type()
, typename AdoptPointer<Pols,0>::type()
, a0._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,1>::type()
, typename AdoptPointer<Pols,1>::type()
, a1._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,2>::type()
, typename AdoptPointer<Pols,2>::type()
, a2._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,3>::type()
, typename AdoptPointer<Pols,3>::type()
, a3._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,4>::type()
, typename AdoptPointer<Pols,4>::type()
, a4._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,5>::type()
, typename AdoptPointer<Pols,5>::type()
, a5._v);
return LCC_RETURN(returnValues.valueGet(0,oidx).raw_(),oidx);
}
};
// ret = 1
// template_ = 11
// numVoids = 11
// numArgs = 5
/* Specialization */
template <typename Pols  ,typename ARG0,typename ARG1,typename ARG2,typename ARG3,typename ARG4 >
class VariadicFunctor
< void (*)(ARG0, ARG1, ARG2, ARG3, ARG4), Pols>
: public core::BuiltinClosure_O {
public:
typedef VariadicFunctor < void (*)(ARG0, ARG1, ARG2, ARG3, ARG4), Pols> MyType;
typedef core::BuiltinClosure_O TemplatedBase;
public:
typedef void(*Type)(ARG0, ARG1, ARG2, ARG3, ARG4);
Type fptr;
public:
virtual const char* describe() const { return "VariadicFunctor"; };
enum { NumParams = 5 };
VariadicFunctor(core::T_sp name, Type ptr) : core::BuiltinClosure_O(entry_point,name), fptr(ptr) {};
DISABLE_NEW();
virtual size_t templatedSizeof() const { return sizeof(*this);};
static inline LCC_RETURN LISP_CALLING_CONVENTION()
{
MyType* closure = gctools::untag_general<MyType*>((MyType*)lcc_closure);
INCREMENT_FUNCTION_CALL_COUNTER(closure);
INITIALIZE_VA_LIST();
INVOCATION_HISTORY_FRAME();
MAKE_STACK_FRAME(frame,closure->asSmartPtr().raw_(),5);
core::StackFrameDynamicScopeManager scope(frame);
lambdaListHandler_createBindings(closure->asSmartPtr(),closure->_lambdaListHandler,scope,LCC_PASS_ARGS_LLH);
translate::from_object<ARG0,typename DoesNotContain_<Pols,pureOutValue<1> >::type > a0(frame->arg(0));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<1> >::type >::go(args);
translate::from_object<ARG1,typename DoesNotContain_<Pols,pureOutValue<2> >::type > a1(frame->arg(1));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<2> >::type >::go(args);
translate::from_object<ARG2,typename DoesNotContain_<Pols,pureOutValue<3> >::type > a2(frame->arg(2));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<3> >::type >::go(args);
translate::from_object<ARG3,typename DoesNotContain_<Pols,pureOutValue<4> >::type > a3(frame->arg(3));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<4> >::type >::go(args);
translate::from_object<ARG4,typename DoesNotContain_<Pols,pureOutValue<5> >::type > a4(frame->arg(4));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<5> >::type >::go(args);
closure->fptr(a0._v,a1._v,a2._v,a3._v,a4._v);
core::MultipleValues& returnValues = core::lisp_multipleValues();
returnValues.setSize(0);
int oidx = 0;                                                                     ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,0>::type()
, typename AdoptPointer<Pols,0>::type()
, a0._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,1>::type()
, typename AdoptPointer<Pols,1>::type()
, a1._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,2>::type()
, typename AdoptPointer<Pols,2>::type()
, a2._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,3>::type()
, typename AdoptPointer<Pols,3>::type()
, a3._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,4>::type()
, typename AdoptPointer<Pols,4>::type()
, a4._v);
return LCC_RETURN(returnValues.valueGet(0,oidx).raw_(),oidx);
}
};
// ret = 1
// template_ = 12
// numVoids = 12
// numArgs = 4
/* Specialization */
template <typename Pols  ,typename ARG0,typename ARG1,typename ARG2,typename ARG3 >
class VariadicFunctor
< void (*)(ARG0, ARG1, ARG2, ARG3), Pols>
: public core::BuiltinClosure_O {
public:
typedef VariadicFunctor < void (*)(ARG0, ARG1, ARG2, ARG3), Pols> MyType;
typedef core::BuiltinClosure_O TemplatedBase;
public:
typedef void(*Type)(ARG0, ARG1, ARG2, ARG3);
Type fptr;
public:
virtual const char* describe() const { return "VariadicFunctor"; };
enum { NumParams = 4 };
VariadicFunctor(core::T_sp name, Type ptr) : core::BuiltinClosure_O(entry_point,name), fptr(ptr) {};
DISABLE_NEW();
virtual size_t templatedSizeof() const { return sizeof(*this);};
static inline LCC_RETURN LISP_CALLING_CONVENTION()
{
MyType* closure = gctools::untag_general<MyType*>((MyType*)lcc_closure);
INCREMENT_FUNCTION_CALL_COUNTER(closure);
INITIALIZE_VA_LIST();
INVOCATION_HISTORY_FRAME();
MAKE_STACK_FRAME(frame,closure->asSmartPtr().raw_(),4);
core::StackFrameDynamicScopeManager scope(frame);
lambdaListHandler_createBindings(closure->asSmartPtr(),closure->_lambdaListHandler,scope,LCC_PASS_ARGS_LLH);
translate::from_object<ARG0,typename DoesNotContain_<Pols,pureOutValue<1> >::type > a0(frame->arg(0));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<1> >::type >::go(args);
translate::from_object<ARG1,typename DoesNotContain_<Pols,pureOutValue<2> >::type > a1(frame->arg(1));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<2> >::type >::go(args);
translate::from_object<ARG2,typename DoesNotContain_<Pols,pureOutValue<3> >::type > a2(frame->arg(2));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<3> >::type >::go(args);
translate::from_object<ARG3,typename DoesNotContain_<Pols,pureOutValue<4> >::type > a3(frame->arg(3));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<4> >::type >::go(args);
closure->fptr(a0._v,a1._v,a2._v,a3._v);
core::MultipleValues& returnValues = core::lisp_multipleValues();
returnValues.setSize(0);
int oidx = 0;                                                                     ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,0>::type()
, typename AdoptPointer<Pols,0>::type()
, a0._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,1>::type()
, typename AdoptPointer<Pols,1>::type()
, a1._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,2>::type()
, typename AdoptPointer<Pols,2>::type()
, a2._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,3>::type()
, typename AdoptPointer<Pols,3>::type()
, a3._v);
return LCC_RETURN(returnValues.valueGet(0,oidx).raw_(),oidx);
}
};
// ret = 1
// template_ = 13
// numVoids = 13
// numArgs = 3
/* Specialization */
template <typename Pols  ,typename ARG0,typename ARG1,typename ARG2 >
class VariadicFunctor
< void (*)(ARG0, ARG1, ARG2), Pols>
: public core::BuiltinClosure_O {
public:
typedef VariadicFunctor < void (*)(ARG0, ARG1, ARG2), Pols> MyType;
typedef core::BuiltinClosure_O TemplatedBase;
public:
typedef void(*Type)(ARG0, ARG1, ARG2);
Type fptr;
public:
virtual const char* describe() const { return "VariadicFunctor"; };
enum { NumParams = 3 };
VariadicFunctor(core::T_sp name, Type ptr) : core::BuiltinClosure_O(entry_point,name), fptr(ptr) {};
DISABLE_NEW();
virtual size_t templatedSizeof() const { return sizeof(*this);};
static inline LCC_RETURN LISP_CALLING_CONVENTION()
{
MyType* closure = gctools::untag_general<MyType*>((MyType*)lcc_closure);
INCREMENT_FUNCTION_CALL_COUNTER(closure);
INITIALIZE_VA_LIST();
INVOCATION_HISTORY_FRAME();
MAKE_STACK_FRAME(frame,closure->asSmartPtr().raw_(),3);
core::StackFrameDynamicScopeManager scope(frame);
lambdaListHandler_createBindings(closure->asSmartPtr(),closure->_lambdaListHandler,scope,LCC_PASS_ARGS_LLH);
translate::from_object<ARG0,typename DoesNotContain_<Pols,pureOutValue<1> >::type > a0(frame->arg(0));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<1> >::type >::go(args);
translate::from_object<ARG1,typename DoesNotContain_<Pols,pureOutValue<2> >::type > a1(frame->arg(1));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<2> >::type >::go(args);
translate::from_object<ARG2,typename DoesNotContain_<Pols,pureOutValue<3> >::type > a2(frame->arg(2));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<3> >::type >::go(args);
closure->fptr(a0._v,a1._v,a2._v);
core::MultipleValues& returnValues = core::lisp_multipleValues();
returnValues.setSize(0);
int oidx = 0;                                                                     ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,0>::type()
, typename AdoptPointer<Pols,0>::type()
, a0._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,1>::type()
, typename AdoptPointer<Pols,1>::type()
, a1._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,2>::type()
, typename AdoptPointer<Pols,2>::type()
, a2._v);
return LCC_RETURN(returnValues.valueGet(0,oidx).raw_(),oidx);
}
};
// ret = 1
// template_ = 14
// numVoids = 14
// numArgs = 2
/* Specialization */
template <typename Pols  ,typename ARG0,typename ARG1 >
class VariadicFunctor
< void (*)(ARG0, ARG1), Pols>
: public core::BuiltinClosure_O {
public:
typedef VariadicFunctor < void (*)(ARG0, ARG1), Pols> MyType;
typedef core::BuiltinClosure_O TemplatedBase;
public:
typedef void(*Type)(ARG0, ARG1);
Type fptr;
public:
virtual const char* describe() const { return "VariadicFunctor"; };
enum { NumParams = 2 };
VariadicFunctor(core::T_sp name, Type ptr) : core::BuiltinClosure_O(entry_point,name), fptr(ptr) {};
DISABLE_NEW();
virtual size_t templatedSizeof() const { return sizeof(*this);};
static inline LCC_RETURN LISP_CALLING_CONVENTION()
{
MyType* closure = gctools::untag_general<MyType*>((MyType*)lcc_closure);
INCREMENT_FUNCTION_CALL_COUNTER(closure);
INITIALIZE_VA_LIST();
INVOCATION_HISTORY_FRAME();
MAKE_STACK_FRAME(frame,closure->asSmartPtr().raw_(),2);
core::StackFrameDynamicScopeManager scope(frame);
lambdaListHandler_createBindings(closure->asSmartPtr(),closure->_lambdaListHandler,scope,LCC_PASS_ARGS_LLH);
translate::from_object<ARG0,typename DoesNotContain_<Pols,pureOutValue<1> >::type > a0(frame->arg(0));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<1> >::type >::go(args);
translate::from_object<ARG1,typename DoesNotContain_<Pols,pureOutValue<2> >::type > a1(frame->arg(1));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<2> >::type >::go(args);
closure->fptr(a0._v,a1._v);
core::MultipleValues& returnValues = core::lisp_multipleValues();
returnValues.setSize(0);
int oidx = 0;                                                                     ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,0>::type()
, typename AdoptPointer<Pols,0>::type()
, a0._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,1>::type()
, typename AdoptPointer<Pols,1>::type()
, a1._v);
return LCC_RETURN(returnValues.valueGet(0,oidx).raw_(),oidx);
}
};
// ret = 1
// template_ = 15
// numVoids = 15
// numArgs = 1
/* Specialization */
template <typename Pols  ,typename ARG0 >
class VariadicFunctor
< void (*)(ARG0), Pols>
: public core::BuiltinClosure_O {
public:
typedef VariadicFunctor < void (*)(ARG0), Pols> MyType;
typedef core::BuiltinClosure_O TemplatedBase;
public:
typedef void(*Type)(ARG0);
Type fptr;
public:
virtual const char* describe() const { return "VariadicFunctor"; };
enum { NumParams = 1 };
VariadicFunctor(core::T_sp name, Type ptr) : core::BuiltinClosure_O(entry_point,name), fptr(ptr) {};
DISABLE_NEW();
virtual size_t templatedSizeof() const { return sizeof(*this);};
static inline LCC_RETURN LISP_CALLING_CONVENTION()
{
MyType* closure = gctools::untag_general<MyType*>((MyType*)lcc_closure);
INCREMENT_FUNCTION_CALL_COUNTER(closure);
INITIALIZE_VA_LIST();
INVOCATION_HISTORY_FRAME();
MAKE_STACK_FRAME(frame,closure->asSmartPtr().raw_(),1);
core::StackFrameDynamicScopeManager scope(frame);
lambdaListHandler_createBindings(closure->asSmartPtr(),closure->_lambdaListHandler,scope,LCC_PASS_ARGS_LLH);
translate::from_object<ARG0,typename DoesNotContain_<Pols,pureOutValue<1> >::type > a0(frame->arg(0));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<1> >::type >::go(args);
closure->fptr(a0._v);
core::MultipleValues& returnValues = core::lisp_multipleValues();
returnValues.setSize(0);
int oidx = 0;                                                                     ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,0>::type()
, typename AdoptPointer<Pols,0>::type()
, a0._v);
return LCC_RETURN(returnValues.valueGet(0,oidx).raw_(),oidx);
}
};
// ret = 1
// template_ = 16
// numVoids = 16
// numArgs = 0
/* Specialization */
template <typename Pols   >
class VariadicFunctor
< void (*)(), Pols>
: public core::BuiltinClosure_O {
public:
typedef VariadicFunctor < void (*)(), Pols> MyType;
typedef core::BuiltinClosure_O TemplatedBase;
public:
typedef void(*Type)();
Type fptr;
public:
virtual const char* describe() const { return "VariadicFunctor"; };
enum { NumParams = 0 };
VariadicFunctor(core::T_sp name, Type ptr) : core::BuiltinClosure_O(entry_point,name), fptr(ptr) {};
DISABLE_NEW();
virtual size_t templatedSizeof() const { return sizeof(*this);};
static inline LCC_RETURN LISP_CALLING_CONVENTION()
{
MyType* closure = gctools::untag_general<MyType*>((MyType*)lcc_closure);
INCREMENT_FUNCTION_CALL_COUNTER(closure);
INITIALIZE_VA_LIST();
INVOCATION_HISTORY_FRAME();
closure->fptr();
return Values0<core::T_O>();
}
};
// ret = 2
// template_ = 0
// numVoids = 0
// numArgs = 16
/* Specialization */
template <typename Pols , typename UPRT  ,typename ARG0,typename ARG1,typename ARG2,typename ARG3,typename ARG4,typename ARG5,
    typename ARG6,typename ARG7,typename ARG8,typename ARG9,typename ARG10,typename ARG11,typename ARG12,typename ARG13,
    typename ARG14,typename ARG15 >
class VariadicFunctor
<  std::unique_ptr<UPRT>  (*)(ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9, ARG10, ARG11, ARG12, ARG13, ARG14,
    ARG15), Pols>
: public core::BuiltinClosure_O {
public:
typedef VariadicFunctor <  std::unique_ptr<UPRT>  (*)(ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9, ARG10, ARG11,
    ARG12, ARG13, ARG14, ARG15), Pols> MyType;
typedef core::BuiltinClosure_O TemplatedBase;
public:
typedef  std::unique_ptr<UPRT> (*Type)(ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9, ARG10, ARG11, ARG12, ARG13,
    ARG14, ARG15);
Type fptr;
public:
virtual const char* describe() const { return "VariadicFunctor"; };
enum { NumParams = 16 };
VariadicFunctor(core::T_sp name, Type ptr) : core::BuiltinClosure_O(entry_point,name), fptr(ptr) {};
DISABLE_NEW();
virtual size_t templatedSizeof() const { return sizeof(*this);};
static inline LCC_RETURN LISP_CALLING_CONVENTION()
{
MyType* closure = gctools::untag_general<MyType*>((MyType*)lcc_closure);
INCREMENT_FUNCTION_CALL_COUNTER(closure);
INITIALIZE_VA_LIST();
INVOCATION_HISTORY_FRAME();
MAKE_STACK_FRAME(frame,closure->asSmartPtr().raw_(),16);
core::StackFrameDynamicScopeManager scope(frame);
lambdaListHandler_createBindings(closure->asSmartPtr(),closure->_lambdaListHandler,scope,LCC_PASS_ARGS_LLH);
translate::from_object<ARG0,typename DoesNotContain_<Pols,pureOutValue<1> >::type > a0(frame->arg(0));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<1> >::type >::go(args);
translate::from_object<ARG1,typename DoesNotContain_<Pols,pureOutValue<2> >::type > a1(frame->arg(1));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<2> >::type >::go(args);
translate::from_object<ARG2,typename DoesNotContain_<Pols,pureOutValue<3> >::type > a2(frame->arg(2));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<3> >::type >::go(args);
translate::from_object<ARG3,typename DoesNotContain_<Pols,pureOutValue<4> >::type > a3(frame->arg(3));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<4> >::type >::go(args);
translate::from_object<ARG4,typename DoesNotContain_<Pols,pureOutValue<5> >::type > a4(frame->arg(4));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<5> >::type >::go(args);
translate::from_object<ARG5,typename DoesNotContain_<Pols,pureOutValue<6> >::type > a5(frame->arg(5));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<6> >::type >::go(args);
translate::from_object<ARG6,typename DoesNotContain_<Pols,pureOutValue<7> >::type > a6(frame->arg(6));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<7> >::type >::go(args);
translate::from_object<ARG7,typename DoesNotContain_<Pols,pureOutValue<8> >::type > a7(frame->arg(7));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<8> >::type >::go(args);
translate::from_object<ARG8,typename DoesNotContain_<Pols,pureOutValue<9> >::type > a8(frame->arg(8));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<9> >::type >::go(args);
translate::from_object<ARG9,typename DoesNotContain_<Pols,pureOutValue<10> >::type > a9(frame->arg(9));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<10> >::type >::go(args);
translate::from_object<ARG10,typename DoesNotContain_<Pols,pureOutValue<11> >::type > a10(frame->arg(10));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<11> >::type >::go(args);
translate::from_object<ARG11,typename DoesNotContain_<Pols,pureOutValue<12> >::type > a11(frame->arg(11));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<12> >::type >::go(args);
translate::from_object<ARG12,typename DoesNotContain_<Pols,pureOutValue<13> >::type > a12(frame->arg(12));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<13> >::type >::go(args);
translate::from_object<ARG13,typename DoesNotContain_<Pols,pureOutValue<14> >::type > a13(frame->arg(13));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<14> >::type >::go(args);
translate::from_object<ARG14,typename DoesNotContain_<Pols,pureOutValue<15> >::type > a14(frame->arg(14));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<15> >::type >::go(args);
translate::from_object<ARG15,typename DoesNotContain_<Pols,pureOutValue<16> >::type > a15(frame->arg(15));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<16> >::type >::go(args);
std::unique_ptr<UPRT> retval =  closure->fptr(a0._v,a1._v,a2._v,a3._v,a4._v,a5._v,a6._v,a7._v,a8._v,a9._v,a10._v,a11._v,a12._v,
    a13._v,a14._v,a15._v);
core::MultipleValues& returnValues = core::lisp_multipleValues();
returnValues.setSize(0);
int oidx = 1;
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,0>::type()
, typename AdoptPointer<Pols,0>::type()
, a0._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,1>::type()
, typename AdoptPointer<Pols,1>::type()
, a1._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,2>::type()
, typename AdoptPointer<Pols,2>::type()
, a2._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,3>::type()
, typename AdoptPointer<Pols,3>::type()
, a3._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,4>::type()
, typename AdoptPointer<Pols,4>::type()
, a4._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,5>::type()
, typename AdoptPointer<Pols,5>::type()
, a5._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,6>::type()
, typename AdoptPointer<Pols,6>::type()
, a6._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,7>::type()
, typename AdoptPointer<Pols,7>::type()
, a7._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,8>::type()
, typename AdoptPointer<Pols,8>::type()
, a8._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,9>::type()
, typename AdoptPointer<Pols,9>::type()
, a9._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,10>::type()
, typename AdoptPointer<Pols,10>::type()
, a10._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,11>::type()
, typename AdoptPointer<Pols,11>::type()
, a11._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,12>::type()
, typename AdoptPointer<Pols,12>::type()
, a12._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,13>::type()
, typename AdoptPointer<Pols,13>::type()
, a13._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,14>::type()
, typename AdoptPointer<Pols,14>::type()
, a14._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,15>::type()
, typename AdoptPointer<Pols,15>::type()
, a15._v);
return LCC_RETURN(translate::to_object<std::unique_ptr<UPRT>, typename AdoptPointer<Pols,
    result>::type>::convert(std::move(retval)).raw_(),oidx);
}
};
// ret = 2
// template_ = 1
// numVoids = 1
// numArgs = 15
/* Specialization */
template <typename Pols , typename UPRT  ,typename ARG0,typename ARG1,typename ARG2,typename ARG3,typename ARG4,typename ARG5,
    typename ARG6,typename ARG7,typename ARG8,typename ARG9,typename ARG10,typename ARG11,typename ARG12,typename ARG13,
    typename ARG14 >
class VariadicFunctor
<  std::unique_ptr<UPRT>  (*)(ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9, ARG10, ARG11, ARG12, ARG13, ARG14), Pols>
: public core::BuiltinClosure_O {
public:
typedef VariadicFunctor <  std::unique_ptr<UPRT>  (*)(ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9, ARG10, ARG11,
    ARG12, ARG13, ARG14), Pols> MyType;
typedef core::BuiltinClosure_O TemplatedBase;
public:
typedef  std::unique_ptr<UPRT> (*Type)(ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9, ARG10, ARG11, ARG12, ARG13,
    ARG14);
Type fptr;
public:
virtual const char* describe() const { return "VariadicFunctor"; };
enum { NumParams = 15 };
VariadicFunctor(core::T_sp name, Type ptr) : core::BuiltinClosure_O(entry_point,name), fptr(ptr) {};
DISABLE_NEW();
virtual size_t templatedSizeof() const { return sizeof(*this);};
static inline LCC_RETURN LISP_CALLING_CONVENTION()
{
MyType* closure = gctools::untag_general<MyType*>((MyType*)lcc_closure);
INCREMENT_FUNCTION_CALL_COUNTER(closure);
INITIALIZE_VA_LIST();
INVOCATION_HISTORY_FRAME();
MAKE_STACK_FRAME(frame,closure->asSmartPtr().raw_(),15);
core::StackFrameDynamicScopeManager scope(frame);
lambdaListHandler_createBindings(closure->asSmartPtr(),closure->_lambdaListHandler,scope,LCC_PASS_ARGS_LLH);
translate::from_object<ARG0,typename DoesNotContain_<Pols,pureOutValue<1> >::type > a0(frame->arg(0));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<1> >::type >::go(args);
translate::from_object<ARG1,typename DoesNotContain_<Pols,pureOutValue<2> >::type > a1(frame->arg(1));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<2> >::type >::go(args);
translate::from_object<ARG2,typename DoesNotContain_<Pols,pureOutValue<3> >::type > a2(frame->arg(2));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<3> >::type >::go(args);
translate::from_object<ARG3,typename DoesNotContain_<Pols,pureOutValue<4> >::type > a3(frame->arg(3));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<4> >::type >::go(args);
translate::from_object<ARG4,typename DoesNotContain_<Pols,pureOutValue<5> >::type > a4(frame->arg(4));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<5> >::type >::go(args);
translate::from_object<ARG5,typename DoesNotContain_<Pols,pureOutValue<6> >::type > a5(frame->arg(5));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<6> >::type >::go(args);
translate::from_object<ARG6,typename DoesNotContain_<Pols,pureOutValue<7> >::type > a6(frame->arg(6));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<7> >::type >::go(args);
translate::from_object<ARG7,typename DoesNotContain_<Pols,pureOutValue<8> >::type > a7(frame->arg(7));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<8> >::type >::go(args);
translate::from_object<ARG8,typename DoesNotContain_<Pols,pureOutValue<9> >::type > a8(frame->arg(8));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<9> >::type >::go(args);
translate::from_object<ARG9,typename DoesNotContain_<Pols,pureOutValue<10> >::type > a9(frame->arg(9));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<10> >::type >::go(args);
translate::from_object<ARG10,typename DoesNotContain_<Pols,pureOutValue<11> >::type > a10(frame->arg(10));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<11> >::type >::go(args);
translate::from_object<ARG11,typename DoesNotContain_<Pols,pureOutValue<12> >::type > a11(frame->arg(11));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<12> >::type >::go(args);
translate::from_object<ARG12,typename DoesNotContain_<Pols,pureOutValue<13> >::type > a12(frame->arg(12));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<13> >::type >::go(args);
translate::from_object<ARG13,typename DoesNotContain_<Pols,pureOutValue<14> >::type > a13(frame->arg(13));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<14> >::type >::go(args);
translate::from_object<ARG14,typename DoesNotContain_<Pols,pureOutValue<15> >::type > a14(frame->arg(14));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<15> >::type >::go(args);
std::unique_ptr<UPRT> retval =  closure->fptr(a0._v,a1._v,a2._v,a3._v,a4._v,a5._v,a6._v,a7._v,a8._v,a9._v,a10._v,a11._v,a12._v,
    a13._v,a14._v);
core::MultipleValues& returnValues = core::lisp_multipleValues();
returnValues.setSize(0);
int oidx = 1;
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,0>::type()
, typename AdoptPointer<Pols,0>::type()
, a0._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,1>::type()
, typename AdoptPointer<Pols,1>::type()
, a1._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,2>::type()
, typename AdoptPointer<Pols,2>::type()
, a2._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,3>::type()
, typename AdoptPointer<Pols,3>::type()
, a3._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,4>::type()
, typename AdoptPointer<Pols,4>::type()
, a4._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,5>::type()
, typename AdoptPointer<Pols,5>::type()
, a5._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,6>::type()
, typename AdoptPointer<Pols,6>::type()
, a6._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,7>::type()
, typename AdoptPointer<Pols,7>::type()
, a7._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,8>::type()
, typename AdoptPointer<Pols,8>::type()
, a8._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,9>::type()
, typename AdoptPointer<Pols,9>::type()
, a9._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,10>::type()
, typename AdoptPointer<Pols,10>::type()
, a10._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,11>::type()
, typename AdoptPointer<Pols,11>::type()
, a11._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,12>::type()
, typename AdoptPointer<Pols,12>::type()
, a12._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,13>::type()
, typename AdoptPointer<Pols,13>::type()
, a13._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,14>::type()
, typename AdoptPointer<Pols,14>::type()
, a14._v);
return LCC_RETURN(translate::to_object<std::unique_ptr<UPRT>, typename AdoptPointer<Pols,
    result>::type>::convert(std::move(retval)).raw_(),oidx);
}
};
// ret = 2
// template_ = 2
// numVoids = 2
// numArgs = 14
/* Specialization */
template <typename Pols , typename UPRT  ,typename ARG0,typename ARG1,typename ARG2,typename ARG3,typename ARG4,typename ARG5,
    typename ARG6,typename ARG7,typename ARG8,typename ARG9,typename ARG10,typename ARG11,typename ARG12,typename ARG13 >
class VariadicFunctor
<  std::unique_ptr<UPRT>  (*)(ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9, ARG10, ARG11, ARG12, ARG13), Pols>
: public core::BuiltinClosure_O {
public:
typedef VariadicFunctor <  std::unique_ptr<UPRT>  (*)(ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9, ARG10, ARG11,
    ARG12, ARG13), Pols> MyType;
typedef core::BuiltinClosure_O TemplatedBase;
public:
typedef  std::unique_ptr<UPRT> (*Type)(ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9, ARG10, ARG11, ARG12, ARG13);
Type fptr;
public:
virtual const char* describe() const { return "VariadicFunctor"; };
enum { NumParams = 14 };
VariadicFunctor(core::T_sp name, Type ptr) : core::BuiltinClosure_O(entry_point,name), fptr(ptr) {};
DISABLE_NEW();
virtual size_t templatedSizeof() const { return sizeof(*this);};
static inline LCC_RETURN LISP_CALLING_CONVENTION()
{
MyType* closure = gctools::untag_general<MyType*>((MyType*)lcc_closure);
INCREMENT_FUNCTION_CALL_COUNTER(closure);
INITIALIZE_VA_LIST();
INVOCATION_HISTORY_FRAME();
MAKE_STACK_FRAME(frame,closure->asSmartPtr().raw_(),14);
core::StackFrameDynamicScopeManager scope(frame);
lambdaListHandler_createBindings(closure->asSmartPtr(),closure->_lambdaListHandler,scope,LCC_PASS_ARGS_LLH);
translate::from_object<ARG0,typename DoesNotContain_<Pols,pureOutValue<1> >::type > a0(frame->arg(0));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<1> >::type >::go(args);
translate::from_object<ARG1,typename DoesNotContain_<Pols,pureOutValue<2> >::type > a1(frame->arg(1));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<2> >::type >::go(args);
translate::from_object<ARG2,typename DoesNotContain_<Pols,pureOutValue<3> >::type > a2(frame->arg(2));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<3> >::type >::go(args);
translate::from_object<ARG3,typename DoesNotContain_<Pols,pureOutValue<4> >::type > a3(frame->arg(3));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<4> >::type >::go(args);
translate::from_object<ARG4,typename DoesNotContain_<Pols,pureOutValue<5> >::type > a4(frame->arg(4));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<5> >::type >::go(args);
translate::from_object<ARG5,typename DoesNotContain_<Pols,pureOutValue<6> >::type > a5(frame->arg(5));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<6> >::type >::go(args);
translate::from_object<ARG6,typename DoesNotContain_<Pols,pureOutValue<7> >::type > a6(frame->arg(6));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<7> >::type >::go(args);
translate::from_object<ARG7,typename DoesNotContain_<Pols,pureOutValue<8> >::type > a7(frame->arg(7));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<8> >::type >::go(args);
translate::from_object<ARG8,typename DoesNotContain_<Pols,pureOutValue<9> >::type > a8(frame->arg(8));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<9> >::type >::go(args);
translate::from_object<ARG9,typename DoesNotContain_<Pols,pureOutValue<10> >::type > a9(frame->arg(9));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<10> >::type >::go(args);
translate::from_object<ARG10,typename DoesNotContain_<Pols,pureOutValue<11> >::type > a10(frame->arg(10));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<11> >::type >::go(args);
translate::from_object<ARG11,typename DoesNotContain_<Pols,pureOutValue<12> >::type > a11(frame->arg(11));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<12> >::type >::go(args);
translate::from_object<ARG12,typename DoesNotContain_<Pols,pureOutValue<13> >::type > a12(frame->arg(12));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<13> >::type >::go(args);
translate::from_object<ARG13,typename DoesNotContain_<Pols,pureOutValue<14> >::type > a13(frame->arg(13));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<14> >::type >::go(args);
std::unique_ptr<UPRT> retval =  closure->fptr(a0._v,a1._v,a2._v,a3._v,a4._v,a5._v,a6._v,a7._v,a8._v,a9._v,a10._v,a11._v,a12._v,
    a13._v);
core::MultipleValues& returnValues = core::lisp_multipleValues();
returnValues.setSize(0);
int oidx = 1;
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,0>::type()
, typename AdoptPointer<Pols,0>::type()
, a0._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,1>::type()
, typename AdoptPointer<Pols,1>::type()
, a1._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,2>::type()
, typename AdoptPointer<Pols,2>::type()
, a2._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,3>::type()
, typename AdoptPointer<Pols,3>::type()
, a3._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,4>::type()
, typename AdoptPointer<Pols,4>::type()
, a4._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,5>::type()
, typename AdoptPointer<Pols,5>::type()
, a5._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,6>::type()
, typename AdoptPointer<Pols,6>::type()
, a6._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,7>::type()
, typename AdoptPointer<Pols,7>::type()
, a7._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,8>::type()
, typename AdoptPointer<Pols,8>::type()
, a8._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,9>::type()
, typename AdoptPointer<Pols,9>::type()
, a9._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,10>::type()
, typename AdoptPointer<Pols,10>::type()
, a10._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,11>::type()
, typename AdoptPointer<Pols,11>::type()
, a11._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,12>::type()
, typename AdoptPointer<Pols,12>::type()
, a12._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,13>::type()
, typename AdoptPointer<Pols,13>::type()
, a13._v);
return LCC_RETURN(translate::to_object<std::unique_ptr<UPRT>, typename AdoptPointer<Pols,
    result>::type>::convert(std::move(retval)).raw_(),oidx);
}
};
// ret = 2
// template_ = 3
// numVoids = 3
// numArgs = 13
/* Specialization */
template <typename Pols , typename UPRT  ,typename ARG0,typename ARG1,typename ARG2,typename ARG3,typename ARG4,typename ARG5,
    typename ARG6,typename ARG7,typename ARG8,typename ARG9,typename ARG10,typename ARG11,typename ARG12 >
class VariadicFunctor
<  std::unique_ptr<UPRT>  (*)(ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9, ARG10, ARG11, ARG12), Pols>
: public core::BuiltinClosure_O {
public:
typedef VariadicFunctor <  std::unique_ptr<UPRT>  (*)(ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9, ARG10, ARG11,
    ARG12), Pols> MyType;
typedef core::BuiltinClosure_O TemplatedBase;
public:
typedef  std::unique_ptr<UPRT> (*Type)(ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9, ARG10, ARG11, ARG12);
Type fptr;
public:
virtual const char* describe() const { return "VariadicFunctor"; };
enum { NumParams = 13 };
VariadicFunctor(core::T_sp name, Type ptr) : core::BuiltinClosure_O(entry_point,name), fptr(ptr) {};
DISABLE_NEW();
virtual size_t templatedSizeof() const { return sizeof(*this);};
static inline LCC_RETURN LISP_CALLING_CONVENTION()
{
MyType* closure = gctools::untag_general<MyType*>((MyType*)lcc_closure);
INCREMENT_FUNCTION_CALL_COUNTER(closure);
INITIALIZE_VA_LIST();
INVOCATION_HISTORY_FRAME();
MAKE_STACK_FRAME(frame,closure->asSmartPtr().raw_(),13);
core::StackFrameDynamicScopeManager scope(frame);
lambdaListHandler_createBindings(closure->asSmartPtr(),closure->_lambdaListHandler,scope,LCC_PASS_ARGS_LLH);
translate::from_object<ARG0,typename DoesNotContain_<Pols,pureOutValue<1> >::type > a0(frame->arg(0));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<1> >::type >::go(args);
translate::from_object<ARG1,typename DoesNotContain_<Pols,pureOutValue<2> >::type > a1(frame->arg(1));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<2> >::type >::go(args);
translate::from_object<ARG2,typename DoesNotContain_<Pols,pureOutValue<3> >::type > a2(frame->arg(2));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<3> >::type >::go(args);
translate::from_object<ARG3,typename DoesNotContain_<Pols,pureOutValue<4> >::type > a3(frame->arg(3));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<4> >::type >::go(args);
translate::from_object<ARG4,typename DoesNotContain_<Pols,pureOutValue<5> >::type > a4(frame->arg(4));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<5> >::type >::go(args);
translate::from_object<ARG5,typename DoesNotContain_<Pols,pureOutValue<6> >::type > a5(frame->arg(5));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<6> >::type >::go(args);
translate::from_object<ARG6,typename DoesNotContain_<Pols,pureOutValue<7> >::type > a6(frame->arg(6));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<7> >::type >::go(args);
translate::from_object<ARG7,typename DoesNotContain_<Pols,pureOutValue<8> >::type > a7(frame->arg(7));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<8> >::type >::go(args);
translate::from_object<ARG8,typename DoesNotContain_<Pols,pureOutValue<9> >::type > a8(frame->arg(8));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<9> >::type >::go(args);
translate::from_object<ARG9,typename DoesNotContain_<Pols,pureOutValue<10> >::type > a9(frame->arg(9));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<10> >::type >::go(args);
translate::from_object<ARG10,typename DoesNotContain_<Pols,pureOutValue<11> >::type > a10(frame->arg(10));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<11> >::type >::go(args);
translate::from_object<ARG11,typename DoesNotContain_<Pols,pureOutValue<12> >::type > a11(frame->arg(11));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<12> >::type >::go(args);
translate::from_object<ARG12,typename DoesNotContain_<Pols,pureOutValue<13> >::type > a12(frame->arg(12));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<13> >::type >::go(args);
std::unique_ptr<UPRT> retval =  closure->fptr(a0._v,a1._v,a2._v,a3._v,a4._v,a5._v,a6._v,a7._v,a8._v,a9._v,a10._v,a11._v,a12._v);
core::MultipleValues& returnValues = core::lisp_multipleValues();
returnValues.setSize(0);
int oidx = 1;
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,0>::type()
, typename AdoptPointer<Pols,0>::type()
, a0._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,1>::type()
, typename AdoptPointer<Pols,1>::type()
, a1._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,2>::type()
, typename AdoptPointer<Pols,2>::type()
, a2._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,3>::type()
, typename AdoptPointer<Pols,3>::type()
, a3._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,4>::type()
, typename AdoptPointer<Pols,4>::type()
, a4._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,5>::type()
, typename AdoptPointer<Pols,5>::type()
, a5._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,6>::type()
, typename AdoptPointer<Pols,6>::type()
, a6._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,7>::type()
, typename AdoptPointer<Pols,7>::type()
, a7._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,8>::type()
, typename AdoptPointer<Pols,8>::type()
, a8._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,9>::type()
, typename AdoptPointer<Pols,9>::type()
, a9._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,10>::type()
, typename AdoptPointer<Pols,10>::type()
, a10._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,11>::type()
, typename AdoptPointer<Pols,11>::type()
, a11._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,12>::type()
, typename AdoptPointer<Pols,12>::type()
, a12._v);
return LCC_RETURN(translate::to_object<std::unique_ptr<UPRT>, typename AdoptPointer<Pols,
    result>::type>::convert(std::move(retval)).raw_(),oidx);
}
};
// ret = 2
// template_ = 4
// numVoids = 4
// numArgs = 12
/* Specialization */
template <typename Pols , typename UPRT  ,typename ARG0,typename ARG1,typename ARG2,typename ARG3,typename ARG4,typename ARG5,
    typename ARG6,typename ARG7,typename ARG8,typename ARG9,typename ARG10,typename ARG11 >
class VariadicFunctor
<  std::unique_ptr<UPRT>  (*)(ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9, ARG10, ARG11), Pols>
: public core::BuiltinClosure_O {
public:
typedef VariadicFunctor <  std::unique_ptr<UPRT>  (*)(ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9, ARG10, ARG11),
    Pols> MyType;
typedef core::BuiltinClosure_O TemplatedBase;
public:
typedef  std::unique_ptr<UPRT> (*Type)(ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9, ARG10, ARG11);
Type fptr;
public:
virtual const char* describe() const { return "VariadicFunctor"; };
enum { NumParams = 12 };
VariadicFunctor(core::T_sp name, Type ptr) : core::BuiltinClosure_O(entry_point,name), fptr(ptr) {};
DISABLE_NEW();
virtual size_t templatedSizeof() const { return sizeof(*this);};
static inline LCC_RETURN LISP_CALLING_CONVENTION()
{
MyType* closure = gctools::untag_general<MyType*>((MyType*)lcc_closure);
INCREMENT_FUNCTION_CALL_COUNTER(closure);
INITIALIZE_VA_LIST();
INVOCATION_HISTORY_FRAME();
MAKE_STACK_FRAME(frame,closure->asSmartPtr().raw_(),12);
core::StackFrameDynamicScopeManager scope(frame);
lambdaListHandler_createBindings(closure->asSmartPtr(),closure->_lambdaListHandler,scope,LCC_PASS_ARGS_LLH);
translate::from_object<ARG0,typename DoesNotContain_<Pols,pureOutValue<1> >::type > a0(frame->arg(0));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<1> >::type >::go(args);
translate::from_object<ARG1,typename DoesNotContain_<Pols,pureOutValue<2> >::type > a1(frame->arg(1));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<2> >::type >::go(args);
translate::from_object<ARG2,typename DoesNotContain_<Pols,pureOutValue<3> >::type > a2(frame->arg(2));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<3> >::type >::go(args);
translate::from_object<ARG3,typename DoesNotContain_<Pols,pureOutValue<4> >::type > a3(frame->arg(3));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<4> >::type >::go(args);
translate::from_object<ARG4,typename DoesNotContain_<Pols,pureOutValue<5> >::type > a4(frame->arg(4));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<5> >::type >::go(args);
translate::from_object<ARG5,typename DoesNotContain_<Pols,pureOutValue<6> >::type > a5(frame->arg(5));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<6> >::type >::go(args);
translate::from_object<ARG6,typename DoesNotContain_<Pols,pureOutValue<7> >::type > a6(frame->arg(6));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<7> >::type >::go(args);
translate::from_object<ARG7,typename DoesNotContain_<Pols,pureOutValue<8> >::type > a7(frame->arg(7));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<8> >::type >::go(args);
translate::from_object<ARG8,typename DoesNotContain_<Pols,pureOutValue<9> >::type > a8(frame->arg(8));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<9> >::type >::go(args);
translate::from_object<ARG9,typename DoesNotContain_<Pols,pureOutValue<10> >::type > a9(frame->arg(9));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<10> >::type >::go(args);
translate::from_object<ARG10,typename DoesNotContain_<Pols,pureOutValue<11> >::type > a10(frame->arg(10));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<11> >::type >::go(args);
translate::from_object<ARG11,typename DoesNotContain_<Pols,pureOutValue<12> >::type > a11(frame->arg(11));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<12> >::type >::go(args);
std::unique_ptr<UPRT> retval =  closure->fptr(a0._v,a1._v,a2._v,a3._v,a4._v,a5._v,a6._v,a7._v,a8._v,a9._v,a10._v,a11._v);
core::MultipleValues& returnValues = core::lisp_multipleValues();
returnValues.setSize(0);
int oidx = 1;
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,0>::type()
, typename AdoptPointer<Pols,0>::type()
, a0._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,1>::type()
, typename AdoptPointer<Pols,1>::type()
, a1._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,2>::type()
, typename AdoptPointer<Pols,2>::type()
, a2._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,3>::type()
, typename AdoptPointer<Pols,3>::type()
, a3._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,4>::type()
, typename AdoptPointer<Pols,4>::type()
, a4._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,5>::type()
, typename AdoptPointer<Pols,5>::type()
, a5._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,6>::type()
, typename AdoptPointer<Pols,6>::type()
, a6._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,7>::type()
, typename AdoptPointer<Pols,7>::type()
, a7._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,8>::type()
, typename AdoptPointer<Pols,8>::type()
, a8._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,9>::type()
, typename AdoptPointer<Pols,9>::type()
, a9._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,10>::type()
, typename AdoptPointer<Pols,10>::type()
, a10._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,11>::type()
, typename AdoptPointer<Pols,11>::type()
, a11._v);
return LCC_RETURN(translate::to_object<std::unique_ptr<UPRT>, typename AdoptPointer<Pols,
    result>::type>::convert(std::move(retval)).raw_(),oidx);
}
};
// ret = 2
// template_ = 5
// numVoids = 5
// numArgs = 11
/* Specialization */
template <typename Pols , typename UPRT  ,typename ARG0,typename ARG1,typename ARG2,typename ARG3,typename ARG4,typename ARG5,
    typename ARG6,typename ARG7,typename ARG8,typename ARG9,typename ARG10 >
class VariadicFunctor
<  std::unique_ptr<UPRT>  (*)(ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9, ARG10), Pols>
: public core::BuiltinClosure_O {
public:
typedef VariadicFunctor <  std::unique_ptr<UPRT>  (*)(ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9, ARG10),
    Pols> MyType;
typedef core::BuiltinClosure_O TemplatedBase;
public:
typedef  std::unique_ptr<UPRT> (*Type)(ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9, ARG10);
Type fptr;
public:
virtual const char* describe() const { return "VariadicFunctor"; };
enum { NumParams = 11 };
VariadicFunctor(core::T_sp name, Type ptr) : core::BuiltinClosure_O(entry_point,name), fptr(ptr) {};
DISABLE_NEW();
virtual size_t templatedSizeof() const { return sizeof(*this);};
static inline LCC_RETURN LISP_CALLING_CONVENTION()
{
MyType* closure = gctools::untag_general<MyType*>((MyType*)lcc_closure);
INCREMENT_FUNCTION_CALL_COUNTER(closure);
INITIALIZE_VA_LIST();
INVOCATION_HISTORY_FRAME();
MAKE_STACK_FRAME(frame,closure->asSmartPtr().raw_(),11);
core::StackFrameDynamicScopeManager scope(frame);
lambdaListHandler_createBindings(closure->asSmartPtr(),closure->_lambdaListHandler,scope,LCC_PASS_ARGS_LLH);
translate::from_object<ARG0,typename DoesNotContain_<Pols,pureOutValue<1> >::type > a0(frame->arg(0));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<1> >::type >::go(args);
translate::from_object<ARG1,typename DoesNotContain_<Pols,pureOutValue<2> >::type > a1(frame->arg(1));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<2> >::type >::go(args);
translate::from_object<ARG2,typename DoesNotContain_<Pols,pureOutValue<3> >::type > a2(frame->arg(2));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<3> >::type >::go(args);
translate::from_object<ARG3,typename DoesNotContain_<Pols,pureOutValue<4> >::type > a3(frame->arg(3));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<4> >::type >::go(args);
translate::from_object<ARG4,typename DoesNotContain_<Pols,pureOutValue<5> >::type > a4(frame->arg(4));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<5> >::type >::go(args);
translate::from_object<ARG5,typename DoesNotContain_<Pols,pureOutValue<6> >::type > a5(frame->arg(5));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<6> >::type >::go(args);
translate::from_object<ARG6,typename DoesNotContain_<Pols,pureOutValue<7> >::type > a6(frame->arg(6));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<7> >::type >::go(args);
translate::from_object<ARG7,typename DoesNotContain_<Pols,pureOutValue<8> >::type > a7(frame->arg(7));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<8> >::type >::go(args);
translate::from_object<ARG8,typename DoesNotContain_<Pols,pureOutValue<9> >::type > a8(frame->arg(8));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<9> >::type >::go(args);
translate::from_object<ARG9,typename DoesNotContain_<Pols,pureOutValue<10> >::type > a9(frame->arg(9));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<10> >::type >::go(args);
translate::from_object<ARG10,typename DoesNotContain_<Pols,pureOutValue<11> >::type > a10(frame->arg(10));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<11> >::type >::go(args);
std::unique_ptr<UPRT> retval =  closure->fptr(a0._v,a1._v,a2._v,a3._v,a4._v,a5._v,a6._v,a7._v,a8._v,a9._v,a10._v);
core::MultipleValues& returnValues = core::lisp_multipleValues();
returnValues.setSize(0);
int oidx = 1;
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,0>::type()
, typename AdoptPointer<Pols,0>::type()
, a0._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,1>::type()
, typename AdoptPointer<Pols,1>::type()
, a1._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,2>::type()
, typename AdoptPointer<Pols,2>::type()
, a2._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,3>::type()
, typename AdoptPointer<Pols,3>::type()
, a3._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,4>::type()
, typename AdoptPointer<Pols,4>::type()
, a4._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,5>::type()
, typename AdoptPointer<Pols,5>::type()
, a5._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,6>::type()
, typename AdoptPointer<Pols,6>::type()
, a6._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,7>::type()
, typename AdoptPointer<Pols,7>::type()
, a7._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,8>::type()
, typename AdoptPointer<Pols,8>::type()
, a8._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,9>::type()
, typename AdoptPointer<Pols,9>::type()
, a9._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,10>::type()
, typename AdoptPointer<Pols,10>::type()
, a10._v);
return LCC_RETURN(translate::to_object<std::unique_ptr<UPRT>, typename AdoptPointer<Pols,
    result>::type>::convert(std::move(retval)).raw_(),oidx);
}
};
// ret = 2
// template_ = 6
// numVoids = 6
// numArgs = 10
/* Specialization */
template <typename Pols , typename UPRT  ,typename ARG0,typename ARG1,typename ARG2,typename ARG3,typename ARG4,typename ARG5,
    typename ARG6,typename ARG7,typename ARG8,typename ARG9 >
class VariadicFunctor
<  std::unique_ptr<UPRT>  (*)(ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9), Pols>
: public core::BuiltinClosure_O {
public:
typedef VariadicFunctor <  std::unique_ptr<UPRT>  (*)(ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9), Pols> MyType;
typedef core::BuiltinClosure_O TemplatedBase;
public:
typedef  std::unique_ptr<UPRT> (*Type)(ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9);
Type fptr;
public:
virtual const char* describe() const { return "VariadicFunctor"; };
enum { NumParams = 10 };
VariadicFunctor(core::T_sp name, Type ptr) : core::BuiltinClosure_O(entry_point,name), fptr(ptr) {};
DISABLE_NEW();
virtual size_t templatedSizeof() const { return sizeof(*this);};
static inline LCC_RETURN LISP_CALLING_CONVENTION()
{
MyType* closure = gctools::untag_general<MyType*>((MyType*)lcc_closure);
INCREMENT_FUNCTION_CALL_COUNTER(closure);
INITIALIZE_VA_LIST();
INVOCATION_HISTORY_FRAME();
MAKE_STACK_FRAME(frame,closure->asSmartPtr().raw_(),10);
core::StackFrameDynamicScopeManager scope(frame);
lambdaListHandler_createBindings(closure->asSmartPtr(),closure->_lambdaListHandler,scope,LCC_PASS_ARGS_LLH);
translate::from_object<ARG0,typename DoesNotContain_<Pols,pureOutValue<1> >::type > a0(frame->arg(0));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<1> >::type >::go(args);
translate::from_object<ARG1,typename DoesNotContain_<Pols,pureOutValue<2> >::type > a1(frame->arg(1));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<2> >::type >::go(args);
translate::from_object<ARG2,typename DoesNotContain_<Pols,pureOutValue<3> >::type > a2(frame->arg(2));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<3> >::type >::go(args);
translate::from_object<ARG3,typename DoesNotContain_<Pols,pureOutValue<4> >::type > a3(frame->arg(3));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<4> >::type >::go(args);
translate::from_object<ARG4,typename DoesNotContain_<Pols,pureOutValue<5> >::type > a4(frame->arg(4));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<5> >::type >::go(args);
translate::from_object<ARG5,typename DoesNotContain_<Pols,pureOutValue<6> >::type > a5(frame->arg(5));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<6> >::type >::go(args);
translate::from_object<ARG6,typename DoesNotContain_<Pols,pureOutValue<7> >::type > a6(frame->arg(6));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<7> >::type >::go(args);
translate::from_object<ARG7,typename DoesNotContain_<Pols,pureOutValue<8> >::type > a7(frame->arg(7));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<8> >::type >::go(args);
translate::from_object<ARG8,typename DoesNotContain_<Pols,pureOutValue<9> >::type > a8(frame->arg(8));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<9> >::type >::go(args);
translate::from_object<ARG9,typename DoesNotContain_<Pols,pureOutValue<10> >::type > a9(frame->arg(9));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<10> >::type >::go(args);
std::unique_ptr<UPRT> retval =  closure->fptr(a0._v,a1._v,a2._v,a3._v,a4._v,a5._v,a6._v,a7._v,a8._v,a9._v);
core::MultipleValues& returnValues = core::lisp_multipleValues();
returnValues.setSize(0);
int oidx = 1;
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,0>::type()
, typename AdoptPointer<Pols,0>::type()
, a0._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,1>::type()
, typename AdoptPointer<Pols,1>::type()
, a1._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,2>::type()
, typename AdoptPointer<Pols,2>::type()
, a2._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,3>::type()
, typename AdoptPointer<Pols,3>::type()
, a3._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,4>::type()
, typename AdoptPointer<Pols,4>::type()
, a4._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,5>::type()
, typename AdoptPointer<Pols,5>::type()
, a5._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,6>::type()
, typename AdoptPointer<Pols,6>::type()
, a6._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,7>::type()
, typename AdoptPointer<Pols,7>::type()
, a7._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,8>::type()
, typename AdoptPointer<Pols,8>::type()
, a8._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,9>::type()
, typename AdoptPointer<Pols,9>::type()
, a9._v);
return LCC_RETURN(translate::to_object<std::unique_ptr<UPRT>, typename AdoptPointer<Pols,
    result>::type>::convert(std::move(retval)).raw_(),oidx);
}
};
// ret = 2
// template_ = 7
// numVoids = 7
// numArgs = 9
/* Specialization */
template <typename Pols , typename UPRT  ,typename ARG0,typename ARG1,typename ARG2,typename ARG3,typename ARG4,typename ARG5,
    typename ARG6,typename ARG7,typename ARG8 >
class VariadicFunctor
<  std::unique_ptr<UPRT>  (*)(ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8), Pols>
: public core::BuiltinClosure_O {
public:
typedef VariadicFunctor <  std::unique_ptr<UPRT>  (*)(ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8), Pols> MyType;
typedef core::BuiltinClosure_O TemplatedBase;
public:
typedef  std::unique_ptr<UPRT> (*Type)(ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8);
Type fptr;
public:
virtual const char* describe() const { return "VariadicFunctor"; };
enum { NumParams = 9 };
VariadicFunctor(core::T_sp name, Type ptr) : core::BuiltinClosure_O(entry_point,name), fptr(ptr) {};
DISABLE_NEW();
virtual size_t templatedSizeof() const { return sizeof(*this);};
static inline LCC_RETURN LISP_CALLING_CONVENTION()
{
MyType* closure = gctools::untag_general<MyType*>((MyType*)lcc_closure);
INCREMENT_FUNCTION_CALL_COUNTER(closure);
INITIALIZE_VA_LIST();
INVOCATION_HISTORY_FRAME();
MAKE_STACK_FRAME(frame,closure->asSmartPtr().raw_(),9);
core::StackFrameDynamicScopeManager scope(frame);
lambdaListHandler_createBindings(closure->asSmartPtr(),closure->_lambdaListHandler,scope,LCC_PASS_ARGS_LLH);
translate::from_object<ARG0,typename DoesNotContain_<Pols,pureOutValue<1> >::type > a0(frame->arg(0));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<1> >::type >::go(args);
translate::from_object<ARG1,typename DoesNotContain_<Pols,pureOutValue<2> >::type > a1(frame->arg(1));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<2> >::type >::go(args);
translate::from_object<ARG2,typename DoesNotContain_<Pols,pureOutValue<3> >::type > a2(frame->arg(2));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<3> >::type >::go(args);
translate::from_object<ARG3,typename DoesNotContain_<Pols,pureOutValue<4> >::type > a3(frame->arg(3));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<4> >::type >::go(args);
translate::from_object<ARG4,typename DoesNotContain_<Pols,pureOutValue<5> >::type > a4(frame->arg(4));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<5> >::type >::go(args);
translate::from_object<ARG5,typename DoesNotContain_<Pols,pureOutValue<6> >::type > a5(frame->arg(5));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<6> >::type >::go(args);
translate::from_object<ARG6,typename DoesNotContain_<Pols,pureOutValue<7> >::type > a6(frame->arg(6));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<7> >::type >::go(args);
translate::from_object<ARG7,typename DoesNotContain_<Pols,pureOutValue<8> >::type > a7(frame->arg(7));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<8> >::type >::go(args);
translate::from_object<ARG8,typename DoesNotContain_<Pols,pureOutValue<9> >::type > a8(frame->arg(8));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<9> >::type >::go(args);
std::unique_ptr<UPRT> retval =  closure->fptr(a0._v,a1._v,a2._v,a3._v,a4._v,a5._v,a6._v,a7._v,a8._v);
core::MultipleValues& returnValues = core::lisp_multipleValues();
returnValues.setSize(0);
int oidx = 1;
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,0>::type()
, typename AdoptPointer<Pols,0>::type()
, a0._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,1>::type()
, typename AdoptPointer<Pols,1>::type()
, a1._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,2>::type()
, typename AdoptPointer<Pols,2>::type()
, a2._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,3>::type()
, typename AdoptPointer<Pols,3>::type()
, a3._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,4>::type()
, typename AdoptPointer<Pols,4>::type()
, a4._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,5>::type()
, typename AdoptPointer<Pols,5>::type()
, a5._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,6>::type()
, typename AdoptPointer<Pols,6>::type()
, a6._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,7>::type()
, typename AdoptPointer<Pols,7>::type()
, a7._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,8>::type()
, typename AdoptPointer<Pols,8>::type()
, a8._v);
return LCC_RETURN(translate::to_object<std::unique_ptr<UPRT>, typename AdoptPointer<Pols,
    result>::type>::convert(std::move(retval)).raw_(),oidx);
}
};
// ret = 2
// template_ = 8
// numVoids = 8
// numArgs = 8
/* Specialization */
template <typename Pols , typename UPRT  ,typename ARG0,typename ARG1,typename ARG2,typename ARG3,typename ARG4,typename ARG5,
    typename ARG6,typename ARG7 >
class VariadicFunctor
<  std::unique_ptr<UPRT>  (*)(ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7), Pols>
: public core::BuiltinClosure_O {
public:
typedef VariadicFunctor <  std::unique_ptr<UPRT>  (*)(ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7), Pols> MyType;
typedef core::BuiltinClosure_O TemplatedBase;
public:
typedef  std::unique_ptr<UPRT> (*Type)(ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7);
Type fptr;
public:
virtual const char* describe() const { return "VariadicFunctor"; };
enum { NumParams = 8 };
VariadicFunctor(core::T_sp name, Type ptr) : core::BuiltinClosure_O(entry_point,name), fptr(ptr) {};
DISABLE_NEW();
virtual size_t templatedSizeof() const { return sizeof(*this);};
static inline LCC_RETURN LISP_CALLING_CONVENTION()
{
MyType* closure = gctools::untag_general<MyType*>((MyType*)lcc_closure);
INCREMENT_FUNCTION_CALL_COUNTER(closure);
INITIALIZE_VA_LIST();
INVOCATION_HISTORY_FRAME();
MAKE_STACK_FRAME(frame,closure->asSmartPtr().raw_(),8);
core::StackFrameDynamicScopeManager scope(frame);
lambdaListHandler_createBindings(closure->asSmartPtr(),closure->_lambdaListHandler,scope,LCC_PASS_ARGS_LLH);
translate::from_object<ARG0,typename DoesNotContain_<Pols,pureOutValue<1> >::type > a0(frame->arg(0));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<1> >::type >::go(args);
translate::from_object<ARG1,typename DoesNotContain_<Pols,pureOutValue<2> >::type > a1(frame->arg(1));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<2> >::type >::go(args);
translate::from_object<ARG2,typename DoesNotContain_<Pols,pureOutValue<3> >::type > a2(frame->arg(2));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<3> >::type >::go(args);
translate::from_object<ARG3,typename DoesNotContain_<Pols,pureOutValue<4> >::type > a3(frame->arg(3));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<4> >::type >::go(args);
translate::from_object<ARG4,typename DoesNotContain_<Pols,pureOutValue<5> >::type > a4(frame->arg(4));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<5> >::type >::go(args);
translate::from_object<ARG5,typename DoesNotContain_<Pols,pureOutValue<6> >::type > a5(frame->arg(5));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<6> >::type >::go(args);
translate::from_object<ARG6,typename DoesNotContain_<Pols,pureOutValue<7> >::type > a6(frame->arg(6));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<7> >::type >::go(args);
translate::from_object<ARG7,typename DoesNotContain_<Pols,pureOutValue<8> >::type > a7(frame->arg(7));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<8> >::type >::go(args);
std::unique_ptr<UPRT> retval =  closure->fptr(a0._v,a1._v,a2._v,a3._v,a4._v,a5._v,a6._v,a7._v);
core::MultipleValues& returnValues = core::lisp_multipleValues();
returnValues.setSize(0);
int oidx = 1;
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,0>::type()
, typename AdoptPointer<Pols,0>::type()
, a0._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,1>::type()
, typename AdoptPointer<Pols,1>::type()
, a1._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,2>::type()
, typename AdoptPointer<Pols,2>::type()
, a2._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,3>::type()
, typename AdoptPointer<Pols,3>::type()
, a3._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,4>::type()
, typename AdoptPointer<Pols,4>::type()
, a4._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,5>::type()
, typename AdoptPointer<Pols,5>::type()
, a5._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,6>::type()
, typename AdoptPointer<Pols,6>::type()
, a6._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,7>::type()
, typename AdoptPointer<Pols,7>::type()
, a7._v);
return LCC_RETURN(translate::to_object<std::unique_ptr<UPRT>, typename AdoptPointer<Pols,
    result>::type>::convert(std::move(retval)).raw_(),oidx);
}
};
// ret = 2
// template_ = 9
// numVoids = 9
// numArgs = 7
/* Specialization */
template <typename Pols , typename UPRT  ,typename ARG0,typename ARG1,typename ARG2,typename ARG3,typename ARG4,typename ARG5,
    typename ARG6 >
class VariadicFunctor
<  std::unique_ptr<UPRT>  (*)(ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6), Pols>
: public core::BuiltinClosure_O {
public:
typedef VariadicFunctor <  std::unique_ptr<UPRT>  (*)(ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6), Pols> MyType;
typedef core::BuiltinClosure_O TemplatedBase;
public:
typedef  std::unique_ptr<UPRT> (*Type)(ARG0, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6);
Type fptr;
public:
virtual const char* describe() const { return "VariadicFunctor"; };
enum { NumParams = 7 };
VariadicFunctor(core::T_sp name, Type ptr) : core::BuiltinClosure_O(entry_point,name), fptr(ptr) {};
DISABLE_NEW();
virtual size_t templatedSizeof() const { return sizeof(*this);};
static inline LCC_RETURN LISP_CALLING_CONVENTION()
{
MyType* closure = gctools::untag_general<MyType*>((MyType*)lcc_closure);
INCREMENT_FUNCTION_CALL_COUNTER(closure);
INITIALIZE_VA_LIST();
INVOCATION_HISTORY_FRAME();
MAKE_STACK_FRAME(frame,closure->asSmartPtr().raw_(),7);
core::StackFrameDynamicScopeManager scope(frame);
lambdaListHandler_createBindings(closure->asSmartPtr(),closure->_lambdaListHandler,scope,LCC_PASS_ARGS_LLH);
translate::from_object<ARG0,typename DoesNotContain_<Pols,pureOutValue<1> >::type > a0(frame->arg(0));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<1> >::type >::go(args);
translate::from_object<ARG1,typename DoesNotContain_<Pols,pureOutValue<2> >::type > a1(frame->arg(1));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<2> >::type >::go(args);
translate::from_object<ARG2,typename DoesNotContain_<Pols,pureOutValue<3> >::type > a2(frame->arg(2));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<3> >::type >::go(args);
translate::from_object<ARG3,typename DoesNotContain_<Pols,pureOutValue<4> >::type > a3(frame->arg(3));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<4> >::type >::go(args);
translate::from_object<ARG4,typename DoesNotContain_<Pols,pureOutValue<5> >::type > a4(frame->arg(4));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<5> >::type >::go(args);
translate::from_object<ARG5,typename DoesNotContain_<Pols,pureOutValue<6> >::type > a5(frame->arg(5));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<6> >::type >::go(args);
translate::from_object<ARG6,typename DoesNotContain_<Pols,pureOutValue<7> >::type > a6(frame->arg(6));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<7> >::type >::go(args);
std::unique_ptr<UPRT> retval =  closure->fptr(a0._v,a1._v,a2._v,a3._v,a4._v,a5._v,a6._v);
core::MultipleValues& returnValues = core::lisp_multipleValues();
returnValues.setSize(0);
int oidx = 1;
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,0>::type()
, typename AdoptPointer<Pols,0>::type()
, a0._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,1>::type()
, typename AdoptPointer<Pols,1>::type()
, a1._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,2>::type()
, typename AdoptPointer<Pols,2>::type()
, a2._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,3>::type()
, typename AdoptPointer<Pols,3>::type()
, a3._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,4>::type()
, typename AdoptPointer<Pols,4>::type()
, a4._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,5>::type()
, typename AdoptPointer<Pols,5>::type()
, a5._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,6>::type()
, typename AdoptPointer<Pols,6>::type()
, a6._v);
return LCC_RETURN(translate::to_object<std::unique_ptr<UPRT>, typename AdoptPointer<Pols,
    result>::type>::convert(std::move(retval)).raw_(),oidx);
}
};
// ret = 2
// template_ = 10
// numVoids = 10
// numArgs = 6
/* Specialization */
template <typename Pols , typename UPRT  ,typename ARG0,typename ARG1,typename ARG2,typename ARG3,typename ARG4,typename ARG5 >
class VariadicFunctor
<  std::unique_ptr<UPRT>  (*)(ARG0, ARG1, ARG2, ARG3, ARG4, ARG5), Pols>
: public core::BuiltinClosure_O {
public:
typedef VariadicFunctor <  std::unique_ptr<UPRT>  (*)(ARG0, ARG1, ARG2, ARG3, ARG4, ARG5), Pols> MyType;
typedef core::BuiltinClosure_O TemplatedBase;
public:
typedef  std::unique_ptr<UPRT> (*Type)(ARG0, ARG1, ARG2, ARG3, ARG4, ARG5);
Type fptr;
public:
virtual const char* describe() const { return "VariadicFunctor"; };
enum { NumParams = 6 };
VariadicFunctor(core::T_sp name, Type ptr) : core::BuiltinClosure_O(entry_point,name), fptr(ptr) {};
DISABLE_NEW();
virtual size_t templatedSizeof() const { return sizeof(*this);};
static inline LCC_RETURN LISP_CALLING_CONVENTION()
{
MyType* closure = gctools::untag_general<MyType*>((MyType*)lcc_closure);
INCREMENT_FUNCTION_CALL_COUNTER(closure);
INITIALIZE_VA_LIST();
INVOCATION_HISTORY_FRAME();
MAKE_STACK_FRAME(frame,closure->asSmartPtr().raw_(),6);
core::StackFrameDynamicScopeManager scope(frame);
lambdaListHandler_createBindings(closure->asSmartPtr(),closure->_lambdaListHandler,scope,LCC_PASS_ARGS_LLH);
translate::from_object<ARG0,typename DoesNotContain_<Pols,pureOutValue<1> >::type > a0(frame->arg(0));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<1> >::type >::go(args);
translate::from_object<ARG1,typename DoesNotContain_<Pols,pureOutValue<2> >::type > a1(frame->arg(1));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<2> >::type >::go(args);
translate::from_object<ARG2,typename DoesNotContain_<Pols,pureOutValue<3> >::type > a2(frame->arg(2));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<3> >::type >::go(args);
translate::from_object<ARG3,typename DoesNotContain_<Pols,pureOutValue<4> >::type > a3(frame->arg(3));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<4> >::type >::go(args);
translate::from_object<ARG4,typename DoesNotContain_<Pols,pureOutValue<5> >::type > a4(frame->arg(4));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<5> >::type >::go(args);
translate::from_object<ARG5,typename DoesNotContain_<Pols,pureOutValue<6> >::type > a5(frame->arg(5));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<6> >::type >::go(args);
std::unique_ptr<UPRT> retval =  closure->fptr(a0._v,a1._v,a2._v,a3._v,a4._v,a5._v);
core::MultipleValues& returnValues = core::lisp_multipleValues();
returnValues.setSize(0);
int oidx = 1;
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,0>::type()
, typename AdoptPointer<Pols,0>::type()
, a0._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,1>::type()
, typename AdoptPointer<Pols,1>::type()
, a1._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,2>::type()
, typename AdoptPointer<Pols,2>::type()
, a2._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,3>::type()
, typename AdoptPointer<Pols,3>::type()
, a3._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,4>::type()
, typename AdoptPointer<Pols,4>::type()
, a4._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,5>::type()
, typename AdoptPointer<Pols,5>::type()
, a5._v);
return LCC_RETURN(translate::to_object<std::unique_ptr<UPRT>, typename AdoptPointer<Pols,
    result>::type>::convert(std::move(retval)).raw_(),oidx);
}
};
// ret = 2
// template_ = 11
// numVoids = 11
// numArgs = 5
/* Specialization */
template <typename Pols , typename UPRT  ,typename ARG0,typename ARG1,typename ARG2,typename ARG3,typename ARG4 >
class VariadicFunctor
<  std::unique_ptr<UPRT>  (*)(ARG0, ARG1, ARG2, ARG3, ARG4), Pols>
: public core::BuiltinClosure_O {
public:
typedef VariadicFunctor <  std::unique_ptr<UPRT>  (*)(ARG0, ARG1, ARG2, ARG3, ARG4), Pols> MyType;
typedef core::BuiltinClosure_O TemplatedBase;
public:
typedef  std::unique_ptr<UPRT> (*Type)(ARG0, ARG1, ARG2, ARG3, ARG4);
Type fptr;
public:
virtual const char* describe() const { return "VariadicFunctor"; };
enum { NumParams = 5 };
VariadicFunctor(core::T_sp name, Type ptr) : core::BuiltinClosure_O(entry_point,name), fptr(ptr) {};
DISABLE_NEW();
virtual size_t templatedSizeof() const { return sizeof(*this);};
static inline LCC_RETURN LISP_CALLING_CONVENTION()
{
MyType* closure = gctools::untag_general<MyType*>((MyType*)lcc_closure);
INCREMENT_FUNCTION_CALL_COUNTER(closure);
INITIALIZE_VA_LIST();
INVOCATION_HISTORY_FRAME();
MAKE_STACK_FRAME(frame,closure->asSmartPtr().raw_(),5);
core::StackFrameDynamicScopeManager scope(frame);
lambdaListHandler_createBindings(closure->asSmartPtr(),closure->_lambdaListHandler,scope,LCC_PASS_ARGS_LLH);
translate::from_object<ARG0,typename DoesNotContain_<Pols,pureOutValue<1> >::type > a0(frame->arg(0));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<1> >::type >::go(args);
translate::from_object<ARG1,typename DoesNotContain_<Pols,pureOutValue<2> >::type > a1(frame->arg(1));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<2> >::type >::go(args);
translate::from_object<ARG2,typename DoesNotContain_<Pols,pureOutValue<3> >::type > a2(frame->arg(2));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<3> >::type >::go(args);
translate::from_object<ARG3,typename DoesNotContain_<Pols,pureOutValue<4> >::type > a3(frame->arg(3));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<4> >::type >::go(args);
translate::from_object<ARG4,typename DoesNotContain_<Pols,pureOutValue<5> >::type > a4(frame->arg(4));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<5> >::type >::go(args);
std::unique_ptr<UPRT> retval =  closure->fptr(a0._v,a1._v,a2._v,a3._v,a4._v);
core::MultipleValues& returnValues = core::lisp_multipleValues();
returnValues.setSize(0);
int oidx = 1;
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,0>::type()
, typename AdoptPointer<Pols,0>::type()
, a0._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,1>::type()
, typename AdoptPointer<Pols,1>::type()
, a1._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,2>::type()
, typename AdoptPointer<Pols,2>::type()
, a2._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,3>::type()
, typename AdoptPointer<Pols,3>::type()
, a3._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,4>::type()
, typename AdoptPointer<Pols,4>::type()
, a4._v);
return LCC_RETURN(translate::to_object<std::unique_ptr<UPRT>, typename AdoptPointer<Pols,
    result>::type>::convert(std::move(retval)).raw_(),oidx);
}
};
// ret = 2
// template_ = 12
// numVoids = 12
// numArgs = 4
/* Specialization */
template <typename Pols , typename UPRT  ,typename ARG0,typename ARG1,typename ARG2,typename ARG3 >
class VariadicFunctor
<  std::unique_ptr<UPRT>  (*)(ARG0, ARG1, ARG2, ARG3), Pols>
: public core::BuiltinClosure_O {
public:
typedef VariadicFunctor <  std::unique_ptr<UPRT>  (*)(ARG0, ARG1, ARG2, ARG3), Pols> MyType;
typedef core::BuiltinClosure_O TemplatedBase;
public:
typedef  std::unique_ptr<UPRT> (*Type)(ARG0, ARG1, ARG2, ARG3);
Type fptr;
public:
virtual const char* describe() const { return "VariadicFunctor"; };
enum { NumParams = 4 };
VariadicFunctor(core::T_sp name, Type ptr) : core::BuiltinClosure_O(entry_point,name), fptr(ptr) {};
DISABLE_NEW();
virtual size_t templatedSizeof() const { return sizeof(*this);};
static inline LCC_RETURN LISP_CALLING_CONVENTION()
{
MyType* closure = gctools::untag_general<MyType*>((MyType*)lcc_closure);
INCREMENT_FUNCTION_CALL_COUNTER(closure);
INITIALIZE_VA_LIST();
INVOCATION_HISTORY_FRAME();
MAKE_STACK_FRAME(frame,closure->asSmartPtr().raw_(),4);
core::StackFrameDynamicScopeManager scope(frame);
lambdaListHandler_createBindings(closure->asSmartPtr(),closure->_lambdaListHandler,scope,LCC_PASS_ARGS_LLH);
translate::from_object<ARG0,typename DoesNotContain_<Pols,pureOutValue<1> >::type > a0(frame->arg(0));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<1> >::type >::go(args);
translate::from_object<ARG1,typename DoesNotContain_<Pols,pureOutValue<2> >::type > a1(frame->arg(1));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<2> >::type >::go(args);
translate::from_object<ARG2,typename DoesNotContain_<Pols,pureOutValue<3> >::type > a2(frame->arg(2));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<3> >::type >::go(args);
translate::from_object<ARG3,typename DoesNotContain_<Pols,pureOutValue<4> >::type > a3(frame->arg(3));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<4> >::type >::go(args);
std::unique_ptr<UPRT> retval =  closure->fptr(a0._v,a1._v,a2._v,a3._v);
core::MultipleValues& returnValues = core::lisp_multipleValues();
returnValues.setSize(0);
int oidx = 1;
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,0>::type()
, typename AdoptPointer<Pols,0>::type()
, a0._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,1>::type()
, typename AdoptPointer<Pols,1>::type()
, a1._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,2>::type()
, typename AdoptPointer<Pols,2>::type()
, a2._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,3>::type()
, typename AdoptPointer<Pols,3>::type()
, a3._v);
return LCC_RETURN(translate::to_object<std::unique_ptr<UPRT>, typename AdoptPointer<Pols,
    result>::type>::convert(std::move(retval)).raw_(),oidx);
}
};
// ret = 2
// template_ = 13
// numVoids = 13
// numArgs = 3
/* Specialization */
template <typename Pols , typename UPRT  ,typename ARG0,typename ARG1,typename ARG2 >
class VariadicFunctor
<  std::unique_ptr<UPRT>  (*)(ARG0, ARG1, ARG2), Pols>
: public core::BuiltinClosure_O {
public:
typedef VariadicFunctor <  std::unique_ptr<UPRT>  (*)(ARG0, ARG1, ARG2), Pols> MyType;
typedef core::BuiltinClosure_O TemplatedBase;
public:
typedef  std::unique_ptr<UPRT> (*Type)(ARG0, ARG1, ARG2);
Type fptr;
public:
virtual const char* describe() const { return "VariadicFunctor"; };
enum { NumParams = 3 };
VariadicFunctor(core::T_sp name, Type ptr) : core::BuiltinClosure_O(entry_point,name), fptr(ptr) {};
DISABLE_NEW();
virtual size_t templatedSizeof() const { return sizeof(*this);};
static inline LCC_RETURN LISP_CALLING_CONVENTION()
{
MyType* closure = gctools::untag_general<MyType*>((MyType*)lcc_closure);
INCREMENT_FUNCTION_CALL_COUNTER(closure);
INITIALIZE_VA_LIST();
INVOCATION_HISTORY_FRAME();
MAKE_STACK_FRAME(frame,closure->asSmartPtr().raw_(),3);
core::StackFrameDynamicScopeManager scope(frame);
lambdaListHandler_createBindings(closure->asSmartPtr(),closure->_lambdaListHandler,scope,LCC_PASS_ARGS_LLH);
translate::from_object<ARG0,typename DoesNotContain_<Pols,pureOutValue<1> >::type > a0(frame->arg(0));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<1> >::type >::go(args);
translate::from_object<ARG1,typename DoesNotContain_<Pols,pureOutValue<2> >::type > a1(frame->arg(1));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<2> >::type >::go(args);
translate::from_object<ARG2,typename DoesNotContain_<Pols,pureOutValue<3> >::type > a2(frame->arg(2));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<3> >::type >::go(args);
std::unique_ptr<UPRT> retval =  closure->fptr(a0._v,a1._v,a2._v);
core::MultipleValues& returnValues = core::lisp_multipleValues();
returnValues.setSize(0);
int oidx = 1;
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,0>::type()
, typename AdoptPointer<Pols,0>::type()
, a0._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,1>::type()
, typename AdoptPointer<Pols,1>::type()
, a1._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,2>::type()
, typename AdoptPointer<Pols,2>::type()
, a2._v);
return LCC_RETURN(translate::to_object<std::unique_ptr<UPRT>, typename AdoptPointer<Pols,
    result>::type>::convert(std::move(retval)).raw_(),oidx);
}
};
// ret = 2
// template_ = 14
// numVoids = 14
// numArgs = 2
/* Specialization */
template <typename Pols , typename UPRT  ,typename ARG0,typename ARG1 >
class VariadicFunctor
<  std::unique_ptr<UPRT>  (*)(ARG0, ARG1), Pols>
: public core::BuiltinClosure_O {
public:
typedef VariadicFunctor <  std::unique_ptr<UPRT>  (*)(ARG0, ARG1), Pols> MyType;
typedef core::BuiltinClosure_O TemplatedBase;
public:
typedef  std::unique_ptr<UPRT> (*Type)(ARG0, ARG1);
Type fptr;
public:
virtual const char* describe() const { return "VariadicFunctor"; };
enum { NumParams = 2 };
VariadicFunctor(core::T_sp name, Type ptr) : core::BuiltinClosure_O(entry_point,name), fptr(ptr) {};
DISABLE_NEW();
virtual size_t templatedSizeof() const { return sizeof(*this);};
static inline LCC_RETURN LISP_CALLING_CONVENTION()
{
MyType* closure = gctools::untag_general<MyType*>((MyType*)lcc_closure);
INCREMENT_FUNCTION_CALL_COUNTER(closure);
INITIALIZE_VA_LIST();
INVOCATION_HISTORY_FRAME();
MAKE_STACK_FRAME(frame,closure->asSmartPtr().raw_(),2);
core::StackFrameDynamicScopeManager scope(frame);
lambdaListHandler_createBindings(closure->asSmartPtr(),closure->_lambdaListHandler,scope,LCC_PASS_ARGS_LLH);
translate::from_object<ARG0,typename DoesNotContain_<Pols,pureOutValue<1> >::type > a0(frame->arg(0));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<1> >::type >::go(args);
translate::from_object<ARG1,typename DoesNotContain_<Pols,pureOutValue<2> >::type > a1(frame->arg(1));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<2> >::type >::go(args);
std::unique_ptr<UPRT> retval =  closure->fptr(a0._v,a1._v);
core::MultipleValues& returnValues = core::lisp_multipleValues();
returnValues.setSize(0);
int oidx = 1;
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,0>::type()
, typename AdoptPointer<Pols,0>::type()
, a0._v);
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,1>::type()
, typename AdoptPointer<Pols,1>::type()
, a1._v);
return LCC_RETURN(translate::to_object<std::unique_ptr<UPRT>, typename AdoptPointer<Pols,
    result>::type>::convert(std::move(retval)).raw_(),oidx);
}
};
// ret = 2
// template_ = 15
// numVoids = 15
// numArgs = 1
/* Specialization */
template <typename Pols , typename UPRT  ,typename ARG0 >
class VariadicFunctor
<  std::unique_ptr<UPRT>  (*)(ARG0), Pols>
: public core::BuiltinClosure_O {
public:
typedef VariadicFunctor <  std::unique_ptr<UPRT>  (*)(ARG0), Pols> MyType;
typedef core::BuiltinClosure_O TemplatedBase;
public:
typedef  std::unique_ptr<UPRT> (*Type)(ARG0);
Type fptr;
public:
virtual const char* describe() const { return "VariadicFunctor"; };
enum { NumParams = 1 };
VariadicFunctor(core::T_sp name, Type ptr) : core::BuiltinClosure_O(entry_point,name), fptr(ptr) {};
DISABLE_NEW();
virtual size_t templatedSizeof() const { return sizeof(*this);};
static inline LCC_RETURN LISP_CALLING_CONVENTION()
{
MyType* closure = gctools::untag_general<MyType*>((MyType*)lcc_closure);
INCREMENT_FUNCTION_CALL_COUNTER(closure);
INITIALIZE_VA_LIST();
INVOCATION_HISTORY_FRAME();
MAKE_STACK_FRAME(frame,closure->asSmartPtr().raw_(),1);
core::StackFrameDynamicScopeManager scope(frame);
lambdaListHandler_createBindings(closure->asSmartPtr(),closure->_lambdaListHandler,scope,LCC_PASS_ARGS_LLH);
translate::from_object<ARG0,typename DoesNotContain_<Pols,pureOutValue<1> >::type > a0(frame->arg(0));
//IncWhen<typename DoesNotContain_<Pols,pureOutValue<1> >::type >::go(args);
std::unique_ptr<UPRT> retval =  closure->fptr(a0._v);
core::MultipleValues& returnValues = core::lisp_multipleValues();
returnValues.setSize(0);
int oidx = 1;
ReturnValueWhen(returnValues,oidx
, typename is_outValue<Pols,0>::type()
, typename AdoptPointer<Pols,0>::type()
, a0._v);
return LCC_RETURN(translate::to_object<std::unique_ptr<UPRT>, typename AdoptPointer<Pols,
    result>::type>::convert(std::move(retval)).raw_(),oidx);
}
};
// ret = 2
// template_ = 16
// numVoids = 16
// numArgs = 0
/* Specialization */
template <typename Pols , typename UPRT   >
class VariadicFunctor
<  std::unique_ptr<UPRT>  (*)(), Pols>
: public core::BuiltinClosure_O {
public:
typedef VariadicFunctor <  std::unique_ptr<UPRT>  (*)(), Pols> MyType;
typedef core::BuiltinClosure_O TemplatedBase;
public:
typedef  std::unique_ptr<UPRT> (*Type)();
Type fptr;
public:
virtual const char* describe() const { return "VariadicFunctor"; };
enum { NumParams = 0 };
VariadicFunctor(core::T_sp name, Type ptr) : core::BuiltinClosure_O(entry_point,name), fptr(ptr) {};
DISABLE_NEW();
virtual size_t templatedSizeof() const { return sizeof(*this);};
static inline LCC_RETURN LISP_CALLING_CONVENTION()
{
MyType* closure = gctools::untag_general<MyType*>((MyType*)lcc_closure);
INCREMENT_FUNCTION_CALL_COUNTER(closure);
INITIALIZE_VA_LIST();
INVOCATION_HISTORY_FRAME();
std::unique_ptr<UPRT> retval =  closure->fptr();
int oidx = 1;
return LCC_RETURN(translate::to_object<std::unique_ptr<UPRT>, typename AdoptPointer<Pols,
    result>::type>::convert(std::move(retval)).raw_(),oidx);
}
};


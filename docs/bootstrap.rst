=======================
Clasp Bootstrap Process
=======================

:Author: Richard Brooksby <rb@ravenbrook.com>
:Organization: Ravenbrook Limited <http://www.ravenbrook.com/>
:Date: 2016-03-10
:Project: Clasp <https://clasp-developers.github.io/>
:Copyright: See licenses directory in project root.


Introduction
------------

.intro: This is an overview of the Clasp bootstrapping process: the
means by which a full Clasp Common Lisp is created starting with Clang
and LLVM.


Process
-------

1. A C++ Lisp interpreter ("the interpreter") is compiled using Clang.

2. The interpreter loads the Lisp files listed in ``*init-files*`` in
   src/lisp/kernel/init.lsp a far as the ``:min`` keyword.

   This is Lisp Compiler “A”, which is not a full Common Lisp.  The
   interpreter the recompiles itself in memory.  As it does so, it
   replaces its own definitions with compiled code, becoming
   incrementally faster.

3. The interpreter then compiles the same set of files on disk.

4. The compiled files from step 3 are linked into a new program image
   called “Aclasp” -- an executable compiled version of compiler A.

5. Aclasp then compiles to disk the Lisp files listed in
   ``*init-files*`` as far as the ``:all`` keyword.

   This is a Lisp Compiler “B”, which is a full Common Lisp including
   CLOS, but compiled by compiler A.

6. The compiled files from step 5 are linked into a new program image
   called “Bclasp” -- an executable compiled version of compiler B.

7. Bclasp then compiles into memory the files listed in
   src/lisp/kernel/cleavir-system.lsp.

   This list is generated by a dump from ASDF whenever Cleavir is
   imported into the project.  This is Lisp compiler “C” (Cleavir).
   Cleavir is a good quality compiler, but at this stage it has been
   compiled with compiler “B” so it runs slowly.

8. Bclasp then uses Cleavir to compiles to disk everything so far from
   ``*init-files*`` and cleavir-system.lsp.

9. The compiled files from step 8 are linked into a new program image
   called “Cclasp” -- an executable of compiler C compiled with
   compiler C (compiled with compiler B).


Notes
-----

1. The garbage collector is linked into all the stages listed in the
   process, and affects every one of them.

2. Bitcode generated by compiling src/llvmo/intrinsics.cc is linked
   with the results of compiling files to disk, causing link-time
   inlining of intrinsic operations.

3. Cclasp *should* be complete at step 9 of the process.  An extra
   validation step would be to recompile everything with Cclasp and
   check that the binary results were the same as step 8.

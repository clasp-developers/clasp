import path ;
import os ;
import bitcode ;


CLASP_VERSION = [ SHELL "(cd $CLASP_HOME;git describe --always | tr -d '\n') || echo unknown-version" ] ;

LLVM_CONFIG = [ os.environ LLVM_CONFIG ] ;
LLVM_VERSION = [ SHELL "($LLVM_CONFIG --version | tr -d '\n') || echo unknown-version" ] ;

echo "CLASP_VERSION " $(CLASP_VERSION) ;
echo "LLVM_VERSION " $(LLVM_VERSION) ;


using clang : : [ os.environ CLASP_CLANG_PATH ] ;

#using gc ;
import feature ;
feature.feature gc : boehmdc boehm mps-prep mps 
                : symmetric composite propagated link-incompatible ;
feature.compose <gc>mps : <define>USE_MPS ;
feature.compose <gc>boehmdc : <define>USE_BOEHM <define>USE_CXX_DYNAMIC_CAST ;
feature.compose <gc>boehm : <define>USE_BOEHM ;
feature.compose <gc>mps-prep : <define>USE_MPS <define>RUNNING_GC_BUILDER ;  # used for testing MPS

###
### Build clasp or cando
###
path-constant TOP : . ;
path-constant INCLUDE : $(TOP)/include ;
path-constant CLASP-MAIN : $(TOP)/src/main/include ;
path-constant CANDO-MAIN : $(TOP)/projects/cando/src/main/include ;

feature.feature program : clasp cando clasp-clbind cando-clbind
                : symmetric composite propagated link-incompatible ;
feature.compose <program>clasp : <define>PROGRAM_CLASP <include>"$(CLASP-MAIN)" ;
feature.compose <program>clasp-clbind : <define>PROGRAM_CLASP <define>PROGRAM_CLBIND <include>"$(CLASP-MAIN)" ;
feature.compose <program>cando : <define>PROGRAM_CANDO <include>"$(CANDO-MAIN)" ;
feature.compose <program>cando-clbind : <define>PROGRAM_CANDO <define>PROGRAM_CLBIND <include>"$(CANDO-MAIN)" ;
feature.compose <program>other : <define>PROGRAM_OTHER ;   #  Define APPLICATION_CONFIG yourself

GIT_COMMIT = [ os.environ GIT_COMMIT ] ;
CLASP_DEBUG_CXXFLAGS = [ os.environ CLASP_DEBUG_CXXFLAGS ] ;
CLASP_DEBUG_LINKFLAGS = [ os.environ CLASP_DEBUG_LINKFLAGS ] ;
CLASP_RELEASE_CXXFLAGS = [ os.environ CLASP_RELEASE_CXXFLAGS ] ;
CLASP_RELEASE_LINKFLAGS = [ os.environ CLASP_RELEASE_LINKFLAGS ] ;

echo "CLASP_DEBUG_CXXFLAGS = " $(CLASP_DEBUG_CXXFLAGS) ;
echo "CLASP_DEBUG_LINKFLAGS = " $(CLASP_DEBUG_LINKFLAGS) ;
echo "CLASP_RELEASE_CXXFLAGS = " $(CLASP_RELEASE_CXXFLAGS) ;
echo "CLASP_RELEASE_LINKFLAGS = " $(CLASP_RELEASE_LINKFLAGS) ;

# I'm leaving this rule in because it illustrates how to start something at init
rule init ( top ? : : properties * ) {
     ECHO "STARTING init rule in Jamroot.jam --> $(top)"  ;
#     echo [ SHELL "ls" ] ;
     if $(top) {
          .top = $(top) ;
     }
     else {
     	  errors.error "Please set the project root in your Jamroot file" ;
     }
     .common = $(top)/src/common ;
     .applib = $(APPLIB) ;
#     local ecl = [ common.get-invocation-command-nodefault clasp : ecl ] ;
#     if ! $(ecl) {
#     	  ECHO "WARNING: Command ecl not found." ;
#     }
}

init clasp ;


project clasp : requirements
        <include>"/usr/include"
        <include>"$(INCLUDE)"
        <linkflags>"-L/usr/lib"
        <define>X86
	<define>BUILDING_CLASP
	<define>INHERITED_FROM_SRC
        <warnings>off
        <toolset>clang-darwin:<cxxflags>"-ferror-limit=999"
        <toolset>clang-linux:<cxxflags>"-ferror-limit=999"
        <define>CLASP_GIT_COMMIT="\\\"$(GIT_COMMIT)\\\""
        <define>CLASP_VERSION="\\\"$(CLASP_VERSION)\\\""
        <define>LLVM_VERSION="\\\"$(LLVM_VERSION)\\\""
        <program>cando:<include>projects/cando/include
        <cxxflags>"-Wno-attributes -Wno-null-conversion"
        <target-os>linux:<cxxflags>"-fPIC"
        <cxxflags>"-Wno-unused-local-typedef"
        <target-os>darwin:<cxxflags>"-isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.11.sdk "
        <include>./
        <cxxflags>"-Wno-deprecated-register"
        <define>CLBIND_DYNAMIC_LINK
        <define>NDEBUG     # turns off some weird tests in clbind (will I eat these words?)
        <target-os>linux:<cxxflags>"-Wno-unused-local-typedef"
	<target-os>linux:<linkflags>"-lpthread -ldl -lrt"
        <target-os>linux:<linkflags>"-Wl,-rpath,'$ORIGIN/../../../../Resources/lib/common/lib'"
	<target-os>darwin:<cxxflags>"-mmacosx-version-min=10.7"
	<target-os>darwin:<cxxflags>"-stdlib=libc++"
	<target-os>darwin:<linkflags>-stdlib=libc++
        <target-os>linux:<define>"_GLIBCXX_USE_CXX11_ABI=0"
	<cxxflags>"-fvisibility=default"
        <variant>debug:<optimization>off
        <variant>release:<optimization>speed
        <cxxflags>"-gdwarf-4 -g"
        <linkflags>"-fvisibility=default"
        <target-os>darwin:<linkflags>"-lc++"
	<define>INCLUDED_FROM_CLASP
	<define>EXPAT
#        <target-os>darwin:<linkflags>"-Wl,-stack_size,0x1000000"
        <toolset>clang-darwin:<cxxflags>"-Wgnu-array-member-paren-init"
        <toolset>clang-linux:<cxxflags>"-Wgnu-array-member-paren-init"
        <variant>debug:<cxxflags>$(CLASP_DEBUG_CXXFLAGS)
        <variant>debug:<linkflags>$(CLASP_DEBUG_LINKFLAGS)
        <variant>release:<cxxflags>$(CLASP_RELEASE_CXXFLAGS)
        <variant>release:<linkflags>$(CLASP_RELEASE_LINKFLAGS)
#
# CONFIGURE CLASP BUILD
#


### Print a message for every allocation - this can be turned on and off with (gctools:gc-monitor-allocations t/nil)
    <define>GC_MONITOR_ALLOCATIONS
    
## I wrote a drop in replacement for std::vector<X> that should work with the AMCpool
## If you turn on USE_STD_VECTOR then gctools::Vector0<X> will inherit from std::vector<X>
##   if you disable USE_STD_VECTOR then the gctools::Vector0<X> will inherit from my
##   custom GCVector which will be compatible with the MPS AMC pool
##   There are two allocators for GCVector, a testing one that uses malloc/free (not MPS compatible)
##        and a production one that is compatible with MPS
##        Turn on USE_GCVECTOR_MALLOC_ALLOCATOR to use the malloc/free one

#        <define>RUN_SAFE   # Turn on safety checks in smart_ptr - this slows things down
#         <define>DEBUG_FLOW_CONTROL  # use with core::*debug-flow-control* to print flow control debugging
#	 <define>DEBUG_GCWEAK    # Debug the Weak pointer code
#        <define>DEBUG_TRYSET    #    Define this if you are using DEBUG_GCWEAK but can be defined alone & with DEBUG_FIND
#        <define>DEBUG_FIND      #    Define this when using DEBUG_GCWEAK but can be defined along & with DEBUG_TRYSET
#       <define>SOURCE_DEBUG
#-------- mps options


#### Memory sanitizer and don't omit frame pointers
#          <cflags>"-fsanitize=memory -fno-omit-frame-pointer"
#          <cflags>"-fsanitize=address"

### USE_AMC_POOL  --- controls if certain objects (Closures) are allocated in a non-moving pool or AMC
     <define>USE_AMC_POOL

### DEBUG_HASH_TABLE_AS_ALIST    ---- hash-tables become one big alist to debug hashing and GC
#    <define>DEBUG_HASH_TABLE_AS_ALIST

### DEBUG_HASH_TABLE_REHASH_EVERY_GC  ---- hash-tables are rehashed every GC
    <define>DEBUG_HASH_TABLE_REHASH_EVERY_GC

### DEBUG_OBJECT_UNIQUE_ID  --- give every allocated object a unique id
###                             used to debug hash tables
    <define>DEBUG_OBJECT_UNIQUE_ID

#### DEBUG_SPLAT_FORWARD - splat the contents of forwarded objects
        <define>DEBUG_SPLAT_FORWARD
#	<define>DEBUG_THROW_IF_INVALID_CLIENT_ON      # turns on checks for DEBUG_THROW_IF_INVALID_CLIENT
#        <define>DEBUG_TELEMETRY_DUMP       # dump telemetry information as it is generated
#	<define>DEBUG_TELEMETRY      # generate telemetry data for debugging general GC
#	<define>DEBUG_STACK_TELEMETRY      # generate telemetry data for debugging stack GC
#        <define>DEBUG_MPS_FENCEPOST_FREE

#### DEBUG_MPS_UNDERSCANNING  - When defined, does a garbage collection for every allocation
#### DEBUG_MPS_UNDERSCANNING_INITIAL - (true|false)  - when DEBUG_MPS_UNDERSCANNING is defined you can
####                                                   control it using (gctools:enable-underscanning (t|nil))
####                                                   This sets the initial value of global_underscanning.
#        <define>DEBUG_MPS_UNDERSCANNING
#        <define>DEBUG_MPS_UNDERSCANNING_INITIAL="true"
#### DEBUG_PROGRESS - Print startup progress
#     <define>DEBUG_PROGRESS
#### DEBUG_GUARD  - Add memory guards to the header and tail of every object - uses lots more memory
#     <define>DEBUG_GUARD
#### DEBUG_VALIDATE_GUARD  - Test the memory guards in lots of places - requires DEBUG_GUARD to be defined.
#     <define>DEBUG_VALIDATE_GUARD

#### DEBUG_RECURSIVE_ALLOCATIONS - Inexpensive test for allocations that invoke other allocations
####                               This is not allowed in the MPS
#         <define>DEBUG_RECURSIVE_ALLOCATIONS
#        <define>CONFIG_VAR_COOL # Detailed, slow MPS debugging
#        <define>CONFIG_PF_ANSI  # Use the generic "ANSI" platform (see mps/code/config.h)
#        <define>CONFIG_THREAD_SINGLE #  Single threaded
         <define>USE_CLASP_DYNAMIC_CAST
#---------
       <define>DEBUG_CL_SYMBOLS          # Lets you calculate which CL symbols are still missing from Clasp
#       <define>DEBUG_LOAD_TIME_VALUES   # generate lots of debugging information when accessing ltvs
#	<cxxflags>-v        # this will generate a lot more output during compilation but help with tooling
#	<target-os>darwin:<linkflags>-stdlib=libc++
#	<target-os>darwin:<linkflags>"-flat_namespace -undefined warning"
	<define>__STDC_LIMIT_MACROS
	<define>__STDC_CONSTANT_MACROS
	<define>__STDC_FORMAT_MACROS
#        <define>USE_PUT_SELECT_CLASSES_IN_AMC_POOL
#       <define>DEBUG_MPS_AMS_POOL    # use the debugging AMS pool and run tests on it
#       <define>DEBUG_LOG_MPS_KINDS     # Give more verbose MPS debugging messages that include kind names
#       <define>USE_GCVECTOR_MALLOC_ALLOCATOR      # DO NOT USE WITH USE_MPS - just for testing GCVector


#	<toolset>clang:<include>/usr/lib/c++/v1
#	<define>USEBOOSTPYTHON

#
# If you want source code debugging uncomment this
#
#	<variant>debug:<define>SOURCE_DEBUG








#
# To run address sanitizer
#
# This will cause problems with examining variables while debugging - I don't know why
#
# #### REMEMBER!!!  address sanitizer is BROKEN in that when you gdb with it
#                   it screws up addresses so that you can't locate where the asan error
#                   was caught - check for updates on this
#                   for now liberally sprinkle printf statements until you find the line
#                   that generates the asan error
#
#	<toolset>clang,<sanitize>asan:<cxxflags>"-fsanitize=address -g3"
#	<toolset>clang,<sanitize>asan:<linkflags>"-fsanitize=address"
#	<sanitize>asan:<cxxflags>"-fsanitize=address -g3"

#	<cxxflags>"-fsanitize=address -g3"
#	<linkflags>"-fsanitize=address"




#	<toolset>clang:<cxxflags>"-frelative-path=\/"
#	<target-os>darwin:<linkflags>"--export-dynamic"

#	<include>$(pythonInclude)

#This defines the size of a pointer - used in newhash.h
#	<target-os>darwin:<define>POINTER_BITS=64
	<target-os>darwin:<define>_TARGET_OS_DARWIN
	<target-os>linux:<define>_TARGET_OS_LINUX

# for now
        <target-os>darwin:<define>_ADDRESS_MODEL_64
        <target-os>linux:<define>_ADDRESS_MODEL_64
	<address-model>32:<define>_ADDRESS_MODEL_32
	<address-model>64:<define>_ADDRESS_MODEL_64
#	<cxxflags>-D_ADDRESS_MODEL_[<address-model>]


	<variant>debug:<define>DEBUG_ASSERTS
# generate MLOG output to compare with ECL
	<variant>debug:<define>_DEBUG_BUILD
	<variant>release:<define>_RELEASE_BUILD



#
# Others
#
	<toolset>darwin:<define>darwin
	<cxxflags>"-Wno-unused-variable"
#	<toolset>darwin:<cxxflags>"-fopenmp"
#-include pch.h"
	<toolset>darwin:<linkflags>"-framework IOKit -framework Carbon -framework Cocoa -framework System -framework OpenGL -framework Glut -framework AGL -L/usr/local/lib/x86_64 -lgomp"
	<toolset>gcc:<cxxflags>"-Wno-unused-variable"
	<toolset>pathscale:<cxxflags>"-Wno-unused-variable -fopenmp"
	<toolset>pgi:<cxxflags>"-mp -gopt"
	<toolset>pgi:<linkflags>"-mp -gopt"
	<define>READLINE

	: usage-requirements
    ;








path-constant COMMON : src/common ;
path-constant APPTOP : [ os.environ CLASP_INTERNAL_BUILD_TARGET_DIR ] ;
path-constant APPCONT : $(APPTOP)/Contents ;
path-constant APPCONTLIB : $(APPCONT)/lib ;
path-constant APPRES : $(APPCONT)/Resources ;
path-constant APPRES-LIB : $(APPRES)/lib ;
path-constant APPRES-LIB-COMMON : $(APPRES-LIB)/common ;
path-constant APPRES-LIB-COMMON-LIB : $(APPRES-LIB-COMMON)/lib ;
path-constant APPRES-LIB-COMMON-INCLUDE : $(APPRES-LIB-COMMON)/include ;
path-constant APPRES-LISP : $(APPRES)/lisp ;
path-constant APPRES-CANDO : $(APPRES)/cando ;
path-constant APPRES-CANDO-LISP : $(APPRES-CANDO)/lisp ;
path-constant APPBIN : $(APPTOP)/bin ;
path-constant APPBIN-DARWIN : $(APPTOP)/MacOS ;
path-constant APPBIN-LINUX : $(APPTOP)/bin ;
path-constant APPINC : $(APPRES)/include ;
path-constant APPLIB : $(APPRES)/lib ;
path-constant APP-DEBUG-LIB : $(APPLIB)/debug ;
path-constant APP-RELEASE-LIB : $(APPLIB)/release ;


use-project externals : ./externals ;
use-project internals : src ;
use-project internals/core : src/core ;
use-project internals/llvmo : src/llvmo ;
use-project internals/gctools : src/gctools ;
use-project internals/asttooling : src/asttooling ;
use-project internals/cffi : src/cffi ;
use-project internals/mpip : src/mpip ;
use-project internals/sockets : src/sockets ;
use-project internals/clbind : src/clbind ;
use-project internals/serveEvent : src/serveEvent ;
use-project internals/lisp : src/lisp ;
use-project internals/main : src/main ;
use-project internals/include/clasp : include/clasp ;
use-project internals/src : src ;


## If using cando
#use-project cando : cando ;
#use-project cando/addon : cando/addon ;
#use-project cando/units : cando/units ;
#use-project cando/chem : cando/chem ;
#use-project cando/src/kinematics : cando/src/kinematics ;
#use-project cando/src/packageManager : cando/src/packageManager ;
#use-project cando/main-cando : cando/main-cando ;
